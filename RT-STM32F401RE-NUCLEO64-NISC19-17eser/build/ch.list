
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08003b21 	.word	0x08003b21
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080093b1 	.word	0x080093b1
 8000070:	08009381 	.word	0x08009381
 8000074:	08009351 	.word	0x08009351
 8000078:	08009321 	.word	0x08009321
 800007c:	080092f1 	.word	0x080092f1
 8000080:	080092c1 	.word	0x080092c1
 8000084:	08009291 	.word	0x08009291
 8000088:	080093e1 	.word	0x080093e1
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08009041 	.word	0x08009041
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08008ea1 	.word	0x08008ea1
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	08009261 	.word	0x08009261
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	08009231 	.word	0x08009231
 8000124:	08009201 	.word	0x08009201
 8000128:	080091d1 	.word	0x080091d1
 800012c:	080091a1 	.word	0x080091a1
 8000130:	08009171 	.word	0x08009171
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	08009141 	.word	0x08009141
 8000154:	08009111 	.word	0x08009111
 8000158:	080090e1 	.word	0x080090e1
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f009 f99c 	bl	8009540 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f008 fd62 	bl	8008cd0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f009 f92e 	bl	80094b0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f009 f96c 	bl	8009530 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f006 fc12 	bl	8006a90 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f009 b950 	b.w	8009520 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000294:	0800c0b4 	.word	0x0800c0b4
                ldr     r2, =_data_start
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800029c:	20000ce0 	.word	0x20000ce0
                ldr     r1, =_bss_start
 80002a0:	20000ce0 	.word	0x20000ce0
                ldr     r2, =_bss_end
 80002a4:	20001b60 	.word	0x20001b60
                ldr     r4, =__init_array_start
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f003 fc30 	bl	8003b40 <chThdExit>

080002e0 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e0:	f003 fc76 	bl	8003bd0 <chSchDoReschedule>

080002e4 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e4:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e6:	e7fe      	b.n	80002e6 <_port_exit_from_isr+0x2>

080002e8 <memcpy>:
 80002e8:	4684      	mov	ip, r0
 80002ea:	ea41 0300 	orr.w	r3, r1, r0
 80002ee:	f013 0303 	ands.w	r3, r3, #3
 80002f2:	d16d      	bne.n	80003d0 <memcpy+0xe8>
 80002f4:	3a40      	subs	r2, #64	; 0x40
 80002f6:	d341      	bcc.n	800037c <memcpy+0x94>
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	3a40      	subs	r2, #64	; 0x40
 800037a:	d2bd      	bcs.n	80002f8 <memcpy+0x10>
 800037c:	3230      	adds	r2, #48	; 0x30
 800037e:	d311      	bcc.n	80003a4 <memcpy+0xbc>
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	f851 3b04 	ldr.w	r3, [r1], #4
 800038c:	f840 3b04 	str.w	r3, [r0], #4
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	3a10      	subs	r2, #16
 80003a2:	d2ed      	bcs.n	8000380 <memcpy+0x98>
 80003a4:	320c      	adds	r2, #12
 80003a6:	d305      	bcc.n	80003b4 <memcpy+0xcc>
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	3a04      	subs	r2, #4
 80003b2:	d2f9      	bcs.n	80003a8 <memcpy+0xc0>
 80003b4:	3204      	adds	r2, #4
 80003b6:	d008      	beq.n	80003ca <memcpy+0xe2>
 80003b8:	07d2      	lsls	r2, r2, #31
 80003ba:	bf1c      	itt	ne
 80003bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003c0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003c4:	d301      	bcc.n	80003ca <memcpy+0xe2>
 80003c6:	880b      	ldrh	r3, [r1, #0]
 80003c8:	8003      	strh	r3, [r0, #0]
 80003ca:	4660      	mov	r0, ip
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	2a08      	cmp	r2, #8
 80003d2:	d313      	bcc.n	80003fc <memcpy+0x114>
 80003d4:	078b      	lsls	r3, r1, #30
 80003d6:	d08d      	beq.n	80002f4 <memcpy+0xc>
 80003d8:	f010 0303 	ands.w	r3, r0, #3
 80003dc:	d08a      	beq.n	80002f4 <memcpy+0xc>
 80003de:	f1c3 0304 	rsb	r3, r3, #4
 80003e2:	1ad2      	subs	r2, r2, r3
 80003e4:	07db      	lsls	r3, r3, #31
 80003e6:	bf1c      	itt	ne
 80003e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003ec:	f800 3b01 	strbne.w	r3, [r0], #1
 80003f0:	d380      	bcc.n	80002f4 <memcpy+0xc>
 80003f2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003f6:	f820 3b02 	strh.w	r3, [r0], #2
 80003fa:	e77b      	b.n	80002f4 <memcpy+0xc>
 80003fc:	3a04      	subs	r2, #4
 80003fe:	d3d9      	bcc.n	80003b4 <memcpy+0xcc>
 8000400:	3a01      	subs	r2, #1
 8000402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000406:	f800 3b01 	strb.w	r3, [r0], #1
 800040a:	d2f9      	bcs.n	8000400 <memcpy+0x118>
 800040c:	780b      	ldrb	r3, [r1, #0]
 800040e:	7003      	strb	r3, [r0, #0]
 8000410:	784b      	ldrb	r3, [r1, #1]
 8000412:	7043      	strb	r3, [r0, #1]
 8000414:	788b      	ldrb	r3, [r1, #2]
 8000416:	7083      	strb	r3, [r0, #2]
 8000418:	4660      	mov	r0, ip
 800041a:	4770      	bx	lr
 800041c:	0000      	movs	r0, r0
 800041e:	0000      	movs	r0, r0
 8000420:	eba2 0003 	sub.w	r0, r2, r3
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop

08000428 <strcmp>:
 8000428:	7802      	ldrb	r2, [r0, #0]
 800042a:	780b      	ldrb	r3, [r1, #0]
 800042c:	2a01      	cmp	r2, #1
 800042e:	bf28      	it	cs
 8000430:	429a      	cmpcs	r2, r3
 8000432:	d1f5      	bne.n	8000420 <memcpy+0x138>
 8000434:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000438:	ea40 0401 	orr.w	r4, r0, r1
 800043c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000440:	f06f 0c00 	mvn.w	ip, #0
 8000444:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000448:	b312      	cbz	r2, 8000490 <strcmp+0x68>
 800044a:	ea80 0401 	eor.w	r4, r0, r1
 800044e:	f014 0f07 	tst.w	r4, #7
 8000452:	d16a      	bne.n	800052a <strcmp+0x102>
 8000454:	f000 0407 	and.w	r4, r0, #7
 8000458:	f020 0007 	bic.w	r0, r0, #7
 800045c:	f004 0503 	and.w	r5, r4, #3
 8000460:	f021 0107 	bic.w	r1, r1, #7
 8000464:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000468:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800046c:	f014 0f04 	tst.w	r4, #4
 8000470:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000474:	fa0c f405 	lsl.w	r4, ip, r5
 8000478:	ea62 0204 	orn	r2, r2, r4
 800047c:	ea66 0604 	orn	r6, r6, r4
 8000480:	d00a      	beq.n	8000498 <strcmp+0x70>
 8000482:	ea63 0304 	orn	r3, r3, r4
 8000486:	4662      	mov	r2, ip
 8000488:	ea67 0704 	orn	r7, r7, r4
 800048c:	4666      	mov	r6, ip
 800048e:	e003      	b.n	8000498 <strcmp+0x70>
 8000490:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000494:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000498:	fa82 f54c 	uadd8	r5, r2, ip
 800049c:	ea82 0406 	eor.w	r4, r2, r6
 80004a0:	faa4 f48c 	sel	r4, r4, ip
 80004a4:	bb6c      	cbnz	r4, 8000502 <strcmp+0xda>
 80004a6:	fa83 f54c 	uadd8	r5, r3, ip
 80004aa:	ea83 0507 	eor.w	r5, r3, r7
 80004ae:	faa5 f58c 	sel	r5, r5, ip
 80004b2:	b995      	cbnz	r5, 80004da <strcmp+0xb2>
 80004b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004bc:	fa82 f54c 	uadd8	r5, r2, ip
 80004c0:	ea82 0406 	eor.w	r4, r2, r6
 80004c4:	faa4 f48c 	sel	r4, r4, ip
 80004c8:	fa83 f54c 	uadd8	r5, r3, ip
 80004cc:	ea83 0507 	eor.w	r5, r3, r7
 80004d0:	faa5 f58c 	sel	r5, r5, ip
 80004d4:	4325      	orrs	r5, r4
 80004d6:	d0db      	beq.n	8000490 <strcmp+0x68>
 80004d8:	b99c      	cbnz	r4, 8000502 <strcmp+0xda>
 80004da:	ba2d      	rev	r5, r5
 80004dc:	fab5 f485 	clz	r4, r5
 80004e0:	f024 0407 	bic.w	r4, r4, #7
 80004e4:	fa27 f104 	lsr.w	r1, r7, r4
 80004e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80004ec:	fa23 f304 	lsr.w	r3, r3, r4
 80004f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80004f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004fc:	eba0 0001 	sub.w	r0, r0, r1
 8000500:	4770      	bx	lr
 8000502:	ba24      	rev	r4, r4
 8000504:	fab4 f484 	clz	r4, r4
 8000508:	f024 0407 	bic.w	r4, r4, #7
 800050c:	fa26 f104 	lsr.w	r1, r6, r4
 8000510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000514:	fa22 f204 	lsr.w	r2, r2, r4
 8000518:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800051c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000520:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000524:	eba0 0001 	sub.w	r0, r0, r1
 8000528:	4770      	bx	lr
 800052a:	f014 0f03 	tst.w	r4, #3
 800052e:	d13c      	bne.n	80005aa <strcmp+0x182>
 8000530:	f010 0403 	ands.w	r4, r0, #3
 8000534:	d128      	bne.n	8000588 <strcmp+0x160>
 8000536:	f850 2b08 	ldr.w	r2, [r0], #8
 800053a:	f851 3b08 	ldr.w	r3, [r1], #8
 800053e:	fa82 f54c 	uadd8	r5, r2, ip
 8000542:	ea82 0503 	eor.w	r5, r2, r3
 8000546:	faa5 f58c 	sel	r5, r5, ip
 800054a:	b95d      	cbnz	r5, 8000564 <strcmp+0x13c>
 800054c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000554:	fa82 f54c 	uadd8	r5, r2, ip
 8000558:	ea82 0503 	eor.w	r5, r2, r3
 800055c:	faa5 f58c 	sel	r5, r5, ip
 8000560:	2d00      	cmp	r5, #0
 8000562:	d0e8      	beq.n	8000536 <strcmp+0x10e>
 8000564:	ba2d      	rev	r5, r5
 8000566:	fab5 f485 	clz	r4, r5
 800056a:	f024 0407 	bic.w	r4, r4, #7
 800056e:	fa23 f104 	lsr.w	r1, r3, r4
 8000572:	fa22 f204 	lsr.w	r2, r2, r4
 8000576:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800057a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000582:	eba0 0001 	sub.w	r0, r0, r1
 8000586:	4770      	bx	lr
 8000588:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800058c:	f020 0003 	bic.w	r0, r0, #3
 8000590:	f850 2b08 	ldr.w	r2, [r0], #8
 8000594:	f021 0103 	bic.w	r1, r1, #3
 8000598:	f851 3b08 	ldr.w	r3, [r1], #8
 800059c:	fa0c f404 	lsl.w	r4, ip, r4
 80005a0:	ea62 0204 	orn	r2, r2, r4
 80005a4:	ea63 0304 	orn	r3, r3, r4
 80005a8:	e7c9      	b.n	800053e <strcmp+0x116>
 80005aa:	f010 0403 	ands.w	r4, r0, #3
 80005ae:	d01a      	beq.n	80005e6 <strcmp+0x1be>
 80005b0:	eba1 0104 	sub.w	r1, r1, r4
 80005b4:	f020 0003 	bic.w	r0, r0, #3
 80005b8:	07e4      	lsls	r4, r4, #31
 80005ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80005be:	d006      	beq.n	80005ce <strcmp+0x1a6>
 80005c0:	d20f      	bcs.n	80005e2 <strcmp+0x1ba>
 80005c2:	788b      	ldrb	r3, [r1, #2]
 80005c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005c8:	1ae4      	subs	r4, r4, r3
 80005ca:	d106      	bne.n	80005da <strcmp+0x1b2>
 80005cc:	b12b      	cbz	r3, 80005da <strcmp+0x1b2>
 80005ce:	78cb      	ldrb	r3, [r1, #3]
 80005d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	d100      	bne.n	80005da <strcmp+0x1b2>
 80005d8:	b91b      	cbnz	r3, 80005e2 <strcmp+0x1ba>
 80005da:	4620      	mov	r0, r4
 80005dc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80005e0:	4770      	bx	lr
 80005e2:	f101 0104 	add.w	r1, r1, #4
 80005e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80005ea:	07cc      	lsls	r4, r1, #31
 80005ec:	f021 0103 	bic.w	r1, r1, #3
 80005f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f4:	d848      	bhi.n	8000688 <strcmp+0x260>
 80005f6:	d224      	bcs.n	8000642 <strcmp+0x21a>
 80005f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80005fc:	fa82 f54c 	uadd8	r5, r2, ip
 8000600:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000604:	faa5 f58c 	sel	r5, r5, ip
 8000608:	d10a      	bne.n	8000620 <strcmp+0x1f8>
 800060a:	b965      	cbnz	r5, 8000626 <strcmp+0x1fe>
 800060c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000610:	ea84 0402 	eor.w	r4, r4, r2
 8000614:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000618:	d10e      	bne.n	8000638 <strcmp+0x210>
 800061a:	f850 2b04 	ldr.w	r2, [r0], #4
 800061e:	e7eb      	b.n	80005f8 <strcmp+0x1d0>
 8000620:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000624:	e055      	b.n	80006d2 <strcmp+0x2aa>
 8000626:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800062a:	d14d      	bne.n	80006c8 <strcmp+0x2a0>
 800062c:	7808      	ldrb	r0, [r1, #0]
 800062e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000632:	f1c0 0000 	rsb	r0, r0, #0
 8000636:	4770      	bx	lr
 8000638:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800063c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000640:	e047      	b.n	80006d2 <strcmp+0x2aa>
 8000642:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000646:	fa82 f54c 	uadd8	r5, r2, ip
 800064a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800064e:	faa5 f58c 	sel	r5, r5, ip
 8000652:	d10a      	bne.n	800066a <strcmp+0x242>
 8000654:	b965      	cbnz	r5, 8000670 <strcmp+0x248>
 8000656:	f851 3b04 	ldr.w	r3, [r1], #4
 800065a:	ea84 0402 	eor.w	r4, r4, r2
 800065e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000662:	d10c      	bne.n	800067e <strcmp+0x256>
 8000664:	f850 2b04 	ldr.w	r2, [r0], #4
 8000668:	e7eb      	b.n	8000642 <strcmp+0x21a>
 800066a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800066e:	e030      	b.n	80006d2 <strcmp+0x2aa>
 8000670:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000674:	d128      	bne.n	80006c8 <strcmp+0x2a0>
 8000676:	880b      	ldrh	r3, [r1, #0]
 8000678:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800067c:	e029      	b.n	80006d2 <strcmp+0x2aa>
 800067e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000682:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000686:	e024      	b.n	80006d2 <strcmp+0x2aa>
 8000688:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800068c:	fa82 f54c 	uadd8	r5, r2, ip
 8000690:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000694:	faa5 f58c 	sel	r5, r5, ip
 8000698:	d10a      	bne.n	80006b0 <strcmp+0x288>
 800069a:	b965      	cbnz	r5, 80006b6 <strcmp+0x28e>
 800069c:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a0:	ea84 0402 	eor.w	r4, r4, r2
 80006a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006a8:	d109      	bne.n	80006be <strcmp+0x296>
 80006aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ae:	e7eb      	b.n	8000688 <strcmp+0x260>
 80006b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006b4:	e00d      	b.n	80006d2 <strcmp+0x2aa>
 80006b6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006ba:	d105      	bne.n	80006c8 <strcmp+0x2a0>
 80006bc:	680b      	ldr	r3, [r1, #0]
 80006be:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006c6:	e004      	b.n	80006d2 <strcmp+0x2aa>
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006d0:	4770      	bx	lr
 80006d2:	ba12      	rev	r2, r2
 80006d4:	ba1b      	rev	r3, r3
 80006d6:	fa82 f44c 	uadd8	r4, r2, ip
 80006da:	ea82 0403 	eor.w	r4, r2, r3
 80006de:	faa4 f58c 	sel	r5, r4, ip
 80006e2:	fab5 f485 	clz	r4, r5
 80006e6:	fa02 f204 	lsl.w	r2, r2, r4
 80006ea:	fa03 f304 	lsl.w	r3, r3, r4
 80006ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80006f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80006fa:	4770      	bx	lr
 80006fc:	0000      	movs	r0, r0
	...

08000700 <adc_lld_stop_conversion.constprop.77>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8000700:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8000702:	4c0d      	ldr	r4, [pc, #52]	; (8000738 <adc_lld_stop_conversion.constprop.77+0x38>)
 8000704:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000706:	6802      	ldr	r2, [r0, #0]
 8000708:	6813      	ldr	r3, [r2, #0]
 800070a:	f023 031f 	bic.w	r3, r3, #31
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	6813      	ldr	r3, [r2, #0]
 8000712:	f013 0301 	ands.w	r3, r3, #1
 8000716:	d1fb      	bne.n	8000710 <adc_lld_stop_conversion.constprop.77+0x10>
 8000718:	7a45      	ldrb	r5, [r0, #9]
  adcp->adc->CR1 = 0;
 800071a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800071c:	6840      	ldr	r0, [r0, #4]
 800071e:	213d      	movs	r1, #61	; 0x3d
 8000720:	40a9      	lsls	r1, r5
 8000722:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
 8000724:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8000726:	6893      	ldr	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000728:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 800072a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800072e:	6093      	str	r3, [r2, #8]
}
 8000730:	bc30      	pop	{r4, r5}
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000732:	6091      	str	r1, [r2, #8]
}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000ce0 	.word	0x20000ce0
 800073c:	00000000 	.word	0x00000000

08000740 <_pal_lld_setgroupmode.constprop.76>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000744:	2501      	movs	r5, #1

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000746:	4c20      	ldr	r4, [pc, #128]	; (80007c8 <_pal_lld_setgroupmode.constprop.76+0x88>)
      m1 = 1 << bit;
 8000748:	46ac      	mov	ip, r5
  uint32_t bit     = 0;
 800074a:	2100      	movs	r1, #0
      m2 = 3 << (bit * 2);
 800074c:	2703      	movs	r7, #3
      m4 = 15 << ((bit & 7) * 4);
 800074e:	260f      	movs	r6, #15
 8000750:	e006      	b.n	8000760 <_pal_lld_setgroupmode.constprop.76+0x20>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000752:	6a23      	ldr	r3, [r4, #32]
 8000754:	401a      	ands	r2, r3
 8000756:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000758:	0840      	lsrs	r0, r0, #1
 800075a:	d032      	beq.n	80007c2 <_pal_lld_setgroupmode.constprop.76+0x82>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 800075c:	00ad      	lsls	r5, r5, #2
    bit++;
 800075e:	3101      	adds	r1, #1
      altrmask = altr << ((bit & 7) * 4);
 8000760:	f001 0207 	and.w	r2, r1, #7
      m2 = 3 << (bit * 2);
 8000764:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
 8000766:	0092      	lsls	r2, r2, #2
      m2 = 3 << (bit * 2);
 8000768:	fa07 f303 	lsl.w	r3, r7, r3
      m4 = 15 << ((bit & 7) * 4);
 800076c:	fa06 f202 	lsl.w	r2, r6, r2
    if ((mask & 1) != 0) {
 8000770:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
 8000774:	fa0c fe01 	lsl.w	lr, ip, r1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000778:	ea6f 0303 	mvn.w	r3, r3
 800077c:	ea6f 0202 	mvn.w	r2, r2
    if ((mask & 1) != 0) {
 8000780:	d0ea      	beq.n	8000758 <_pal_lld_setgroupmode.constprop.76+0x18>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000782:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000786:	ea28 0e0e 	bic.w	lr, r8, lr
 800078a:	f8c4 e004 	str.w	lr, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800078e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8000792:	ea0e 0e03 	and.w	lr, lr, r3
 8000796:	f8c4 e008 	str.w	lr, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800079a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800079e:	ea03 0e0e 	and.w	lr, r3, lr
 80007a2:	f8c4 e00c 	str.w	lr, [r4, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
 80007a6:	f8d4 e000 	ldr.w	lr, [r4]
 80007aa:	ea03 030e 	and.w	r3, r3, lr
 80007ae:	432b      	orrs	r3, r5
        if (bit < 8)
 80007b0:	2907      	cmp	r1, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80007b2:	6023      	str	r3, [r4, #0]
        if (bit < 8)
 80007b4:	d9cd      	bls.n	8000752 <_pal_lld_setgroupmode.constprop.76+0x12>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80007b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (!mask)
 80007b8:	0840      	lsrs	r0, r0, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80007ba:	ea02 0203 	and.w	r2, r2, r3
 80007be:	6262      	str	r2, [r4, #36]	; 0x24
    if (!mask)
 80007c0:	d1cc      	bne.n	800075c <_pal_lld_setgroupmode.constprop.76+0x1c>
  }
}
 80007c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007c6:	bf00      	nop
 80007c8:	40020800 	.word	0x40020800
 80007cc:	00000000 	.word	0x00000000

080007d0 <chTMStartMeasurementX.constprop.70>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80007d0:	4b01      	ldr	r3, [pc, #4]	; (80007d8 <chTMStartMeasurementX.constprop.70+0x8>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80007d4:	6083      	str	r3, [r0, #8]
}
 80007d6:	4770      	bx	lr
 80007d8:	e0001000 	.word	0xe0001000
 80007dc:	00000000 	.word	0x00000000

080007e0 <chMtxTryLock.constprop.62>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007e0:	2320      	movs	r3, #32
 80007e2:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <chMtxTryLock.constprop.62+0x2c>)
 80007e8:	689a      	ldr	r2, [r3, #8]
 80007ea:	b122      	cbz	r2, 80007f6 <chMtxTryLock.constprop.62+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 80007ec:	2000      	movs	r0, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	f383 8811 	msr	BASEPRI, r3
}
 80007f4:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 80007f6:	4a06      	ldr	r2, [pc, #24]	; (8000810 <chMtxTryLock.constprop.62+0x30>)
 80007f8:	6992      	ldr	r2, [r2, #24]
 80007fa:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 80007fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80007fe:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 8000800:	6393      	str	r3, [r2, #56]	; 0x38
 8000802:	2001      	movs	r0, #1
 8000804:	2300      	movs	r3, #0
 8000806:	f383 8811 	msr	BASEPRI, r3
}
 800080a:	4770      	bx	lr
 800080c:	20000c30 	.word	0x20000c30
 8000810:	20000da0 	.word	0x20000da0
	...

08000820 <chEvtGetAndClearEvents.constprop.52>:
 8000820:	2320      	movs	r3, #32
 8000822:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <chEvtGetAndClearEvents.constprop.52+0x18>)
 8000828:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 800082a:	2300      	movs	r3, #0
  m = currp->epending & events;
 800082c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800082e:	6353      	str	r3, [r2, #52]	; 0x34
 8000830:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000da0 	.word	0x20000da0
 800083c:	00000000 	.word	0x00000000

08000840 <_test_assert_time_window.constprop.1>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 8000844:	1a09      	subs	r1, r1, r0
 8000846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000848:	1a1b      	subs	r3, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800084a:	428b      	cmp	r3, r1
 800084c:	d308      	bcc.n	8000860 <_test_assert_time_window.constprop.1+0x20>
  test_failure_message = msg;
 800084e:	4905      	ldr	r1, [pc, #20]	; (8000864 <_test_assert_time_window.constprop.1+0x24>)
  test_local_fail      = true;
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <_test_assert_time_window.constprop.1+0x28>)
  test_global_fail     = true;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <_test_assert_time_window.constprop.1+0x2c>)
  test_failure_message = msg;
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <_test_assert_time_window.constprop.1+0x30>)
 8000856:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 8000858:	2001      	movs	r0, #1
 800085a:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 800085c:	7018      	strb	r0, [r3, #0]
 800085e:	4770      	bx	lr
    return _test_fail(msg);
  return false;
 8000860:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8000862:	4770      	bx	lr
 8000864:	200016cc 	.word	0x200016cc
 8000868:	20001770 	.word	0x20001770
 800086c:	200016d0 	.word	0x200016d0
 8000870:	08009974 	.word	0x08009974
	...

08000880 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8000880:	b4f0      	push	{r4, r5, r6, r7}
 8000882:	2320      	movs	r3, #32
 8000884:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000888:	4d0d      	ldr	r5, [pc, #52]	; (80008c0 <chCoreAllocAlignedWithOffset+0x40>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800088a:	e9d5 7400 	ldrd	r7, r4, [r5]
 800088e:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000890:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 8000892:	1983      	adds	r3, r0, r6
 8000894:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000896:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 8000898:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800089a:	4008      	ands	r0, r1
  next = p + size;
 800089c:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800089e:	42a3      	cmp	r3, r4
 80008a0:	d807      	bhi.n	80008b2 <chCoreAllocAlignedWithOffset+0x32>
 80008a2:	429f      	cmp	r7, r3
 80008a4:	d805      	bhi.n	80008b2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 80008a6:	602b      	str	r3, [r5, #0]
 80008a8:	2300      	movs	r3, #0
 80008aa:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80008ae:	bcf0      	pop	{r4, r5, r6, r7}
 80008b0:	4770      	bx	lr
    return NULL;
 80008b2:	2000      	movs	r0, #0
 80008b4:	2300      	movs	r3, #0
 80008b6:	f383 8811 	msr	BASEPRI, r3
}
 80008ba:	bcf0      	pop	{r4, r5, r6, r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000f38 	.word	0x20000f38
	...

080008d0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80008d0:	4a02      	ldr	r2, [pc, #8]	; (80008dc <notify2+0xc>)
 80008d2:	68d3      	ldr	r3, [r2, #12]
 80008d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008d8:	60d3      	str	r3, [r2, #12]
}
 80008da:	4770      	bx	lr
 80008dc:	40004400 	.word	0x40004400

080008e0 <oslib_test_004_001_setup>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <oslib_test_004_001_setup+0x30>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 80008e2:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <oslib_test_004_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80008e4:	1dd9      	adds	r1, r3, #7
 80008e6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80008ea:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80008ec:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [4.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_004_001_setup(void) {
 80008f0:	b410      	push	{r4}
  heapp->provider = NULL;
 80008f2:	2000      	movs	r0, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80008f4:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80008fc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80008fe:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000900:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000904:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8000906:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 8000908:	6150      	str	r0, [r2, #20]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 800090a:	bc10      	pop	{r4}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200016f0 	.word	0x200016f0
 8000914:	200016d4 	.word	0x200016d4
	...

08000920 <oslib_test_003_003_setup>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <oslib_test_003_003_setup+0x18>)
 8000922:	2200      	movs	r2, #0
  mp->object_size = size;
 8000924:	2104      	movs	r1, #4
 8000926:	e9c3 3300 	strd	r3, r3, [r3]
  mp->next = NULL;
 800092a:	60da      	str	r2, [r3, #12]
  mp->align = align;
  mp->provider = provider;
 800092c:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 800092e:	609a      	str	r2, [r3, #8]
  mp->align = align;
 8000930:	e9c3 1104 	strd	r1, r1, [r3, #16]
 * .
 */

static void oslib_test_003_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000c14 	.word	0x20000c14
 800093c:	00000000 	.word	0x00000000

08000940 <oslib_test_003_002_setup>:
 8000940:	f7ff bfee 	b.w	8000920 <oslib_test_003_003_setup>
	...

08000950 <null_provider>:
}
 8000950:	2000      	movs	r0, #0
 8000952:	4770      	bx	lr
	...

08000960 <oslib_test_003_001_setup>:
  mp->next = NULL;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <oslib_test_003_001_setup+0x10>)
 8000962:	2100      	movs	r1, #0
  mp->object_size = size;
 8000964:	2204      	movs	r2, #4
  mp->next = NULL;
 8000966:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 8000968:	60d9      	str	r1, [r3, #12]
  mp->align = align;
 800096a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
 800096e:	4770      	bx	lr
 8000970:	20000c78 	.word	0x20000c78
	...

08000980 <oslib_test_002_002_setup>:
 * - [2.2.1] Reading while pipe is empty.
 * - [2.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_002_002_setup(void) {
 8000980:	b430      	push	{r4, r5}
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <oslib_test_002_002_setup+0x40>)
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <oslib_test_002_002_setup+0x44>)
 8000986:	601a      	str	r2, [r3, #0]
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
 8000988:	f102 0508 	add.w	r5, r2, #8
  tqp->next = (thread_t *)tqp;
 800098c:	f103 0420 	add.w	r4, r3, #32
 8000990:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000994:	f103 0140 	add.w	r1, r3, #64	; 0x40
  pp->wrptr  = buf;
 8000998:	e9c3 2202 	strd	r2, r2, [r3, #8]
  pp->cnt    = (size_t)0;
 800099c:	2200      	movs	r2, #0
  pp->top    = &buf[n];
 800099e:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 80009a0:	e9c3 4408 	strd	r4, r4, [r3, #32]
 80009a4:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 80009a8:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->cnt    = (size_t)0;
 80009ac:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 80009ae:	751a      	strb	r2, [r3, #20]
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 80009b0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38
 80009b8:	649a      	str	r2, [r3, #72]	; 0x48
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 80009ba:	bc30      	pop	{r4, r5}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000c90 	.word	0x20000c90
 80009c4:	20000d90 	.word	0x20000d90
	...

080009d0 <oslib_test_002_001_setup>:
static void oslib_test_002_001_setup(void) {
 80009d0:	b430      	push	{r4, r5}
  pp->buffer = buf;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <oslib_test_002_001_setup+0x40>)
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <oslib_test_002_001_setup+0x44>)
 80009d6:	601a      	str	r2, [r3, #0]
  pp->top    = &buf[n];
 80009d8:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 80009dc:	f103 0420 	add.w	r4, r3, #32
 80009e0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80009e4:	f103 0140 	add.w	r1, r3, #64	; 0x40
  pp->wrptr  = buf;
 80009e8:	e9c3 2202 	strd	r2, r2, [r3, #8]
  pp->cnt    = (size_t)0;
 80009ec:	2200      	movs	r2, #0
  pp->top    = &buf[n];
 80009ee:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 80009f0:	e9c3 4408 	strd	r4, r4, [r3, #32]
 80009f4:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 80009f8:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->cnt    = (size_t)0;
 80009fc:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 80009fe:	751a      	strb	r2, [r3, #20]
  pp->rtr    = NULL;
 8000a00:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
 8000a08:	649a      	str	r2, [r3, #72]	; 0x48
}
 8000a0a:	bc30      	pop	{r4, r5}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000c90 	.word	0x20000c90
 8000a14:	20000d90 	.word	0x20000d90
	...

08000a20 <oslib_test_001_003_setup>:
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
 8000a20:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <oslib_test_001_003_setup+0x2c>)
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <oslib_test_001_003_setup+0x30>)
 8000a26:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 8000a28:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 8000a2c:	f103 0418 	add.w	r4, r3, #24
  mbp->cnt    = (size_t)0;
 8000a30:	2100      	movs	r1, #0
 8000a32:	f103 0020 	add.w	r0, r3, #32
  mbp->top    = &buf[n];
 8000a36:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 8000a38:	e9c3 4406 	strd	r4, r4, [r3, #24]
  mbp->wrptr  = buf;
 8000a3c:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000a40:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8000a44:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8000a46:	7519      	strb	r1, [r3, #20]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8000a48:	bc30      	pop	{r4, r5}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000c50 	.word	0x20000c50
 8000a50:	20001000 	.word	0x20001000
	...

08000a60 <oslib_test_001_002_setup>:
 8000a60:	f7ff bfde 	b.w	8000a20 <oslib_test_001_003_setup>
	...

08000a70 <oslib_test_001_001_setup>:
 8000a70:	f7ff bfd6 	b.w	8000a20 <oslib_test_001_003_setup>
	...

08000a80 <rt_test_010_011_setup>:
  tqp->next = (thread_t *)tqp;
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <rt_test_010_011_setup+0xc>)
 8000a82:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000a84:	e9c3 3300 	strd	r3, r3, [r3]
 8000a88:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_010_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 8000a8a:	4770      	bx	lr
 8000a8c:	20001020 	.word	0x20001020

08000a90 <rt_test_010_010_setup>:
  tqp->next = (thread_t *)tqp;
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <rt_test_010_010_setup+0xc>)
 8000a92:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000a94:	e9c3 3300 	strd	r3, r3, [r3]
 8000a98:	609a      	str	r2, [r3, #8]
}
 8000a9a:	4770      	bx	lr
 8000a9c:	2000104c 	.word	0x2000104c

08000aa0 <tmo>:
static void tmo(void *param) {(void)param;}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
	...

08000ab0 <rt_test_010_007_setup>:
  tqp->next = (thread_t *)tqp;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <rt_test_010_007_setup+0xc>)
 8000ab2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000ab4:	e9c3 3300 	strd	r3, r3, [r3]
 8000ab8:	609a      	str	r2, [r3, #8]
}
 8000aba:	4770      	bx	lr
 8000abc:	2000104c 	.word	0x2000104c

08000ac0 <rt_test_009_002_setup>:
  mp->next = NULL;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <rt_test_009_002_setup+0x14>)
 8000ac2:	2200      	movs	r2, #0
  mp->object_size = size;
 8000ac4:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8000ac8:	2104      	movs	r1, #4
 8000aca:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 8000ace:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 8000ad0:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8000ad2:	4770      	bx	lr
 8000ad4:	20001010 	.word	0x20001010
	...

08000ae0 <rt_test_009_001_setup>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <rt_test_009_001_setup+0x30>)
  heapp->provider = NULL;
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <rt_test_009_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000ae4:	1dd9      	adds	r1, r3, #7
 8000ae6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8000aea:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000aec:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_009_001_setup(void) {
 8000af0:	b410      	push	{r4}
  heapp->provider = NULL;
 8000af2:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8000af4:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000af8:	08db      	lsrs	r3, r3, #3
 8000afa:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 8000afc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 8000afe:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000b00:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000b04:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8000b06:	6090      	str	r0, [r2, #8]
 8000b08:	6150      	str	r0, [r2, #20]
}
 8000b0a:	bc10      	pop	{r4}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20001060 	.word	0x20001060
 8000b14:	20000fe4 	.word	0x20000fe4
	...

08000b20 <rt_test_008_007_setup>:
 *   has been emptied.
 * - [8.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_008_007_setup(void) {
 8000b20:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000b22:	f7ff fe7d 	bl	8000820 <chEvtGetAndClearEvents.constprop.52>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000b26:	4a02      	ldr	r2, [pc, #8]	; (8000b30 <rt_test_008_007_setup+0x10>)
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <rt_test_008_007_setup+0x14>)
 8000b2a:	6012      	str	r2, [r2, #0]
 8000b2c:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8000b2e:	bd08      	pop	{r3, pc}
 8000b30:	20000c0c 	.word	0x20000c0c
 8000b34:	20000c10 	.word	0x20000c10
	...

08000b40 <rt_test_008_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000b40:	f7ff be6e 	b.w	8000820 <chEvtGetAndClearEvents.constprop.52>
	...

08000b50 <rt_test_008_005_setup>:
 8000b50:	f7ff bff6 	b.w	8000b40 <rt_test_008_006_setup>
	...

08000b60 <rt_test_008_004_setup>:
 8000b60:	f7ff bfee 	b.w	8000b40 <rt_test_008_006_setup>
	...

08000b70 <rt_test_008_003_setup>:
 8000b70:	f7ff bfe6 	b.w	8000b40 <rt_test_008_006_setup>
	...

08000b80 <rt_test_008_002_setup>:
 8000b80:	f7ff bfde 	b.w	8000b40 <rt_test_008_006_setup>
	...

08000b90 <rt_test_006_009_setup>:
  tqp->next = (thread_t *)tqp;
 8000b90:	4906      	ldr	r1, [pc, #24]	; (8000bac <rt_test_006_009_setup+0x1c>)
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <rt_test_006_009_setup+0x20>)
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <rt_test_006_009_setup+0x24>)
 8000b96:	6009      	str	r1, [r1, #0]
 8000b98:	2000      	movs	r0, #0
  tqp->prev = (thread_t *)tqp;
 8000b9a:	6049      	str	r1, [r1, #4]
 8000b9c:	e9c2 2200 	strd	r2, r2, [r2]
 8000ba0:	6090      	str	r0, [r2, #8]
 8000ba2:	6098      	str	r0, [r3, #8]
 8000ba4:	e9c3 3300 	strd	r3, r3, [r3]

static void rt_test_006_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000c04 	.word	0x20000c04
 8000bb0:	20000c30 	.word	0x20000c30
 8000bb4:	20000c40 	.word	0x20000c40
	...

08000bc0 <rt_test_006_008_setup>:
  tqp->next = (thread_t *)tqp;
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <rt_test_006_008_setup+0x14>)
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <rt_test_006_008_setup+0x18>)
 8000bc4:	6012      	str	r2, [r2, #0]
 8000bc6:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8000bc8:	6052      	str	r2, [r2, #4]
 8000bca:	e9c3 3300 	strd	r3, r3, [r3]
 8000bce:	6099      	str	r1, [r3, #8]
}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000c04 	.word	0x20000c04
 8000bd8:	20000c30 	.word	0x20000c30
 8000bdc:	00000000 	.word	0x00000000

08000be0 <rt_test_006_007_setup>:
 8000be0:	f7ff bfee 	b.w	8000bc0 <rt_test_006_008_setup>
	...

08000bf0 <rt_test_006_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <rt_test_006_005_setup+0xc>)
 8000bf2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000bf4:	e9c3 3300 	strd	r3, r3, [r3]
 8000bf8:	609a      	str	r2, [r3, #8]
}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000c30 	.word	0x20000c30

08000c00 <rt_test_006_004_setup>:
  tqp->next = (thread_t *)tqp;
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <rt_test_006_004_setup+0x14>)
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <rt_test_006_004_setup+0x18>)
 8000c04:	6012      	str	r2, [r2, #0]
 8000c06:	2100      	movs	r1, #0
 8000c08:	e9c2 2101 	strd	r2, r1, [r2, #4]
 8000c0c:	6099      	str	r1, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8000c0e:	e9c3 3300 	strd	r3, r3, [r3]
}
 8000c12:	4770      	bx	lr
 8000c14:	20000c30 	.word	0x20000c30
 8000c18:	20000c40 	.word	0x20000c40
 8000c1c:	00000000 	.word	0x00000000

08000c20 <rt_test_006_001_setup>:
 8000c20:	f7ff bfe6 	b.w	8000bf0 <rt_test_006_005_setup>
	...

08000c30 <rt_test_005_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <rt_test_005_005_setup+0xc>)
 8000c32:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000c34:	e9c3 3300 	strd	r3, r3, [r3]
 8000c38:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_005_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 8000c3a:	4770      	bx	lr
 8000c3c:	20001040 	.word	0x20001040

08000c40 <rt_test_005_004_setup>:
 8000c40:	f7ff bff6 	b.w	8000c30 <rt_test_005_005_setup>
	...

08000c50 <rt_test_005_003_setup>:
 8000c50:	f7ff bfee 	b.w	8000c30 <rt_test_005_005_setup>
	...

08000c60 <rt_test_005_002_setup>:
 8000c60:	f7ff bfe6 	b.w	8000c30 <rt_test_005_005_setup>
	...

08000c70 <rt_test_005_001_setup>:
  tqp->next = (thread_t *)tqp;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <rt_test_005_001_setup+0xc>)
 8000c72:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000c74:	e9c3 3300 	strd	r3, r3, [r3]
 8000c78:	609a      	str	r2, [r3, #8]
}
 8000c7a:	4770      	bx	lr
 8000c7c:	20001040 	.word	0x20001040

08000c80 <rt_test_004_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
 8000c80:	4b01      	ldr	r3, [pc, #4]	; (8000c88 <rt_test_004_001_setup+0x8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	4770      	bx	lr
 8000c88:	200017a0 	.word	0x200017a0
 8000c8c:	00000000 	.word	0x00000000

08000c90 <_test_assert>:
  if (!condition)
 8000c90:	b948      	cbnz	r0, 8000ca6 <_test_assert+0x16>
bool _test_assert(bool condition, const char *msg) {
 8000c92:	b410      	push	{r4}
  test_global_fail     = true;
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <_test_assert+0x1c>)
  test_local_fail      = true;
 8000c96:	4c06      	ldr	r4, [pc, #24]	; (8000cb0 <_test_assert+0x20>)
  test_failure_message = msg;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <_test_assert+0x24>)
  test_local_fail      = true;
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000c9e:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000ca0:	6019      	str	r1, [r3, #0]
}
 8000ca2:	bc10      	pop	{r4}
 8000ca4:	4770      	bx	lr
  return false;
 8000ca6:	2000      	movs	r0, #0
}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200016d0 	.word	0x200016d0
 8000cb0:	20001770 	.word	0x20001770
 8000cb4:	200016cc 	.word	0x200016cc
	...

08000cc0 <rt_test_002_004_execute>:

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <rt_test_002_004_execute+0x14>)
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc8:	6019      	str	r1, [r3, #0]
 8000cca:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000ccc:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d0fc      	beq.n	8000ccc <rt_test_002_004_execute+0xc>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 8000cd2:	4770      	bx	lr
 8000cd4:	20001774 	.word	0x20001774
	...

08000ce0 <rt_test_002_003_execute>:
  test_set_step(1);
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <rt_test_002_003_execute+0x20>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000cec:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000cee:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000cf0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000cf4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000cfc:	b662      	cpsie	i
}
 8000cfe:	4770      	bx	lr
 8000d00:	20001774 	.word	0x20001774
	...

08000d10 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <test_terminate_threads+0x30>)
 8000d12:	b430      	push	{r4, r5}
 8000d14:	f103 0014 	add.w	r0, r3, #20
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d18:	2520      	movs	r5, #32
 8000d1a:	2400      	movs	r4, #0
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8000d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d20:	b14a      	cbz	r2, 8000d36 <test_terminate_threads+0x26>
 8000d22:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8000d26:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8000d2a:	f041 0104 	orr.w	r1, r1, #4
 8000d2e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8000d32:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 8000d36:	4283      	cmp	r3, r0
 8000d38:	d1f0      	bne.n	8000d1c <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 8000d3a:	bc30      	pop	{r4, r5}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2000178c 	.word	0x2000178c
	...

08000d50 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8000d50:	b320      	cbz	r0, 8000d9c <test_printn.part.0+0x4c>
void test_printn(uint32_t n) {
 8000d52:	b570      	push	{r4, r5, r6, lr}
 8000d54:	b084      	sub	sp, #16
    p = buf;
 8000d56:	466d      	mov	r5, sp
 8000d58:	462c      	mov	r4, r5
      *p++ = (n % 10) + '0', n /= 10;
 8000d5a:	4e11      	ldr	r6, [pc, #68]	; (8000da0 <test_printn.part.0+0x50>)
 8000d5c:	e000      	b.n	8000d60 <test_printn.part.0+0x10>
    while (n)
 8000d5e:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 8000d60:	fba6 2300 	umull	r2, r3, r6, r0
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000d6a:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8000d6e:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8000d72:	4622      	mov	r2, r4
 8000d74:	b2c9      	uxtb	r1, r1
 8000d76:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1ee      	bne.n	8000d5e <test_printn.part.0+0xe>
    while (p > buf)
 8000d80:	42aa      	cmp	r2, r5
 8000d82:	d909      	bls.n	8000d98 <test_printn.part.0+0x48>
 8000d84:	4e07      	ldr	r6, [pc, #28]	; (8000da4 <test_printn.part.0+0x54>)
 8000d86:	e001      	b.n	8000d8c <test_printn.part.0+0x3c>
 8000d88:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 8000d8c:	6830      	ldr	r0, [r6, #0]
 8000d8e:	6803      	ldr	r3, [r0, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4798      	blx	r3
    while (p > buf)
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	d1f7      	bne.n	8000d88 <test_printn.part.0+0x38>
  }
}
 8000d98:	b004      	add	sp, #16
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	cccccccd 	.word	0xcccccccd
 8000da4:	200016c8 	.word	0x200016c8
	...

08000db0 <test_printn>:
  if (!n)
 8000db0:	b928      	cbnz	r0, 8000dbe <test_printn+0xe>
    streamPut(test_chp, '0');
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <test_printn+0x14>)
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	6803      	ldr	r3, [r0, #0]
 8000db8:	2130      	movs	r1, #48	; 0x30
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4718      	bx	r3
 8000dbe:	f7ff bfc7 	b.w	8000d50 <test_printn.part.0>
 8000dc2:	bf00      	nop
 8000dc4:	200016c8 	.word	0x200016c8
	...

08000dd0 <test_emit_token>:
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000dd6:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <test_emit_token+0x20>)
 8000dd8:	4906      	ldr	r1, [pc, #24]	; (8000df4 <test_emit_token+0x24>)
 8000dda:	6813      	ldr	r3, [r2, #0]
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d202      	bcs.n	8000de6 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000de0:	1c59      	adds	r1, r3, #1
 8000de2:	7018      	strb	r0, [r3, #0]
 8000de4:	6011      	str	r1, [r2, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20001788 	.word	0x20001788
 8000df4:	20001788 	.word	0x20001788
	...

08000e00 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000e00:	2043      	movs	r0, #67	; 0x43
 8000e02:	f7ff bfe5 	b.w	8000dd0 <test_emit_token>
 8000e06:	bf00      	nop
	...

08000e10 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000e10:	2042      	movs	r0, #66	; 0x42
 8000e12:	f7ff bfdd 	b.w	8000dd0 <test_emit_token>
 8000e16:	bf00      	nop
	...

08000e20 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000e20:	2041      	movs	r0, #65	; 0x41
 8000e22:	f7ff bfd5 	b.w	8000dd0 <test_emit_token>
 8000e26:	bf00      	nop
	...

08000e30 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000e30:	7800      	ldrb	r0, [r0, #0]
 8000e32:	f7ff bfcd 	b.w	8000dd0 <test_emit_token>
 8000e36:	bf00      	nop
	...

08000e40 <dyn_thread1>:
 8000e40:	f7ff bff6 	b.w	8000e30 <thread>
	...

08000e50 <test_println>:
void test_println(const char *msgp) {
 8000e50:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000e52:	7801      	ldrb	r1, [r0, #0]
 8000e54:	b189      	cbz	r1, 8000e7a <test_println+0x2a>
 8000e56:	4d0a      	ldr	r5, [pc, #40]	; (8000e80 <test_println+0x30>)
 8000e58:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000e5a:	6828      	ldr	r0, [r5, #0]
 8000e5c:	6803      	ldr	r3, [r0, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	4798      	blx	r3
  while (*msgp)
 8000e62:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000e66:	2900      	cmp	r1, #0
 8000e68:	d1f7      	bne.n	8000e5a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000e6a:	6828      	ldr	r0, [r5, #0]
 8000e6c:	4905      	ldr	r1, [pc, #20]	; (8000e84 <test_println+0x34>)
 8000e6e:	6803      	ldr	r3, [r0, #0]
 8000e70:	2202      	movs	r2, #2
 8000e72:	685b      	ldr	r3, [r3, #4]
}
 8000e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000e78:	4718      	bx	r3
 8000e7a:	4d01      	ldr	r5, [pc, #4]	; (8000e80 <test_println+0x30>)
 8000e7c:	e7f5      	b.n	8000e6a <test_println+0x1a>
 8000e7e:	bf00      	nop
 8000e80:	200016c8 	.word	0x200016c8
 8000e84:	08009cb8 	.word	0x08009cb8
	...

08000e90 <test_print>:
  while (*msgp)
 8000e90:	7801      	ldrb	r1, [r0, #0]
 8000e92:	b159      	cbz	r1, 8000eac <test_print+0x1c>
void test_print(const char *msgp) {
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4d06      	ldr	r5, [pc, #24]	; (8000eb0 <test_print+0x20>)
 8000e98:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000e9a:	6828      	ldr	r0, [r5, #0]
 8000e9c:	6803      	ldr	r3, [r0, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	4798      	blx	r3
  while (*msgp)
 8000ea2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000ea6:	2900      	cmp	r1, #0
 8000ea8:	d1f7      	bne.n	8000e9a <test_print+0xa>
}
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200016c8 	.word	0x200016c8
	...

08000ec0 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8000ec0:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8000ec2:	4e0d      	ldr	r6, [pc, #52]	; (8000ef8 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000ec4:	4f0d      	ldr	r7, [pc, #52]	; (8000efc <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 8000ec6:	6835      	ldr	r5, [r6, #0]
 8000ec8:	1e42      	subs	r2, r0, #1
  char *cp = test_tokens_buffer;
 8000eca:	463b      	mov	r3, r7
 8000ecc:	e003      	b.n	8000ed6 <_test_assert_sequence+0x16>
    if (*cp++ != *expected++)
 8000ece:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000ed2:	4284      	cmp	r4, r0
 8000ed4:	d107      	bne.n	8000ee6 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000ed6:	429d      	cmp	r5, r3
 8000ed8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8000edc:	d8f7      	bhi.n	8000ece <_test_assert_sequence+0xe>
  if (*expected)
 8000ede:	b910      	cbnz	r0, 8000ee6 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000ee0:	6037      	str	r7, [r6, #0]
}
 8000ee2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ee4:	4770      	bx	lr
  test_local_fail      = true;
 8000ee6:	4c06      	ldr	r4, [pc, #24]	; (8000f00 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8000eec:	2001      	movs	r0, #1
 8000eee:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000ef0:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000ef2:	6019      	str	r1, [r3, #0]
}
 8000ef4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20001788 	.word	0x20001788
 8000efc:	20001778 	.word	0x20001778
 8000f00:	20001770 	.word	0x20001770
 8000f04:	200016d0 	.word	0x200016d0
 8000f08:	200016cc 	.word	0x200016cc
 8000f0c:	00000000 	.word	0x00000000

08000f10 <rt_test_008_002_execute>:
static void rt_test_008_002_execute(void) {
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <rt_test_008_002_execute+0x40>)
 8000f14:	4f0f      	ldr	r7, [pc, #60]	; (8000f54 <rt_test_008_002_execute+0x44>)
 8000f16:	2601      	movs	r6, #1
 8000f18:	601e      	str	r6, [r3, #0]
 8000f1a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8000f1c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000f1e:	fa25 f304 	lsr.w	r3, r5, r4
 8000f22:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8000f26:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8000f2a:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000f2c:	d00d      	beq.n	8000f4a <rt_test_008_002_execute+0x3a>
      handlers[eid](eid);
 8000f2e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8000f32:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8000f36:	3401      	adds	r4, #1
      handlers[eid](eid);
 8000f38:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	d1ef      	bne.n	8000f1e <rt_test_008_002_execute+0xe>
    test_assert_sequence("ABC", "invalid sequence");
 8000f3e:	4906      	ldr	r1, [pc, #24]	; (8000f58 <rt_test_008_002_execute+0x48>)
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <rt_test_008_002_execute+0x4c>)
}
 8000f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8000f46:	f7ff bfbb 	b.w	8000ec0 <_test_assert_sequence>
    eid++;
 8000f4a:	3401      	adds	r4, #1
 8000f4c:	e7e7      	b.n	8000f1e <rt_test_008_002_execute+0xe>
 8000f4e:	bf00      	nop
 8000f50:	20001774 	.word	0x20001774
 8000f54:	08009cdc 	.word	0x08009cdc
 8000f58:	0800afc4 	.word	0x0800afc4
 8000f5c:	0800afd8 	.word	0x0800afd8

08000f60 <print_line>:
static void print_line(void) {
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	4d08      	ldr	r5, [pc, #32]	; (8000f84 <print_line+0x24>)
 8000f64:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 8000f66:	6828      	ldr	r0, [r5, #0]
 8000f68:	6803      	ldr	r3, [r0, #0]
 8000f6a:	212d      	movs	r1, #45	; 0x2d
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000f70:	3c01      	subs	r4, #1
 8000f72:	d1f8      	bne.n	8000f66 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000f74:	6828      	ldr	r0, [r5, #0]
 8000f76:	4904      	ldr	r1, [pc, #16]	; (8000f88 <print_line+0x28>)
 8000f78:	6803      	ldr	r3, [r0, #0]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	685b      	ldr	r3, [r3, #4]
}
 8000f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000f82:	4718      	bx	r3
 8000f84:	200016c8 	.word	0x200016c8
 8000f88:	08009cb8 	.word	0x08009cb8
 8000f8c:	00000000 	.word	0x00000000

08000f90 <_port_irq_epilogue>:
 8000f90:	2320      	movs	r3, #32
 8000f92:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <_port_irq_epilogue+0x44>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000f9e:	d102      	bne.n	8000fa6 <_port_irq_epilogue+0x16>
 8000fa0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000fa4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000fa6:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 8000faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fae:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8000fb2:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000fb6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <_port_irq_epilogue+0x48>)
 8000fbc:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000fbe:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8000fc0:	6889      	ldr	r1, [r1, #8]
 8000fc2:	6892      	ldr	r2, [r2, #8]
 8000fc4:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000fc6:	bf8c      	ite	hi
 8000fc8:	4a04      	ldrhi	r2, [pc, #16]	; (8000fdc <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000fca:	4a05      	ldrls	r2, [pc, #20]	; (8000fe0 <_port_irq_epilogue+0x50>)
 8000fcc:	f843 2c08 	str.w	r2, [r3, #-8]
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	20000da0 	.word	0x20000da0
 8000fdc:	080002e1 	.word	0x080002e1
 8000fe0:	080002e4 	.word	0x080002e4
	...

08000ff0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000ff0:	b470      	push	{r4, r5, r6}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000ff2:	4c0b      	ldr	r4, [pc, #44]	; (8001020 <chCoreAllocAlignedI+0x30>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000ff4:	e9d4 6300 	ldrd	r6, r3, [r4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000ff8:	1e72      	subs	r2, r6, #1
  size = MEM_ALIGN_NEXT(size, align);
 8000ffa:	424d      	negs	r5, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000ffc:	440a      	add	r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 8000ffe:	3901      	subs	r1, #1
 8001000:	4401      	add	r1, r0
 8001002:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001004:	ea02 0005 	and.w	r0, r2, r5
  next = p + size;
 8001008:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800100a:	4299      	cmp	r1, r3
 800100c:	d804      	bhi.n	8001018 <chCoreAllocAlignedI+0x28>
 800100e:	428e      	cmp	r6, r1
 8001010:	d802      	bhi.n	8001018 <chCoreAllocAlignedI+0x28>
  ch_memcore.nextmem = next;
 8001012:	6021      	str	r1, [r4, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001014:	bc70      	pop	{r4, r5, r6}
 8001016:	4770      	bx	lr
    return NULL;
 8001018:	2000      	movs	r0, #0
 800101a:	bc70      	pop	{r4, r5, r6}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000f38 	.word	0x20000f38
	...

08001030 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001030:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001032:	2220      	movs	r2, #32
 8001034:	4603      	mov	r3, r0
 8001036:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 800103a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 800103c:	b128      	cbz	r0, 800104a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 800103e:	6802      	ldr	r2, [r0, #0]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001048:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	2a00      	cmp	r2, #0
 800104e:	d0f8      	beq.n	8001042 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8001050:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8001054:	4790      	blx	r2
 8001056:	2300      	movs	r3, #0
 8001058:	f383 8811 	msr	BASEPRI, r3
}
 800105c:	bd08      	pop	{r3, pc}
 800105e:	bf00      	nop

08001060 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 8001060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8001064:	4e3a      	ldr	r6, [pc, #232]	; (8001150 <oslib_test_003_001_execute+0xf0>)
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <oslib_test_003_001_execute+0xf4>)
 8001068:	4c3b      	ldr	r4, [pc, #236]	; (8001158 <oslib_test_003_001_execute+0xf8>)
 800106a:	2201      	movs	r2, #1
 800106c:	6032      	str	r2, [r6, #0]
 800106e:	2520      	movs	r5, #32
 8001070:	2204      	movs	r2, #4
 8001072:	2000      	movs	r0, #0
 8001074:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8001078:	6821      	ldr	r1, [r4, #0]
 800107a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001082:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8001084:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001086:	440b      	add	r3, r1
  while (n != 0U) {
 8001088:	d1f4      	bne.n	8001074 <oslib_test_003_001_execute+0x14>
  test_set_step(2);
 800108a:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800108c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001158 <oslib_test_003_001_execute+0xf8>
 8001090:	4f32      	ldr	r7, [pc, #200]	; (800115c <oslib_test_003_001_execute+0xfc>)
  test_set_step(2);
 8001092:	6033      	str	r3, [r6, #0]
 8001094:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001096:	4640      	mov	r0, r8
 8001098:	f7ff ffca 	bl	8001030 <chPoolAlloc>
 800109c:	3000      	adds	r0, #0
 800109e:	bf18      	it	ne
 80010a0:	2001      	movne	r0, #1
 80010a2:	4639      	mov	r1, r7
 80010a4:	f7ff fdf4 	bl	8000c90 <_test_assert>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d13c      	bne.n	8001126 <oslib_test_003_001_execute+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80010ac:	3d01      	subs	r5, #1
 80010ae:	d1f2      	bne.n	8001096 <oslib_test_003_001_execute+0x36>
  test_set_step(3);
 80010b0:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80010b2:	4829      	ldr	r0, [pc, #164]	; (8001158 <oslib_test_003_001_execute+0xf8>)
  test_set_step(3);
 80010b4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80010b6:	f7ff ffbb 	bl	8001030 <chPoolAlloc>
 80010ba:	fab0 f080 	clz	r0, r0
 80010be:	0940      	lsrs	r0, r0, #5
 80010c0:	4927      	ldr	r1, [pc, #156]	; (8001160 <oslib_test_003_001_execute+0x100>)
 80010c2:	f7ff fde5 	bl	8000c90 <_test_assert>
 80010c6:	bb70      	cbnz	r0, 8001126 <oslib_test_003_001_execute+0xc6>
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <oslib_test_003_001_execute+0xf4>)
  test_set_step(4);
 80010ca:	2204      	movs	r2, #4
 80010cc:	f103 0710 	add.w	r7, r3, #16
 80010d0:	6032      	str	r2, [r6, #0]
 80010d2:	2020      	movs	r0, #32
      chPoolFree(&mp1, &objects[i]);
 80010d4:	461a      	mov	r2, r3
 80010d6:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 80010da:	6821      	ldr	r1, [r4, #0]
 80010dc:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 80010e0:	6022      	str	r2, [r4, #0]
 80010e2:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80010e6:	429f      	cmp	r7, r3
 80010e8:	d1f4      	bne.n	80010d4 <oslib_test_003_001_execute+0x74>
  test_set_step(5);
 80010ea:	2305      	movs	r3, #5
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80010ec:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001158 <oslib_test_003_001_execute+0xf8>
 80010f0:	4f1a      	ldr	r7, [pc, #104]	; (800115c <oslib_test_003_001_execute+0xfc>)
  test_set_step(5);
 80010f2:	6033      	str	r3, [r6, #0]
 80010f4:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80010f6:	4640      	mov	r0, r8
 80010f8:	f7ff ff9a 	bl	8001030 <chPoolAlloc>
 80010fc:	3000      	adds	r0, #0
 80010fe:	bf18      	it	ne
 8001100:	2001      	movne	r0, #1
 8001102:	4639      	mov	r1, r7
 8001104:	f7ff fdc4 	bl	8000c90 <_test_assert>
 8001108:	b968      	cbnz	r0, 8001126 <oslib_test_003_001_execute+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800110a:	3d01      	subs	r5, #1
 800110c:	d1f3      	bne.n	80010f6 <oslib_test_003_001_execute+0x96>
  test_set_step(6);
 800110e:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001110:	4811      	ldr	r0, [pc, #68]	; (8001158 <oslib_test_003_001_execute+0xf8>)
  test_set_step(6);
 8001112:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001114:	f7ff ff8c 	bl	8001030 <chPoolAlloc>
 8001118:	fab0 f080 	clz	r0, r0
 800111c:	0940      	lsrs	r0, r0, #5
 800111e:	4910      	ldr	r1, [pc, #64]	; (8001160 <oslib_test_003_001_execute+0x100>)
 8001120:	f7ff fdb6 	bl	8000c90 <_test_assert>
 8001124:	b108      	cbz	r0, 800112a <oslib_test_003_001_execute+0xca>
}
 8001126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(7);
 800112a:	2107      	movs	r1, #7
  mp->object_size = size;
 800112c:	2304      	movs	r3, #4
  mp->provider = provider;
 800112e:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <oslib_test_003_001_execute+0x104>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <oslib_test_003_001_execute+0xf8>)
  test_set_step(7);
 8001132:	6031      	str	r1, [r6, #0]
  mp->next = NULL;
 8001134:	6025      	str	r5, [r4, #0]
  mp->align = align;
 8001136:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->provider = provider;
 800113a:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800113c:	f7ff ff78 	bl	8001030 <chPoolAlloc>
 8001140:	fab0 f080 	clz	r0, r0
 8001144:	0940      	lsrs	r0, r0, #5
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <oslib_test_003_001_execute+0x108>)
}
 8001148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800114c:	f7ff bda0 	b.w	8000c90 <_test_assert>
 8001150:	20001774 	.word	0x20001774
 8001154:	20001030 	.word	0x20001030
 8001158:	20000c78 	.word	0x20000c78
 800115c:	08009e80 	.word	0x08009e80
 8001160:	08009e8c 	.word	0x08009e8c
 8001164:	08000951 	.word	0x08000951
 8001168:	08009e9c 	.word	0x08009e9c
 800116c:	00000000 	.word	0x00000000

08001170 <chEvtAddEvents>:
 8001170:	2320      	movs	r3, #32
 8001172:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <chEvtAddEvents+0x18>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117c:	4310      	orrs	r0, r2
 800117e:	6358      	str	r0, [r3, #52]	; 0x34
 8001180:	2300      	movs	r3, #0
 8001182:	f383 8811 	msr	BASEPRI, r3
}
 8001186:	4770      	bx	lr
 8001188:	20000da0 	.word	0x20000da0
 800118c:	00000000 	.word	0x00000000

08001190 <chEvtUnregister>:
 8001190:	2320      	movs	r3, #32
 8001192:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8001196:	4602      	mov	r2, r0
 8001198:	e002      	b.n	80011a0 <chEvtUnregister+0x10>
    if (p->next == elp) {
 800119a:	428b      	cmp	r3, r1
 800119c:	d007      	beq.n	80011ae <chEvtUnregister+0x1e>
 800119e:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 80011a0:	6813      	ldr	r3, [r2, #0]
 80011a2:	4283      	cmp	r3, r0
 80011a4:	d1f9      	bne.n	800119a <chEvtUnregister+0xa>
 80011a6:	2300      	movs	r3, #0
 80011a8:	f383 8811 	msr	BASEPRI, r3
}
 80011ac:	4770      	bx	lr
      p->next = elp->next;
 80011ae:	680b      	ldr	r3, [r1, #0]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	f383 8811 	msr	BASEPRI, r3
}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	0000      	movs	r0, r0
	...

080011c0 <rt_test_008_001_execute>:
static void rt_test_008_001_execute(void) {
 80011c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  esp->next = (event_listener_t *)esp;
 80011c4:	4c36      	ldr	r4, [pc, #216]	; (80012a0 <rt_test_008_001_execute+0xe0>)
  test_set_step(2);
 80011c6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80012b0 <rt_test_008_001_execute+0xf0>
 80011ca:	6024      	str	r4, [r4, #0]
 80011cc:	2102      	movs	r1, #2
static void rt_test_008_001_execute(void) {
 80011ce:	b08a      	sub	sp, #40	; 0x28
  test_set_step(2);
 80011d0:	f8c9 1000 	str.w	r1, [r9]
 80011d4:	2620      	movs	r6, #32
 80011d6:	f386 8811 	msr	BASEPRI, r6
  elp->listener = currp;
 80011da:	4832      	ldr	r0, [pc, #200]	; (80012a4 <rt_test_008_001_execute+0xe4>)
  elp->next     = esp->next;
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	af0a      	add	r7, sp, #40	; 0x28
  elp->events   = events;
 80011e0:	2201      	movs	r2, #1
  elp->next     = esp->next;
 80011e2:	f847 3d14 	str.w	r3, [r7, #-20]!
  elp->listener = currp;
 80011e6:	6983      	ldr	r3, [r0, #24]
 80011e8:	9306      	str	r3, [sp, #24]
  elp->flags    = (eventflags_t)0;
 80011ea:	2500      	movs	r5, #0
  elp->wflags   = wflags;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
  elp->events   = events;
 80011f0:	9207      	str	r2, [sp, #28]
  esp->next     = elp;
 80011f2:	6027      	str	r7, [r4, #0]
  elp->wflags   = wflags;
 80011f4:	e9cd 5308 	strd	r5, r3, [sp, #32]
 80011f8:	f385 8811 	msr	BASEPRI, r5
 80011fc:	f386 8811 	msr	BASEPRI, r6
  elp->next     = esp->next;
 8001200:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8001204:	6822      	ldr	r2, [r4, #0]
 8001206:	f848 2d28 	str.w	r2, [r8, #-40]!
  elp->listener = currp;
 800120a:	6982      	ldr	r2, [r0, #24]
  esp->next     = elp;
 800120c:	f8c4 8000 	str.w	r8, [r4]
  elp->events   = events;
 8001210:	e9cd 2101 	strd	r2, r1, [sp, #4]
  elp->wflags   = wflags;
 8001214:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8001218:	f385 8811 	msr	BASEPRI, r5
 800121c:	f386 8811 	msr	BASEPRI, r6
  return (bool)(esp != (event_source_t *)esp->next);
 8001220:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001222:	4921      	ldr	r1, [pc, #132]	; (80012a8 <rt_test_008_001_execute+0xe8>)
 8001224:	1b00      	subs	r0, r0, r4
 8001226:	bf18      	it	ne
 8001228:	2001      	movne	r0, #1
 800122a:	f7ff fd31 	bl	8000c90 <_test_assert>
 800122e:	b120      	cbz	r0, 800123a <rt_test_008_001_execute+0x7a>
 8001230:	f385 8811 	msr	BASEPRI, r5
}
 8001234:	b00a      	add	sp, #40	; 0x28
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	4682      	mov	sl, r0
 800123c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8001240:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 8001242:	4639      	mov	r1, r7
 8001244:	4620      	mov	r0, r4
  test_set_step(3);
 8001246:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el1);
 800124a:	f7ff ffa1 	bl	8001190 <chEvtUnregister>
 800124e:	f386 8811 	msr	BASEPRI, r6
 8001252:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001254:	4914      	ldr	r1, [pc, #80]	; (80012a8 <rt_test_008_001_execute+0xe8>)
 8001256:	1b00      	subs	r0, r0, r4
 8001258:	bf18      	it	ne
 800125a:	2001      	movne	r0, #1
 800125c:	f7ff fd18 	bl	8000c90 <_test_assert>
 8001260:	4605      	mov	r5, r0
 8001262:	b120      	cbz	r0, 800126e <rt_test_008_001_execute+0xae>
 8001264:	f38a 8811 	msr	BASEPRI, sl
}
 8001268:	b00a      	add	sp, #40	; 0x28
 800126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 8001272:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8001274:	4641      	mov	r1, r8
 8001276:	4620      	mov	r0, r4
  test_set_step(4);
 8001278:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el2);
 800127c:	f7ff ff88 	bl	8001190 <chEvtUnregister>
 8001280:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001284:	6820      	ldr	r0, [r4, #0]
 8001286:	4909      	ldr	r1, [pc, #36]	; (80012ac <rt_test_008_001_execute+0xec>)
 8001288:	1b00      	subs	r0, r0, r4
 800128a:	fab0 f080 	clz	r0, r0
 800128e:	0940      	lsrs	r0, r0, #5
 8001290:	f7ff fcfe 	bl	8000c90 <_test_assert>
 8001294:	2800      	cmp	r0, #0
 8001296:	d1cb      	bne.n	8001230 <rt_test_008_001_execute+0x70>
 8001298:	f380 8811 	msr	BASEPRI, r0
 800129c:	e7ca      	b.n	8001234 <rt_test_008_001_execute+0x74>
 800129e:	bf00      	nop
 80012a0:	20000c0c 	.word	0x20000c0c
 80012a4:	20000da0 	.word	0x20000da0
 80012a8:	0800af98 	.word	0x0800af98
 80012ac:	0800afa4 	.word	0x0800afa4
 80012b0:	20001774 	.word	0x20001774
	...

080012c0 <chTMStopMeasurementX>:
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <chTMStopMeasurementX+0x40>)
 80012c4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 80012c6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80012c8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 80012ca:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80012cc:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 80012ce:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 80012d0:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 80012d2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80012d6:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 80012d8:	18e6      	adds	r6, r4, r3
 80012da:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 80012de:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80012e0:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80012e2:	bf88      	it	hi
 80012e4:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80012e6:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 80012e8:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80012ea:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80012ee:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 80012f2:	bf38      	it	cc
 80012f4:	6003      	strcc	r3, [r0, #0]
}
 80012f6:	bcf0      	pop	{r4, r5, r6, r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e0001000 	.word	0xe0001000
 8001300:	20000da0 	.word	0x20000da0
	...

08001310 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001310:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 8001312:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8001314:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8001316:	b4f0      	push	{r4, r5, r6, r7}
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001318:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 800131c:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 800131e:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8001322:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001324:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001326:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c
  return _thread_init(tp, tdp->name, tdp->prio);
 800132a:	6805      	ldr	r5, [r0, #0]
 800132c:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800132e:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8001332:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8001336:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 800133a:	f843 2c38 	str.w	r2, [r3, #-56]
 800133e:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 8001340:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8001344:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8001348:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800134c:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8001350:	4d0c      	ldr	r5, [pc, #48]	; (8001384 <chThdCreateSuspendedI+0x74>)
 8001352:	f843 0c3c 	str.w	r0, [r3, #-60]
 8001356:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800135a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  tp->epending  = (eventmask_t)0;
 800135e:	e943 1105 	strd	r1, r1, [r3, #-20]
  list_init(&tp->waiting);
 8001362:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 8001366:	f1a3 011c 	sub.w	r1, r3, #28
  REG_INSERT(tp);
 800136a:	f843 4c34 	str.w	r4, [r3, #-52]
 800136e:	6120      	str	r0, [r4, #16]
 8001370:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8001372:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8001376:	f843 1c18 	str.w	r1, [r3, #-24]
}
 800137a:	bcf0      	pop	{r4, r5, r6, r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000da0 	.word	0x20000da0
 8001384:	080002d1 	.word	0x080002d1
	...

08001390 <wakeup>:
 8001390:	2320      	movs	r3, #32
 8001392:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001396:	f890 3020 	ldrb.w	r3, [r0, #32]
 800139a:	2b07      	cmp	r3, #7
 800139c:	d80e      	bhi.n	80013bc <wakeup+0x2c>
 800139e:	e8df f003 	tbb	[pc, r3]
 80013a2:	0d28      	.short	0x0d28
 80013a4:	0408240d 	.word	0x0408240d
 80013a8:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 80013aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80013ac:	6893      	ldr	r3, [r2, #8]
 80013ae:	3301      	adds	r3, #1
 80013b0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80013b2:	e9d0 2300 	ldrd	r2, r3, [r0]
 80013b6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80013b8:	6802      	ldr	r2, [r0, #0]
 80013ba:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 80013bc:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80013be:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 80013c0:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 80013c4:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80013c8:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80013ca:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80013ce:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	428a      	cmp	r2, r1
 80013d4:	d2fb      	bcs.n	80013ce <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2100      	movs	r1, #0
 80013da:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80013de:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80013e0:	6058      	str	r0, [r3, #4]
 80013e2:	f381 8811 	msr	BASEPRI, r1
}
 80013e6:	bc10      	pop	{r4}
 80013e8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80013ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e7e4      	b.n	80013bc <wakeup+0x2c>
 80013f2:	2300      	movs	r3, #0
 80013f4:	f383 8811 	msr	BASEPRI, r3
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000da0 	.word	0x20000da0

08001400 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8001400:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8001402:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8001406:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8001408:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 800140c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	4282      	cmp	r2, r0
 8001412:	d2fb      	bcs.n	800140c <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8001414:	685a      	ldr	r2, [r3, #4]
}
 8001416:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8001418:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800141c:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800141e:	6059      	str	r1, [r3, #4]
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000da0 	.word	0x20000da0
	...

08001430 <chThdDequeueNextI.constprop.84>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001430:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001432:	4298      	cmp	r0, r3
 8001434:	d007      	beq.n	8001446 <chThdDequeueNextI.constprop.84+0x16>
  tqp->next             = tp->queue.next;
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800143a:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800143c:	6050      	str	r0, [r2, #4]
  (void) chSchReadyI(tp);
 800143e:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 8001440:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001442:	f7ff bfdd 	b.w	8001400 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001446:	4770      	bx	lr
	...

08001450 <chMBPostI.constprop.36>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <chMBPostI.constprop.36+0x40>)
 8001452:	7d1a      	ldrb	r2, [r3, #20]
 8001454:	b9b2      	cbnz	r2, 8001484 <chMBPostI.constprop.36+0x34>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001456:	b570      	push	{r4, r5, r6, lr}
 8001458:	e9d3 6100 	ldrd	r6, r1, [r3]
 800145c:	691a      	ldr	r2, [r3, #16]
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 800145e:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001460:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8001464:	d011      	beq.n	800148a <chMBPostI.constprop.36+0x3a>
    *mbp->wrptr++ = msg;
 8001466:	689d      	ldr	r5, [r3, #8]
 8001468:	1d2c      	adds	r4, r5, #4
 800146a:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 800146c:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 800146e:	6028      	str	r0, [r5, #0]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8001470:	f102 0201 	add.w	r2, r2, #1

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <chMBPostI.constprop.36+0x44>)
      mbp->wrptr = mbp->buffer;
 8001476:	bf98      	it	ls
 8001478:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 800147a:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800147c:	f7ff ffd8 	bl	8001430 <chThdDequeueNextI.constprop.84>

    return MSG_OK;
 8001480:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001482:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 8001484:	f06f 0001 	mvn.w	r0, #1
}
 8001488:	4770      	bx	lr
  return MSG_TIMEOUT;
 800148a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	20000c50 	.word	0x20000c50
 8001494:	20000c70 	.word	0x20000c70
	...

080014a0 <chMBPostAheadI.constprop.33>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 80014a0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <chMBPostAheadI.constprop.33+0x40>)
 80014a4:	7d1a      	ldrb	r2, [r3, #20]
 80014a6:	b9a2      	cbnz	r2, 80014d2 <chMBPostAheadI.constprop.33+0x32>
 80014a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014ac:	6919      	ldr	r1, [r3, #16]
 80014ae:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80014b0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 80014b4:	d010      	beq.n	80014d8 <chMBPostAheadI.constprop.33+0x38>
    if (--mbp->rdptr < mbp->buffer) {
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	3a04      	subs	r2, #4
 80014ba:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 80014bc:	bf88      	it	hi
 80014be:	1f2a      	subhi	r2, r5, #4
 80014c0:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 80014c2:	3101      	adds	r1, #1
    *mbp->rdptr = msg;
 80014c4:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <chMBPostAheadI.constprop.33+0x44>)
    mbp->cnt++;
 80014c8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80014ca:	f7ff ffb1 	bl	8001430 <chThdDequeueNextI.constprop.84>

    return MSG_OK;
 80014ce:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 80014d0:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 80014d2:	f06f 0001 	mvn.w	r0, #1
}
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014dc:	bd38      	pop	{r3, r4, r5, pc}
 80014de:	bf00      	nop
 80014e0:	20000c50 	.word	0x20000c50
 80014e4:	20000c70 	.word	0x20000c70
	...

080014f0 <chMBFetchI.constprop.30>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80014f0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <chMBFetchI.constprop.30+0x40>)
 80014f4:	7d1a      	ldrb	r2, [r3, #20]
 80014f6:	b9a2      	cbnz	r2, 8001522 <chMBFetchI.constprop.30+0x32>
 80014f8:	6919      	ldr	r1, [r3, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 80014fa:	b1a9      	cbz	r1, 8001528 <chMBFetchI.constprop.30+0x38>
    *msgp = *mbp->rdptr++;
 80014fc:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 80014fe:	685c      	ldr	r4, [r3, #4]
    *msgp = *mbp->rdptr++;
 8001500:	6815      	ldr	r5, [r2, #0]
 8001502:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 8001504:	42a2      	cmp	r2, r4
    *msgp = *mbp->rdptr++;
 8001506:	60da      	str	r2, [r3, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 8001508:	f101 31ff 	add.w	r1, r1, #4294967295
    *msgp = *mbp->rdptr++;
 800150c:	6005      	str	r5, [r0, #0]
      mbp->rdptr = mbp->buffer;
 800150e:	bf28      	it	cs
 8001510:	681a      	ldrcs	r2, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <chMBFetchI.constprop.30+0x44>)
      mbp->rdptr = mbp->buffer;
 8001514:	bf28      	it	cs
 8001516:	60da      	strcs	r2, [r3, #12]
    mbp->cnt--;
 8001518:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800151a:	f7ff ff89 	bl	8001430 <chThdDequeueNextI.constprop.84>

    return MSG_OK;
 800151e:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001520:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001522:	f06f 0001 	mvn.w	r0, #1
}
 8001526:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
}
 800152c:	bd38      	pop	{r3, r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	20000c50 	.word	0x20000c50
 8001534:	20000c68 	.word	0x20000c68
	...

08001540 <chThdDequeueAllI.constprop.68>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001540:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001542:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8001544:	4298      	cmp	r0, r3
 8001546:	d00c      	beq.n	8001562 <chThdDequeueAllI.constprop.68+0x22>
 8001548:	4604      	mov	r4, r0
  tp->u.rdymsg = msg;
 800154a:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	6022      	str	r2, [r4, #0]
  (void) chSchReadyI(tp);
 8001552:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8001554:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 8001556:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001558:	f7ff ff52 	bl	8001400 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	42a3      	cmp	r3, r4
 8001560:	d1f5      	bne.n	800154e <chThdDequeueAllI.constprop.68+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001562:	bd38      	pop	{r3, r4, r5, pc}
	...

08001570 <chCondSignalI.constprop.59>:
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <chCondSignalI.constprop.59+0x20>)
 8001572:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8001574:	429a      	cmp	r2, r3
 8001576:	d009      	beq.n	800158c <chCondSignalI.constprop.59+0x1c>
  tqp->next             = tp->queue.next;
 8001578:	6811      	ldr	r1, [r2, #0]
void chCondSignalI(condition_variable_t *cp) {
 800157a:	b410      	push	{r4}
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 800157c:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800157e:	604b      	str	r3, [r1, #4]
  tqp->next             = tp->queue.next;
 8001580:	6019      	str	r1, [r3, #0]
 8001582:	6254      	str	r4, [r2, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001584:	4610      	mov	r0, r2
  }
}
 8001586:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8001588:	f7ff bf3a 	b.w	8001400 <chSchReadyI>
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000c04 	.word	0x20000c04
	...

080015a0 <chEvtSignalI>:
  tp->epending |= events;
 80015a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80015a2:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80015a6:	4319      	orrs	r1, r3
  if (((tp->state == CH_STATE_WTOREVT) &&
 80015a8:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80015aa:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80015ac:	d009      	beq.n	80015c2 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80015ae:	2a0b      	cmp	r2, #11
 80015b0:	d000      	beq.n	80015b4 <chEvtSignalI+0x14>
}
 80015b2:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80015b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80015b6:	438b      	bics	r3, r1
 80015b8:	d1fb      	bne.n	80015b2 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80015be:	f7ff bf1f 	b.w	8001400 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80015c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80015c4:	4219      	tst	r1, r3
 80015c6:	d1f8      	bne.n	80015ba <chEvtSignalI+0x1a>
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	0000      	movs	r0, r0
	...

080015d0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80015d0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 80015d2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 80015d4:	42a0      	cmp	r0, r4
 80015d6:	d00f      	beq.n	80015f8 <chEvtBroadcastFlagsI+0x28>
 80015d8:	4606      	mov	r6, r0
 80015da:	460d      	mov	r5, r1
    elp->flags |= flags;
 80015dc:	68e3      	ldr	r3, [r4, #12]
 80015de:	432b      	orrs	r3, r5
 80015e0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80015e2:	b115      	cbz	r5, 80015ea <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80015e4:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80015e6:	421d      	tst	r5, r3
 80015e8:	d003      	beq.n	80015f2 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 80015ea:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80015ee:	f7ff ffd7 	bl	80015a0 <chEvtSignalI>
    elp = elp->next;
 80015f2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80015f4:	42a6      	cmp	r6, r4
 80015f6:	d1f1      	bne.n	80015dc <chEvtBroadcastFlagsI+0xc>
}
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	bf00      	nop
 80015fc:	0000      	movs	r0, r0
	...

08001600 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <chMtxUnlockS+0x4c>)
void chMtxUnlockS(mutex_t *mp) {
 8001602:	b430      	push	{r4, r5}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001604:	6804      	ldr	r4, [r0, #0]
  thread_t *ctp = currp;
 8001606:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8001608:	68c3      	ldr	r3, [r0, #12]
 800160a:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800160c:	4284      	cmp	r4, r0
 800160e:	d018      	beq.n	8001642 <chMtxUnlockS+0x42>
 8001610:	4601      	mov	r1, r0
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001612:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001614:	b14b      	cbz	r3, 800162a <chMtxUnlockS+0x2a>
 8001616:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001618:	4293      	cmp	r3, r2
 800161a:	d003      	beq.n	8001624 <chMtxUnlockS+0x24>
 800161c:	6892      	ldr	r2, [r2, #8]
 800161e:	4290      	cmp	r0, r2
 8001620:	bf38      	it	cc
 8001622:	4610      	movcc	r0, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001624:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f5      	bne.n	8001616 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800162a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800162c:	6823      	ldr	r3, [r4, #0]
      ctp->prio = newprio;
 800162e:	60a8      	str	r0, [r5, #8]
 8001630:	600b      	str	r3, [r1, #0]
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8001632:	4620      	mov	r0, r4
  tqp->next->queue.prev = (thread_t *)tqp;
 8001634:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8001636:	e9c1 4202 	strd	r4, r2, [r1, #8]
      tp->mtxlist = mp;
 800163a:	63a1      	str	r1, [r4, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 800163c:	bc30      	pop	{r4, r5}
      (void) chSchReadyI(tp);
 800163e:	f7ff bedf 	b.w	8001400 <chSchReadyI>
      mp->owner = NULL;
 8001642:	2300      	movs	r3, #0
 8001644:	60a3      	str	r3, [r4, #8]
}
 8001646:	bc30      	pop	{r4, r5}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000da0 	.word	0x20000da0

08001650 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8001650:	6883      	ldr	r3, [r0, #8]
 8001652:	3301      	adds	r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	6083      	str	r3, [r0, #8]
 8001658:	dd00      	ble.n	800165c <chSemSignalI+0xc>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 800165a:	4770      	bx	lr
  thread_t *tp = tqp->next;
 800165c:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = MSG_OK;
 8001662:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001664:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8001666:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8001668:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800166a:	f7ff bec9 	b.w	8001400 <chSchReadyI>
 800166e:	bf00      	nop

08001670 <chThdResumeI>:
  if (*trp != NULL) {
 8001670:	6803      	ldr	r3, [r0, #0]
 8001672:	b12b      	cbz	r3, 8001680 <chThdResumeI+0x10>
    *trp = NULL;
 8001674:	2200      	movs	r2, #0
 8001676:	6002      	str	r2, [r0, #0]
    (void) chSchReadyI(tp);
 8001678:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 800167a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800167c:	f7ff bec0 	b.w	8001400 <chSchReadyI>
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
	...

08001690 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <chVTDoResetI+0x70>)
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8001696:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 8001698:	d00f      	beq.n	80016ba <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800169a:	e9d0 2100 	ldrd	r2, r1, [r0]
 800169e:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 80016a0:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80016a2:	331c      	adds	r3, #28
    vtp->func = NULL;
 80016a4:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80016a6:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 80016a8:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 80016aa:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80016ac:	d003      	beq.n	80016b6 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 80016ae:	6881      	ldr	r1, [r0, #8]
 80016b0:	6893      	ldr	r3, [r2, #8]
 80016b2:	440b      	add	r3, r1
 80016b4:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80016b6:	bc10      	pop	{r4}
 80016b8:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 80016ba:	4618      	mov	r0, r3
 80016bc:	6811      	ldr	r1, [r2, #0]
 80016be:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 80016c2:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80016c4:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80016c6:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 80016c8:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80016ca:	d014      	beq.n	80016f6 <chVTDoResetI+0x66>
  ch.vtlist.next->delta += vtp->delta;
 80016cc:	6894      	ldr	r4, [r2, #8]
 80016ce:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80016d2:	4414      	add	r4, r2
 80016d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d8:	608c      	str	r4, [r1, #8]
 80016da:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80016dc:	1ad2      	subs	r2, r2, r3
  if (nowdelta >= ch.vtlist.next->delta) {
 80016de:	4294      	cmp	r4, r2
 80016e0:	d9e9      	bls.n	80016b6 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 80016e2:	1aa1      	subs	r1, r4, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80016e4:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80016e6:	bf98      	it	ls
 80016e8:	1c94      	addls	r4, r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80016ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 80016ee:	4423      	add	r3, r4
 80016f0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80016f2:	bc10      	pop	{r4}
 80016f4:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0;
 80016f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016fa:	60dc      	str	r4, [r3, #12]
 80016fc:	e7db      	b.n	80016b6 <chVTDoResetI+0x26>
 80016fe:	bf00      	nop
 8001700:	20000da0 	.word	0x20000da0
	...

08001710 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001710:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001712:	4d1f      	ldr	r5, [pc, #124]	; (8001790 <chVTDoSetI+0x80>)
 8001714:	462e      	mov	r6, r5
 8001716:	2902      	cmp	r1, #2
 8001718:	f856 4f1c 	ldr.w	r4, [r6, #28]!
  vtp->func = vtfunc;
 800171c:	60c2      	str	r2, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800171e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001722:	bf38      	it	cc
 8001724:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001726:	42b4      	cmp	r4, r6
  vtp->par = par;
 8001728:	6103      	str	r3, [r0, #16]
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800172c:	d01f      	beq.n	800176e <chVTDoSetI+0x5e>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800172e:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8001730:	68a3      	ldr	r3, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8001732:	1b92      	subs	r2, r2, r6
 8001734:	1889      	adds	r1, r1, r2
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001736:	d216      	bcs.n	8001766 <chVTDoSetI+0x56>
    else if (delta < p->delta) {
 8001738:	428b      	cmp	r3, r1
 800173a:	d826      	bhi.n	800178a <chVTDoSetI+0x7a>
  while (p->delta < delta) {
 800173c:	4299      	cmp	r1, r3
 800173e:	d904      	bls.n	800174a <chVTDoSetI+0x3a>
    p = p->next;
 8001740:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 8001742:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 8001744:	68a3      	ldr	r3, [r4, #8]
 8001746:	428b      	cmp	r3, r1
 8001748:	d3fa      	bcc.n	8001740 <chVTDoSetI+0x30>
  vtp->prev = vtp->next->prev;
 800174a:	6863      	ldr	r3, [r4, #4]
 800174c:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 8001750:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 8001752:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 8001754:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 8001756:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 800175c:	1a59      	subs	r1, r3, r1
 800175e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001760:	626a      	str	r2, [r5, #36]	; 0x24
}
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	4770      	bx	lr
      p = p->next;
 8001766:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 8001768:	1ac9      	subs	r1, r1, r3
 800176a:	68a3      	ldr	r3, [r4, #8]
 800176c:	e7e6      	b.n	800173c <chVTDoSetI+0x2c>
      ch.vtlist.lasttime = now;
 800176e:	62aa      	str	r2, [r5, #40]	; 0x28
  return systime + (systime_t)interval;
 8001770:	188e      	adds	r6, r1, r2
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001772:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8001774:	2200      	movs	r2, #0
      ch.vtlist.prev = vtp;
 8001776:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800177a:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 800177e:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001780:	637e      	str	r6, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001782:	613a      	str	r2, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001784:	60fb      	str	r3, [r7, #12]
}
 8001786:	bcf0      	pop	{r4, r5, r6, r7}
 8001788:	4770      	bx	lr
 800178a:	440e      	add	r6, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800178c:	637e      	str	r6, [r7, #52]	; 0x34
 800178e:	e7d5      	b.n	800173c <chVTDoSetI+0x2c>
 8001790:	20000da0 	.word	0x20000da0
	...

080017a0 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017a0:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80017a4:	2320      	movs	r3, #32
 80017a6:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 80017aa:	4770      	bx	lr
 80017ac:	0000      	movs	r0, r0
	...

080017b0 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80017b0:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 80017b2:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80017b4:	d512      	bpl.n	80017dc <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <chSysIntegrityCheckI+0xac>)
 80017b8:	e9d3 1400 	ldrd	r1, r4, [r3]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017bc:	4299      	cmp	r1, r3
 80017be:	d041      	beq.n	8001844 <chSysIntegrityCheckI+0x94>
    n = (cnt_t)0;
 80017c0:	2200      	movs	r2, #0
      tp = tp->queue.next;
 80017c2:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017c4:	4299      	cmp	r1, r3
      n++;
 80017c6:	f102 0201 	add.w	r2, r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017ca:	d1fa      	bne.n	80017c2 <chSysIntegrityCheckI+0x12>
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017cc:	428c      	cmp	r4, r1
 80017ce:	d036      	beq.n	800183e <chSysIntegrityCheckI+0x8e>
      tp = tp->queue.prev;
 80017d0:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017d2:	429c      	cmp	r4, r3
      n--;
 80017d4:	f102 32ff 	add.w	r2, r2, #4294967295
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017d8:	d1fa      	bne.n	80017d0 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 80017da:	bb82      	cbnz	r2, 800183e <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 80017dc:	0783      	lsls	r3, r0, #30
 80017de:	d513      	bpl.n	8001808 <chSysIntegrityCheckI+0x58>
    vtp = ch.vtlist.next;
 80017e0:	4c1e      	ldr	r4, [pc, #120]	; (800185c <chSysIntegrityCheckI+0xac>)
 80017e2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017e6:	341c      	adds	r4, #28
 80017e8:	42a2      	cmp	r2, r4
 80017ea:	d02f      	beq.n	800184c <chSysIntegrityCheckI+0x9c>
    n = (cnt_t)0;
 80017ec:	2300      	movs	r3, #0
      vtp = vtp->next;
 80017ee:	6812      	ldr	r2, [r2, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017f0:	42a2      	cmp	r2, r4
      n++;
 80017f2:	f103 0301 	add.w	r3, r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017f6:	d1fa      	bne.n	80017ee <chSysIntegrityCheckI+0x3e>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017f8:	4291      	cmp	r1, r2
 80017fa:	d020      	beq.n	800183e <chSysIntegrityCheckI+0x8e>
      vtp = vtp->prev;
 80017fc:	6849      	ldr	r1, [r1, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017fe:	42a1      	cmp	r1, r4
      n--;
 8001800:	f103 33ff 	add.w	r3, r3, #4294967295
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001804:	d1fa      	bne.n	80017fc <chSysIntegrityCheckI+0x4c>
    if (n != (cnt_t)0) {
 8001806:	b9d3      	cbnz	r3, 800183e <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8001808:	f010 0004 	ands.w	r0, r0, #4
 800180c:	d015      	beq.n	800183a <chSysIntegrityCheckI+0x8a>
    tp = ch.rlist.newer;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <chSysIntegrityCheckI+0xac>)
 8001810:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001814:	429a      	cmp	r2, r3
    n = (cnt_t)0;
 8001816:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 800181a:	d01b      	beq.n	8001854 <chSysIntegrityCheckI+0xa4>
      tp = tp->newer;
 800181c:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800181e:	429a      	cmp	r2, r3
      n++;
 8001820:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8001824:	d1fa      	bne.n	800181c <chSysIntegrityCheckI+0x6c>
    while (tp != (thread_t *)&ch.rlist) {
 8001826:	4291      	cmp	r1, r2
 8001828:	d009      	beq.n	800183e <chSysIntegrityCheckI+0x8e>
      tp = tp->older;
 800182a:	6949      	ldr	r1, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800182c:	4299      	cmp	r1, r3
      n--;
 800182e:	f100 30ff 	add.w	r0, r0, #4294967295
    while (tp != (thread_t *)&ch.rlist) {
 8001832:	d1fa      	bne.n	800182a <chSysIntegrityCheckI+0x7a>
    if (n != (cnt_t)0) {
 8001834:	3000      	adds	r0, #0
 8001836:	bf18      	it	ne
 8001838:	2001      	movne	r0, #1
}
 800183a:	bc10      	pop	{r4}
 800183c:	4770      	bx	lr
      return true;
 800183e:	2001      	movs	r0, #1
}
 8001840:	bc10      	pop	{r4}
 8001842:	4770      	bx	lr
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001844:	429c      	cmp	r4, r3
 8001846:	d0c9      	beq.n	80017dc <chSysIntegrityCheckI+0x2c>
    n = (cnt_t)0;
 8001848:	2200      	movs	r2, #0
 800184a:	e7c1      	b.n	80017d0 <chSysIntegrityCheckI+0x20>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800184c:	42a1      	cmp	r1, r4
 800184e:	d0db      	beq.n	8001808 <chSysIntegrityCheckI+0x58>
    n = (cnt_t)0;
 8001850:	2300      	movs	r3, #0
 8001852:	e7d3      	b.n	80017fc <chSysIntegrityCheckI+0x4c>
    while (tp != (thread_t *)&ch.rlist) {
 8001854:	4291      	cmp	r1, r2
 8001856:	d1e8      	bne.n	800182a <chSysIntegrityCheckI+0x7a>
 8001858:	e7ef      	b.n	800183a <chSysIntegrityCheckI+0x8a>
 800185a:	bf00      	nop
 800185c:	20000da0 	.word	0x20000da0

08001860 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 8001860:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8001862:	4d24      	ldr	r5, [pc, #144]	; (80018f4 <rt_test_002_001_execute+0x94>)
 8001864:	2001      	movs	r0, #1
 8001866:	6028      	str	r0, [r5, #0]
 8001868:	2420      	movs	r4, #32
 800186a:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 800186e:	f7ff ff9f 	bl	80017b0 <chSysIntegrityCheckI>
 8001872:	2300      	movs	r3, #0
 8001874:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8001878:	f080 0001 	eor.w	r0, r0, #1
 800187c:	b2c0      	uxtb	r0, r0
 800187e:	491e      	ldr	r1, [pc, #120]	; (80018f8 <rt_test_002_001_execute+0x98>)
 8001880:	f7ff fa06 	bl	8000c90 <_test_assert>
 8001884:	b100      	cbz	r0, 8001888 <rt_test_002_001_execute+0x28>
}
 8001886:	bd70      	pop	{r4, r5, r6, pc}
 8001888:	4606      	mov	r6, r0
  test_set_step(2);
 800188a:	2002      	movs	r0, #2
 800188c:	6028      	str	r0, [r5, #0]
 800188e:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8001892:	f7ff ff8d 	bl	80017b0 <chSysIntegrityCheckI>
 8001896:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "virtual timers list check failed");
 800189a:	f080 0001 	eor.w	r0, r0, #1
 800189e:	b2c0      	uxtb	r0, r0
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <rt_test_002_001_execute+0x9c>)
 80018a2:	f7ff f9f5 	bl	8000c90 <_test_assert>
 80018a6:	4606      	mov	r6, r0
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d1ec      	bne.n	8001886 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 80018ac:	2303      	movs	r3, #3
 80018ae:	602b      	str	r3, [r5, #0]
 80018b0:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80018b4:	2004      	movs	r0, #4
 80018b6:	f7ff ff7b 	bl	80017b0 <chSysIntegrityCheckI>
 80018ba:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "registry list check failed");
 80018be:	f080 0001 	eor.w	r0, r0, #1
 80018c2:	b2c0      	uxtb	r0, r0
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <rt_test_002_001_execute+0xa0>)
 80018c6:	f7ff f9e3 	bl	8000c90 <_test_assert>
 80018ca:	4606      	mov	r6, r0
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d1da      	bne.n	8001886 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 80018d0:	2304      	movs	r3, #4
 80018d2:	602b      	str	r3, [r5, #0]
 80018d4:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80018d8:	2008      	movs	r0, #8
 80018da:	f7ff ff69 	bl	80017b0 <chSysIntegrityCheckI>
 80018de:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "port layer check failed");
 80018e2:	f080 0001 	eor.w	r0, r0, #1
 80018e6:	b2c0      	uxtb	r0, r0
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <rt_test_002_001_execute+0xa4>)
}
 80018ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 80018ee:	f7ff b9cf 	b.w	8000c90 <_test_assert>
 80018f2:	bf00      	nop
 80018f4:	20001774 	.word	0x20001774
 80018f8:	0800ac30 	.word	0x0800ac30
 80018fc:	0800ac48 	.word	0x0800ac48
 8001900:	0800ac6c 	.word	0x0800ac6c
 8001904:	0800ac88 	.word	0x0800ac88
	...

08001910 <_idle_thread>:
static void _idle_thread(void *p) {
 8001910:	e7fe      	b.n	8001910 <_idle_thread>
 8001912:	bf00      	nop
	...

08001920 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001920:	2000      	movs	r0, #0
 8001922:	4770      	bx	lr
	...

08001930 <rt_test_010_012_execute>:
 * - [10.12.8] The size of an event listener is printed.
 * - [10.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_010_012_execute(void) {
 8001930:	b570      	push	{r4, r5, r6, lr}

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8001932:	4d33      	ldr	r5, [pc, #204]	; (8001a00 <rt_test_010_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8001934:	4c33      	ldr	r4, [pc, #204]	; (8001a04 <rt_test_010_012_execute+0xd4>)
    test_print("--- System: ");
 8001936:	4834      	ldr	r0, [pc, #208]	; (8001a08 <rt_test_010_012_execute+0xd8>)
  test_set_step(1);
 8001938:	2301      	movs	r3, #1
 800193a:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 800193c:	f7ff faa8 	bl	8000e90 <test_print>
 8001940:	2078      	movs	r0, #120	; 0x78
 8001942:	f7ff fa05 	bl	8000d50 <test_printn.part.0>
    test_println(" bytes");
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff fa82 	bl	8000e50 <test_println>
  }

  /* [10.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 800194c:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 800194e:	482f      	ldr	r0, [pc, #188]	; (8001a0c <rt_test_010_012_execute+0xdc>)
  test_set_step(2);
 8001950:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 8001952:	f7ff fa9d 	bl	8000e90 <test_print>
 8001956:	2044      	movs	r0, #68	; 0x44
 8001958:	f7ff f9fa 	bl	8000d50 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff fa77 	bl	8000e50 <test_println>
  }

  /* [10.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8001962:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 8001964:	482a      	ldr	r0, [pc, #168]	; (8001a10 <rt_test_010_012_execute+0xe0>)
  test_set_step(3);
 8001966:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 8001968:	f7ff fa92 	bl	8000e90 <test_print>
 800196c:	2014      	movs	r0, #20
 800196e:	f7ff f9ef 	bl	8000d50 <test_printn.part.0>
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff fa6c 	bl	8000e50 <test_println>
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8001978:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 800197a:	4826      	ldr	r0, [pc, #152]	; (8001a14 <rt_test_010_012_execute+0xe4>)
  test_set_step(4);
 800197c:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 800197e:	f7ff fa87 	bl	8000e90 <test_print>
 8001982:	200c      	movs	r0, #12
 8001984:	f7ff f9e4 	bl	8000d50 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff fa61 	bl	8000e50 <test_println>
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 800198e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8001990:	4821      	ldr	r0, [pc, #132]	; (8001a18 <rt_test_010_012_execute+0xe8>)
  test_set_step(5);
 8001992:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8001994:	f7ff fa7c 	bl	8000e90 <test_print>
 8001998:	2010      	movs	r0, #16
 800199a:	f7ff f9d9 	bl	8000d50 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff fa56 	bl	8000e50 <test_println>
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 80019a4:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 80019a6:	481d      	ldr	r0, [pc, #116]	; (8001a1c <rt_test_010_012_execute+0xec>)
  test_set_step(6);
 80019a8:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 80019aa:	f7ff fa71 	bl	8000e90 <test_print>
 80019ae:	2008      	movs	r0, #8
 80019b0:	f7ff f9ce 	bl	8000d50 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff fa4b 	bl	8000e50 <test_println>
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
 80019ba:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 80019bc:	4818      	ldr	r0, [pc, #96]	; (8001a20 <rt_test_010_012_execute+0xf0>)
  test_set_step(7);
 80019be:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 80019c0:	f7ff fa66 	bl	8000e90 <test_print>
 80019c4:	4630      	mov	r0, r6
 80019c6:	f7ff f9c3 	bl	8000d50 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fa40 	bl	8000e50 <test_println>
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 80019d0:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <rt_test_010_012_execute+0xf4>)
  test_set_step(8);
 80019d4:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 80019d6:	f7ff fa5b 	bl	8000e90 <test_print>
 80019da:	2014      	movs	r0, #20
 80019dc:	f7ff f9b8 	bl	8000d50 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fa35 	bl	8000e50 <test_println>
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 80019e6:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <rt_test_010_012_execute+0xf8>)
  test_set_step(9);
 80019ea:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 80019ec:	f7ff fa50 	bl	8000e90 <test_print>
 80019f0:	2028      	movs	r0, #40	; 0x28
 80019f2:	f7ff f9ad 	bl	8000d50 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 80019f6:	4620      	mov	r0, r4
#endif
  }
}
 80019f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 80019fc:	f7ff ba28 	b.w	8000e50 <test_println>
 8001a00:	20001774 	.word	0x20001774
 8001a04:	0800b2dc 	.word	0x0800b2dc
 8001a08:	0800b2cc 	.word	0x0800b2cc
 8001a0c:	0800b2e4 	.word	0x0800b2e4
 8001a10:	0800b2f4 	.word	0x0800b2f4
 8001a14:	0800b304 	.word	0x0800b304
 8001a18:	0800b314 	.word	0x0800b314
 8001a1c:	0800b324 	.word	0x0800b324
 8001a20:	0800b334 	.word	0x0800b334
 8001a24:	0800b344 	.word	0x0800b344
 8001a28:	0800b354 	.word	0x0800b354
 8001a2c:	00000000 	.word	0x00000000

08001a30 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8001a30:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001a32:	4bc9      	ldr	r3, [pc, #804]	; (8001d58 <rt_test_001_003_execute+0x328>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8001a34:	4cc9      	ldr	r4, [pc, #804]	; (8001d5c <rt_test_001_003_execute+0x32c>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001a36:	48ca      	ldr	r0, [pc, #808]	; (8001d60 <rt_test_001_003_execute+0x330>)
  test_set_step(1);
 8001a38:	2501      	movs	r5, #1
 8001a3a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001a3c:	f7ff fa28 	bl	8000e90 <test_print>
 8001a40:	2020      	movs	r0, #32
 8001a42:	f7ff f985 	bl	8000d50 <test_printn.part.0>
    test_println("");
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff fa02 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8001a4c:	48c5      	ldr	r0, [pc, #788]	; (8001d64 <rt_test_001_003_execute+0x334>)
 8001a4e:	f7ff fa1f 	bl	8000e90 <test_print>
 8001a52:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a56:	f7ff f97b 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff f9f8 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8001a60:	48c1      	ldr	r0, [pc, #772]	; (8001d68 <rt_test_001_003_execute+0x338>)
 8001a62:	f7ff fa15 	bl	8000e90 <test_print>
 8001a66:	2020      	movs	r0, #32
 8001a68:	f7ff f972 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff f9ef 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8001a72:	48be      	ldr	r0, [pc, #760]	; (8001d6c <rt_test_001_003_execute+0x33c>)
 8001a74:	f7ff fa0c 	bl	8000e90 <test_print>
 8001a78:	2020      	movs	r0, #32
 8001a7a:	f7ff f969 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff f9e6 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8001a84:	48ba      	ldr	r0, [pc, #744]	; (8001d70 <rt_test_001_003_execute+0x340>)
 8001a86:	f7ff fa03 	bl	8000e90 <test_print>
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f7ff f960 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff f9dd 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8001a96:	48b7      	ldr	r0, [pc, #732]	; (8001d74 <rt_test_001_003_execute+0x344>)
 8001a98:	f7ff f9fa 	bl	8000e90 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff f987 	bl	8000db0 <test_printn>
    test_println("");
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff f9d4 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8001aa8:	48b3      	ldr	r0, [pc, #716]	; (8001d78 <rt_test_001_003_execute+0x348>)
 8001aaa:	f7ff f9f1 	bl	8000e90 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff f97e 	bl	8000db0 <test_printn>
    test_println("");
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff f9cb 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8001aba:	48b0      	ldr	r0, [pc, #704]	; (8001d7c <rt_test_001_003_execute+0x34c>)
 8001abc:	f7ff f9e8 	bl	8000e90 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff f975 	bl	8000db0 <test_printn>
    test_println("");
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff f9c2 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8001acc:	48ac      	ldr	r0, [pc, #688]	; (8001d80 <rt_test_001_003_execute+0x350>)
 8001ace:	f7ff f9df 	bl	8000e90 <test_print>
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f7ff f93c 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff f9b9 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 8001ade:	48a9      	ldr	r0, [pc, #676]	; (8001d84 <rt_test_001_003_execute+0x354>)
 8001ae0:	f7ff f9d6 	bl	8000e90 <test_print>
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f7ff f933 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff f9b0 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8001af0:	48a5      	ldr	r0, [pc, #660]	; (8001d88 <rt_test_001_003_execute+0x358>)
 8001af2:	f7ff f9cd 	bl	8000e90 <test_print>
 8001af6:	4628      	mov	r0, r5
 8001af8:	f7ff f92a 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff f9a7 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8001b02:	48a2      	ldr	r0, [pc, #648]	; (8001d8c <rt_test_001_003_execute+0x35c>)
 8001b04:	f7ff f9c4 	bl	8000e90 <test_print>
 8001b08:	4628      	mov	r0, r5
 8001b0a:	f7ff f921 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff f99e 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8001b14:	489e      	ldr	r0, [pc, #632]	; (8001d90 <rt_test_001_003_execute+0x360>)
 8001b16:	f7ff f9bb 	bl	8000e90 <test_print>
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f7ff f918 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7ff f995 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8001b26:	489b      	ldr	r0, [pc, #620]	; (8001d94 <rt_test_001_003_execute+0x364>)
 8001b28:	f7ff f9b2 	bl	8000e90 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff f93f 	bl	8000db0 <test_printn>
    test_println("");
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff f98c 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8001b38:	4897      	ldr	r0, [pc, #604]	; (8001d98 <rt_test_001_003_execute+0x368>)
 8001b3a:	f7ff f9a9 	bl	8000e90 <test_print>
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f7ff f906 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff f983 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8001b4a:	4894      	ldr	r0, [pc, #592]	; (8001d9c <rt_test_001_003_execute+0x36c>)
 8001b4c:	f7ff f9a0 	bl	8000e90 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff f92d 	bl	8000db0 <test_printn>
    test_println("");   
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff f97a 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8001b5c:	4890      	ldr	r0, [pc, #576]	; (8001da0 <rt_test_001_003_execute+0x370>)
 8001b5e:	f7ff f997 	bl	8000e90 <test_print>
 8001b62:	4628      	mov	r0, r5
 8001b64:	f7ff f8f4 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7ff f971 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8001b6e:	488d      	ldr	r0, [pc, #564]	; (8001da4 <rt_test_001_003_execute+0x374>)
 8001b70:	f7ff f98e 	bl	8000e90 <test_print>
 8001b74:	4628      	mov	r0, r5
 8001b76:	f7ff f8eb 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff f968 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8001b80:	4889      	ldr	r0, [pc, #548]	; (8001da8 <rt_test_001_003_execute+0x378>)
 8001b82:	f7ff f985 	bl	8000e90 <test_print>
 8001b86:	4628      	mov	r0, r5
 8001b88:	f7ff f8e2 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff f95f 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8001b92:	4886      	ldr	r0, [pc, #536]	; (8001dac <rt_test_001_003_execute+0x37c>)
 8001b94:	f7ff f97c 	bl	8000e90 <test_print>
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f7ff f8d9 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff f956 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8001ba4:	4882      	ldr	r0, [pc, #520]	; (8001db0 <rt_test_001_003_execute+0x380>)
 8001ba6:	f7ff f973 	bl	8000e90 <test_print>
 8001baa:	4628      	mov	r0, r5
 8001bac:	f7ff f8d0 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff f94d 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8001bb6:	487f      	ldr	r0, [pc, #508]	; (8001db4 <rt_test_001_003_execute+0x384>)
 8001bb8:	f7ff f96a 	bl	8000e90 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff f8f7 	bl	8000db0 <test_printn>
    test_println("");
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f7ff f944 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8001bc8:	487b      	ldr	r0, [pc, #492]	; (8001db8 <rt_test_001_003_execute+0x388>)
 8001bca:	f7ff f961 	bl	8000e90 <test_print>
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f7ff f8be 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff f93b 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 8001bda:	4878      	ldr	r0, [pc, #480]	; (8001dbc <rt_test_001_003_execute+0x38c>)
 8001bdc:	f7ff f958 	bl	8000e90 <test_print>
 8001be0:	4628      	mov	r0, r5
 8001be2:	f7ff f8b5 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7ff f932 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 8001bec:	4874      	ldr	r0, [pc, #464]	; (8001dc0 <rt_test_001_003_execute+0x390>)
 8001bee:	f7ff f94f 	bl	8000e90 <test_print>
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f7ff f8ac 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f7ff f929 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 8001bfe:	4871      	ldr	r0, [pc, #452]	; (8001dc4 <rt_test_001_003_execute+0x394>)
 8001c00:	f7ff f946 	bl	8000e90 <test_print>
 8001c04:	4628      	mov	r0, r5
 8001c06:	f7ff f8a3 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff f920 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8001c10:	486d      	ldr	r0, [pc, #436]	; (8001dc8 <rt_test_001_003_execute+0x398>)
 8001c12:	f7ff f93d 	bl	8000e90 <test_print>
 8001c16:	4628      	mov	r0, r5
 8001c18:	f7ff f89a 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff f917 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8001c22:	486a      	ldr	r0, [pc, #424]	; (8001dcc <rt_test_001_003_execute+0x39c>)
 8001c24:	f7ff f934 	bl	8000e90 <test_print>
 8001c28:	4628      	mov	r0, r5
 8001c2a:	f7ff f891 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff f90e 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8001c34:	4866      	ldr	r0, [pc, #408]	; (8001dd0 <rt_test_001_003_execute+0x3a0>)
 8001c36:	f7ff f92b 	bl	8000e90 <test_print>
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f7ff f888 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7ff f905 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8001c46:	4863      	ldr	r0, [pc, #396]	; (8001dd4 <rt_test_001_003_execute+0x3a4>)
 8001c48:	f7ff f922 	bl	8000e90 <test_print>
 8001c4c:	2008      	movs	r0, #8
 8001c4e:	f7ff f87f 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff f8fc 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8001c58:	485f      	ldr	r0, [pc, #380]	; (8001dd8 <rt_test_001_003_execute+0x3a8>)
 8001c5a:	f7ff f919 	bl	8000e90 <test_print>
 8001c5e:	4628      	mov	r0, r5
 8001c60:	f7ff f876 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7ff f8f3 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8001c6a:	485c      	ldr	r0, [pc, #368]	; (8001ddc <rt_test_001_003_execute+0x3ac>)
 8001c6c:	f7ff f910 	bl	8000e90 <test_print>
 8001c70:	4628      	mov	r0, r5
 8001c72:	f7ff f86d 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8001c76:	4620      	mov	r0, r4
 8001c78:	f7ff f8ea 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8001c7c:	4858      	ldr	r0, [pc, #352]	; (8001de0 <rt_test_001_003_execute+0x3b0>)
 8001c7e:	f7ff f907 	bl	8000e90 <test_print>
 8001c82:	4628      	mov	r0, r5
 8001c84:	f7ff f864 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f7ff f8e1 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8001c8e:	4855      	ldr	r0, [pc, #340]	; (8001de4 <rt_test_001_003_execute+0x3b4>)
 8001c90:	f7ff f8fe 	bl	8000e90 <test_print>
 8001c94:	4628      	mov	r0, r5
 8001c96:	f7ff f85b 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff f8d8 	bl	8000e50 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8001ca0:	4851      	ldr	r0, [pc, #324]	; (8001de8 <rt_test_001_003_execute+0x3b8>)
 8001ca2:	f7ff f8f5 	bl	8000e90 <test_print>
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	f7ff f852 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff f8cf 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8001cb2:	484e      	ldr	r0, [pc, #312]	; (8001dec <rt_test_001_003_execute+0x3bc>)
 8001cb4:	f7ff f8ec 	bl	8000e90 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff f879 	bl	8000db0 <test_printn>
    test_println("");
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff f8c6 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8001cc4:	484a      	ldr	r0, [pc, #296]	; (8001df0 <rt_test_001_003_execute+0x3c0>)
 8001cc6:	f7ff f8e3 	bl	8000e90 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff f870 	bl	8000db0 <test_printn>
    test_println("");
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7ff f8bd 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8001cd6:	4847      	ldr	r0, [pc, #284]	; (8001df4 <rt_test_001_003_execute+0x3c4>)
 8001cd8:	f7ff f8da 	bl	8000e90 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7ff f867 	bl	8000db0 <test_printn>
    test_println("");
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f7ff f8b4 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8001ce8:	4843      	ldr	r0, [pc, #268]	; (8001df8 <rt_test_001_003_execute+0x3c8>)
 8001cea:	f7ff f8d1 	bl	8000e90 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff f85e 	bl	8000db0 <test_printn>
    test_println("");
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff f8ab 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8001cfa:	4840      	ldr	r0, [pc, #256]	; (8001dfc <rt_test_001_003_execute+0x3cc>)
 8001cfc:	f7ff f8c8 	bl	8000e90 <test_print>
 8001d00:	20ff      	movs	r0, #255	; 0xff
 8001d02:	f7ff f825 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff f8a2 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8001d0c:	483c      	ldr	r0, [pc, #240]	; (8001e00 <rt_test_001_003_execute+0x3d0>)
 8001d0e:	f7ff f8bf 	bl	8000e90 <test_print>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	f7ff f81c 	bl	8000d50 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f7ff f899 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8001d1e:	4839      	ldr	r0, [pc, #228]	; (8001e04 <rt_test_001_003_execute+0x3d4>)
 8001d20:	f7ff f8b6 	bl	8000e90 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff f843 	bl	8000db0 <test_printn>
    test_println("");
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f7ff f890 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8001d30:	4835      	ldr	r0, [pc, #212]	; (8001e08 <rt_test_001_003_execute+0x3d8>)
 8001d32:	f7ff f8ad 	bl	8000e90 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff f83a 	bl	8000db0 <test_printn>
    test_println("");
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f7ff f887 	bl	8000e50 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8001d42:	4832      	ldr	r0, [pc, #200]	; (8001e0c <rt_test_001_003_execute+0x3dc>)
 8001d44:	f7ff f8a4 	bl	8000e90 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff f831 	bl	8000db0 <test_printn>
    test_println("");
 8001d4e:	4620      	mov	r0, r4
  }
}
 8001d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001d54:	f7ff b87c 	b.w	8000e50 <test_println>
 8001d58:	20001774 	.word	0x20001774
 8001d5c:	08009c04 	.word	0x08009c04
 8001d60:	0800a490 	.word	0x0800a490
 8001d64:	0800a4bc 	.word	0x0800a4bc
 8001d68:	0800a4e8 	.word	0x0800a4e8
 8001d6c:	0800a514 	.word	0x0800a514
 8001d70:	0800a540 	.word	0x0800a540
 8001d74:	0800a56c 	.word	0x0800a56c
 8001d78:	0800a598 	.word	0x0800a598
 8001d7c:	0800a5c4 	.word	0x0800a5c4
 8001d80:	0800a5f0 	.word	0x0800a5f0
 8001d84:	0800a61c 	.word	0x0800a61c
 8001d88:	0800a648 	.word	0x0800a648
 8001d8c:	0800a674 	.word	0x0800a674
 8001d90:	0800a6a0 	.word	0x0800a6a0
 8001d94:	0800a6cc 	.word	0x0800a6cc
 8001d98:	0800a6f8 	.word	0x0800a6f8
 8001d9c:	0800a724 	.word	0x0800a724
 8001da0:	0800a750 	.word	0x0800a750
 8001da4:	0800a77c 	.word	0x0800a77c
 8001da8:	0800a7a8 	.word	0x0800a7a8
 8001dac:	0800a7d4 	.word	0x0800a7d4
 8001db0:	0800a800 	.word	0x0800a800
 8001db4:	0800a82c 	.word	0x0800a82c
 8001db8:	0800a858 	.word	0x0800a858
 8001dbc:	0800a884 	.word	0x0800a884
 8001dc0:	0800a8b0 	.word	0x0800a8b0
 8001dc4:	0800a8dc 	.word	0x0800a8dc
 8001dc8:	0800a908 	.word	0x0800a908
 8001dcc:	0800a934 	.word	0x0800a934
 8001dd0:	0800a960 	.word	0x0800a960
 8001dd4:	0800a98c 	.word	0x0800a98c
 8001dd8:	0800a9b8 	.word	0x0800a9b8
 8001ddc:	0800a9e4 	.word	0x0800a9e4
 8001de0:	0800aa10 	.word	0x0800aa10
 8001de4:	0800aa3c 	.word	0x0800aa3c
 8001de8:	0800aa68 	.word	0x0800aa68
 8001dec:	0800aa94 	.word	0x0800aa94
 8001df0:	0800aac0 	.word	0x0800aac0
 8001df4:	0800aaec 	.word	0x0800aaec
 8001df8:	0800ab18 	.word	0x0800ab18
 8001dfc:	0800ab44 	.word	0x0800ab44
 8001e00:	0800ab70 	.word	0x0800ab70
 8001e04:	0800ab9c 	.word	0x0800ab9c
 8001e08:	0800abc8 	.word	0x0800abc8
 8001e0c:	0800abf4 	.word	0x0800abf4

08001e10 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8001e10:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8001e14:	4819      	ldr	r0, [pc, #100]	; (8001e7c <rt_test_001_002_execute+0x6c>)
    test_println("");
 8001e16:	4c1a      	ldr	r4, [pc, #104]	; (8001e80 <rt_test_001_002_execute+0x70>)
  test_set_step(1);
 8001e18:	2501      	movs	r5, #1
 8001e1a:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 8001e1c:	f7ff f818 	bl	8000e50 <test_println>
    test_print("--- Stable Flag:                        ");
 8001e20:	4818      	ldr	r0, [pc, #96]	; (8001e84 <rt_test_001_002_execute+0x74>)
 8001e22:	f7ff f835 	bl	8000e90 <test_print>
 8001e26:	4628      	mov	r0, r5
 8001e28:	f7fe ff92 	bl	8000d50 <test_printn.part.0>
    test_println("");
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff f80f 	bl	8000e50 <test_println>
    test_print("--- Version String:                     ");
 8001e32:	4815      	ldr	r0, [pc, #84]	; (8001e88 <rt_test_001_002_execute+0x78>)
 8001e34:	f7ff f82c 	bl	8000e90 <test_print>
    test_println(CH_KERNEL_VERSION);
 8001e38:	4814      	ldr	r0, [pc, #80]	; (8001e8c <rt_test_001_002_execute+0x7c>)
 8001e3a:	f7ff f809 	bl	8000e50 <test_println>
    test_print("--- Major Number:                       ");
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <rt_test_001_002_execute+0x80>)
 8001e40:	f7ff f826 	bl	8000e90 <test_print>
 8001e44:	2006      	movs	r0, #6
 8001e46:	f7fe ff83 	bl	8000d50 <test_printn.part.0>
    test_println("");
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff f800 	bl	8000e50 <test_println>
    test_print("--- Minor Number:                       ");
 8001e50:	4810      	ldr	r0, [pc, #64]	; (8001e94 <rt_test_001_002_execute+0x84>)
 8001e52:	f7ff f81d 	bl	8000e90 <test_print>
    test_printn(CH_KERNEL_MINOR);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7fe ffaa 	bl	8000db0 <test_printn>
    test_println("");
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f7fe fff7 	bl	8000e50 <test_println>
    test_print("--- Patch Number:                       ");
 8001e62:	480d      	ldr	r0, [pc, #52]	; (8001e98 <rt_test_001_002_execute+0x88>)
 8001e64:	f7ff f814 	bl	8000e90 <test_print>
 8001e68:	4628      	mov	r0, r5
 8001e6a:	f7fe ff71 	bl	8000d50 <test_printn.part.0>
    test_println("");
 8001e6e:	4620      	mov	r0, r4
}
 8001e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001e74:	f7fe bfec 	b.w	8000e50 <test_println>
 8001e78:	20001774 	.word	0x20001774
 8001e7c:	0800a368 	.word	0x0800a368
 8001e80:	08009c04 	.word	0x08009c04
 8001e84:	0800a39c 	.word	0x0800a39c
 8001e88:	0800a3c8 	.word	0x0800a3c8
 8001e8c:	0800a3f4 	.word	0x0800a3f4
 8001e90:	0800a3fc 	.word	0x0800a3fc
 8001e94:	0800a428 	.word	0x0800a428
 8001e98:	0800a454 	.word	0x0800a454
 8001e9c:	00000000 	.word	0x00000000

08001ea0 <rt_test_001_001_execute>:
  test_set_step(1);
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <rt_test_001_001_execute+0x74>)
    test_print("--- Architecture:                       ");
 8001ea2:	481d      	ldr	r0, [pc, #116]	; (8001f18 <rt_test_001_001_execute+0x78>)
static void rt_test_001_001_execute(void) {
 8001ea4:	b510      	push	{r4, lr}
  test_set_step(1);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8001eaa:	f7fe fff1 	bl	8000e90 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8001eae:	481b      	ldr	r0, [pc, #108]	; (8001f1c <rt_test_001_001_execute+0x7c>)
    test_println("");
 8001eb0:	4c1b      	ldr	r4, [pc, #108]	; (8001f20 <rt_test_001_001_execute+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 8001eb2:	f7fe ffcd 	bl	8000e50 <test_println>
    test_print("--- Core Variant:                       ");
 8001eb6:	481b      	ldr	r0, [pc, #108]	; (8001f24 <rt_test_001_001_execute+0x84>)
 8001eb8:	f7fe ffea 	bl	8000e90 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8001ebc:	481a      	ldr	r0, [pc, #104]	; (8001f28 <rt_test_001_001_execute+0x88>)
 8001ebe:	f7fe ffc7 	bl	8000e50 <test_println>
    test_print("--- Compiler:                           ");
 8001ec2:	481a      	ldr	r0, [pc, #104]	; (8001f2c <rt_test_001_001_execute+0x8c>)
 8001ec4:	f7fe ffe4 	bl	8000e90 <test_print>
    test_println(PORT_COMPILER_NAME);
 8001ec8:	4819      	ldr	r0, [pc, #100]	; (8001f30 <rt_test_001_001_execute+0x90>)
 8001eca:	f7fe ffc1 	bl	8000e50 <test_println>
    test_print("--- Port Info:                          ");
 8001ece:	4819      	ldr	r0, [pc, #100]	; (8001f34 <rt_test_001_001_execute+0x94>)
 8001ed0:	f7fe ffde 	bl	8000e90 <test_print>
    test_println(PORT_INFO);
 8001ed4:	4818      	ldr	r0, [pc, #96]	; (8001f38 <rt_test_001_001_execute+0x98>)
 8001ed6:	f7fe ffbb 	bl	8000e50 <test_println>
    test_print("--- Natural alignment:                  ");
 8001eda:	4818      	ldr	r0, [pc, #96]	; (8001f3c <rt_test_001_001_execute+0x9c>)
 8001edc:	f7fe ffd8 	bl	8000e90 <test_print>
 8001ee0:	2004      	movs	r0, #4
 8001ee2:	f7fe ff35 	bl	8000d50 <test_printn.part.0>
    test_println("");
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7fe ffb2 	bl	8000e50 <test_println>
    test_print("--- Stack alignment:                    ");
 8001eec:	4814      	ldr	r0, [pc, #80]	; (8001f40 <rt_test_001_001_execute+0xa0>)
 8001eee:	f7fe ffcf 	bl	8000e90 <test_print>
 8001ef2:	2008      	movs	r0, #8
 8001ef4:	f7fe ff2c 	bl	8000d50 <test_printn.part.0>
    test_println("");
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7fe ffa9 	bl	8000e50 <test_println>
    test_print("--- Working area alignment:             ");
 8001efe:	4811      	ldr	r0, [pc, #68]	; (8001f44 <rt_test_001_001_execute+0xa4>)
 8001f00:	f7fe ffc6 	bl	8000e90 <test_print>
 8001f04:	2008      	movs	r0, #8
 8001f06:	f7fe ff23 	bl	8000d50 <test_printn.part.0>
    test_println("");
 8001f0a:	4620      	mov	r0, r4
}
 8001f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8001f10:	f7fe bf9e 	b.w	8000e50 <test_println>
 8001f14:	20001774 	.word	0x20001774
 8001f18:	0800a1ac 	.word	0x0800a1ac
 8001f1c:	0800a1d8 	.word	0x0800a1d8
 8001f20:	08009c04 	.word	0x08009c04
 8001f24:	0800a1e4 	.word	0x0800a1e4
 8001f28:	0800a210 	.word	0x0800a210
 8001f2c:	0800a21c 	.word	0x0800a21c
 8001f30:	0800a248 	.word	0x0800a248
 8001f34:	0800a290 	.word	0x0800a290
 8001f38:	0800a2bc 	.word	0x0800a2bc
 8001f3c:	0800a2d4 	.word	0x0800a2d4
 8001f40:	0800a300 	.word	0x0800a300
 8001f44:	0800a32c 	.word	0x0800a32c
	...

08001f50 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	460e      	mov	r6, r1
  char *p;

  if (str != NULL)
 8001f54:	b1f0      	cbz	r0, 8001f94 <parse_arguments+0x44>
 8001f56:	4604      	mov	r4, r0
    *saveptr = str;
 8001f58:	6030      	str	r0, [r6, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 8001f5a:	4911      	ldr	r1, [pc, #68]	; (8001fa0 <parse_arguments+0x50>)
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f007 fc81 	bl	8009864 <strspn>

  if (*p == '"') {
 8001f62:	5c21      	ldrb	r1, [r4, r0]
 8001f64:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 8001f66:	eb04 0500 	add.w	r5, r4, r0
  if (*p == '"') {
 8001f6a:	d00d      	beq.n	8001f88 <parse_arguments+0x38>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <parse_arguments+0x50>)
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f007 fc56 	bl	8009820 <strpbrk>
 8001f74:	6030      	str	r0, [r6, #0]
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 8001f76:	b118      	cbz	r0, 8001f80 <parse_arguments+0x30>
    *(*saveptr)++ = '\0';
 8001f78:	1c42      	adds	r2, r0, #1
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	6032      	str	r2, [r6, #0]
 8001f7e:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 8001f80:	782b      	ldrb	r3, [r5, #0]
 8001f82:	b153      	cbz	r3, 8001f9a <parse_arguments+0x4a>
}
 8001f84:	4628      	mov	r0, r5
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8001f88:	3501      	adds	r5, #1
    *saveptr = strpbrk(p, "\"");
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	f007 fb56 	bl	800963c <strchr>
 8001f90:	6030      	str	r0, [r6, #0]
 8001f92:	e7f0      	b.n	8001f76 <parse_arguments+0x26>
  p = *saveptr;
 8001f94:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8001f96:	2c00      	cmp	r4, #0
 8001f98:	d1df      	bne.n	8001f5a <parse_arguments+0xa>
  return *p != '\0' ? p : NULL;
 8001f9a:	2500      	movs	r5, #0
}
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
 8001fa0:	0800a104 	.word	0x0800a104
	...

08001fb0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001fb0:	b40e      	push	{r1, r2, r3}
 8001fb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af0f      	add	r7, sp, #60	; 0x3c
 8001fba:	4604      	mov	r4, r0
 8001fbc:	f857 6b04 	ldr.w	r6, [r7], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001fc0:	9702      	str	r7, [sp, #8]
  int n = 0;
 8001fc2:	f04f 0800 	mov.w	r8, #0
    c = *fmt++;
 8001fc6:	7831      	ldrb	r1, [r6, #0]
 8001fc8:	1c72      	adds	r2, r6, #1
    if (c == 0)
 8001fca:	b161      	cbz	r1, 8001fe6 <chprintf+0x36>
    if (c != '%') {
 8001fcc:	2925      	cmp	r1, #37	; 0x25
 8001fce:	d010      	beq.n	8001ff2 <chprintf+0x42>
      streamPut(chp, (uint8_t)c);
 8001fd0:	6823      	ldr	r3, [r4, #0]
    c = *fmt++;
 8001fd2:	4616      	mov	r6, r2
      streamPut(chp, (uint8_t)c);
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4798      	blx	r3
    c = *fmt++;
 8001fda:	7831      	ldrb	r1, [r6, #0]
      n++;
 8001fdc:	f108 0801 	add.w	r8, r8, #1
    c = *fmt++;
 8001fe0:	1c72      	adds	r2, r6, #1
    if (c == 0)
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d1f2      	bne.n	8001fcc <chprintf+0x1c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001fe6:	4640      	mov	r0, r8
 8001fe8:	b006      	add	sp, #24
 8001fea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fee:	b003      	add	sp, #12
 8001ff0:	4770      	bx	lr
    if (*fmt == '-') {
 8001ff2:	7871      	ldrb	r1, [r6, #1]
 8001ff4:	292d      	cmp	r1, #45	; 0x2d
 8001ff6:	bf03      	ittte	eq
 8001ff8:	78b1      	ldrbeq	r1, [r6, #2]
      fmt++;
 8001ffa:	1cb2      	addeq	r2, r6, #2
      left_align = TRUE;
 8001ffc:	f04f 0c01 	moveq.w	ip, #1
    left_align = FALSE;
 8002000:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8002004:	2930      	cmp	r1, #48	; 0x30
 8002006:	bf03      	ittte	eq
 8002008:	7851      	ldrbeq	r1, [r2, #1]
      fmt++;
 800200a:	3201      	addeq	r2, #1
      filler = '0';
 800200c:	f04f 0a30 	moveq.w	sl, #48	; 0x30
    filler = ' ';
 8002010:	f04f 0a20 	movne.w	sl, #32
 8002014:	3201      	adds	r2, #1
    width = 0;
 8002016:	2500      	movs	r5, #0
 8002018:	e005      	b.n	8002026 <chprintf+0x76>
        c = va_arg(ap, int);
 800201a:	783b      	ldrb	r3, [r7, #0]
 800201c:	3704      	adds	r7, #4
 800201e:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
 8002022:	eb03 0540 	add.w	r5, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8002026:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b09      	cmp	r3, #9
      c = *fmt++;
 800202e:	4696      	mov	lr, r2
      width = width * 10 + c;
 8002030:	eb05 0085 	add.w	r0, r5, r5, lsl #2
      if (c >= '0' && c <= '9')
 8002034:	d9f3      	bls.n	800201e <chprintf+0x6e>
      else if (c == '*')
 8002036:	292a      	cmp	r1, #42	; 0x2a
 8002038:	d0ef      	beq.n	800201a <chprintf+0x6a>
    if (c == '.') {
 800203a:	292e      	cmp	r1, #46	; 0x2e
    precision = 0;
 800203c:	f04f 0200 	mov.w	r2, #0
    if (c == '.') {
 8002040:	d048      	beq.n	80020d4 <chprintf+0x124>
    if (c == 'l' || c == 'L') {
 8002042:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8002046:	2b4c      	cmp	r3, #76	; 0x4c
 8002048:	f10e 0601 	add.w	r6, lr, #1
 800204c:	d04e      	beq.n	80020ec <chprintf+0x13c>
      is_long = (c >= 'A') && (c <= 'Z');
 800204e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
 8002052:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 8002056:	b2db      	uxtb	r3, r3
    switch (c) {
 8002058:	2834      	cmp	r0, #52	; 0x34
 800205a:	f200 8116 	bhi.w	800228a <chprintf+0x2da>
 800205e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002062:	0165      	.short	0x0165
 8002064:	01140114 	.word	0x01140114
 8002068:	01140114 	.word	0x01140114
 800206c:	01140165 	.word	0x01140165
 8002070:	01140114 	.word	0x01140114
 8002074:	01140114 	.word	0x01140114
 8002078:	01140110 	.word	0x01140110
 800207c:	01140114 	.word	0x01140114
 8002080:	01140114 	.word	0x01140114
 8002084:	011400e1 	.word	0x011400e1
 8002088:	016e0114 	.word	0x016e0114
 800208c:	01140114 	.word	0x01140114
 8002090:	01140114 	.word	0x01140114
 8002094:	01140114 	.word	0x01140114
 8002098:	01140114 	.word	0x01140114
 800209c:	01140114 	.word	0x01140114
 80020a0:	0165008f 	.word	0x0165008f
 80020a4:	01140114 	.word	0x01140114
 80020a8:	01140114 	.word	0x01140114
 80020ac:	01140165 	.word	0x01140165
 80020b0:	01140114 	.word	0x01140114
 80020b4:	01140114 	.word	0x01140114
 80020b8:	01140110 	.word	0x01140110
 80020bc:	01140114 	.word	0x01140114
 80020c0:	0114006d 	.word	0x0114006d
 80020c4:	011400e1 	.word	0x011400e1
 80020c8:	016e0114 	.word	0x016e0114
          c = va_arg(ap, int);
 80020cc:	783b      	ldrb	r3, [r7, #0]
 80020ce:	3704      	adds	r7, #4
        precision += c;
 80020d0:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
 80020d4:	f81e 1b01 	ldrb.w	r1, [lr], #1
        if (c >= '0' && c <= '9')
 80020d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b09      	cmp	r3, #9
        precision *= 10;
 80020e0:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
 80020e4:	d9f4      	bls.n	80020d0 <chprintf+0x120>
        else if (c == '*')
 80020e6:	292a      	cmp	r1, #42	; 0x2a
 80020e8:	d0f0      	beq.n	80020cc <chprintf+0x11c>
 80020ea:	e7aa      	b.n	8002042 <chprintf+0x92>
      if (*fmt)
 80020ec:	f89e 3000 	ldrb.w	r3, [lr]
 80020f0:	b30b      	cbz	r3, 8002136 <chprintf+0x186>
    switch (c) {
 80020f2:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 80020f6:	2934      	cmp	r1, #52	; 0x34
 80020f8:	f200 80c9 	bhi.w	800228e <chprintf+0x2de>
 80020fc:	e8df f001 	tbb	[pc, r1]
 8002100:	c7c7c7d7 	.word	0xc7c7c7d7
 8002104:	c7c7d7c7 	.word	0xc7c7d7c7
 8002108:	c2c7c7c7 	.word	0xc2c7c7c7
 800210c:	c7c7c7c7 	.word	0xc7c7c7c7
 8002110:	c7c793c7 	.word	0xc7c793c7
 8002114:	c7c7c7d4 	.word	0xc7c7c7d4
 8002118:	c7c7c7c7 	.word	0xc7c7c7c7
 800211c:	41c7c7c7 	.word	0x41c7c7c7
 8002120:	c7c7c7d7 	.word	0xc7c7c7d7
 8002124:	c7c7d7c7 	.word	0xc7c7d7c7
 8002128:	c2c7c7c7 	.word	0xc2c7c7c7
 800212c:	1fc7c7c7 	.word	0x1fc7c7c7
 8002130:	c7c793c7 	.word	0xc7c793c7
 8002134:	d4          	.byte	0xd4
 8002135:	00          	.byte	0x00
      if (*fmt)
 8002136:	460b      	mov	r3, r1
 8002138:	4676      	mov	r6, lr
 800213a:	e7da      	b.n	80020f2 <chprintf+0x142>
    switch (c) {
 800213c:	4676      	mov	r6, lr
      if ((s = va_arg(ap, char *)) == 0)
 800213e:	f8d7 9000 	ldr.w	r9, [r7]
 8002142:	3704      	adds	r7, #4
 8002144:	f1b9 0f00 	cmp.w	r9, #0
 8002148:	f000 80fd 	beq.w	8002346 <chprintf+0x396>
 800214c:	f899 3000 	ldrb.w	r3, [r9]
 8002150:	4648      	mov	r0, r9
      if (precision == 0)
 8002152:	2a00      	cmp	r2, #0
 8002154:	f040 80fe 	bne.w	8002354 <chprintf+0x3a4>
      for (p = s; *p && (--precision >= 0); p++)
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 810c 	beq.w	8002376 <chprintf+0x3c6>
 800215e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002162:	464b      	mov	r3, r9
 8002164:	e001      	b.n	800216a <chprintf+0x1ba>
 8002166:	3a01      	subs	r2, #1
 8002168:	d403      	bmi.n	8002172 <chprintf+0x1c2>
 800216a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800216e:	2900      	cmp	r1, #0
 8002170:	d1f9      	bne.n	8002166 <chprintf+0x1b6>
 8002172:	1a1b      	subs	r3, r3, r0
 8002174:	1aed      	subs	r5, r5, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	9300      	str	r3, [sp, #0]
      filler = ' ';
 800217a:	f04f 0a20 	mov.w	sl, #32
 800217e:	e00b      	b.n	8002198 <chprintf+0x1e8>
    switch (c) {
 8002180:	4676      	mov	r6, lr
      *p++ = va_arg(ap, int);
 8002182:	f10d 0918 	add.w	r9, sp, #24
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f809 3d0c 	strb.w	r3, [r9, #-12]!
 800218c:	2300      	movs	r3, #0
 800218e:	3d01      	subs	r5, #1
 8002190:	3704      	adds	r7, #4
 8002192:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8002194:	f04f 0a20 	mov.w	sl, #32
    if ((width -= i) < 0)
 8002198:	2d00      	cmp	r5, #0
 800219a:	db1e      	blt.n	80021da <chprintf+0x22a>
    if (left_align == FALSE)
 800219c:	f1bc 0f00 	cmp.w	ip, #0
 80021a0:	d17e      	bne.n	80022a0 <chprintf+0x2f0>
      width = -width;
 80021a2:	426b      	negs	r3, r5
    if (width < 0) {
 80021a4:	2d00      	cmp	r5, #0
 80021a6:	d07a      	beq.n	800229e <chprintf+0x2ee>
      if (*s == '-' && filler == '0') {
 80021a8:	f899 1000 	ldrb.w	r1, [r9]
 80021ac:	6822      	ldr	r2, [r4, #0]
 80021ae:	292d      	cmp	r1, #45	; 0x2d
 80021b0:	68d2      	ldr	r2, [r2, #12]
 80021b2:	f000 80a8 	beq.w	8002306 <chprintf+0x356>
 80021b6:	469b      	mov	fp, r3
 80021b8:	e001      	b.n	80021be <chprintf+0x20e>
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
        streamPut(chp, (uint8_t)filler);
 80021be:	4651      	mov	r1, sl
 80021c0:	4620      	mov	r0, r4
 80021c2:	4790      	blx	r2
      } while (++width != 0);
 80021c4:	f11b 0b01 	adds.w	fp, fp, #1
 80021c8:	d1f7      	bne.n	80021ba <chprintf+0x20a>
    while (--i >= 0) {
 80021ca:	9a00      	ldr	r2, [sp, #0]
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	465b      	mov	r3, fp
 80021d0:	44a8      	add	r8, r5
 80021d2:	f6ff aef8 	blt.w	8001fc6 <chprintf+0x16>
 80021d6:	461d      	mov	r5, r3
 80021d8:	e004      	b.n	80021e4 <chprintf+0x234>
 80021da:	9b00      	ldr	r3, [sp, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f6ff aef2 	blt.w	8001fc6 <chprintf+0x16>
      width = 0;
 80021e2:	2500      	movs	r5, #0
      width = -width;
 80021e4:	f8dd b000 	ldr.w	fp, [sp]
      streamPut(chp, (uint8_t)*s++);
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	f819 1b01 	ldrb.w	r1, [r9], #1
 80021ee:	68db      	ldr	r3, [r3, #12]
    while (--i >= 0) {
 80021f0:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
 80021f4:	4620      	mov	r0, r4
 80021f6:	4798      	blx	r3
    while (--i >= 0) {
 80021f8:	f1bb 3fff 	cmp.w	fp, #4294967295
 80021fc:	d1f4      	bne.n	80021e8 <chprintf+0x238>
 80021fe:	9b00      	ldr	r3, [sp, #0]
 8002200:	f108 0801 	add.w	r8, r8, #1
 8002204:	4443      	add	r3, r8
 8002206:	4698      	mov	r8, r3
    while (width) {
 8002208:	2d00      	cmp	r5, #0
 800220a:	f43f aedc 	beq.w	8001fc6 <chprintf+0x16>
 800220e:	46a9      	mov	r9, r5
      streamPut(chp, (uint8_t)filler);
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	4651      	mov	r1, sl
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4620      	mov	r0, r4
 8002218:	4798      	blx	r3
    while (width) {
 800221a:	f1b9 0901 	subs.w	r9, r9, #1
 800221e:	d1f7      	bne.n	8002210 <chprintf+0x260>
 8002220:	44a8      	add	r8, r5
 8002222:	e6d0      	b.n	8001fc6 <chprintf+0x16>
    switch (c) {
 8002224:	4676      	mov	r6, lr
    case 'U':
 8002226:	f04f 090a 	mov.w	r9, #10
 800222a:	f857 2b04 	ldr.w	r2, [r7], #4
  q = p + MAX_FILLER;
 800222e:	f10d 0117 	add.w	r1, sp, #23
 8002232:	e000      	b.n	8002236 <chprintf+0x286>
  } while ((ll /= radix) != 0);
 8002234:	4601      	mov	r1, r0
    i = (int)(l % radix);
 8002236:	fbb2 fef9 	udiv	lr, r2, r9
 800223a:	fb09 221e 	mls	r2, r9, lr, r2
    i += '0';
 800223e:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8002242:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8002244:	bfc8      	it	gt
 8002246:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 800224a:	b2db      	uxtb	r3, r3
    l /= radix;
 800224c:	4672      	mov	r2, lr
    *--q = i;
 800224e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002252:	1e48      	subs	r0, r1, #1
  } while ((ll /= radix) != 0);
 8002254:	2a00      	cmp	r2, #0
 8002256:	d1ed      	bne.n	8002234 <chprintf+0x284>
  i = (int)(p + MAX_FILLER - q);
 8002258:	f10d 0217 	add.w	r2, sp, #23
 800225c:	eba2 0b00 	sub.w	fp, r2, r0
 8002260:	f10d 090c 	add.w	r9, sp, #12
 8002264:	464a      	mov	r2, r9
 8002266:	4458      	add	r0, fp
 8002268:	e001      	b.n	800226e <chprintf+0x2be>
 800226a:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 800226e:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8002272:	4281      	cmp	r1, r0
 8002274:	d1f9      	bne.n	800226a <chprintf+0x2ba>
 8002276:	f10b 33ff 	add.w	r3, fp, #4294967295
 800227a:	eba5 050b 	sub.w	r5, r5, fp
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	e78a      	b.n	8002198 <chprintf+0x1e8>
    switch (c) {
 8002282:	4676      	mov	r6, lr
    case 'O':
 8002284:	f04f 0908 	mov.w	r9, #8
 8002288:	e7cf      	b.n	800222a <chprintf+0x27a>
    switch (c) {
 800228a:	4676      	mov	r6, lr
 800228c:	460b      	mov	r3, r1
      *p++ = c;
 800228e:	f10d 0918 	add.w	r9, sp, #24
 8002292:	3d01      	subs	r5, #1
 8002294:	f809 3d0c 	strb.w	r3, [r9, #-12]!
 8002298:	2300      	movs	r3, #0
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	e77c      	b.n	8002198 <chprintf+0x1e8>
      width = -width;
 800229e:	461d      	mov	r5, r3
    while (--i >= 0) {
 80022a0:	9b00      	ldr	r3, [sp, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da9e      	bge.n	80021e4 <chprintf+0x234>
 80022a6:	e7af      	b.n	8002208 <chprintf+0x258>
    switch (c) {
 80022a8:	f04f 0910 	mov.w	r9, #16
 80022ac:	e7bd      	b.n	800222a <chprintf+0x27a>
 80022ae:	1d39      	adds	r1, r7, #4
        l = va_arg(ap, long);
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	460f      	mov	r7, r1
      if (l < 0) {
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	db55      	blt.n	8002364 <chprintf+0x3b4>
    p = tmpbuf;
 80022b8:	f10d 090c 	add.w	r9, sp, #12
 80022bc:	4648      	mov	r0, r9
  q = p + MAX_FILLER;
 80022be:	f100 030b 	add.w	r3, r0, #11
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	4619      	mov	r1, r3
    i = (int)(l % radix);
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <chprintf+0x3d4>)
 80022c8:	fba3 e302 	umull	lr, r3, r3, r2
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80022d2:	469e      	mov	lr, r3
 80022d4:	eba2 034b 	sub.w	r3, r2, fp, lsl #1
    i += '0';
 80022d8:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 80022da:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80022dc:	4672      	mov	r2, lr
    *--q = i;
 80022de:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d1ef      	bne.n	80022c6 <chprintf+0x316>
  i = (int)(p + MAX_FILLER - q);
 80022e6:	9a00      	ldr	r2, [sp, #0]
 80022e8:	1a52      	subs	r2, r2, r1
 80022ea:	4402      	add	r2, r0
 80022ec:	e001      	b.n	80022f2 <chprintf+0x342>
 80022ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 80022f2:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 80022f6:	4290      	cmp	r0, r2
 80022f8:	d1f9      	bne.n	80022ee <chprintf+0x33e>
 80022fa:	eba0 0009 	sub.w	r0, r0, r9
 80022fe:	1e43      	subs	r3, r0, #1
 8002300:	1a2d      	subs	r5, r5, r0
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	e748      	b.n	8002198 <chprintf+0x1e8>
      if (*s == '-' && filler == '0') {
 8002306:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 800230a:	f47f af54 	bne.w	80021b6 <chprintf+0x206>
        streamPut(chp, (uint8_t)*s++);
 800230e:	4620      	mov	r0, r4
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	4790      	blx	r2
 8002314:	9b00      	ldr	r3, [sp, #0]
 8002316:	6822      	ldr	r2, [r4, #0]
 8002318:	3b01      	subs	r3, #1
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	9b01      	ldr	r3, [sp, #4]
 800231e:	68d2      	ldr	r2, [r2, #12]
 8002320:	f108 0801 	add.w	r8, r8, #1
 8002324:	f109 0901 	add.w	r9, r9, #1
 8002328:	469b      	mov	fp, r3
 800232a:	e748      	b.n	80021be <chprintf+0x20e>
 800232c:	4639      	mov	r1, r7
      if (is_long)
 800232e:	2b19      	cmp	r3, #25
 8002330:	f851 2b04 	ldr.w	r2, [r1], #4
 8002334:	4676      	mov	r6, lr
        l = va_arg(ap, int);
 8002336:	bf88      	it	hi
 8002338:	460f      	movhi	r7, r1
      if (is_long)
 800233a:	d8bb      	bhi.n	80022b4 <chprintf+0x304>
 800233c:	e7b8      	b.n	80022b0 <chprintf+0x300>
    switch (c) {
 800233e:	4676      	mov	r6, lr
 8002340:	f04f 0910 	mov.w	r9, #16
 8002344:	e771      	b.n	800222a <chprintf+0x27a>
 8002346:	4810      	ldr	r0, [pc, #64]	; (8002388 <chprintf+0x3d8>)
      if (precision == 0)
 8002348:	4681      	mov	r9, r0
 800234a:	2a00      	cmp	r2, #0
 800234c:	f43f af07 	beq.w	800215e <chprintf+0x1ae>
      for (p = s; *p && (--precision >= 0); p++)
 8002350:	3a01      	subs	r2, #1
 8002352:	e706      	b.n	8002162 <chprintf+0x1b2>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1fb      	bne.n	8002350 <chprintf+0x3a0>
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
 800235c:	9300      	str	r3, [sp, #0]
      filler = ' ';
 800235e:	f04f 0a20 	mov.w	sl, #32
 8002362:	e719      	b.n	8002198 <chprintf+0x1e8>
        *p++ = '-';
 8002364:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002366:	4252      	negs	r2, r2
        *p++ = '-';
 8002368:	f88d 300c 	strb.w	r3, [sp, #12]
 800236c:	f10d 000d 	add.w	r0, sp, #13
 8002370:	f10d 090c 	add.w	r9, sp, #12
 8002374:	e7a3      	b.n	80022be <chprintf+0x30e>
      for (p = s; *p && (--precision >= 0); p++)
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	9300      	str	r3, [sp, #0]
      filler = ' ';
 800237c:	f04f 0a20 	mov.w	sl, #32
 8002380:	e70c      	b.n	800219c <chprintf+0x1ec>
 8002382:	bf00      	nop
 8002384:	cccccccd 	.word	0xcccccccd
 8002388:	080099d8 	.word	0x080099d8
 800238c:	00000000 	.word	0x00000000

08002390 <cmd_test.lto_priv.94>:
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 char *testvar = argv[0];
 char *testvar1 = argv[1];
 char *testvar2 = argv[2];
  int led[2]= {0,0};
           if (flag2 == false){
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <cmd_test.lto_priv.94+0x8c>)
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002392:	b570      	push	{r4, r5, r6, lr}
           if (flag2 == false){
 8002394:	781c      	ldrb	r4, [r3, #0]
 8002396:	b9cc      	cbnz	r4, 80023cc <cmd_test.lto_priv.94+0x3c>
 8002398:	4606      	mov	r6, r0
 800239a:	460d      	mov	r5, r1
                       if(!strcmp("LED",testvar)&& argc<=3){
 800239c:	4820      	ldr	r0, [pc, #128]	; (8002420 <cmd_test.lto_priv.94+0x90>)
 800239e:	6811      	ldr	r1, [r2, #0]
 80023a0:	4614      	mov	r4, r2
 80023a2:	f7fe f841 	bl	8000428 <strcmp>
 80023a6:	b980      	cbnz	r0, 80023ca <cmd_test.lto_priv.94+0x3a>
 80023a8:	2d03      	cmp	r5, #3
 80023aa:	dc0e      	bgt.n	80023ca <cmd_test.lto_priv.94+0x3a>
 char *testvar1 = argv[1];
 80023ac:	6865      	ldr	r5, [r4, #4]
                                   if(!strcmp("BLUE",testvar1)  ){
 80023ae:	481d      	ldr	r0, [pc, #116]	; (8002424 <cmd_test.lto_priv.94+0x94>)
 char *testvar2 = argv[2];
 80023b0:	68a4      	ldr	r4, [r4, #8]
                                   if(!strcmp("BLUE",testvar1)  ){
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fe f838 	bl	8000428 <strcmp>
 80023b8:	b968      	cbnz	r0, 80023d6 <cmd_test.lto_priv.94+0x46>
                                          if(!strcmp("ON",testvar2)){
 80023ba:	4621      	mov	r1, r4
 80023bc:	481a      	ldr	r0, [pc, #104]	; (8002428 <cmd_test.lto_priv.94+0x98>)
 80023be:	f7fe f833 	bl	8000428 <strcmp>
                                            led[1]=1;
                                            led[2]=1;
                                            palClearLine(LINE_LED_RGB_BLUE);
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <cmd_test.lto_priv.94+0x9c>)
 80023c4:	2204      	movs	r2, #4
                                          if(!strcmp("ON",testvar2)){
 80023c6:	b9c0      	cbnz	r0, 80023fa <cmd_test.lto_priv.94+0x6a>
                                       }
                                   else if (!strcmp("GREEN",testvar1) ) {
                                            if(!strcmp("ON",testvar2)){
                                              led[1]=3;
                                              led[2]=1;
                                              palClearLine(LINE_LED_RGB_GREEN);
 80023c8:	835a      	strh	r2, [r3, #26]
              chprintf(chp, "TEST doesn't work when SEMAFORO is active" );
         }



}
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
              chprintf(chp, "TEST doesn't work when SEMAFORO is active" );
 80023cc:	4918      	ldr	r1, [pc, #96]	; (8002430 <cmd_test.lto_priv.94+0xa0>)
}
 80023ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              chprintf(chp, "TEST doesn't work when SEMAFORO is active" );
 80023d2:	f7ff bded 	b.w	8001fb0 <chprintf>
                                   else if (!strcmp("RED",testvar1) ){
 80023d6:	4629      	mov	r1, r5
 80023d8:	4816      	ldr	r0, [pc, #88]	; (8002434 <cmd_test.lto_priv.94+0xa4>)
 80023da:	f7fe f825 	bl	8000428 <strcmp>
 80023de:	b170      	cbz	r0, 80023fe <cmd_test.lto_priv.94+0x6e>
                                   else if (!strcmp("GREEN",testvar1) ) {
 80023e0:	4629      	mov	r1, r5
 80023e2:	4815      	ldr	r0, [pc, #84]	; (8002438 <cmd_test.lto_priv.94+0xa8>)
 80023e4:	f7fe f820 	bl	8000428 <strcmp>
 80023e8:	b990      	cbnz	r0, 8002410 <cmd_test.lto_priv.94+0x80>
                                            if(!strcmp("ON",testvar2)){
 80023ea:	4621      	mov	r1, r4
 80023ec:	480e      	ldr	r0, [pc, #56]	; (8002428 <cmd_test.lto_priv.94+0x98>)
 80023ee:	f7fe f81b 	bl	8000428 <strcmp>
                                              palClearLine(LINE_LED_RGB_GREEN);
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <cmd_test.lto_priv.94+0x9c>)
 80023f4:	2202      	movs	r2, #2
                                            if(!strcmp("ON",testvar2)){
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d0e6      	beq.n	80023c8 <cmd_test.lto_priv.94+0x38>
                                              palSetLine(LINE_LED_RGB_GREEN);
 80023fa:	831a      	strh	r2, [r3, #24]
}
 80023fc:	bd70      	pop	{r4, r5, r6, pc}
                                           if(!strcmp("ON",testvar2)){
 80023fe:	4621      	mov	r1, r4
 8002400:	4809      	ldr	r0, [pc, #36]	; (8002428 <cmd_test.lto_priv.94+0x98>)
 8002402:	f7fe f811 	bl	8000428 <strcmp>
                                              palClearLine(LINE_LED_RGB_RED);
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <cmd_test.lto_priv.94+0x9c>)
 8002408:	2201      	movs	r2, #1
                                           if(!strcmp("ON",testvar2)){
 800240a:	2800      	cmp	r0, #0
 800240c:	d1f5      	bne.n	80023fa <cmd_test.lto_priv.94+0x6a>
 800240e:	e7db      	b.n	80023c8 <cmd_test.lto_priv.94+0x38>
                                     {chprintf(chp, "wrong command \r\n" );}
 8002410:	4630      	mov	r0, r6
 8002412:	490a      	ldr	r1, [pc, #40]	; (800243c <cmd_test.lto_priv.94+0xac>)
}
 8002414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                     {chprintf(chp, "wrong command \r\n" );}
 8002418:	f7ff bdca 	b.w	8001fb0 <chprintf>
 800241c:	20000fe0 	.word	0x20000fe0
 8002420:	08009bd8 	.word	0x08009bd8
 8002424:	08009bdc 	.word	0x08009bdc
 8002428:	08009be4 	.word	0x08009be4
 800242c:	40020800 	.word	0x40020800
 8002430:	08009c08 	.word	0x08009c08
 8002434:	08009be8 	.word	0x08009be8
 8002438:	08009bec 	.word	0x08009bec
 800243c:	08009bf4 	.word	0x08009bf4

08002440 <cmd_write>:
  if (argc > 0) {
 8002440:	2900      	cmp	r1, #0
 8002442:	dc18      	bgt.n	8002476 <cmd_write+0x36>
static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	4604      	mov	r4, r0
    chnWrite(&SD2, buf, sizeof buf - 1);
 8002448:	4e0c      	ldr	r6, [pc, #48]	; (800247c <cmd_write+0x3c>)
 800244a:	4d0d      	ldr	r5, [pc, #52]	; (8002480 <cmd_write+0x40>)
 800244c:	e002      	b.n	8002454 <cmd_write+0x14>
 800244e:	6833      	ldr	r3, [r6, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4798      	blx	r3
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	2100      	movs	r1, #0
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4620      	mov	r0, r4
 800245c:	4798      	blx	r3
 800245e:	3001      	adds	r0, #1
    chnWrite(&SD2, buf, sizeof buf - 1);
 8002460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002464:	4629      	mov	r1, r5
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <cmd_write+0x3c>)
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8002468:	d0f1      	beq.n	800244e <cmd_write+0xe>
  chprintf(chp, "\r\n\n stopped\r\n");
 800246a:	4620      	mov	r0, r4
 800246c:	4905      	ldr	r1, [pc, #20]	; (8002484 <cmd_write+0x44>)
}
 800246e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "\r\n\n stopped\r\n");
 8002472:	f7ff bd9d 	b.w	8001fb0 <chprintf>
    chprintf(chp, "Usage: write\r\n");
 8002476:	4904      	ldr	r1, [pc, #16]	; (8002488 <cmd_write+0x48>)
 8002478:	f7ff bd9a 	b.w	8001fb0 <chprintf>
 800247c:	20000d14 	.word	0x20000d14
 8002480:	20000800 	.word	0x20000800
 8002484:	08009c9c 	.word	0x08009c9c
 8002488:	08009cac 	.word	0x08009cac
 800248c:	00000000 	.word	0x00000000

08002490 <cmd_systime>:

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8002490:	2900      	cmp	r1, #0
 8002492:	dd03      	ble.n	800249c <cmd_systime+0xc>
    shellUsage(chp, "systime");
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <cmd_systime+0x24>)
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <cmd_systime+0x28>)
 8002498:	f7ff bd8a 	b.w	8001fb0 <chprintf>
 800249c:	2320      	movs	r3, #32
 800249e:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 80024a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a6:	2300      	movs	r3, #0
 80024a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024aa:	f383 8811 	msr	BASEPRI, r3
    return;
  }
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 80024ae:	4903      	ldr	r1, [pc, #12]	; (80024bc <cmd_systime+0x2c>)
 80024b0:	f7ff bd7e 	b.w	8001fb0 <chprintf>
 80024b4:	08009b98 	.word	0x08009b98
 80024b8:	08009ba0 	.word	0x08009ba0
 80024bc:	08009bac 	.word	0x08009bac

080024c0 <cmd_echo>:
  if (argc != 1) {
 80024c0:	2901      	cmp	r1, #1
 80024c2:	d003      	beq.n	80024cc <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 80024c4:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <cmd_echo+0x14>)
 80024c6:	4904      	ldr	r1, [pc, #16]	; (80024d8 <cmd_echo+0x18>)
 80024c8:	f7ff bd72 	b.w	8001fb0 <chprintf>
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	4903      	ldr	r1, [pc, #12]	; (80024dc <cmd_echo+0x1c>)
 80024d0:	f7ff bd6e 	b.w	8001fb0 <chprintf>
 80024d4:	080099e0 	.word	0x080099e0
 80024d8:	08009ba0 	.word	0x08009ba0
 80024dc:	080099f0 	.word	0x080099f0

080024e0 <cmd_info>:
  if (argc > 0) {
 80024e0:	2900      	cmp	r1, #0
 80024e2:	dd03      	ble.n	80024ec <cmd_info+0xc>
    shellUsage(chp, "info");
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <cmd_info+0x6c>)
 80024e6:	491a      	ldr	r1, [pc, #104]	; (8002550 <cmd_info+0x70>)
 80024e8:	f7ff bd62 	b.w	8001fb0 <chprintf>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80024ec:	b510      	push	{r4, lr}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 80024ee:	4a19      	ldr	r2, [pc, #100]	; (8002554 <cmd_info+0x74>)
 80024f0:	4919      	ldr	r1, [pc, #100]	; (8002558 <cmd_info+0x78>)
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80024f2:	b082      	sub	sp, #8
 80024f4:	4604      	mov	r4, r0
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 80024f6:	f7ff fd5b 	bl	8001fb0 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <cmd_info+0x7c>)
 80024fc:	4918      	ldr	r1, [pc, #96]	; (8002560 <cmd_info+0x80>)
 80024fe:	4620      	mov	r0, r4
 8002500:	f7ff fd56 	bl	8001fb0 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8002504:	4a17      	ldr	r2, [pc, #92]	; (8002564 <cmd_info+0x84>)
 8002506:	4918      	ldr	r1, [pc, #96]	; (8002568 <cmd_info+0x88>)
 8002508:	4620      	mov	r0, r4
 800250a:	f7ff fd51 	bl	8001fb0 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <cmd_info+0x8c>)
 8002510:	4917      	ldr	r1, [pc, #92]	; (8002570 <cmd_info+0x90>)
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff fd4c 	bl	8001fb0 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8002518:	4a16      	ldr	r2, [pc, #88]	; (8002574 <cmd_info+0x94>)
 800251a:	4917      	ldr	r1, [pc, #92]	; (8002578 <cmd_info+0x98>)
 800251c:	4620      	mov	r0, r4
 800251e:	f7ff fd47 	bl	8001fb0 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <cmd_info+0x9c>)
 8002524:	4916      	ldr	r1, [pc, #88]	; (8002580 <cmd_info+0xa0>)
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fd42 	bl	8001fb0 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <cmd_info+0xa4>)
 800252e:	4916      	ldr	r1, [pc, #88]	; (8002588 <cmd_info+0xa8>)
 8002530:	4620      	mov	r0, r4
 8002532:	f7ff fd3d 	bl	8001fb0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <cmd_info+0xac>)
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4620      	mov	r0, r4
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <cmd_info+0xb0>)
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <cmd_info+0xb4>)
 8002540:	4915      	ldr	r1, [pc, #84]	; (8002598 <cmd_info+0xb8>)
 8002542:	f7ff fd35 	bl	8001fb0 <chprintf>
}
 8002546:	b002      	add	sp, #8
 8002548:	bd10      	pop	{r4, pc}
 800254a:	bf00      	nop
 800254c:	080099f8 	.word	0x080099f8
 8002550:	08009ba0 	.word	0x08009ba0
 8002554:	0800a3f4 	.word	0x0800a3f4
 8002558:	08009a00 	.word	0x08009a00
 800255c:	0800a248 	.word	0x0800a248
 8002560:	08009a14 	.word	0x08009a14
 8002564:	0800a1d8 	.word	0x0800a1d8
 8002568:	08009a28 	.word	0x08009a28
 800256c:	0800a210 	.word	0x0800a210
 8002570:	08009a3c 	.word	0x08009a3c
 8002574:	0800a2bc 	.word	0x0800a2bc
 8002578:	08009a50 	.word	0x08009a50
 800257c:	08009a64 	.word	0x08009a64
 8002580:	08009a90 	.word	0x08009a90
 8002584:	08009aa4 	.word	0x08009aa4
 8002588:	08009ad0 	.word	0x08009ad0
 800258c:	08009b0c 	.word	0x08009b0c
 8002590:	08009ae4 	.word	0x08009ae4
 8002594:	08009ae8 	.word	0x08009ae8
 8002598:	08009af4 	.word	0x08009af4
 800259c:	00000000 	.word	0x00000000

080025a0 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 80025a0:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 80025a2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 80025a4:	42a1      	cmp	r1, r4
 80025a6:	d012      	beq.n	80025ce <dyn_find_object+0x2e>
 80025a8:	460d      	mov	r5, r1
 80025aa:	4606      	mov	r6, r0
 80025ac:	e002      	b.n	80025b4 <dyn_find_object+0x14>
    p = p->next;
 80025ae:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80025b0:	42a5      	cmp	r5, r4
 80025b2:	d00c      	beq.n	80025ce <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80025b4:	2208      	movs	r2, #8
 80025b6:	4631      	mov	r1, r6
 80025b8:	18a0      	adds	r0, r4, r2
 80025ba:	f007 f8b3 	bl	8009724 <strncmp>
 80025be:	2800      	cmp	r0, #0
 80025c0:	d1f5      	bne.n	80025ae <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 80025c2:	b12c      	cbz	r4, 80025d0 <dyn_find_object+0x30>
    /* Increasing references counter.*/
    dep->refs++;
 80025c4:	6863      	ldr	r3, [r4, #4]
 80025c6:	3301      	adds	r3, #1
 80025c8:	6063      	str	r3, [r4, #4]
  }

  return dep;
}
 80025ca:	4620      	mov	r0, r4
 80025cc:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 80025ce:	2400      	movs	r4, #0
}
 80025d0:	4620      	mov	r0, r4
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
	...

080025e0 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 80025e2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 80025e4:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 80025e6:	460d      	mov	r5, r1
 80025e8:	4606      	mov	r6, r0
 80025ea:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 80025ec:	d103      	bne.n	80025f6 <dyn_create_object_pool+0x16>
 80025ee:	e00d      	b.n	800260c <dyn_create_object_pool+0x2c>
    p = p->next;
 80025f0:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80025f2:	42a5      	cmp	r5, r4
 80025f4:	d00a      	beq.n	800260c <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80025f6:	2208      	movs	r2, #8
 80025f8:	4631      	mov	r1, r6
 80025fa:	18a0      	adds	r0, r4, r2
 80025fc:	f007 f892 	bl	8009724 <strncmp>
 8002600:	2800      	cmp	r0, #0
 8002602:	d1f5      	bne.n	80025f0 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 8002604:	b114      	cbz	r4, 800260c <dyn_create_object_pool+0x2c>
    return NULL;
 8002606:	4604      	mov	r4, r0
}
 8002608:	4620      	mov	r0, r4
 800260a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 800260c:	4638      	mov	r0, r7
 800260e:	f7fe fd0f 	bl	8001030 <chPoolAlloc>
  if (dep == NULL) {
 8002612:	4604      	mov	r4, r0
 8002614:	b148      	cbz	r0, 800262a <dyn_create_object_pool+0x4a>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8002616:	2208      	movs	r2, #8
 8002618:	4410      	add	r0, r2
 800261a:	4631      	mov	r1, r6
 800261c:	f007 f8ce 	bl	80097bc <strncpy>
  dep->next = dlp->next;
 8002620:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8002622:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8002624:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 8002628:	602c      	str	r4, [r5, #0]
}
 800262a:	4620      	mov	r0, r4
 800262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800262e:	bf00      	nop

08002630 <chThdYield>:
void chThdYield(void) {
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	2320      	movs	r3, #32
 8002634:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <chThdYield+0x54>)
 800263a:	6810      	ldr	r0, [r2, #0]
 800263c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800263e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002640:	68a1      	ldr	r1, [r4, #8]
  if (chSchCanYieldS()) {
 8002642:	428b      	cmp	r3, r1
 8002644:	d203      	bcs.n	800264e <chThdYield+0x1e>
 8002646:	2300      	movs	r3, #0
 8002648:	f383 8811 	msr	BASEPRI, r3
}
 800264c:	bd38      	pop	{r3, r4, r5, pc}
  tqp->next             = tp->queue.next;
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002652:	605a      	str	r2, [r3, #4]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002654:	2501      	movs	r5, #1
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002656:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8002658:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 800265a:	f880 5020 	strb.w	r5, [r0, #32]
  tp->state = CH_STATE_READY;
 800265e:	f884 2020 	strb.w	r2, [r4, #32]
 8002662:	e000      	b.n	8002666 <chThdYield+0x36>
 8002664:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	4291      	cmp	r1, r2
 800266a:	d9fb      	bls.n	8002664 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 800266c:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800266e:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8002670:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8002674:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002676:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8002678:	f7fd fe22 	bl	80002c0 <_port_switch>
 800267c:	2300      	movs	r3, #0
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	20000da0 	.word	0x20000da0
	...

08002690 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4d09      	ldr	r5, [pc, #36]	; (80026b8 <bmk_thread8+0x28>)
 8002694:	4604      	mov	r4, r0
    chThdYield();
 8002696:	f7ff ffcb 	bl	8002630 <chThdYield>
    chThdYield();
 800269a:	f7ff ffc9 	bl	8002630 <chThdYield>
    chThdYield();
 800269e:	f7ff ffc7 	bl	8002630 <chThdYield>
    chThdYield();
 80026a2:	f7ff ffc5 	bl	8002630 <chThdYield>
    (*(uint32_t *)p) += 4;
 80026a6:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80026a8:	69aa      	ldr	r2, [r5, #24]
 80026aa:	3304      	adds	r3, #4
 80026ac:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 80026ae:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80026b2:	075b      	lsls	r3, r3, #29
 80026b4:	d5ef      	bpl.n	8002696 <bmk_thread8+0x6>
}
 80026b6:	bd38      	pop	{r3, r4, r5, pc}
 80026b8:	20000da0 	.word	0x20000da0
 80026bc:	00000000 	.word	0x00000000

080026c0 <chSchWakeupS>:
  thread_t *otp = currp;
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80026c2:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 80026c4:	699e      	ldr	r6, [r3, #24]
  if (ntp->prio <= otp->prio) {
 80026c6:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80026c8:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 80026ca:	68b0      	ldr	r0, [r6, #8]
  ntp->u.rdymsg = msg;
 80026cc:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80026ce:	4285      	cmp	r5, r0
  tp->state = CH_STATE_READY;
 80026d0:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 80026d4:	d80c      	bhi.n	80026f0 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 80026d6:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80026da:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	4295      	cmp	r5, r2
 80026e0:	d9fb      	bls.n	80026da <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80026e8:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80026ea:	605c      	str	r4, [r3, #4]
}
 80026ec:	bc70      	pop	{r4, r5, r6}
 80026ee:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80026f0:	f886 2020 	strb.w	r2, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80026f4:	461a      	mov	r2, r3
    cp = cp->queue.next;
 80026f6:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80026f8:	6891      	ldr	r1, [r2, #8]
 80026fa:	4288      	cmp	r0, r1
 80026fc:	d9fb      	bls.n	80026f6 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 80026fe:	6851      	ldr	r1, [r2, #4]
 8002700:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 8002702:	2001      	movs	r0, #1
  tp->queue.next             = cp;
 8002704:	6032      	str	r2, [r6, #0]
  tp->queue.prev->queue.next = tp;
 8002706:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8002708:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 800270a:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 800270e:	4631      	mov	r1, r6
 8002710:	4620      	mov	r0, r4
    currp = ntp;
 8002712:	619c      	str	r4, [r3, #24]
}
 8002714:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8002716:	f7fd bdd3 	b.w	80002c0 <_port_switch>
 800271a:	bf00      	nop
 800271c:	20000da0 	.word	0x20000da0

08002720 <chCondSignal.constprop.60>:
void chCondSignal(condition_variable_t *cp) {
 8002720:	b508      	push	{r3, lr}
 8002722:	2320      	movs	r3, #32
 8002724:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <chCondSignal.constprop.60+0x24>)
 800272a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 800272c:	4298      	cmp	r0, r3
 800272e:	d005      	beq.n	800273c <chCondSignal.constprop.60+0x1c>
  tqp->next             = tp->queue.next;
 8002730:	6802      	ldr	r2, [r0, #0]
 8002732:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002734:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8002736:	2100      	movs	r1, #0
 8002738:	f7ff ffc2 	bl	80026c0 <chSchWakeupS>
 800273c:	2300      	movs	r3, #0
 800273e:	f383 8811 	msr	BASEPRI, r3
}
 8002742:	bd08      	pop	{r3, pc}
 8002744:	20000c04 	.word	0x20000c04
	...

08002750 <chThdCreateFromMemoryPool.constprop.41>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8002752:	4d14      	ldr	r5, [pc, #80]	; (80027a4 <chThdCreateFromMemoryPool.constprop.41+0x54>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8002754:	b087      	sub	sp, #28
 8002756:	4607      	mov	r7, r0
  wsp = chPoolAlloc(mp);
 8002758:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800275a:	460e      	mov	r6, r1
 800275c:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
 800275e:	f7fe fc67 	bl	8001030 <chPoolAlloc>
  if (wsp == NULL) {
 8002762:	b1e0      	cbz	r0, 800279e <chThdCreateFromMemoryPool.constprop.41+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8002764:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <chThdCreateFromMemoryPool.constprop.41+0x58>)
 8002768:	9700      	str	r7, [sp, #0]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800276a:	4403      	add	r3, r0
  thread_descriptor_t td = {
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	9001      	str	r0, [sp, #4]
 8002770:	9603      	str	r6, [sp, #12]
 8002772:	9405      	str	r4, [sp, #20]
 8002774:	9204      	str	r2, [sp, #16]
 8002776:	2320      	movs	r3, #32
 8002778:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800277c:	4668      	mov	r0, sp
 800277e:	f7fe fdc7 	bl	8001310 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 8002782:	2302      	movs	r3, #2
 8002784:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 8002788:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 800278a:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 800278c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800278e:	f7ff ff97 	bl	80026c0 <chSchWakeupS>
 8002792:	2300      	movs	r3, #0
 8002794:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8002798:	4620      	mov	r0, r4
 800279a:	b007      	add	sp, #28
 800279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800279e:	4604      	mov	r4, r0
 80027a0:	e7fa      	b.n	8002798 <chThdCreateFromMemoryPool.constprop.41+0x48>
 80027a2:	bf00      	nop
 80027a4:	20001010 	.word	0x20001010
 80027a8:	08000e41 	.word	0x08000e41
 80027ac:	00000000 	.word	0x00000000

080027b0 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 80027b0:	b508      	push	{r3, lr}
 80027b2:	2320      	movs	r3, #32
 80027b4:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 80027b8:	6883      	ldr	r3, [r0, #8]
 80027ba:	3301      	adds	r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	6083      	str	r3, [r0, #8]
 80027c0:	dd03      	ble.n	80027ca <chSemSignal+0x1a>
 80027c2:	2300      	movs	r3, #0
 80027c4:	f383 8811 	msr	BASEPRI, r3
}
 80027c8:	bd08      	pop	{r3, pc}
 80027ca:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 80027cc:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 80027ce:	6802      	ldr	r2, [r0, #0]
 80027d0:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 80027d2:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80027d4:	6053      	str	r3, [r2, #4]
 80027d6:	f7ff ff73 	bl	80026c0 <chSchWakeupS>
 80027da:	2300      	movs	r3, #0
 80027dc:	f383 8811 	msr	BASEPRI, r3
}
 80027e0:	bd08      	pop	{r3, pc}
 80027e2:	bf00      	nop
	...

080027f0 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t pf, void *arg) {
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	9d06      	ldr	r5, [sp, #24]
 80027f4:	2420      	movs	r4, #32
 80027f6:	f384 8811 	msr	BASEPRI, r4
  tp = (thread_t *)((uint8_t *)wsp + size -
 80027fa:	3948      	subs	r1, #72	; 0x48
 80027fc:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 80027fe:	4e16      	ldr	r6, [pc, #88]	; (8002858 <chThdCreateStatic+0x68>)
 8002800:	6126      	str	r6, [r4, #16]
  tp->wabase = (stkalign_t *)wsp;
 8002802:	61e0      	str	r0, [r4, #28]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002804:	f1a4 0024 	sub.w	r0, r4, #36	; 0x24
  REG_INSERT(tp);
 8002808:	6971      	ldr	r1, [r6, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800280a:	f844 3c24 	str.w	r3, [r4, #-36]
 800280e:	f844 5c20 	str.w	r5, [r4, #-32]
 8002812:	60e0      	str	r0, [r4, #12]
  tp->state     = CH_STATE_WTSTART;
 8002814:	2502      	movs	r5, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002816:	2301      	movs	r3, #1
  tp->name      = name;
 8002818:	4810      	ldr	r0, [pc, #64]	; (800285c <chThdCreateStatic+0x6c>)
  tp->prio      = prio;
 800281a:	60a2      	str	r2, [r4, #8]
  tp->realprio  = prio;
 800281c:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->state     = CH_STATE_WTSTART;
 800281e:	8425      	strh	r5, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002820:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  list_init(&tp->waiting);
 8002824:	f104 0228 	add.w	r2, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 8002828:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->mtxlist   = NULL;
 800282c:	2500      	movs	r5, #0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800282e:	4f0c      	ldr	r7, [pc, #48]	; (8002860 <chThdCreateStatic+0x70>)
 8002830:	f844 7c04 	str.w	r7, [r4, #-4]
  REG_INSERT(tp);
 8002834:	e9c4 1005 	strd	r1, r0, [r4, #20]
  tp->epending  = (eventmask_t)0;
 8002838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  chSchWakeupS(tp, MSG_OK);
 800283c:	4620      	mov	r0, r4
  REG_INSERT(tp);
 800283e:	610c      	str	r4, [r1, #16]
  tqp->next = (thread_t *)tqp;
 8002840:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8002844:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 8002846:	4629      	mov	r1, r5
  REG_INSERT(tp);
 8002848:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 800284a:	f7ff ff39 	bl	80026c0 <chSchWakeupS>
 800284e:	f385 8811 	msr	BASEPRI, r5
}
 8002852:	4620      	mov	r0, r4
 8002854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002856:	bf00      	nop
 8002858:	20000da0 	.word	0x20000da0
 800285c:	080099b8 	.word	0x080099b8
 8002860:	080002d1 	.word	0x080002d1
	...

08002870 <cmd_semaforo>:
static void cmd_semaforo(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b083      	sub	sp, #12
  char *testvar = argv[0];
 8002874:	6814      	ldr	r4, [r2, #0]
  flag2=true;
 8002876:	4e16      	ldr	r6, [pc, #88]	; (80028d0 <cmd_semaforo+0x60>)
    thread_t *tp = chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1,Thd2, NULL);
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <cmd_semaforo+0x64>)
 800287a:	4817      	ldr	r0, [pc, #92]	; (80028d8 <cmd_semaforo+0x68>)
 800287c:	2200      	movs	r2, #0
 800287e:	9200      	str	r2, [sp, #0]
 8002880:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  flag2=true;
 8002884:	2501      	movs	r5, #1
    thread_t *tp = chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1,Thd2, NULL);
 8002886:	2281      	movs	r2, #129	; 0x81
  flag2=true;
 8002888:	7035      	strb	r5, [r6, #0]
    thread_t *tp = chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1,Thd2, NULL);
 800288a:	f7ff ffb1 	bl	80027f0 <chThdCreateStatic>
        if(!strcmp("ON",testvar) ){
 800288e:	4621      	mov	r1, r4
    thread_t *tp = chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1,Thd2, NULL);
 8002890:	4607      	mov	r7, r0
        if(!strcmp("ON",testvar) ){
 8002892:	4812      	ldr	r0, [pc, #72]	; (80028dc <cmd_semaforo+0x6c>)
 8002894:	f7fd fdc8 	bl	8000428 <strcmp>
 8002898:	b120      	cbz	r0, 80028a4 <cmd_semaforo+0x34>
        else if (!strcmp("OFF",testvar)) {
 800289a:	4621      	mov	r1, r4
 800289c:	4810      	ldr	r0, [pc, #64]	; (80028e0 <cmd_semaforo+0x70>)
 800289e:	f7fd fdc3 	bl	8000428 <strcmp>
 80028a2:	b108      	cbz	r0, 80028a8 <cmd_semaforo+0x38>
  }
 80028a4:	b003      	add	sp, #12
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a8:	2320      	movs	r3, #32
 80028aa:	f383 8811 	msr	BASEPRI, r3
  tp->flags |= CH_FLAG_TERMINATE;
 80028ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80028ba:	f380 8811 	msr	BASEPRI, r0
          palSetLine(LINE_LED_RGB_GREEN);
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <cmd_semaforo+0x74>)
          flag2=false;
 80028c0:	7030      	strb	r0, [r6, #0]
          palSetLine(LINE_LED_RGB_GREEN);
 80028c2:	2102      	movs	r1, #2
          palSetLine(LINE_LED_RGB_BLUE);
 80028c4:	2204      	movs	r2, #4
          palSetLine(LINE_LED_RGB_GREEN);
 80028c6:	8319      	strh	r1, [r3, #24]
          palSetLine(LINE_LED_RGB_RED);
 80028c8:	831d      	strh	r5, [r3, #24]
          palSetLine(LINE_LED_RGB_BLUE);
 80028ca:	831a      	strh	r2, [r3, #24]
  }
 80028cc:	b003      	add	sp, #12
 80028ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d0:	20000fe0 	.word	0x20000fe0
 80028d4:	08003b51 	.word	0x08003b51
 80028d8:	20001998 	.word	0x20001998
 80028dc:	08009be4 	.word	0x08009be4
 80028e0:	08009b94 	.word	0x08009b94
 80028e4:	40020800 	.word	0x40020800
	...

080028f0 <chSchGoSleepS>:
  thread_t *otp = currp;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <chSchGoSleepS+0x24>)
 80028f2:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 80028f4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 80028f6:	b410      	push	{r4}
  otp->state = newstate;
 80028f8:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 80028fc:	6810      	ldr	r0, [r2, #0]
 80028fe:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8002900:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002902:	6043      	str	r3, [r0, #4]
 8002904:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8002908:	4610      	mov	r0, r2
}
 800290a:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800290c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800290e:	f7fd bcd7 	b.w	80002c0 <_port_switch>
 8002912:	bf00      	nop
 8002914:	20000da0 	.word	0x20000da0
	...

08002920 <chEvtWaitOne.constprop.48>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <chEvtWaitOne.constprop.48+0x30>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8002922:	b510      	push	{r4, lr}
 8002924:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8002926:	6994      	ldr	r4, [r2, #24]
 8002928:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800292c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800292e:	b933      	cbnz	r3, 800293e <chEvtWaitOne.constprop.48+0x1e>
    ctp->u.ewmask = events;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8002936:	200a      	movs	r0, #10
 8002938:	f7ff ffda 	bl	80028f0 <chSchGoSleepS>
    m = ctp->epending & events;
 800293c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 800293e:	4258      	negs	r0, r3
 8002940:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8002942:	ea23 0300 	bic.w	r3, r3, r0
 8002946:	6363      	str	r3, [r4, #52]	; 0x34
 8002948:	2300      	movs	r3, #0
 800294a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800294e:	bd10      	pop	{r4, pc}
 8002950:	20000da0 	.word	0x20000da0
	...

08002960 <chEvtWaitAny.constprop.47>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8002960:	4a09      	ldr	r2, [pc, #36]	; (8002988 <chEvtWaitAny.constprop.47+0x28>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8002962:	b510      	push	{r4, lr}
 8002964:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8002966:	6994      	ldr	r4, [r2, #24]
 8002968:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800296c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800296e:	b930      	cbnz	r0, 800297e <chEvtWaitAny.constprop.47+0x1e>
    ctp->u.ewmask = events;
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8002974:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8002976:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8002978:	f7ff ffba 	bl	80028f0 <chSchGoSleepS>
    m = ctp->epending & events;
 800297c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~m;
 800297e:	2300      	movs	r3, #0
 8002980:	6363      	str	r3, [r4, #52]	; 0x34
 8002982:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8002986:	bd10      	pop	{r4, pc}
 8002988:	20000da0 	.word	0x20000da0
 800298c:	00000000 	.word	0x00000000

08002990 <chEvtWaitAll.constprop.46>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8002990:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <chEvtWaitAll.constprop.46+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8002992:	b510      	push	{r4, lr}
 8002994:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8002996:	6994      	ldr	r4, [r2, #24]
 8002998:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 800299c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800299e:	f003 0205 	and.w	r2, r3, #5
 80029a2:	2a05      	cmp	r2, #5
 80029a4:	d005      	beq.n	80029b2 <chEvtWaitAll.constprop.46+0x22>
    ctp->u.ewmask = events;
 80029a6:	2305      	movs	r3, #5
 80029a8:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80029aa:	200b      	movs	r0, #11
 80029ac:	f7ff ffa0 	bl	80028f0 <chSchGoSleepS>
 80029b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 80029b2:	f023 0305 	bic.w	r3, r3, #5
 80029b6:	6363      	str	r3, [r4, #52]	; 0x34
 80029b8:	2300      	movs	r3, #0
 80029ba:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 80029be:	2005      	movs	r0, #5
 80029c0:	bd10      	pop	{r4, pc}
 80029c2:	bf00      	nop
 80029c4:	20000da0 	.word	0x20000da0
	...

080029d0 <bmk_thread4>:
  return ch.rlist.current;
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 80029d2:	b510      	push	{r4, lr}
 80029d4:	2320      	movs	r3, #32
 80029d6:	6994      	ldr	r4, [r2, #24]
 80029d8:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 80029dc:	2003      	movs	r0, #3
 80029de:	f7ff ff87 	bl	80028f0 <chSchGoSleepS>
  } while (msg == MSG_OK);
 80029e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f9      	beq.n	80029dc <bmk_thread4+0xc>
 80029e8:	2300      	movs	r3, #0
 80029ea:	f383 8811 	msr	BASEPRI, r3
}
 80029ee:	bd10      	pop	{r4, pc}
 80029f0:	20000da0 	.word	0x20000da0
	...

08002a00 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002a00:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 8002a02:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002a04:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8002a06:	d012      	beq.n	8002a2e <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002a08:	4c0c      	ldr	r4, [pc, #48]	; (8002a3c <chSchGoSleepTimeoutS+0x3c>)
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <chSchGoSleepTimeoutS+0x40>)
 8002a0c:	69a3      	ldr	r3, [r4, #24]
 8002a0e:	4605      	mov	r5, r0
 8002a10:	a801      	add	r0, sp, #4
 8002a12:	f7fe fe7d 	bl	8001710 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002a16:	4628      	mov	r0, r5
 8002a18:	f7ff ff6a 	bl	80028f0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8002a1c:	9b04      	ldr	r3, [sp, #16]
 8002a1e:	b113      	cbz	r3, 8002a26 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8002a20:	a801      	add	r0, sp, #4
 8002a22:	f7fe fe35 	bl	8001690 <chVTDoResetI>
  return currp->u.rdymsg;
 8002a26:	69a3      	ldr	r3, [r4, #24]
}
 8002a28:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a2a:	b007      	add	sp, #28
 8002a2c:	bd30      	pop	{r4, r5, pc}
 8002a2e:	4c03      	ldr	r4, [pc, #12]	; (8002a3c <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
 8002a30:	f7ff ff5e 	bl	80028f0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8002a34:	69a3      	ldr	r3, [r4, #24]
}
 8002a36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a38:	b007      	add	sp, #28
 8002a3a:	bd30      	pop	{r4, r5, pc}
 8002a3c:	20000da0 	.word	0x20000da0
 8002a40:	08001391 	.word	0x08001391
	...

08002a50 <chSemWaitTimeout.constprop.67>:
 8002a50:	2320      	movs	r3, #32
 8002a52:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <chSemWaitTimeout.constprop.67+0x48>)
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	1e4a      	subs	r2, r1, #1
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	db04      	blt.n	8002a6c <chSemWaitTimeout.constprop.67+0x1c>
  return MSG_OK;
 8002a62:	2000      	movs	r0, #0
 8002a64:	2300      	movs	r3, #0
 8002a66:	f383 8811 	msr	BASEPRI, r3
}
 8002a6a:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 8002a6c:	b180      	cbz	r0, 8002a90 <chSemWaitTimeout.constprop.67+0x40>
    currp->u.wtsemp = sp;
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <chSemWaitTimeout.constprop.67+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8002a70:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8002a72:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8002a74:	685c      	ldr	r4, [r3, #4]
 8002a76:	6253      	str	r3, [r2, #36]	; 0x24
 8002a78:	e9c2 3400 	strd	r3, r4, [r2]
 8002a7c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 8002a7e:	6022      	str	r2, [r4, #0]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8002a80:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	f7ff ffbc 	bl	8002a00 <chSchGoSleepTimeoutS>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f383 8811 	msr	BASEPRI, r3
}
 8002a8e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8002a90:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8002a92:	f04f 30ff 	mov.w	r0, #4294967295
 8002a96:	e7e5      	b.n	8002a64 <chSemWaitTimeout.constprop.67+0x14>
 8002a98:	20001040 	.word	0x20001040
 8002a9c:	20000da0 	.word	0x20000da0

08002aa0 <chGuardedPoolAllocTimeout.constprop.25>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8002aa8:	4c15      	ldr	r4, [pc, #84]	; (8002b00 <chGuardedPoolAllocTimeout.constprop.25+0x60>)
 8002aaa:	68a2      	ldr	r2, [r4, #8]
 8002aac:	1e53      	subs	r3, r2, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	60a3      	str	r3, [r4, #8]
 8002ab2:	db07      	blt.n	8002ac4 <chGuardedPoolAllocTimeout.constprop.25+0x24>
  objp = mp->next;
 8002ab4:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8002ab6:	b1b0      	cbz	r0, 8002ae6 <chGuardedPoolAllocTimeout.constprop.25+0x46>
    mp->next = mp->next->next;
 8002ab8:	6803      	ldr	r3, [r0, #0]
 8002aba:	60e3      	str	r3, [r4, #12]
 8002abc:	2300      	movs	r3, #0
 8002abe:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8002ac2:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 8002ac4:	b1c8      	cbz	r0, 8002afa <chGuardedPoolAllocTimeout.constprop.25+0x5a>
    currp->u.wtsemp = sp;
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <chGuardedPoolAllocTimeout.constprop.25+0x64>)
  tp->queue.prev             = tqp->prev;
 8002ac8:	6862      	ldr	r2, [r4, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8002acc:	4601      	mov	r1, r0
 8002ace:	e9c3 4200 	strd	r4, r2, [r3]
    currp->u.wtsemp = sp;
 8002ad2:	625c      	str	r4, [r3, #36]	; 0x24
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8002ad4:	2005      	movs	r0, #5
  tp->queue.prev->queue.next = tp;
 8002ad6:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8002ad8:	6063      	str	r3, [r4, #4]
 8002ada:	f7ff ff91 	bl	8002a00 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d0e8      	beq.n	8002ab4 <chGuardedPoolAllocTimeout.constprop.25+0x14>
    return NULL;
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	e7ea      	b.n	8002abc <chGuardedPoolAllocTimeout.constprop.25+0x1c>
  else if (mp->provider != NULL) {
 8002ae6:	69a3      	ldr	r3, [r4, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0fa      	beq.n	8002ae2 <chGuardedPoolAllocTimeout.constprop.25+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 8002aec:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002af0:	4798      	blx	r3
 8002af2:	2300      	movs	r3, #0
 8002af4:	f383 8811 	msr	BASEPRI, r3
}
 8002af8:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8002afa:	60a2      	str	r2, [r4, #8]
 8002afc:	e7de      	b.n	8002abc <chGuardedPoolAllocTimeout.constprop.25+0x1c>
 8002afe:	bf00      	nop
 8002b00:	20000c14 	.word	0x20000c14
 8002b04:	20000da0 	.word	0x20000da0
	...

08002b10 <oslib_test_003_003_execute>:

static void oslib_test_003_003_execute(void) {
 8002b10:	b508      	push	{r3, lr}

  /* [3.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <oslib_test_003_003_execute+0x20>)
 8002b14:	2201      	movs	r2, #1
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8002b16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(1);
 8002b1a:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8002b1c:	f7ff ffc0 	bl	8002aa0 <chGuardedPoolAllocTimeout.constprop.25>
 8002b20:	fab0 f080 	clz	r0, r0
 8002b24:	0940      	lsrs	r0, r0, #5
 8002b26:	4903      	ldr	r1, [pc, #12]	; (8002b34 <oslib_test_003_003_execute+0x24>)
  }
}
 8002b28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8002b2c:	f7fe b8b0 	b.w	8000c90 <_test_assert>
 8002b30:	20001774 	.word	0x20001774
 8002b34:	08009e8c 	.word	0x08009e8c
	...

08002b40 <rt_test_008_006_execute>:
static void rt_test_008_006_execute(void) {
 8002b40:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8002b42:	4d57      	ldr	r5, [pc, #348]	; (8002ca0 <rt_test_008_006_execute+0x160>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002b44:	4c57      	ldr	r4, [pc, #348]	; (8002ca4 <rt_test_008_006_execute+0x164>)
 8002b46:	2001      	movs	r0, #1
 8002b48:	6028      	str	r0, [r5, #0]
 8002b4a:	69a2      	ldr	r2, [r4, #24]
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8002b52:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002b54:	b933      	cbnz	r3, 8002b64 <rt_test_008_006_execute+0x24>
 8002b56:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8002b5a:	4953      	ldr	r1, [pc, #332]	; (8002ca8 <rt_test_008_006_execute+0x168>)
 8002b5c:	f7fe f898 	bl	8000c90 <_test_assert>
 8002b60:	b180      	cbz	r0, 8002b84 <rt_test_008_006_execute+0x44>
}
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8002b64:	4258      	negs	r0, r3
 8002b66:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8002b68:	ea23 0300 	bic.w	r3, r3, r0
 8002b6c:	6353      	str	r3, [r2, #52]	; 0x34
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	fab0 f080 	clz	r0, r0
 8002b78:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8002b7a:	494b      	ldr	r1, [pc, #300]	; (8002ca8 <rt_test_008_006_execute+0x168>)
 8002b7c:	f7fe f888 	bl	8000c90 <_test_assert>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d1ee      	bne.n	8002b62 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002b84:	69a3      	ldr	r3, [r4, #24]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d072      	beq.n	8002c78 <rt_test_008_006_execute+0x138>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8002b92:	6358      	str	r0, [r3, #52]	; 0x34
 8002b94:	f380 8811 	msr	BASEPRI, r0
    test_assert(m == 0, "spurious event");
 8002b98:	4943      	ldr	r1, [pc, #268]	; (8002ca8 <rt_test_008_006_execute+0x168>)
 8002b9a:	f7fe f879 	bl	8000c90 <_test_assert>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d1df      	bne.n	8002b62 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002ba2:	69a3      	ldr	r3, [r4, #24]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 8002baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bac:	3201      	adds	r2, #1
 8002bae:	d067      	beq.n	8002c80 <rt_test_008_006_execute+0x140>
 8002bb0:	f380 8811 	msr	BASEPRI, r0
 8002bb4:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002bb6:	493c      	ldr	r1, [pc, #240]	; (8002ca8 <rt_test_008_006_execute+0x168>)
 8002bb8:	f7fe f86a 	bl	8000c90 <_test_assert>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d1d0      	bne.n	8002b62 <rt_test_008_006_execute+0x22>
  test_set_step(2);
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 8002bc4:	69a6      	ldr	r6, [r4, #24]
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 8002bcc:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002bce:	b955      	cbnz	r5, 8002be6 <rt_test_008_006_execute+0xa6>
    ctp->u.ewmask = events;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd4:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002bd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bda:	200a      	movs	r0, #10
 8002bdc:	f7ff ff10 	bl	8002a00 <chSchGoSleepTimeoutS>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	db51      	blt.n	8002c88 <rt_test_008_006_execute+0x148>
    m = ctp->epending & events;
 8002be4:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8002be6:	4268      	negs	r0, r5
 8002be8:	4028      	ands	r0, r5
  ctp->epending &= ~m;
 8002bea:	ea25 0500 	bic.w	r5, r5, r0
 8002bee:	6375      	str	r5, [r6, #52]	; 0x34
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	fab0 f080 	clz	r0, r0
 8002bfa:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8002bfc:	492a      	ldr	r1, [pc, #168]	; (8002ca8 <rt_test_008_006_execute+0x168>)
 8002bfe:	f7fe f847 	bl	8000c90 <_test_assert>
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d1ad      	bne.n	8002b62 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 8002c06:	69a6      	ldr	r6, [r4, #24]
 8002c08:	2320      	movs	r3, #32
 8002c0a:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 8002c0e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002c10:	b955      	cbnz	r5, 8002c28 <rt_test_008_006_execute+0xe8>
    ctp->u.ewmask = events;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002c18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c1c:	200a      	movs	r0, #10
 8002c1e:	f7ff feef 	bl	8002a00 <chSchGoSleepTimeoutS>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	db34      	blt.n	8002c90 <rt_test_008_006_execute+0x150>
    m = ctp->epending & events;
 8002c26:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6373      	str	r3, [r6, #52]	; 0x34
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	fab5 f085 	clz	r0, r5
 8002c34:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8002c36:	491c      	ldr	r1, [pc, #112]	; (8002ca8 <rt_test_008_006_execute+0x168>)
 8002c38:	f7fe f82a 	bl	8000c90 <_test_assert>
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d18f      	bne.n	8002b62 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 8002c42:	69a4      	ldr	r4, [r4, #24]
 8002c44:	2320      	movs	r3, #32
 8002c46:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 8002c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	d009      	beq.n	8002c64 <rt_test_008_006_execute+0x124>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8002c56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c5a:	200b      	movs	r0, #11
 8002c5c:	f7ff fed0 	bl	8002a00 <chSchGoSleepTimeoutS>
 8002c60:	2800      	cmp	r0, #0
 8002c62:	db19      	blt.n	8002c98 <rt_test_008_006_execute+0x158>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 8002c64:	2300      	movs	r3, #0
 8002c66:	6363      	str	r3, [r4, #52]	; 0x34
 8002c68:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	490e      	ldr	r1, [pc, #56]	; (8002ca8 <rt_test_008_006_execute+0x168>)
}
 8002c70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 8002c74:	f7fe b80c 	b.w	8000c90 <_test_assert>
 8002c78:	f382 8811 	msr	BASEPRI, r2
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	e78b      	b.n	8002b98 <rt_test_008_006_execute+0x58>
 8002c80:	6358      	str	r0, [r3, #52]	; 0x34
 8002c82:	f380 8811 	msr	BASEPRI, r0
 8002c86:	e796      	b.n	8002bb6 <rt_test_008_006_execute+0x76>
 8002c88:	f385 8811 	msr	BASEPRI, r5
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	e7b5      	b.n	8002bfc <rt_test_008_006_execute+0xbc>
 8002c90:	f385 8811 	msr	BASEPRI, r5
 8002c94:	2001      	movs	r0, #1
 8002c96:	e7ce      	b.n	8002c36 <rt_test_008_006_execute+0xf6>
 8002c98:	f385 8811 	msr	BASEPRI, r5
 8002c9c:	2501      	movs	r5, #1
 8002c9e:	e7e5      	b.n	8002c6c <rt_test_008_006_execute+0x12c>
 8002ca0:	20001774 	.word	0x20001774
 8002ca4:	20000da0 	.word	0x20000da0
 8002ca8:	0800b070 	.word	0x0800b070
 8002cac:	00000000 	.word	0x00000000

08002cb0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8002cb0:	b161      	cbz	r1, 8002ccc <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002cb4:	b410      	push	{r4}
 8002cb6:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8002cb8:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 8002cba:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002cbc:	2004      	movs	r0, #4
 8002cbe:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8002cc2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8002cc4:	6053      	str	r3, [r2, #4]
}
 8002cc6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002cc8:	f7ff be9a 	b.w	8002a00 <chSchGoSleepTimeoutS>
}
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000da0 	.word	0x20000da0
	...

08002ce0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8002cea:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8002cee:	f04f 0a20 	mov.w	sl, #32
 8002cf2:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002cf6:	b33a      	cbz	r2, 8002d48 <oqWriteTimeout+0x68>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460f      	mov	r7, r1
 8002cfc:	4616      	mov	r6, r2
 8002cfe:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 8002d02:	68a2      	ldr	r2, [r4, #8]
 8002d04:	4296      	cmp	r6, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002d06:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8002d0a:	bf8c      	ite	hi
 8002d0c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8002d0e:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002d10:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002d14:	45a8      	cmp	r8, r5
 8002d16:	d840      	bhi.n	8002d9a <oqWriteTimeout+0xba>
  else if (n > s1) {
 8002d18:	d32b      	bcc.n	8002d72 <oqWriteTimeout+0x92>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002d1a:	462a      	mov	r2, r5
 8002d1c:	4639      	mov	r1, r7
 8002d1e:	f7fd fae3 	bl	80002e8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002d22:	68e2      	ldr	r2, [r4, #12]
 8002d24:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8002d26:	68a2      	ldr	r2, [r4, #8]
 8002d28:	1b52      	subs	r2, r2, r5
 8002d2a:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8002d2c:	b19d      	cbz	r5, 8002d56 <oqWriteTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002d2e:	f1b9 0f00 	cmp.w	r9, #0
 8002d32:	d001      	beq.n	8002d38 <oqWriteTimeout+0x58>
        nfy(oqp);
 8002d34:	4620      	mov	r0, r4
 8002d36:	47c8      	blx	r9
 8002d38:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002d3c:	1b76      	subs	r6, r6, r5
      bp += done;
 8002d3e:	442f      	add	r7, r5
 8002d40:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	d1dc      	bne.n	8002d02 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8002d48:	9803      	ldr	r0, [sp, #12]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002d50:	b005      	add	sp, #20
 8002d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8002d56:	9902      	ldr	r1, [sp, #8]
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ffa9 	bl	8002cb0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d0cf      	beq.n	8002d02 <oqWriteTimeout+0x22>
 8002d62:	9b03      	ldr	r3, [sp, #12]
 8002d64:	1b98      	subs	r0, r3, r6
 8002d66:	2300      	movs	r3, #0
 8002d68:	f383 8811 	msr	BASEPRI, r3
}
 8002d6c:	b005      	add	sp, #20
 8002d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8002d72:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002d76:	4642      	mov	r2, r8
 8002d78:	4639      	mov	r1, r7
    s2 = n - s1;
 8002d7a:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002d7c:	f7fd fab4 	bl	80002e8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002d80:	eb07 0108 	add.w	r1, r7, r8
 8002d84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002d88:	68e0      	ldr	r0, [r4, #12]
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	f7fd faac 	bl	80002e8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002d90:	68e2      	ldr	r2, [r4, #12]
 8002d92:	4643      	mov	r3, r8
 8002d94:	18d3      	adds	r3, r2, r3
 8002d96:	6163      	str	r3, [r4, #20]
 8002d98:	e7c5      	b.n	8002d26 <oqWriteTimeout+0x46>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002d9a:	462a      	mov	r2, r5
 8002d9c:	4639      	mov	r1, r7
 8002d9e:	f7fd faa3 	bl	80002e8 <memcpy>
    oqp->q_wrptr += n;
 8002da2:	6962      	ldr	r2, [r4, #20]
 8002da4:	442a      	add	r2, r5
 8002da6:	6162      	str	r2, [r4, #20]
 8002da8:	e7bd      	b.n	8002d26 <oqWriteTimeout+0x46>
 8002daa:	bf00      	nop
 8002dac:	0000      	movs	r0, r0
	...

08002db0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002db0:	3030      	adds	r0, #48	; 0x30
 8002db2:	f7ff bf95 	b.w	8002ce0 <oqWriteTimeout>
 8002db6:	bf00      	nop
	...

08002dc0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002dc0:	3030      	adds	r0, #48	; 0x30
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	f7ff bf8b 	b.w	8002ce0 <oqWriteTimeout>
 8002dca:	bf00      	nop
 8002dcc:	0000      	movs	r0, r0
	...

08002dd0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	460f      	mov	r7, r1
 8002dd6:	4616      	mov	r6, r2
 8002dd8:	2320      	movs	r3, #32
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	e003      	b.n	8002de8 <oqPutTimeout+0x18>
 8002de0:	f7ff ff66 	bl	8002cb0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002de4:	2800      	cmp	r0, #0
 8002de6:	db18      	blt.n	8002e1a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8002de8:	68a5      	ldr	r5, [r4, #8]
 8002dea:	4631      	mov	r1, r6
 8002dec:	4620      	mov	r0, r4
 8002dee:	2d00      	cmp	r5, #0
 8002df0:	d0f6      	beq.n	8002de0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8002df2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002df4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002df6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002df8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8002dfa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8002dfc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002dfe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002e00:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002e04:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002e06:	bf24      	itt	cs
 8002e08:	68e3      	ldrcs	r3, [r4, #12]
 8002e0a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8002e0c:	69e3      	ldr	r3, [r4, #28]
 8002e0e:	b103      	cbz	r3, 8002e12 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8002e10:	4798      	blx	r3
 8002e12:	2000      	movs	r0, #0
 8002e14:	f380 8811 	msr	BASEPRI, r0
}
 8002e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e1a:	f385 8811 	msr	BASEPRI, r5
 8002e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e20 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002e20:	3030      	adds	r0, #48	; 0x30
 8002e22:	f7ff bfd5 	b.w	8002dd0 <oqPutTimeout>
 8002e26:	bf00      	nop
	...

08002e30 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002e30:	3030      	adds	r0, #48	; 0x30
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	f7ff bfcb 	b.w	8002dd0 <oqPutTimeout>
 8002e3a:	bf00      	nop
 8002e3c:	0000      	movs	r0, r0
	...

08002e40 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e44:	b085      	sub	sp, #20
 8002e46:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8002e4a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8002e4e:	f04f 0a20 	mov.w	sl, #32
 8002e52:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002e56:	b33a      	cbz	r2, 8002ea8 <iqReadTimeout+0x68>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	460f      	mov	r7, r1
 8002e5c:	4616      	mov	r6, r2
 8002e5e:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 8002e62:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002e64:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002e66:	4296      	cmp	r6, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002e68:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8002e6a:	bf8c      	ite	hi
 8002e6c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8002e6e:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002e70:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002e74:	45a8      	cmp	r8, r5
 8002e76:	d840      	bhi.n	8002efa <iqReadTimeout+0xba>
  else if (n > s1) {
 8002e78:	d32b      	bcc.n	8002ed2 <iqReadTimeout+0x92>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002e7a:	462a      	mov	r2, r5
 8002e7c:	4638      	mov	r0, r7
 8002e7e:	f7fd fa33 	bl	80002e8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002e82:	68e2      	ldr	r2, [r4, #12]
 8002e84:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8002e86:	68a2      	ldr	r2, [r4, #8]
 8002e88:	1b52      	subs	r2, r2, r5
 8002e8a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002e8c:	b19d      	cbz	r5, 8002eb6 <iqReadTimeout+0x76>
      if (nfy != NULL) {
 8002e8e:	f1b9 0f00 	cmp.w	r9, #0
 8002e92:	d001      	beq.n	8002e98 <iqReadTimeout+0x58>
        nfy(iqp);
 8002e94:	4620      	mov	r0, r4
 8002e96:	47c8      	blx	r9
 8002e98:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 8002e9c:	1b76      	subs	r6, r6, r5
      bp += done;
 8002e9e:	442f      	add	r7, r5
 8002ea0:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002ea4:	2e00      	cmp	r6, #0
 8002ea6:	d1dc      	bne.n	8002e62 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 8002ea8:	9803      	ldr	r0, [sp, #12]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f383 8811 	msr	BASEPRI, r3
}
 8002eb0:	b005      	add	sp, #20
 8002eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb6:	9902      	ldr	r1, [sp, #8]
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f7ff fef9 	bl	8002cb0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d0cf      	beq.n	8002e62 <iqReadTimeout+0x22>
 8002ec2:	9b03      	ldr	r3, [sp, #12]
 8002ec4:	1b98      	subs	r0, r3, r6
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f383 8811 	msr	BASEPRI, r3
}
 8002ecc:	b005      	add	sp, #20
 8002ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8002ed2:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002ed6:	4642      	mov	r2, r8
 8002ed8:	4638      	mov	r0, r7
    s2 = n - s1;
 8002eda:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002edc:	f7fd fa04 	bl	80002e8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002ee0:	eb07 0008 	add.w	r0, r7, r8
 8002ee4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002ee8:	68e1      	ldr	r1, [r4, #12]
 8002eea:	4642      	mov	r2, r8
 8002eec:	f7fd f9fc 	bl	80002e8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002ef0:	68e2      	ldr	r2, [r4, #12]
 8002ef2:	4643      	mov	r3, r8
 8002ef4:	18d3      	adds	r3, r2, r3
 8002ef6:	61a3      	str	r3, [r4, #24]
 8002ef8:	e7c5      	b.n	8002e86 <iqReadTimeout+0x46>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002efa:	462a      	mov	r2, r5
 8002efc:	4638      	mov	r0, r7
 8002efe:	f7fd f9f3 	bl	80002e8 <memcpy>
    iqp->q_rdptr += n;
 8002f02:	69a2      	ldr	r2, [r4, #24]
 8002f04:	442a      	add	r2, r5
 8002f06:	61a2      	str	r2, [r4, #24]
 8002f08:	e7bd      	b.n	8002e86 <iqReadTimeout+0x46>
 8002f0a:	bf00      	nop
 8002f0c:	0000      	movs	r0, r0
	...

08002f10 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002f10:	300c      	adds	r0, #12
 8002f12:	f7ff bf95 	b.w	8002e40 <iqReadTimeout>
 8002f16:	bf00      	nop
	...

08002f20 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002f20:	300c      	adds	r0, #12
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	f7ff bf8b 	b.w	8002e40 <iqReadTimeout>
 8002f2a:	bf00      	nop
 8002f2c:	0000      	movs	r0, r0
	...

08002f30 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	2320      	movs	r3, #32
 8002f34:	4604      	mov	r4, r0
 8002f36:	460e      	mov	r6, r1
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	e003      	b.n	8002f46 <iqGetTimeout+0x16>
 8002f3e:	f7ff feb7 	bl	8002cb0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002f42:	2800      	cmp	r0, #0
 8002f44:	db1a      	blt.n	8002f7c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8002f46:	68a5      	ldr	r5, [r4, #8]
 8002f48:	4631      	mov	r1, r6
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	2d00      	cmp	r5, #0
 8002f4e:	d0f6      	beq.n	8002f3e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8002f50:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8002f52:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002f54:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8002f56:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8002f58:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8002f5a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8002f5c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8002f5e:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8002f60:	bf28      	it	cs
 8002f62:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8002f64:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8002f66:	bf28      	it	cs
 8002f68:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8002f6a:	69e3      	ldr	r3, [r4, #28]
 8002f6c:	b10b      	cbz	r3, 8002f72 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4798      	blx	r3
 8002f72:	2300      	movs	r3, #0
 8002f74:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002f78:	4628      	mov	r0, r5
}
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f385 8811 	msr	BASEPRI, r5
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
 8002f82:	bf00      	nop
	...

08002f90 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002f90:	300c      	adds	r0, #12
 8002f92:	f7ff bfcd 	b.w	8002f30 <iqGetTimeout>
 8002f96:	bf00      	nop
	...

08002fa0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002fa0:	300c      	adds	r0, #12
 8002fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa6:	f7ff bfc3 	b.w	8002f30 <iqGetTimeout>
 8002faa:	bf00      	nop
 8002fac:	0000      	movs	r0, r0
	...

08002fb0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002fb0:	b508      	push	{r3, lr}
 8002fb2:	4601      	mov	r1, r0
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002fba:	2008      	movs	r0, #8
 8002fbc:	f7ff fd20 	bl	8002a00 <chSchGoSleepTimeoutS>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f383 8811 	msr	BASEPRI, r3
}
 8002fc6:	bd08      	pop	{r3, pc}
	...

08002fd0 <Thd1>:
  (BaseSequentialStream *)&SD2,
  commands
};

static THD_WORKING_AREA(waThd1, 256);
static THD_FUNCTION(Thd1, arg){
 8002fd0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <Thd1+0x20>)
 8002fd4:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <Thd1+0x24>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
  (void) arg;
  chRegSetThreadName(" dummy Thread 1");
  while(TRUE){
    palToggleLine(LINE_LED_GREEN);
 8002fd8:	4c07      	ldr	r4, [pc, #28]	; (8002ff8 <Thd1+0x28>)
 8002fda:	619a      	str	r2, [r3, #24]
 8002fdc:	6963      	ldr	r3, [r4, #20]
 8002fde:	f083 0320 	eor.w	r3, r3, #32
 8002fe2:	6163      	str	r3, [r4, #20]
    chThdSleepMilliseconds(500);
 8002fe4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002fe8:	f7ff ffe2 	bl	8002fb0 <chThdSleep>
 8002fec:	e7f6      	b.n	8002fdc <Thd1+0xc>
 8002fee:	bf00      	nop
 8002ff0:	20000da0 	.word	0x20000da0
 8002ff4:	08009898 	.word	0x08009898
 8002ff8:	40020000 	.word	0x40020000
 8002ffc:	00000000 	.word	0x00000000

08003000 <rt_test_003_001_execute>:
 * - [3.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void rt_test_003_001_execute(void) {
 8003000:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [3.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8003002:	4e2b      	ldr	r6, [pc, #172]	; (80030b0 <rt_test_003_001_execute+0xb0>)
 8003004:	2301      	movs	r3, #1
 8003006:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 800300e:	2064      	movs	r0, #100	; 0x64
 8003010:	f7ff ffce 	bl	8002fb0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 8003014:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8003018:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800301c:	f7fd fc10 	bl	8000840 <_test_assert_time_window.constprop.1>
 8003020:	b100      	cbz	r0, 8003024 <rt_test_003_001_execute+0x24>
    chThdSleepUntil(chTimeAddX(time, 100));
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
}
 8003022:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8003024:	2302      	movs	r3, #2
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 800302a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800302e:	f7ff ffbf 	bl	8002fb0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8003032:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8003036:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 800303a:	f7fd fc01 	bl	8000840 <_test_assert_time_window.constprop.1>
 800303e:	2800      	cmp	r0, #0
 8003040:	d1ef      	bne.n	8003022 <rt_test_003_001_execute+0x22>
  test_set_step(3);
 8003042:	2303      	movs	r3, #3
 8003044:	6033      	str	r3, [r6, #0]
 8003046:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8003048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800304c:	f7ff ffb0 	bl	8002fb0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8003050:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8003054:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8003058:	f7fd fbf2 	bl	8000840 <_test_assert_time_window.constprop.1>
 800305c:	2800      	cmp	r0, #0
 800305e:	d1e0      	bne.n	8003022 <rt_test_003_001_execute+0x22>
  test_set_step(4);
 8003060:	2304      	movs	r3, #4
 8003062:	6033      	str	r3, [r6, #0]
 8003064:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8003066:	f242 7010 	movw	r0, #10000	; 0x2710
 800306a:	f7ff ffa1 	bl	8002fb0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 800306e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8003072:	4608      	mov	r0, r1
 8003074:	3010      	adds	r0, #16
 8003076:	3113      	adds	r1, #19
 8003078:	f7fd fbe2 	bl	8000840 <_test_assert_time_window.constprop.1>
 800307c:	2800      	cmp	r0, #0
 800307e:	d1d0      	bne.n	8003022 <rt_test_003_001_execute+0x22>
  test_set_step(5);
 8003080:	2305      	movs	r3, #5
 8003082:	6033      	str	r3, [r6, #0]
 8003084:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8003086:	2320      	movs	r3, #32
 8003088:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 8003092:	1a61      	subs	r1, r4, r1
 8003094:	d002      	beq.n	800309c <rt_test_003_001_execute+0x9c>
 8003096:	2008      	movs	r0, #8
 8003098:	f7ff fcb2 	bl	8002a00 <chSchGoSleepTimeoutS>
 800309c:	2300      	movs	r3, #0
 800309e:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 80030a2:	f106 0167 	add.w	r1, r6, #103	; 0x67
 80030a6:	4620      	mov	r0, r4
}
 80030a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 80030ac:	f7fd bbc8 	b.w	8000840 <_test_assert_time_window.constprop.1>
 80030b0:	20001774 	.word	0x20001774
	...

080030c0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 80030c0:	b508      	push	{r3, lr}

  chThdSleep(1);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7ff ff74 	bl	8002fb0 <chThdSleep>
 80030c8:	2320      	movs	r3, #32
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030d2:	2300      	movs	r3, #0
 80030d4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80030d6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80030da:	bd08      	pop	{r3, pc}
 80030dc:	0000      	movs	r0, r0
	...

080030e0 <rt_test_010_009_execute>:
static void rt_test_010_009_execute(void) {
 80030e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 80030e4:	f8df b090 	ldr.w	fp, [pc, #144]	; 8003178 <rt_test_010_009_execute+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80030e8:	4f1e      	ldr	r7, [pc, #120]	; (8003164 <rt_test_010_009_execute+0x84>)
 80030ea:	4e1f      	ldr	r6, [pc, #124]	; (8003168 <rt_test_010_009_execute+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 80030ec:	4d1f      	ldr	r5, [pc, #124]	; (800316c <rt_test_010_009_execute+0x8c>)
  test_set_step(1);
 80030ee:	2301      	movs	r3, #1
 80030f0:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 80030f4:	f7ff ffe4 	bl	80030c0 <test_wait_tick>
    n = 0;
 80030f8:	2400      	movs	r4, #0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80030fa:	46a2      	mov	sl, r4
    start = test_wait_tick();
 80030fc:	4681      	mov	r9, r0
 80030fe:	f04f 0820 	mov.w	r8, #32
 8003102:	f388 8811 	msr	BASEPRI, r8
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003106:	2300      	movs	r3, #0
 8003108:	463a      	mov	r2, r7
 800310a:	4630      	mov	r0, r6
 800310c:	2101      	movs	r1, #1
 800310e:	f7fe faff 	bl	8001710 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8003112:	463a      	mov	r2, r7
 8003114:	2300      	movs	r3, #0
 8003116:	f242 7110 	movw	r1, #10000	; 0x2710
 800311a:	4628      	mov	r0, r5
 800311c:	f7fe faf8 	bl	8001710 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8003120:	4630      	mov	r0, r6
 8003122:	f7fe fab5 	bl	8001690 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8003126:	4628      	mov	r0, r5
 8003128:	f7fe fab2 	bl	8001690 <chVTDoResetI>
 800312c:	f38a 8811 	msr	BASEPRI, sl
 8003130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8003134:	f242 720f 	movw	r2, #9999	; 0x270f
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((time - start) < (end - start));
 800313a:	eba3 0309 	sub.w	r3, r3, r9
 800313e:	4293      	cmp	r3, r2
      n++;
 8003140:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8003144:	d9dd      	bls.n	8003102 <rt_test_010_009_execute+0x22>
  test_set_step(2);
 8003146:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8003148:	4809      	ldr	r0, [pc, #36]	; (8003170 <rt_test_010_009_execute+0x90>)
  test_set_step(2);
 800314a:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 800314e:	f7fd fe9f 	bl	8000e90 <test_print>
    test_printn(n * 2);
 8003152:	0060      	lsls	r0, r4, #1
 8003154:	f7fd fe2c 	bl	8000db0 <test_printn>
    test_println(" timers/S");
 8003158:	4806      	ldr	r0, [pc, #24]	; (8003174 <rt_test_010_009_execute+0x94>)
}
 800315a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 800315e:	f7fd be77 	b.w	8000e50 <test_println>
 8003162:	bf00      	nop
 8003164:	08000aa1 	.word	0x08000aa1
 8003168:	200017a4 	.word	0x200017a4
 800316c:	200017b8 	.word	0x200017b8
 8003170:	0800b260 	.word	0x0800b260
 8003174:	0800b270 	.word	0x0800b270
 8003178:	20001774 	.word	0x20001774
 800317c:	00000000 	.word	0x00000000

08003180 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int tseq, tcase;

  test_chp = stream;
 8003184:	4c9d      	ldr	r4, [pc, #628]	; (80033fc <test_execute+0x27c>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8003186:	4689      	mov	r9, r1
  test_chp = stream;
 8003188:	6020      	str	r0, [r4, #0]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 800318a:	b083      	sub	sp, #12
  test_println("");
 800318c:	489c      	ldr	r0, [pc, #624]	; (8003400 <test_execute+0x280>)
 800318e:	f7fd fe5f 	bl	8000e50 <test_println>
  if (tsp->name != NULL) {
 8003192:	f8d9 3000 	ldr.w	r3, [r9]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8186 	beq.w	80034a8 <test_execute+0x328>
 800319c:	4d99      	ldr	r5, [pc, #612]	; (8003404 <test_execute+0x284>)
  while (*msgp)
 800319e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	6803      	ldr	r3, [r0, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4798      	blx	r3
  while (*msgp)
 80031a8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80031ac:	2900      	cmp	r1, #0
 80031ae:	d1f7      	bne.n	80031a0 <test_execute+0x20>
    test_print("*** ");
    test_println(tsp->name);
 80031b0:	f8d9 0000 	ldr.w	r0, [r9]
 80031b4:	f7fd fe4c 	bl	8000e50 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 80031b8:	4893      	ldr	r0, [pc, #588]	; (8003408 <test_execute+0x288>)
 80031ba:	4d94      	ldr	r5, [pc, #592]	; (800340c <test_execute+0x28c>)
 80031bc:	f7fd fe48 	bl	8000e50 <test_println>
  while (*msgp)
 80031c0:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	6803      	ldr	r3, [r0, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4798      	blx	r3
  while (*msgp)
 80031ca:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80031ce:	2900      	cmp	r1, #0
 80031d0:	d1f7      	bne.n	80031c2 <test_execute+0x42>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 80031d2:	488f      	ldr	r0, [pc, #572]	; (8003410 <test_execute+0x290>)
 80031d4:	4d8f      	ldr	r5, [pc, #572]	; (8003414 <test_execute+0x294>)
 80031d6:	f7fd fe3b 	bl	8000e50 <test_println>
  while (*msgp)
 80031da:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	6803      	ldr	r3, [r0, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4798      	blx	r3
  while (*msgp)
 80031e4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d1f7      	bne.n	80031dc <test_execute+0x5c>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80031ec:	488a      	ldr	r0, [pc, #552]	; (8003418 <test_execute+0x298>)
 80031ee:	4d8b      	ldr	r5, [pc, #556]	; (800341c <test_execute+0x29c>)
 80031f0:	f7fd fe2e 	bl	8000e50 <test_println>
  while (*msgp)
 80031f4:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	6803      	ldr	r3, [r0, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4798      	blx	r3
  while (*msgp)
 80031fe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003202:	2900      	cmp	r1, #0
 8003204:	d1f7      	bne.n	80031f6 <test_execute+0x76>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8003206:	4886      	ldr	r0, [pc, #536]	; (8003420 <test_execute+0x2a0>)
 8003208:	9101      	str	r1, [sp, #4]
 800320a:	f7fd fe21 	bl	8000e50 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 800320e:	487c      	ldr	r0, [pc, #496]	; (8003400 <test_execute+0x280>)
  test_tokp = test_tokens_buffer;
 8003210:	4f84      	ldr	r7, [pc, #528]	; (8003424 <test_execute+0x2a4>)
  test_println("");
 8003212:	f7fd fe1d 	bl	8000e50 <test_println>

  test_global_fail = false;
 8003216:	4b84      	ldr	r3, [pc, #528]	; (8003428 <test_execute+0x2a8>)
  tseq = 0;
 8003218:	9901      	ldr	r1, [sp, #4]
  test_global_fail = false;
 800321a:	7019      	strb	r1, [r3, #0]
 800321c:	f8d9 3004 	ldr.w	r3, [r9, #4]
  tseq = 0;
 8003220:	468b      	mov	fp, r1
  while (tsp->sequences[tseq] != NULL) {
 8003222:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8003226:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 811a 	beq.w	8003464 <test_execute+0x2e4>
 8003230:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 8003232:	6820      	ldr	r0, [r4, #0]
 8003234:	6803      	ldr	r3, [r0, #0]
 8003236:	213d      	movs	r1, #61	; 0x3d
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 800323c:	3d01      	subs	r5, #1
 800323e:	d1f8      	bne.n	8003232 <test_execute+0xb2>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	497a      	ldr	r1, [pc, #488]	; (800342c <test_execute+0x2ac>)
 8003244:	6803      	ldr	r3, [r0, #0]
 8003246:	4d7a      	ldr	r5, [pc, #488]	; (8003430 <test_execute+0x2b0>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	4798      	blx	r3
  while (*msgp)
 800324e:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	6803      	ldr	r3, [r0, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4798      	blx	r3
  while (*msgp)
 8003258:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800325c:	2900      	cmp	r1, #0
 800325e:	d1f7      	bne.n	8003250 <test_execute+0xd0>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8003260:	f10b 0b01 	add.w	fp, fp, #1
 8003264:	4658      	mov	r0, fp
 8003266:	4d73      	ldr	r5, [pc, #460]	; (8003434 <test_execute+0x2b4>)
 8003268:	f7fd fda2 	bl	8000db0 <test_printn>
  while (*msgp)
 800326c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	6803      	ldr	r3, [r0, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4798      	blx	r3
  while (*msgp)
 8003276:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800327a:	2900      	cmp	r1, #0
 800327c:	d1f7      	bne.n	800326e <test_execute+0xee>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 800327e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003282:	599b      	ldr	r3, [r3, r6]
 8003284:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8003286:	7829      	ldrb	r1, [r5, #0]
 8003288:	b139      	cbz	r1, 800329a <test_execute+0x11a>
    streamPut(test_chp, *msgp++);
 800328a:	6820      	ldr	r0, [r4, #0]
 800328c:	6803      	ldr	r3, [r0, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4798      	blx	r3
  while (*msgp)
 8003292:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003296:	2900      	cmp	r1, #0
 8003298:	d1f7      	bne.n	800328a <test_execute+0x10a>
    test_println(")");
 800329a:	4867      	ldr	r0, [pc, #412]	; (8003438 <test_execute+0x2b8>)
 800329c:	f7fd fdd8 	bl	8000e50 <test_println>
#endif
    tcase = 0;
 80032a0:	2500      	movs	r5, #0
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 80032a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80032a6:	599a      	ldr	r2, [r3, r6]
 80032a8:	6852      	ldr	r2, [r2, #4]
 80032aa:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80032ae:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d0b5      	beq.n	8003222 <test_execute+0xa2>
      print_line();
 80032b6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8003450 <test_execute+0x2d0>
 80032ba:	f7fd fe51 	bl	8000f60 <print_line>
  while (*msgp)
 80032be:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4798      	blx	r3
  while (*msgp)
 80032c8:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80032cc:	2900      	cmp	r1, #0
 80032ce:	d1f7      	bne.n	80032c0 <test_execute+0x140>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 80032d0:	4658      	mov	r0, fp
 80032d2:	f7fd fd6d 	bl	8000db0 <test_printn>
    streamPut(test_chp, *msgp++);
 80032d6:	6820      	ldr	r0, [r4, #0]
      test_print(".");
      test_printn(tcase + 1);
 80032d8:	f8df a158 	ldr.w	sl, [pc, #344]	; 8003434 <test_execute+0x2b4>
    streamPut(test_chp, *msgp++);
 80032dc:	6803      	ldr	r3, [r0, #0]
 80032de:	212e      	movs	r1, #46	; 0x2e
 80032e0:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 80032e2:	3501      	adds	r5, #1
    streamPut(test_chp, *msgp++);
 80032e4:	4798      	blx	r3
      test_printn(tcase + 1);
 80032e6:	4628      	mov	r0, r5
 80032e8:	f7fd fd62 	bl	8000db0 <test_printn>
  while (*msgp)
 80032ec:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	6803      	ldr	r3, [r0, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4798      	blx	r3
  while (*msgp)
 80032f6:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80032fa:	2900      	cmp	r1, #0
 80032fc:	d1f7      	bne.n	80032ee <test_execute+0x16e>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 80032fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003302:	599b      	ldr	r3, [r3, r6]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f853 3008 	ldr.w	r3, [r3, r8]
 800330a:	f8d3 a000 	ldr.w	sl, [r3]
  while (*msgp)
 800330e:	f89a 1000 	ldrb.w	r1, [sl]
 8003312:	b139      	cbz	r1, 8003324 <test_execute+0x1a4>
    streamPut(test_chp, *msgp++);
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	6803      	ldr	r3, [r0, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4798      	blx	r3
  while (*msgp)
 800331c:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8003320:	2900      	cmp	r1, #0
 8003322:	d1f7      	bne.n	8003314 <test_execute+0x194>
      test_println(")");
 8003324:	4844      	ldr	r0, [pc, #272]	; (8003438 <test_execute+0x2b8>)
  test_local_fail = false;
 8003326:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8003454 <test_execute+0x2d4>
      test_println(")");
 800332a:	f7fd fd91 	bl	8000e50 <test_println>
  chThdSleep(delay);
 800332e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003332:	f7ff fe3d 	bl	8002fb0 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8003336:	f8d9 3004 	ldr.w	r3, [r9, #4]
  test_tokp = test_tokens_buffer;
 800333a:	4a40      	ldr	r2, [pc, #256]	; (800343c <test_execute+0x2bc>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 800333c:	599b      	ldr	r3, [r3, r6]
  test_tokp = test_tokens_buffer;
 800333e:	603a      	str	r2, [r7, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f853 8008 	ldr.w	r8, [r3, r8]
  if (tcp->setup != NULL)
 8003346:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_local_fail = false;
 800334a:	2200      	movs	r2, #0
 800334c:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
 8003350:	b103      	cbz	r3, 8003354 <test_execute+0x1d4>
    tcp->setup();
 8003352:	4798      	blx	r3
  tcp->execute();
 8003354:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003358:	4798      	blx	r3
  if (tcp->teardown != NULL)
 800335a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800335e:	b103      	cbz	r3, 8003362 <test_execute+0x1e2>
    tcp->teardown();
 8003360:	4798      	blx	r3
      if (test_local_fail) {
 8003362:	f89a 3000 	ldrb.w	r3, [sl]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d044      	beq.n	80033f4 <test_execute+0x274>
 800336a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8003458 <test_execute+0x2d8>
  while (*msgp)
 800336e:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	6803      	ldr	r3, [r0, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4798      	blx	r3
  while (*msgp)
 8003378:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800337c:	2900      	cmp	r1, #0
 800337e:	d1f7      	bne.n	8003370 <test_execute+0x1f0>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8003380:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <test_execute+0x2c0>)
 8003382:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800345c <test_execute+0x2dc>
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	f7fd fd12 	bl	8000db0 <test_printn>
  while (*msgp)
 800338c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4798      	blx	r3
  while (*msgp)
 8003396:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800339a:	2900      	cmp	r1, #0
 800339c:	d1f7      	bne.n	800338e <test_execute+0x20e>
  while (cp < test_tokp)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	4a26      	ldr	r2, [pc, #152]	; (800343c <test_execute+0x2bc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d909      	bls.n	80033ba <test_execute+0x23a>
  char *cp = test_tokens_buffer;
 80033a6:	4690      	mov	r8, r2
    streamPut(test_chp, *cp++);
 80033a8:	6820      	ldr	r0, [r4, #0]
 80033aa:	f818 1b01 	ldrb.w	r1, [r8], #1
 80033ae:	6803      	ldr	r3, [r0, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4798      	blx	r3
  while (cp < test_tokp)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4598      	cmp	r8, r3
 80033b8:	d3f6      	bcc.n	80033a8 <test_execute+0x228>
  while (*msgp)
 80033ba:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003460 <test_execute+0x2e0>
 80033be:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	6803      	ldr	r3, [r0, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4798      	blx	r3
  while (*msgp)
 80033c8:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80033cc:	2900      	cmp	r1, #0
 80033ce:	d1f7      	bne.n	80033c0 <test_execute+0x240>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 80033d0:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <test_execute+0x2c4>)
 80033d2:	f8d3 8000 	ldr.w	r8, [r3]
  while (*msgp)
 80033d6:	f898 1000 	ldrb.w	r1, [r8]
 80033da:	b139      	cbz	r1, 80033ec <test_execute+0x26c>
    streamPut(test_chp, *msgp++);
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	6803      	ldr	r3, [r0, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4798      	blx	r3
  while (*msgp)
 80033e4:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80033e8:	2900      	cmp	r1, #0
 80033ea:	d1f7      	bne.n	80033dc <test_execute+0x25c>
        test_println("\")");
 80033ec:	4816      	ldr	r0, [pc, #88]	; (8003448 <test_execute+0x2c8>)
 80033ee:	f7fd fd2f 	bl	8000e50 <test_println>
 80033f2:	e756      	b.n	80032a2 <test_execute+0x122>
      }
      else {
        test_println("--- Result: SUCCESS");
 80033f4:	4815      	ldr	r0, [pc, #84]	; (800344c <test_execute+0x2cc>)
 80033f6:	f7fd fd2b 	bl	8000e50 <test_println>
 80033fa:	e752      	b.n	80032a2 <test_execute+0x122>
 80033fc:	200016c8 	.word	0x200016c8
 8003400:	08009c04 	.word	0x08009c04
 8003404:	0800bf8c 	.word	0x0800bf8c
 8003408:	0800c038 	.word	0x0800c038
 800340c:	0800bf94 	.word	0x0800bf94
 8003410:	0800c03c 	.word	0x0800c03c
 8003414:	0800bfa8 	.word	0x0800bfa8
 8003418:	08009a64 	.word	0x08009a64
 800341c:	0800bfbc 	.word	0x0800bfbc
 8003420:	08009aa4 	.word	0x08009aa4
 8003424:	20001788 	.word	0x20001788
 8003428:	200016d0 	.word	0x200016d0
 800342c:	08009cb8 	.word	0x08009cb8
 8003430:	0800bfd0 	.word	0x0800bfd0
 8003434:	0800bfe4 	.word	0x0800bfe4
 8003438:	0800c054 	.word	0x0800c054
 800343c:	20001778 	.word	0x20001778
 8003440:	20001774 	.word	0x20001774
 8003444:	200016cc 	.word	0x200016cc
 8003448:	0800c058 	.word	0x0800c058
 800344c:	0800c05c 	.word	0x0800c05c
 8003450:	0800bfe8 	.word	0x0800bfe8
 8003454:	20001770 	.word	0x20001770
 8003458:	0800bff8 	.word	0x0800bff8
 800345c:	0800c010 	.word	0x0800c010
 8003460:	0800c014 	.word	0x0800c014
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8003464:	f7fd fd7c 	bl	8000f60 <print_line>
  test_println("");
 8003468:	4d11      	ldr	r5, [pc, #68]	; (80034b0 <test_execute+0x330>)
 800346a:	4812      	ldr	r0, [pc, #72]	; (80034b4 <test_execute+0x334>)
 800346c:	f7fd fcf0 	bl	8000e50 <test_println>
  while (*msgp)
 8003470:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	6803      	ldr	r3, [r0, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4798      	blx	r3
  while (*msgp)
 800347a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800347e:	2900      	cmp	r1, #0
 8003480:	d1f7      	bne.n	8003472 <test_execute+0x2f2>
  test_print("Final result: ");
  if (test_global_fail)
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <test_execute+0x338>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b93b      	cbnz	r3, 8003498 <test_execute+0x318>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8003488:	480c      	ldr	r0, [pc, #48]	; (80034bc <test_execute+0x33c>)
 800348a:	f7fd fce1 	bl	8000e50 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <test_execute+0x338>)
 8003490:	7818      	ldrb	r0, [r3, #0]
 8003492:	b003      	add	sp, #12
 8003494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("FAILURE");
 8003498:	4809      	ldr	r0, [pc, #36]	; (80034c0 <test_execute+0x340>)
 800349a:	f7fd fcd9 	bl	8000e50 <test_println>
}
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <test_execute+0x338>)
 80034a0:	7818      	ldrb	r0, [r3, #0]
 80034a2:	b003      	add	sp, #12
 80034a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 80034a8:	4806      	ldr	r0, [pc, #24]	; (80034c4 <test_execute+0x344>)
 80034aa:	f7fd fcd1 	bl	8000e50 <test_println>
 80034ae:	e683      	b.n	80031b8 <test_execute+0x38>
 80034b0:	0800c018 	.word	0x0800c018
 80034b4:	08009c04 	.word	0x08009c04
 80034b8:	200016d0 	.word	0x200016d0
 80034bc:	0800c068 	.word	0x0800c068
 80034c0:	0800c070 	.word	0x0800c070
 80034c4:	0800c028 	.word	0x0800c028
	...

080034d0 <test_rt>:
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
 80034d0:	4901      	ldr	r1, [pc, #4]	; (80034d8 <test_rt+0x8>)
 80034d2:	f7ff be55 	b.w	8003180 <test_execute>
 80034d6:	bf00      	nop
 80034d8:	0800b494 	.word	0x0800b494
 80034dc:	00000000 	.word	0x00000000

080034e0 <test_oslib>:
}

static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
 80034e0:	4901      	ldr	r1, [pc, #4]	; (80034e8 <test_oslib+0x8>)
 80034e2:	f7ff be4d 	b.w	8003180 <test_execute>
 80034e6:	bf00      	nop
 80034e8:	0800a0e4 	.word	0x0800a0e4
 80034ec:	00000000 	.word	0x00000000

080034f0 <chMsgWait>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 80034f0:	b510      	push	{r4, lr}
 80034f2:	2320      	movs	r3, #32
 80034f4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 80034f8:	4c0c      	ldr	r4, [pc, #48]	; (800352c <chMsgWait+0x3c>)
 80034fa:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 80034fc:	4613      	mov	r3, r2
 80034fe:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8003502:	4298      	cmp	r0, r3
 8003504:	d009      	beq.n	800351a <chMsgWait+0x2a>
  tqp->next             = tp->queue.next;
 8003506:	6801      	ldr	r1, [r0, #0]
 8003508:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 800350a:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 800350c:	604b      	str	r3, [r1, #4]
 800350e:	2300      	movs	r3, #0
 8003510:	f880 2020 	strb.w	r2, [r0, #32]
 8003514:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8003518:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 800351a:	200e      	movs	r0, #14
 800351c:	f7ff f9e8 	bl	80028f0 <chSchGoSleepS>
 8003520:	69a2      	ldr	r2, [r4, #24]
 8003522:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003524:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8003528:	e7ed      	b.n	8003506 <chMsgWait+0x16>
 800352a:	bf00      	nop
 800352c:	20000da0 	.word	0x20000da0

08003530 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	2620      	movs	r6, #32
 8003534:	2500      	movs	r5, #0
    tp = chMsgWait();
 8003536:	f7ff ffdb 	bl	80034f0 <chMsgWait>
 800353a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800353c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003540:	4621      	mov	r1, r4
 8003542:	f7ff f8bd 	bl	80026c0 <chSchWakeupS>
 8003546:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 800354a:	2c00      	cmp	r4, #0
 800354c:	d1f3      	bne.n	8003536 <bmk_thread1+0x6>
}
 800354e:	bd70      	pop	{r4, r5, r6, pc}

08003550 <chMsgSend>:
  thread_t *ctp = currp;
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8003552:	b510      	push	{r4, lr}
 8003554:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8003556:	699c      	ldr	r4, [r3, #24]
 8003558:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 800355c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800355e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003560:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8003562:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8003566:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8003568:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800356a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 800356e:	6304      	str	r4, [r0, #48]	; 0x30
 8003570:	2a0e      	cmp	r2, #14
 8003572:	d007      	beq.n	8003584 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8003574:	200c      	movs	r0, #12
 8003576:	f7ff f9bb 	bl	80028f0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800357a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800357c:	2300      	movs	r3, #0
 800357e:	f383 8811 	msr	BASEPRI, r3
}
 8003582:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8003584:	f7fd ff3c 	bl	8001400 <chSchReadyI>
 8003588:	e7f4      	b.n	8003574 <chMsgSend+0x24>
 800358a:	bf00      	nop
 800358c:	20000da0 	.word	0x20000da0

08003590 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8003590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003594:	4605      	mov	r5, r0
  start = test_wait_tick();
 8003596:	f7ff fd93 	bl	80030c0 <test_wait_tick>
  uint32_t n = 0;
 800359a:	2400      	movs	r4, #0
  start = test_wait_tick();
 800359c:	4680      	mov	r8, r0
 800359e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 80035a2:	f242 760f 	movw	r6, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 80035a6:	2101      	movs	r1, #1
 80035a8:	4628      	mov	r0, r5
 80035aa:	f7ff ffd1 	bl	8003550 <chMsgSend>
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	eba3 0308 	sub.w	r3, r3, r8
  } while (chVTIsSystemTimeWithinX(start, end));
 80035b4:	42b3      	cmp	r3, r6
    n++;
 80035b6:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 80035ba:	d9f4      	bls.n	80035a6 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 80035bc:	4628      	mov	r0, r5
 80035be:	2100      	movs	r1, #0
 80035c0:	f7ff ffc6 	bl	8003550 <chMsgSend>
}
 80035c4:	4620      	mov	r0, r4
 80035c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ca:	bf00      	nop
 80035cc:	0000      	movs	r0, r0
	...

080035d0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 80035d0:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 80035d2:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 80035d4:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 80035d6:	f7ff ffbb 	bl	8003550 <chMsgSend>
  chMsgSend(p, 'B');
 80035da:	4620      	mov	r0, r4
 80035dc:	2142      	movs	r1, #66	; 0x42
 80035de:	f7ff ffb7 	bl	8003550 <chMsgSend>
  chMsgSend(p, 'C');
 80035e2:	4620      	mov	r0, r4
 80035e4:	2143      	movs	r1, #67	; 0x43
 80035e6:	f7ff ffb3 	bl	8003550 <chMsgSend>
  chMsgSend(p, 'D');
 80035ea:	4620      	mov	r0, r4
 80035ec:	2144      	movs	r1, #68	; 0x44
}
 80035ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 80035f2:	f7ff bfad 	b.w	8003550 <chMsgSend>
 80035f6:	bf00      	nop
	...

08003600 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8003602:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <chMtxLockS+0xe0>)
  if (mp->owner != NULL) {
 8003604:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 8003606:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 8003608:	2b00      	cmp	r3, #0
 800360a:	d040      	beq.n	800368e <chMtxLockS+0x8e>
      while (tp->prio < ctp->prio) {
 800360c:	68a9      	ldr	r1, [r5, #8]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4291      	cmp	r1, r2
 8003612:	4604      	mov	r4, r0
 8003614:	d907      	bls.n	8003626 <chMtxLockS+0x26>
        switch (tp->state) {
 8003616:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 800361a:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 800361c:	2a06      	cmp	r2, #6
 800361e:	d03b      	beq.n	8003698 <chMtxLockS+0x98>
 8003620:	2a07      	cmp	r2, #7
 8003622:	d015      	beq.n	8003650 <chMtxLockS+0x50>
 8003624:	b342      	cbz	r2, 8003678 <chMtxLockS+0x78>
      queue_prio_insert(ctp, &mp->queue);
 8003626:	4626      	mov	r6, r4
 8003628:	4623      	mov	r3, r4
 800362a:	e003      	b.n	8003634 <chMtxLockS+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	68aa      	ldr	r2, [r5, #8]
 8003630:	4291      	cmp	r1, r2
 8003632:	d32a      	bcc.n	800368a <chMtxLockS+0x8a>
    cp = cp->queue.next;
 8003634:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003636:	429c      	cmp	r4, r3
 8003638:	d1f8      	bne.n	800362c <chMtxLockS+0x2c>
  tp->queue.prev             = cp->queue.prev;
 800363a:	6873      	ldr	r3, [r6, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 800363c:	2006      	movs	r0, #6
 800363e:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8003642:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 8003644:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 8003646:	626c      	str	r4, [r5, #36]	; 0x24
}
 8003648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 800364c:	f7ff b950 	b.w	80028f0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 8003650:	e9d3 0200 	ldrd	r0, r2, [r3]
 8003654:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8003656:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	6042      	str	r2, [r0, #4]
 800365c:	4632      	mov	r2, r6
 800365e:	e002      	b.n	8003666 <chMtxLockS+0x66>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003660:	6890      	ldr	r0, [r2, #8]
 8003662:	4288      	cmp	r0, r1
 8003664:	d332      	bcc.n	80036cc <chMtxLockS+0xcc>
    cp = cp->queue.next;
 8003666:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003668:	4296      	cmp	r6, r2
 800366a:	d1f9      	bne.n	8003660 <chMtxLockS+0x60>
  tp->queue.prev             = cp->queue.prev;
 800366c:	6872      	ldr	r2, [r6, #4]
 800366e:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8003672:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8003674:	6073      	str	r3, [r6, #4]
 8003676:	e7d6      	b.n	8003626 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8003678:	e9d3 1200 	ldrd	r1, r2, [r3]
 800367c:	6011      	str	r1, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800367e:	6819      	ldr	r1, [r3, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 8003680:	4618      	mov	r0, r3
 8003682:	604a      	str	r2, [r1, #4]
 8003684:	f7fd febc 	bl	8001400 <chSchReadyI>
 8003688:	e7cd      	b.n	8003626 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800368a:	461e      	mov	r6, r3
 800368c:	e7d5      	b.n	800363a <chMtxLockS+0x3a>
    mp->next = ctp->mtxlist;
 800368e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003690:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8003694:	63a8      	str	r0, [r5, #56]	; 0x38
}
 8003696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8003698:	e9d3 0200 	ldrd	r0, r2, [r3]
 800369c:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800369e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	4637      	mov	r7, r6
 80036a4:	6042      	str	r2, [r0, #4]
 80036a6:	4632      	mov	r2, r6
 80036a8:	e002      	b.n	80036b0 <chMtxLockS+0xb0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80036aa:	6890      	ldr	r0, [r2, #8]
 80036ac:	4288      	cmp	r0, r1
 80036ae:	d314      	bcc.n	80036da <chMtxLockS+0xda>
    cp = cp->queue.next;
 80036b0:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80036b2:	4296      	cmp	r6, r2
 80036b4:	d1f9      	bne.n	80036aa <chMtxLockS+0xaa>
  tp->queue.prev             = cp->queue.prev;
 80036b6:	687a      	ldr	r2, [r7, #4]
      while (tp->prio < ctp->prio) {
 80036b8:	68a9      	ldr	r1, [r5, #8]
 80036ba:	e9c3 7200 	strd	r7, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80036be:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80036c0:	607b      	str	r3, [r7, #4]
          tp = tp->u.wtmtxp->owner;
 80036c2:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	428a      	cmp	r2, r1
 80036c8:	d3a5      	bcc.n	8003616 <chMtxLockS+0x16>
 80036ca:	e7ac      	b.n	8003626 <chMtxLockS+0x26>
    cp = cp->queue.next;
 80036cc:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 80036ce:	6872      	ldr	r2, [r6, #4]
 80036d0:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80036d4:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80036d6:	6073      	str	r3, [r6, #4]
 80036d8:	e7a5      	b.n	8003626 <chMtxLockS+0x26>
    cp = cp->queue.next;
 80036da:	4617      	mov	r7, r2
 80036dc:	e7eb      	b.n	80036b6 <chMtxLockS+0xb6>
 80036de:	bf00      	nop
 80036e0:	20000da0 	.word	0x20000da0
	...

080036f0 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 80036f0:	b508      	push	{r3, lr}
 80036f2:	2320      	movs	r3, #32
 80036f4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80036f8:	f7ff ff82 	bl	8003600 <chMtxLockS>
 80036fc:	2300      	movs	r3, #0
 80036fe:	f383 8811 	msr	BASEPRI, r3
}
 8003702:	bd08      	pop	{r3, pc}
	...

08003710 <chSemWait>:
 8003710:	2320      	movs	r3, #32
 8003712:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003716:	6883      	ldr	r3, [r0, #8]
 8003718:	3b01      	subs	r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	6083      	str	r3, [r0, #8]
 800371e:	db04      	blt.n	800372a <chSemWait+0x1a>
  return MSG_OK;
 8003720:	2000      	movs	r0, #0
 8003722:	2300      	movs	r3, #0
 8003724:	f383 8811 	msr	BASEPRI, r3
}
 8003728:	4770      	bx	lr
msg_t chSemWait(semaphore_t *sp) {
 800372a:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 800372c:	4c08      	ldr	r4, [pc, #32]	; (8003750 <chSemWait+0x40>)
 800372e:	69a2      	ldr	r2, [r4, #24]
 8003730:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8003732:	6841      	ldr	r1, [r0, #4]
 8003734:	4603      	mov	r3, r0
 8003736:	e9c2 0100 	strd	r0, r1, [r2]
  tp->queue.prev->queue.next = tp;
 800373a:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 800373c:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	f7ff f8d6 	bl	80028f0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8003744:	69a3      	ldr	r3, [r4, #24]
 8003746:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003748:	2300      	movs	r3, #0
 800374a:	f383 8811 	msr	BASEPRI, r3
}
 800374e:	bd10      	pop	{r4, pc}
 8003750:	20000da0 	.word	0x20000da0
	...

08003760 <rt_test_010_010_execute>:
static void rt_test_010_010_execute(void) {
 8003760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8003764:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80037e8 <rt_test_010_010_execute+0x88>
      chSemWait(&sem1);
 8003768:	4c1c      	ldr	r4, [pc, #112]	; (80037dc <rt_test_010_010_execute+0x7c>)
  test_set_step(1);
 800376a:	2301      	movs	r3, #1
 800376c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8003770:	f7ff fca6 	bl	80030c0 <test_wait_tick>
    n = 0;
 8003774:	2500      	movs	r5, #0
    start = test_wait_tick();
 8003776:	4680      	mov	r8, r0
 8003778:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800377c:	f242 760f 	movw	r6, #9999	; 0x270f
      chSemWait(&sem1);
 8003780:	4620      	mov	r0, r4
 8003782:	f7ff ffc5 	bl	8003710 <chSemWait>
      chSemSignal(&sem1);
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff f812 	bl	80027b0 <chSemSignal>
      chSemWait(&sem1);
 800378c:	4620      	mov	r0, r4
 800378e:	f7ff ffbf 	bl	8003710 <chSemWait>
      chSemSignal(&sem1);
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff f80c 	bl	80027b0 <chSemSignal>
      chSemWait(&sem1);
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ffb9 	bl	8003710 <chSemWait>
      chSemSignal(&sem1);
 800379e:	4620      	mov	r0, r4
 80037a0:	f7ff f806 	bl	80027b0 <chSemSignal>
      chSemWait(&sem1);
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff ffb3 	bl	8003710 <chSemWait>
      chSemSignal(&sem1);
 80037aa:	4620      	mov	r0, r4
 80037ac:	f7ff f800 	bl	80027b0 <chSemSignal>
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 80037b6:	42b3      	cmp	r3, r6
      n++;
 80037b8:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80037bc:	d9e0      	bls.n	8003780 <rt_test_010_010_execute+0x20>
  test_set_step(2);
 80037be:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80037c0:	4807      	ldr	r0, [pc, #28]	; (80037e0 <rt_test_010_010_execute+0x80>)
  test_set_step(2);
 80037c2:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80037c6:	f7fd fb63 	bl	8000e90 <test_print>
    test_printn(n * 4);
 80037ca:	00a8      	lsls	r0, r5, #2
 80037cc:	f7fd faf0 	bl	8000db0 <test_printn>
    test_println(" wait+signal/S");
 80037d0:	4804      	ldr	r0, [pc, #16]	; (80037e4 <rt_test_010_010_execute+0x84>)
}
 80037d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 80037d6:	f7fd bb3b 	b.w	8000e50 <test_println>
 80037da:	bf00      	nop
 80037dc:	2000104c 	.word	0x2000104c
 80037e0:	0800b260 	.word	0x0800b260
 80037e4:	0800b28c 	.word	0x0800b28c
 80037e8:	20001774 	.word	0x20001774
 80037ec:	00000000 	.word	0x00000000

080037f0 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 80037f0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 80037f2:	4c08      	ldr	r4, [pc, #32]	; (8003814 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80037f4:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80037f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037fa:	075a      	lsls	r2, r3, #29
 80037fc:	d408      	bmi.n	8003810 <bmk_thread7+0x20>
    chSemWait(&sem1);
 80037fe:	4d06      	ldr	r5, [pc, #24]	; (8003818 <bmk_thread7+0x28>)
 8003800:	4628      	mov	r0, r5
 8003802:	f7ff ff85 	bl	8003710 <chSemWait>
 8003806:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8003808:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800380c:	075b      	lsls	r3, r3, #29
 800380e:	d5f7      	bpl.n	8003800 <bmk_thread7+0x10>
}
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	bf00      	nop
 8003814:	20000da0 	.word	0x20000da0
 8003818:	2000104c 	.word	0x2000104c
 800381c:	00000000 	.word	0x00000000

08003820 <thread3>:
static THD_FUNCTION(thread3, p) {
 8003820:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8003822:	4c04      	ldr	r4, [pc, #16]	; (8003834 <thread3+0x14>)
 8003824:	4620      	mov	r0, r4
 8003826:	f7ff ff73 	bl	8003710 <chSemWait>
  chSemSignal(&sem1);
 800382a:	4620      	mov	r0, r4
}
 800382c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8003830:	f7fe bfbe 	b.w	80027b0 <chSemSignal>
 8003834:	20001040 	.word	0x20001040
	...

08003840 <thread1.lto_priv.96>:
static THD_FUNCTION(thread1, p) {
 8003840:	b510      	push	{r4, lr}
 8003842:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8003844:	4803      	ldr	r0, [pc, #12]	; (8003854 <thread1.lto_priv.96+0x14>)
 8003846:	f7ff ff63 	bl	8003710 <chSemWait>
  test_emit_token(*(char *)p);
 800384a:	7820      	ldrb	r0, [r4, #0]
}
 800384c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8003850:	f7fd babe 	b.w	8000dd0 <test_emit_token>
 8003854:	20001040 	.word	0x20001040
	...

08003860 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8003860:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <chThdExitS+0x44>)
 8003864:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8003866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8003868:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800386a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800386e:	42ab      	cmp	r3, r5
 8003870:	d007      	beq.n	8003882 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fdc2 	bl	8001400 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800387c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800387e:	42ab      	cmp	r3, r5
 8003880:	d1f7      	bne.n	8003872 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 8003882:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003886:	b943      	cbnz	r3, 800389a <chThdExitS+0x3a>
 8003888:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800388c:	079b      	lsls	r3, r3, #30
 800388e:	d104      	bne.n	800389a <chThdExitS+0x3a>
    REG_REMOVE(tp);
 8003890:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8003894:	611a      	str	r2, [r3, #16]
 8003896:	6922      	ldr	r2, [r4, #16]
 8003898:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 800389a:	200f      	movs	r0, #15
}
 800389c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80038a0:	f7ff b826 	b.w	80028f0 <chSchGoSleepS>
 80038a4:	20000da0 	.word	0x20000da0
	...

080038b0 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
  const ShellCommand *scp = scfg->sc_commands;
 80038b4:	e9d0 7300 	ldrd	r7, r3, [r0]
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 80038b8:	4978      	ldr	r1, [pc, #480]	; (8003a9c <shellThread+0x1ec>)
 80038ba:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8003ad4 <shellThread+0x224>
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
#else
  while (true) {
#endif
    chprintf(chp, SHELL_PROMPT_STR);
 80038be:	f8df a218 	ldr.w	sl, [pc, #536]	; 8003ad8 <shellThread+0x228>
THD_FUNCTION(shellThread, p) {
 80038c2:	b09b      	sub	sp, #108	; 0x6c
 80038c4:	4680      	mov	r8, r0
  chprintf(chp, SHELL_NEWLINE_STR);
 80038c6:	4638      	mov	r0, r7
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 80038c8:	468b      	mov	fp, r1
  const ShellCommand *scp = scfg->sc_commands;
 80038ca:	9301      	str	r3, [sp, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 80038cc:	f7fe fb70 	bl	8001fb0 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 80038d0:	4638      	mov	r0, r7
 80038d2:	4973      	ldr	r1, [pc, #460]	; (8003aa0 <shellThread+0x1f0>)
 80038d4:	f7fe fb6c 	bl	8001fb0 <chprintf>
 80038d8:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 80038dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038e0:	075b      	lsls	r3, r3, #29
 80038e2:	f100 8083 	bmi.w	80039ec <shellThread+0x13c>
    chprintf(chp, SHELL_PROMPT_STR);
 80038e6:	4651      	mov	r1, sl
 80038e8:	4638      	mov	r0, r7
 80038ea:	f7fe fb61 	bl	8001fb0 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 80038ee:	f8d8 4000 	ldr.w	r4, [r8]
  char *p = line;
 80038f2:	ae0a      	add	r6, sp, #40	; 0x28
 80038f4:	6822      	ldr	r2, [r4, #0]
 80038f6:	4635      	mov	r5, r6
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 80038f8:	6893      	ldr	r3, [r2, #8]
 80038fa:	f10d 010f 	add.w	r1, sp, #15
 80038fe:	2201      	movs	r2, #1
 8003900:	4620      	mov	r0, r4
 8003902:	4798      	blx	r3
 8003904:	2800      	cmp	r0, #0
 8003906:	d069      	beq.n	80039dc <shellThread+0x12c>
    if (c == 4) {
 8003908:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d061      	beq.n	80039d4 <shellThread+0x124>
    if ((c == 8) || (c == 127)) {
 8003910:	2b08      	cmp	r3, #8
      continue;
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8003912:	f10d 0c67 	add.w	ip, sp, #103	; 0x67
    if ((c == 8) || (c == 127)) {
 8003916:	d012      	beq.n	800393e <shellThread+0x8e>
 8003918:	2b7f      	cmp	r3, #127	; 0x7f
      streamPut(chp, c);
 800391a:	4619      	mov	r1, r3
 800391c:	4620      	mov	r0, r4
    if ((c == 8) || (c == 127)) {
 800391e:	d00e      	beq.n	800393e <shellThread+0x8e>
    if (c == '\r') {
 8003920:	2b0d      	cmp	r3, #13
 8003922:	d021      	beq.n	8003968 <shellThread+0xb8>
    if (c < 0x20)
 8003924:	2b1f      	cmp	r3, #31
 8003926:	6822      	ldr	r2, [r4, #0]
 8003928:	d9e6      	bls.n	80038f8 <shellThread+0x48>
    if (p < line + size - 1) {
 800392a:	4565      	cmp	r5, ip
 800392c:	d2e4      	bcs.n	80038f8 <shellThread+0x48>
      streamPut(chp, c);
 800392e:	68d3      	ldr	r3, [r2, #12]
 8003930:	4798      	blx	r3
      *p++ = (char)c;
 8003932:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003936:	702b      	strb	r3, [r5, #0]
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	3501      	adds	r5, #1
 800393c:	e7dc      	b.n	80038f8 <shellThread+0x48>
      if (p != line) {
 800393e:	42b5      	cmp	r5, r6
        streamPut(chp, 0x08);
 8003940:	f04f 0108 	mov.w	r1, #8
 8003944:	4620      	mov	r0, r4
 8003946:	6822      	ldr	r2, [r4, #0]
      if (p != line) {
 8003948:	d0d6      	beq.n	80038f8 <shellThread+0x48>
        streamPut(chp, 0x08);
 800394a:	68d3      	ldr	r3, [r2, #12]
 800394c:	4798      	blx	r3
        streamPut(chp, 0x20);
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	2120      	movs	r1, #32
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4620      	mov	r0, r4
 8003956:	4798      	blx	r3
        streamPut(chp, 0x08);
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	2108      	movs	r1, #8
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4620      	mov	r0, r4
 8003960:	4798      	blx	r3
        p--;
 8003962:	3d01      	subs	r5, #1
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	e7c7      	b.n	80038f8 <shellThread+0x48>
      chprintf(chp, SHELL_NEWLINE_STR);
 8003968:	4659      	mov	r1, fp
      *p = 0;
 800396a:	2400      	movs	r4, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 800396c:	f7fe fb20 	bl	8001fb0 <chprintf>
    lp = parse_arguments(line, &tokp);
 8003970:	4630      	mov	r0, r6
 8003972:	a904      	add	r1, sp, #16
      *p = 0;
 8003974:	702c      	strb	r4, [r5, #0]
    lp = parse_arguments(line, &tokp);
 8003976:	f7fe faeb 	bl	8001f50 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800397a:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 800397c:	4606      	mov	r6, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800397e:	2000      	movs	r0, #0
 8003980:	ad05      	add	r5, sp, #20
 8003982:	f7fe fae5 	bl	8001f50 <parse_arguments>
 8003986:	b150      	cbz	r0, 800399e <shellThread+0xee>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8003988:	2c04      	cmp	r4, #4
 800398a:	d01c      	beq.n	80039c6 <shellThread+0x116>
      args[n++] = lp;
 800398c:	f845 0b04 	str.w	r0, [r5], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003990:	a904      	add	r1, sp, #16
 8003992:	2000      	movs	r0, #0
      args[n++] = lp;
 8003994:	3401      	adds	r4, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003996:	f7fe fadb 	bl	8001f50 <parse_arguments>
 800399a:	2800      	cmp	r0, #0
 800399c:	d1f4      	bne.n	8003988 <shellThread+0xd8>
    args[n] = NULL;
 800399e:	ab1a      	add	r3, sp, #104	; 0x68
 80039a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80039a4:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80039a8:	2e00      	cmp	r6, #0
 80039aa:	d095      	beq.n	80038d8 <shellThread+0x28>
      if (strcmp(cmd, "help") == 0) {
 80039ac:	493d      	ldr	r1, [pc, #244]	; (8003aa4 <shellThread+0x1f4>)
 80039ae:	4630      	mov	r0, r6
 80039b0:	f7fc fd3a 	bl	8000428 <strcmp>
 80039b4:	bb38      	cbnz	r0, 8003a06 <shellThread+0x156>
        if (n > 0) {
 80039b6:	2c00      	cmp	r4, #0
 80039b8:	d036      	beq.n	8003a28 <shellThread+0x178>
          shellUsage(chp, "help");
 80039ba:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <shellThread+0x1f4>)
 80039bc:	493a      	ldr	r1, [pc, #232]	; (8003aa8 <shellThread+0x1f8>)
 80039be:	4638      	mov	r0, r7
 80039c0:	f7fe faf6 	bl	8001fb0 <chprintf>
 80039c4:	e788      	b.n	80038d8 <shellThread+0x28>
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 80039c6:	4939      	ldr	r1, [pc, #228]	; (8003aac <shellThread+0x1fc>)
 80039c8:	4638      	mov	r0, r7
 80039ca:	f7fe faf1 	bl	8001fb0 <chprintf>
    args[n] = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	9309      	str	r3, [sp, #36]	; 0x24
 80039d2:	e781      	b.n	80038d8 <shellThread+0x28>
      chprintf(chp, "^D");
 80039d4:	4620      	mov	r0, r4
 80039d6:	4936      	ldr	r1, [pc, #216]	; (8003ab0 <shellThread+0x200>)
 80039d8:	f7fe faea 	bl	8001fb0 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 80039dc:	492f      	ldr	r1, [pc, #188]	; (8003a9c <shellThread+0x1ec>)
 80039de:	4638      	mov	r0, r7
 80039e0:	f7fe fae6 	bl	8001fb0 <chprintf>
      chprintf(chp, "logout");
 80039e4:	4638      	mov	r0, r7
 80039e6:	4933      	ldr	r1, [pc, #204]	; (8003ab4 <shellThread+0x204>)
 80039e8:	f7fe fae2 	bl	8001fb0 <chprintf>
 80039ec:	2320      	movs	r3, #32
 80039ee:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80039f2:	2100      	movs	r1, #0
 80039f4:	4830      	ldr	r0, [pc, #192]	; (8003ab8 <shellThread+0x208>)
 80039f6:	f7fd fdeb 	bl	80015d0 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7ff ff30 	bl	8003860 <chThdExitS>
}
 8003a00:	b01b      	add	sp, #108	; 0x6c
 8003a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a06:	4d2d      	ldr	r5, [pc, #180]	; (8003abc <shellThread+0x20c>)
  while (scp->sc_name != NULL) {
 8003a08:	482d      	ldr	r0, [pc, #180]	; (8003ac0 <shellThread+0x210>)
 8003a0a:	e002      	b.n	8003a12 <shellThread+0x162>
 8003a0c:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8003a10:	b358      	cbz	r0, 8003a6a <shellThread+0x1ba>
    if (strcmp(scp->sc_name, name) == 0) {
 8003a12:	4631      	mov	r1, r6
 8003a14:	f7fc fd08 	bl	8000428 <strcmp>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d1f7      	bne.n	8003a0c <shellThread+0x15c>
      scp->sc_function(chp, argc, argv);
 8003a1c:	686b      	ldr	r3, [r5, #4]
 8003a1e:	aa05      	add	r2, sp, #20
 8003a20:	4621      	mov	r1, r4
 8003a22:	4638      	mov	r0, r7
 8003a24:	4798      	blx	r3
 8003a26:	e757      	b.n	80038d8 <shellThread+0x28>
        chprintf(chp, "Commands: help ");
 8003a28:	4926      	ldr	r1, [pc, #152]	; (8003ac4 <shellThread+0x214>)
 8003a2a:	4c24      	ldr	r4, [pc, #144]	; (8003abc <shellThread+0x20c>)
    chprintf(chp, "%s ", scp->sc_name);
 8003a2c:	4d26      	ldr	r5, [pc, #152]	; (8003ac8 <shellThread+0x218>)
        chprintf(chp, "Commands: help ");
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f7fe fabe 	bl	8001fb0 <chprintf>
  while (scp->sc_name != NULL) {
 8003a34:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <shellThread+0x210>)
    chprintf(chp, "%s ", scp->sc_name);
 8003a36:	4629      	mov	r1, r5
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7fe fab9 	bl	8001fb0 <chprintf>
  while (scp->sc_name != NULL) {
 8003a3e:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d1f7      	bne.n	8003a36 <shellThread+0x186>
        if (scp != NULL)
 8003a46:	9c01      	ldr	r4, [sp, #4]
 8003a48:	b154      	cbz	r4, 8003a60 <shellThread+0x1b0>
  while (scp->sc_name != NULL) {
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	b142      	cbz	r2, 8003a60 <shellThread+0x1b0>
    chprintf(chp, "%s ", scp->sc_name);
 8003a4e:	4d1e      	ldr	r5, [pc, #120]	; (8003ac8 <shellThread+0x218>)
 8003a50:	4629      	mov	r1, r5
 8003a52:	4638      	mov	r0, r7
 8003a54:	f7fe faac 	bl	8001fb0 <chprintf>
  while (scp->sc_name != NULL) {
 8003a58:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8003a5c:	2a00      	cmp	r2, #0
 8003a5e:	d1f7      	bne.n	8003a50 <shellThread+0x1a0>
        chprintf(chp, SHELL_NEWLINE_STR);
 8003a60:	4659      	mov	r1, fp
 8003a62:	4638      	mov	r0, r7
 8003a64:	f7fe faa4 	bl	8001fb0 <chprintf>
 8003a68:	e736      	b.n	80038d8 <shellThread+0x28>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8003a6a:	9d01      	ldr	r5, [sp, #4]
 8003a6c:	b15d      	cbz	r5, 8003a86 <shellThread+0x1d6>
  while (scp->sc_name != NULL) {
 8003a6e:	6828      	ldr	r0, [r5, #0]
 8003a70:	b918      	cbnz	r0, 8003a7a <shellThread+0x1ca>
 8003a72:	e008      	b.n	8003a86 <shellThread+0x1d6>
 8003a74:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8003a78:	b128      	cbz	r0, 8003a86 <shellThread+0x1d6>
    if (strcmp(scp->sc_name, name) == 0) {
 8003a7a:	4631      	mov	r1, r6
 8003a7c:	f7fc fcd4 	bl	8000428 <strcmp>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d1f7      	bne.n	8003a74 <shellThread+0x1c4>
 8003a84:	e7ca      	b.n	8003a1c <shellThread+0x16c>
        chprintf(chp, "%s", cmd);
 8003a86:	4632      	mov	r2, r6
 8003a88:	4910      	ldr	r1, [pc, #64]	; (8003acc <shellThread+0x21c>)
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	f7fe fa90 	bl	8001fb0 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8003a90:	490f      	ldr	r1, [pc, #60]	; (8003ad0 <shellThread+0x220>)
 8003a92:	4638      	mov	r0, r7
 8003a94:	f7fe fa8c 	bl	8001fb0 <chprintf>
 8003a98:	e71e      	b.n	80038d8 <shellThread+0x28>
 8003a9a:	bf00      	nop
 8003a9c:	08009cb8 	.word	0x08009cb8
 8003aa0:	0800b4d0 	.word	0x0800b4d0
 8003aa4:	0800b510 	.word	0x0800b510
 8003aa8:	08009ba0 	.word	0x08009ba0
 8003aac:	0800b4f8 	.word	0x0800b4f8
 8003ab0:	0800b4ec 	.word	0x0800b4ec
 8003ab4:	0800b4f0 	.word	0x0800b4f0
 8003ab8:	20001058 	.word	0x20001058
 8003abc:	0800b540 	.word	0x0800b540
 8003ac0:	0800b4c8 	.word	0x0800b4c8
 8003ac4:	0800b518 	.word	0x0800b518
 8003ac8:	0800b528 	.word	0x0800b528
 8003acc:	0800b52c 	.word	0x0800b52c
 8003ad0:	0800b530 	.word	0x0800b530
 8003ad4:	20000da0 	.word	0x20000da0
 8003ad8:	0800b4e4 	.word	0x0800b4e4
 8003adc:	00000000 	.word	0x00000000

08003ae0 <cmd_exit>:
  if (argc > 0) {
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	dd03      	ble.n	8003aec <cmd_exit+0xc>
    shellUsage(chp, "exit");
 8003ae4:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <cmd_exit+0x28>)
 8003ae6:	4909      	ldr	r1, [pc, #36]	; (8003b0c <cmd_exit+0x2c>)
 8003ae8:	f7fe ba62 	b.w	8001fb0 <chprintf>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003aec:	b508      	push	{r3, lr}
 8003aee:	2320      	movs	r3, #32
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	4806      	ldr	r0, [pc, #24]	; (8003b10 <cmd_exit+0x30>)
 8003af6:	2100      	movs	r1, #0
 8003af8:	f7fd fd6a 	bl	80015d0 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8003afc:	2000      	movs	r0, #0
}
 8003afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b02:	f7ff bead 	b.w	8003860 <chThdExitS>
 8003b06:	bf00      	nop
 8003b08:	0800b4c8 	.word	0x0800b4c8
 8003b0c:	08009ba0 	.word	0x08009ba0
 8003b10:	20001058 	.word	0x20001058
	...

08003b20 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003b20:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8003b24:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003b26:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f383 8811 	msr	BASEPRI, r3
}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
	...

08003b40 <chThdExit>:
 8003b40:	2320      	movs	r3, #32
 8003b42:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8003b46:	f7ff be8b 	b.w	8003860 <chThdExitS>
 8003b4a:	bf00      	nop
 8003b4c:	0000      	movs	r0, r0
	...

08003b50 <Thd2>:
static THD_FUNCTION(Thd2, arg){
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	4f16      	ldr	r7, [pc, #88]	; (8003bb0 <Thd2+0x60>)
  palSetLine(LINE_LED_RGB_RED);
 8003b56:	4c17      	ldr	r4, [pc, #92]	; (8003bb4 <Thd2+0x64>)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <Thd2+0x68>)
 8003b5c:	619a      	str	r2, [r3, #24]
 8003b5e:	2101      	movs	r1, #1
  palSetLine(LINE_LED_RGB_BLUE);
 8003b60:	2204      	movs	r2, #4
  palSetLine(LINE_LED_RGB_GREEN);
 8003b62:	2602      	movs	r6, #2
  palSetLine(LINE_LED_RGB_RED);
 8003b64:	8321      	strh	r1, [r4, #24]
  palSetLine(LINE_LED_RGB_GREEN);
 8003b66:	8326      	strh	r6, [r4, #24]
  palSetLine(LINE_LED_RGB_BLUE);
 8003b68:	8322      	strh	r2, [r4, #24]
  while (!chThdShouldTerminateX()){
 8003b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b6e:	075a      	lsls	r2, r3, #29
 8003b70:	d418      	bmi.n	8003ba4 <Thd2+0x54>
                 palClearLine(LINE_LED_RGB_GREEN);
 8003b72:	46b0      	mov	r8, r6
                 chThdSleepSeconds(6);
 8003b74:	f64e 2060 	movw	r0, #60000	; 0xea60
                 palClearLine(LINE_LED_RGB_RED);
 8003b78:	2501      	movs	r5, #1
                 palClearLine(LINE_LED_RGB_GREEN);
 8003b7a:	f8a4 801a 	strh.w	r8, [r4, #26]
                 chThdSleepSeconds(6);
 8003b7e:	f7ff fa17 	bl	8002fb0 <chThdSleep>
                 chThdSleepSeconds(3);
 8003b82:	f247 5030 	movw	r0, #30000	; 0x7530
                 palClearLine(LINE_LED_RGB_RED);
 8003b86:	8365      	strh	r5, [r4, #26]
                 chThdSleepSeconds(3);
 8003b88:	f7ff fa12 	bl	8002fb0 <chThdSleep>
                 palSetLine(LINE_LED_RGB_GREEN);
 8003b8c:	8326      	strh	r6, [r4, #24]
                 chThdSleepSeconds(6);
 8003b8e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8003b92:	f7ff fa0d 	bl	8002fb0 <chThdSleep>
 8003b96:	69bb      	ldr	r3, [r7, #24]
                 palSetLine(LINE_LED_RGB_RED);
 8003b98:	8325      	strh	r5, [r4, #24]
                 palClearLine(LINE_LED_RGB_GREEN);
 8003b9a:	8366      	strh	r6, [r4, #26]
  while (!chThdShouldTerminateX()){
 8003b9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ba0:	075b      	lsls	r3, r3, #29
 8003ba2:	d5e7      	bpl.n	8003b74 <Thd2+0x24>
  chThdExit(0);
 8003ba4:	2000      	movs	r0, #0
}
 8003ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chThdExit(0);
 8003baa:	f7ff bfc9 	b.w	8003b40 <chThdExit>
 8003bae:	bf00      	nop
 8003bb0:	20000da0 	.word	0x20000da0
 8003bb4:	40020800 	.word	0x40020800
 8003bb8:	080098a8 	.word	0x080098a8
 8003bbc:	00000000 	.word	0x00000000

08003bc0 <bmk_thread3>:
  chThdExit((msg_t)p);
 8003bc0:	f7ff bfbe 	b.w	8003b40 <chThdExit>
	...

08003bd0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8003bd0:	4a0e      	ldr	r2, [pc, #56]	; (8003c0c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8003bd2:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 8003bd4:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8003bd6:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8003bd8:	2101      	movs	r1, #1
  thread_t *otp = currp;
 8003bda:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003bdc:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 8003bde:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8003be0:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8003be4:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8003be6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003be8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8003bea:	f884 5020 	strb.w	r5, [r4, #32]
 8003bee:	e000      	b.n	8003bf2 <chSchDoReschedule+0x22>
 8003bf0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	4291      	cmp	r1, r2
 8003bf6:	d3fb      	bcc.n	8003bf0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8003bf8:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003bfa:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8003bfc:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8003c00:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8003c02:	605c      	str	r4, [r3, #4]
}
 8003c04:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8003c06:	f7fc bb5b 	b.w	80002c0 <_port_switch>
 8003c0a:	bf00      	nop
 8003c0c:	20000da0 	.word	0x20000da0

08003c10 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <chSchRescheduleS+0x14>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8003c16:	6892      	ldr	r2, [r2, #8]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d800      	bhi.n	8003c20 <chSchRescheduleS+0x10>
}
 8003c1e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8003c20:	f7ff bfd6 	b.w	8003bd0 <chSchDoReschedule>
 8003c24:	20000da0 	.word	0x20000da0
	...

08003c30 <chSemSignalWait.constprop.64>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	2320      	movs	r3, #32
 8003c34:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8003c38:	4c15      	ldr	r4, [pc, #84]	; (8003c90 <chSemSignalWait.constprop.64+0x60>)
 8003c3a:	68a3      	ldr	r3, [r4, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	60a3      	str	r3, [r4, #8]
 8003c42:	dd1a      	ble.n	8003c7a <chSemSignalWait.constprop.64+0x4a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8003c44:	3b01      	subs	r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	60a3      	str	r3, [r4, #8]
 8003c4a:	db06      	blt.n	8003c5a <chSemSignalWait.constprop.64+0x2a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8003c4c:	f7ff ffe0 	bl	8003c10 <chSchRescheduleS>
    msg = MSG_OK;
 8003c50:	2000      	movs	r0, #0
 8003c52:	2300      	movs	r3, #0
 8003c54:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8003c58:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 8003c5a:	4a0e      	ldr	r2, [pc, #56]	; (8003c94 <chSemSignalWait.constprop.64+0x64>)
  tp->queue.prev             = tqp->prev;
 8003c5c:	6863      	ldr	r3, [r4, #4]
 8003c5e:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003c60:	2005      	movs	r0, #5
 8003c62:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8003c66:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8003c68:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 8003c6a:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003c6c:	f7fe fe40 	bl	80028f0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8003c70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c72:	2300      	movs	r3, #0
 8003c74:	f383 8811 	msr	BASEPRI, r3
}
 8003c78:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 8003c7a:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003c7c:	6803      	ldr	r3, [r0, #0]
 8003c7e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003c80:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8003c82:	f7fd fbbd 	bl	8001400 <chSchReadyI>
 8003c86:	2200      	movs	r2, #0
 8003c88:	68a3      	ldr	r3, [r4, #8]
 8003c8a:	6242      	str	r2, [r0, #36]	; 0x24
 8003c8c:	e7da      	b.n	8003c44 <chSemSignalWait.constprop.64+0x14>
 8003c8e:	bf00      	nop
 8003c90:	20001040 	.word	0x20001040
 8003c94:	20000da0 	.word	0x20000da0
	...

08003ca0 <rt_test_005_005_execute>:

static void rt_test_005_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_005_005_execute(void) {
 8003ca0:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 8003ca2:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <rt_test_005_005_execute+0x88>)

  /* [5.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8003ca4:	4d21      	ldr	r5, [pc, #132]	; (8003d2c <rt_test_005_005_execute+0x8c>)
  return chThdGetSelfX()->prio;
 8003ca6:	699a      	ldr	r2, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003ca8:	4821      	ldr	r0, [pc, #132]	; (8003d30 <rt_test_005_005_execute+0x90>)
 8003caa:	6892      	ldr	r2, [r2, #8]
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <rt_test_005_005_execute+0x94>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 8003cae:	4c22      	ldr	r4, [pc, #136]	; (8003d38 <rt_test_005_005_execute+0x98>)
static void rt_test_005_005_execute(void) {
 8003cb0:	b083      	sub	sp, #12
  test_set_step(1);
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	6029      	str	r1, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	3201      	adds	r2, #1
 8003cba:	9100      	str	r1, [sp, #0]
 8003cbc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003cc0:	f7fe fd96 	bl	80027f0 <chThdCreateStatic>
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <rt_test_005_005_execute+0x9c>)
  }

  /* [5.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8003cc6:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003cc8:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003cca:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8003ccc:	f7ff ffb0 	bl	8003c30 <chSemSignalWait.constprop.64>
 8003cd0:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003cd2:	491b      	ldr	r1, [pc, #108]	; (8003d40 <rt_test_005_005_execute+0xa0>)
 8003cd4:	1b00      	subs	r0, r0, r4
 8003cd6:	fab0 f080 	clz	r0, r0
 8003cda:	0940      	lsrs	r0, r0, #5
 8003cdc:	f7fc ffd8 	bl	8000c90 <_test_assert>
 8003ce0:	b108      	cbz	r0, 8003ce6 <rt_test_005_005_execute+0x46>
  {
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
}
 8003ce2:	b003      	add	sp, #12
 8003ce4:	bd30      	pop	{r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003ce6:	68a0      	ldr	r0, [r4, #8]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <rt_test_005_005_execute+0xa4>)
 8003cea:	fab0 f080 	clz	r0, r0
 8003cee:	0940      	lsrs	r0, r0, #5
 8003cf0:	f7fc ffce 	bl	8000c90 <_test_assert>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d1f4      	bne.n	8003ce2 <rt_test_005_005_execute+0x42>
  test_set_step(3);
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8003cfc:	f7ff ff98 	bl	8003c30 <chSemSignalWait.constprop.64>
 8003d00:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003d02:	490f      	ldr	r1, [pc, #60]	; (8003d40 <rt_test_005_005_execute+0xa0>)
 8003d04:	1b00      	subs	r0, r0, r4
 8003d06:	fab0 f080 	clz	r0, r0
 8003d0a:	0940      	lsrs	r0, r0, #5
 8003d0c:	f7fc ffc0 	bl	8000c90 <_test_assert>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d1e6      	bne.n	8003ce2 <rt_test_005_005_execute+0x42>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003d14:	68a0      	ldr	r0, [r4, #8]
 8003d16:	490b      	ldr	r1, [pc, #44]	; (8003d44 <rt_test_005_005_execute+0xa4>)
 8003d18:	fab0 f080 	clz	r0, r0
 8003d1c:	0940      	lsrs	r0, r0, #5
}
 8003d1e:	b003      	add	sp, #12
 8003d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003d24:	f7fc bfb4 	b.w	8000c90 <_test_assert>
 8003d28:	20000da0 	.word	0x20000da0
 8003d2c:	20001774 	.word	0x20001774
 8003d30:	20001060 	.word	0x20001060
 8003d34:	08003821 	.word	0x08003821
 8003d38:	20001040 	.word	0x20001040
 8003d3c:	2000178c 	.word	0x2000178c
 8003d40:	0800ae54 	.word	0x0800ae54
 8003d44:	0800ae64 	.word	0x0800ae64
	...

08003d50 <chMBReset.constprop.39>:
void chMBReset(mailbox_t *mbp) {
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	2320      	movs	r3, #32
 8003d54:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 8003d58:	4c0a      	ldr	r4, [pc, #40]	; (8003d84 <chMBReset.constprop.39+0x34>)
 8003d5a:	6823      	ldr	r3, [r4, #0]
  mbp->reset = true;
 8003d5c:	2201      	movs	r2, #1
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003d5e:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 8003d62:	2500      	movs	r5, #0
  mbp->reset = true;
 8003d64:	7522      	strb	r2, [r4, #20]
  mbp->rdptr = mbp->buffer;
 8003d66:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 8003d6a:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003d6c:	f7fd fbe8 	bl	8001540 <chThdDequeueAllI.constprop.68>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8003d70:	f104 0020 	add.w	r0, r4, #32
 8003d74:	f7fd fbe4 	bl	8001540 <chThdDequeueAllI.constprop.68>
  chSchRescheduleS();
 8003d78:	f7ff ff4a 	bl	8003c10 <chSchRescheduleS>
 8003d7c:	f385 8811 	msr	BASEPRI, r5
}
 8003d80:	bd38      	pop	{r3, r4, r5, pc}
 8003d82:	bf00      	nop
 8003d84:	20000c50 	.word	0x20000c50
	...

08003d90 <oslib_test_001_003_teardown>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
 8003d90:	f7ff bfde 	b.w	8003d50 <chMBReset.constprop.39>
	...

08003da0 <oslib_test_001_002_teardown>:
 8003da0:	f7ff bff6 	b.w	8003d90 <oslib_test_001_003_teardown>
	...

08003db0 <oslib_test_001_001_teardown>:
 8003db0:	f7ff bfee 	b.w	8003d90 <oslib_test_001_003_teardown>
	...

08003dc0 <chMBPostTimeout.constprop.37>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8003dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	4680      	mov	r8, r0
 8003dc8:	460e      	mov	r6, r1
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	4c18      	ldr	r4, [pc, #96]	; (8003e30 <chMBPostTimeout.constprop.37+0x70>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003dd0:	f104 0518 	add.w	r5, r4, #24
 8003dd4:	e00a      	b.n	8003dec <chMBPostTimeout.constprop.37+0x2c>
 8003dd6:	e9d4 7200 	ldrd	r7, r2, [r4]
 8003dda:	6923      	ldr	r3, [r4, #16]
 8003ddc:	eba2 0e07 	sub.w	lr, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003de0:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 8003de4:	d10e      	bne.n	8003e04 <chMBPostTimeout.constprop.37+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003de6:	f7fe ff63 	bl	8002cb0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003dea:	b930      	cbnz	r0, 8003dfa <chMBPostTimeout.constprop.37+0x3a>
    if (mbp->reset) {
 8003dec:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003dee:	4631      	mov	r1, r6
 8003df0:	4628      	mov	r0, r5
    if (mbp->reset) {
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0ef      	beq.n	8003dd6 <chMBPostTimeout.constprop.37+0x16>
      return MSG_RESET;
 8003df6:	f06f 0001 	mvn.w	r0, #1
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f383 8811 	msr	BASEPRI, r3
}
 8003e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 8003e04:	68a0      	ldr	r0, [r4, #8]
 8003e06:	1d01      	adds	r1, r0, #4
 8003e08:	60a1      	str	r1, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 8003e0a:	428a      	cmp	r2, r1
      *mbp->wrptr++ = msg;
 8003e0c:	f8c0 8000 	str.w	r8, [r0]
      mbp->cnt++;
 8003e10:	f103 0301 	add.w	r3, r3, #1
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003e14:	4807      	ldr	r0, [pc, #28]	; (8003e34 <chMBPostTimeout.constprop.37+0x74>)
        mbp->wrptr = mbp->buffer;
 8003e16:	bf98      	it	ls
 8003e18:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
 8003e1a:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003e1c:	f7fd fb08 	bl	8001430 <chThdDequeueNextI.constprop.84>
      chSchRescheduleS();
 8003e20:	f7ff fef6 	bl	8003c10 <chSchRescheduleS>
      return MSG_OK;
 8003e24:	2000      	movs	r0, #0
 8003e26:	2300      	movs	r3, #0
 8003e28:	f383 8811 	msr	BASEPRI, r3
}
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e30:	20000c50 	.word	0x20000c50
 8003e34:	20000c70 	.word	0x20000c70
	...

08003e40 <chMBPostAheadTimeout.constprop.34>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8003e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	2320      	movs	r3, #32
 8003e46:	4680      	mov	r8, r0
 8003e48:	460e      	mov	r6, r1
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	4c18      	ldr	r4, [pc, #96]	; (8003eb0 <chMBPostAheadTimeout.constprop.34+0x70>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003e50:	f104 0518 	add.w	r5, r4, #24
 8003e54:	e00a      	b.n	8003e6c <chMBPostAheadTimeout.constprop.34+0x2c>
 8003e56:	e9d4 2700 	ldrd	r2, r7, [r4]
 8003e5a:	6923      	ldr	r3, [r4, #16]
 8003e5c:	eba7 0e02 	sub.w	lr, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003e60:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 8003e64:	d10e      	bne.n	8003e84 <chMBPostAheadTimeout.constprop.34+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003e66:	f7fe ff23 	bl	8002cb0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003e6a:	b930      	cbnz	r0, 8003e7a <chMBPostAheadTimeout.constprop.34+0x3a>
    if (mbp->reset) {
 8003e6c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003e6e:	4631      	mov	r1, r6
 8003e70:	4628      	mov	r0, r5
    if (mbp->reset) {
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ef      	beq.n	8003e56 <chMBPostAheadTimeout.constprop.34+0x16>
      return MSG_RESET;
 8003e76:	f06f 0001 	mvn.w	r0, #1
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f383 8811 	msr	BASEPRI, r3
}
 8003e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8003e84:	68e1      	ldr	r1, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003e86:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <chMBPostAheadTimeout.constprop.34+0x74>)
      if (--mbp->rdptr < mbp->buffer) {
 8003e88:	3904      	subs	r1, #4
 8003e8a:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 8003e8c:	bf88      	it	hi
 8003e8e:	1f39      	subhi	r1, r7, #4
 8003e90:	60e1      	str	r1, [r4, #12]
      mbp->cnt++;
 8003e92:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 8003e94:	f8c1 8000 	str.w	r8, [r1]
      mbp->cnt++;
 8003e98:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003e9a:	f7fd fac9 	bl	8001430 <chThdDequeueNextI.constprop.84>
      chSchRescheduleS();
 8003e9e:	f7ff feb7 	bl	8003c10 <chSchRescheduleS>
      return MSG_OK;
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f383 8811 	msr	BASEPRI, r3
}
 8003eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000c50 	.word	0x20000c50
 8003eb4:	20000c70 	.word	0x20000c70
	...

08003ec0 <chMBFetchTimeout.constprop.31>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	4607      	mov	r7, r0
 8003ec4:	460e      	mov	r6, r1
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	4c15      	ldr	r4, [pc, #84]	; (8003f24 <chMBFetchTimeout.constprop.31+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8003ece:	18e5      	adds	r5, r4, r3
 8003ed0:	e004      	b.n	8003edc <chMBFetchTimeout.constprop.31+0x1c>
 8003ed2:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8003ed4:	b96b      	cbnz	r3, 8003ef2 <chMBFetchTimeout.constprop.31+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8003ed6:	f7fe feeb 	bl	8002cb0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003eda:	b930      	cbnz	r0, 8003eea <chMBFetchTimeout.constprop.31+0x2a>
    if (mbp->reset) {
 8003edc:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8003ede:	4631      	mov	r1, r6
 8003ee0:	4628      	mov	r0, r5
    if (mbp->reset) {
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f5      	beq.n	8003ed2 <chMBFetchTimeout.constprop.31+0x12>
      return MSG_RESET;
 8003ee6:	f06f 0001 	mvn.w	r0, #1
 8003eea:	2300      	movs	r3, #0
 8003eec:	f383 8811 	msr	BASEPRI, r3
}
 8003ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8003ef2:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8003ef4:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8003ef6:	6810      	ldr	r0, [r2, #0]
 8003ef8:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 8003efa:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 8003efc:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 8003efe:	f103 33ff 	add.w	r3, r3, #4294967295
      *msgp = *mbp->rdptr++;
 8003f02:	6038      	str	r0, [r7, #0]
        mbp->rdptr = mbp->buffer;
 8003f04:	bf28      	it	cs
 8003f06:	6822      	ldrcs	r2, [r4, #0]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8003f08:	4807      	ldr	r0, [pc, #28]	; (8003f28 <chMBFetchTimeout.constprop.31+0x68>)
        mbp->rdptr = mbp->buffer;
 8003f0a:	bf28      	it	cs
 8003f0c:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 8003f0e:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8003f10:	f7fd fa8e 	bl	8001430 <chThdDequeueNextI.constprop.84>
      chSchRescheduleS();
 8003f14:	f7ff fe7c 	bl	8003c10 <chSchRescheduleS>
      return MSG_OK;
 8003f18:	2000      	movs	r0, #0
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f383 8811 	msr	BASEPRI, r3
}
 8003f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000c50 	.word	0x20000c50
 8003f28:	20000c68 	.word	0x20000c68
 8003f2c:	00000000 	.word	0x00000000

08003f30 <oslib_test_001_003_execute>:
}

static void oslib_test_001_003_execute(void) {
 8003f30:	b570      	push	{r4, r5, r6, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
 8003f32:	4e40      	ldr	r6, [pc, #256]	; (8004034 <oslib_test_001_003_execute+0x104>)
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003f34:	4d40      	ldr	r5, [pc, #256]	; (8004038 <oslib_test_001_003_execute+0x108>)
  test_set_step(1);
 8003f36:	2301      	movs	r3, #1
static void oslib_test_001_003_execute(void) {
 8003f38:	b082      	sub	sp, #8
  test_set_step(1);
 8003f3a:	6033      	str	r3, [r6, #0]
 8003f3c:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7ff ff3c 	bl	8003dc0 <chMBPostTimeout.constprop.37>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003f48:	fab0 f080 	clz	r0, r0
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	0940      	lsrs	r0, r0, #5
 8003f50:	f7fc fe9e 	bl	8000c90 <_test_assert>
 8003f54:	3401      	adds	r4, #1
 8003f56:	b988      	cbnz	r0, 8003f7c <oslib_test_001_003_execute+0x4c>
    for (i = 0; i < MB_SIZE; i++) {
 8003f58:	2c46      	cmp	r4, #70	; 0x46
 8003f5a:	d1f0      	bne.n	8003f3e <oslib_test_001_003_execute+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8003f5c:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8003f5e:	2101      	movs	r1, #1
 8003f60:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
 8003f62:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8003f64:	f7ff ff2c 	bl	8003dc0 <chMBPostTimeout.constprop.37>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003f68:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8003f6c:	fab0 f080 	clz	r0, r0
 8003f70:	4931      	ldr	r1, [pc, #196]	; (8004038 <oslib_test_001_003_execute+0x108>)
 8003f72:	0940      	lsrs	r0, r0, #5
 8003f74:	f7fc fe8c 	bl	8000c90 <_test_assert>
 8003f78:	4604      	mov	r4, r0
 8003f7a:	b108      	cbz	r0, 8003f80 <oslib_test_001_003_execute+0x50>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	2520      	movs	r5, #32
 8003f82:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 8003f86:	2058      	movs	r0, #88	; 0x58
 8003f88:	f7fd fa62 	bl	8001450 <chMBPostI.constprop.36>
 8003f8c:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003f90:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8003f94:	fab0 f080 	clz	r0, r0
 8003f98:	4927      	ldr	r1, [pc, #156]	; (8004038 <oslib_test_001_003_execute+0x108>)
 8003f9a:	0940      	lsrs	r0, r0, #5
 8003f9c:	f7fc fe78 	bl	8000c90 <_test_assert>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d1eb      	bne.n	8003f7c <oslib_test_001_003_execute+0x4c>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	2058      	movs	r0, #88	; 0x58
 8003fa8:	f7ff ff4a 	bl	8003e40 <chMBPostAheadTimeout.constprop.34>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003fac:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8003fb0:	fab0 f080 	clz	r0, r0
 8003fb4:	4920      	ldr	r1, [pc, #128]	; (8004038 <oslib_test_001_003_execute+0x108>)
 8003fb6:	0940      	lsrs	r0, r0, #5
 8003fb8:	f7fc fe6a 	bl	8000c90 <_test_assert>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d1dc      	bne.n	8003f7c <oslib_test_001_003_execute+0x4c>
 8003fc2:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 8003fc6:	2058      	movs	r0, #88	; 0x58
 8003fc8:	f7fd fa6a 	bl	80014a0 <chMBPostAheadI.constprop.33>
 8003fcc:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003fd0:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8003fd4:	fab0 f080 	clz	r0, r0
 8003fd8:	4917      	ldr	r1, [pc, #92]	; (8004038 <oslib_test_001_003_execute+0x108>)
 8003fda:	0940      	lsrs	r0, r0, #5
 8003fdc:	f7fc fe58 	bl	8000c90 <_test_assert>
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d1ca      	bne.n	8003f7c <oslib_test_001_003_execute+0x4c>
  test_set_step(3);
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 8003fea:	f7ff feb1 	bl	8003d50 <chMBReset.constprop.39>
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <oslib_test_001_003_execute+0x10c>)
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	751c      	strb	r4, [r3, #20]
 8003ff4:	a801      	add	r0, sp, #4
  test_set_step(4);
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 8003ffa:	f7ff ff61 	bl	8003ec0 <chMBFetchTimeout.constprop.31>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003ffe:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004002:	fab0 f080 	clz	r0, r0
 8004006:	490c      	ldr	r1, [pc, #48]	; (8004038 <oslib_test_001_003_execute+0x108>)
 8004008:	0940      	lsrs	r0, r0, #5
 800400a:	f7fc fe41 	bl	8000c90 <_test_assert>
 800400e:	4604      	mov	r4, r0
 8004010:	2800      	cmp	r0, #0
 8004012:	d1b3      	bne.n	8003f7c <oslib_test_001_003_execute+0x4c>
 8004014:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 8004018:	a801      	add	r0, sp, #4
 800401a:	f7fd fa69 	bl	80014f0 <chMBFetchI.constprop.30>
 800401e:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004022:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004026:	fab0 f080 	clz	r0, r0
 800402a:	4903      	ldr	r1, [pc, #12]	; (8004038 <oslib_test_001_003_execute+0x108>)
 800402c:	0940      	lsrs	r0, r0, #5
 800402e:	f7fc fe2f 	bl	8000c90 <_test_assert>
 8004032:	e7a3      	b.n	8003f7c <oslib_test_001_003_execute+0x4c>
 8004034:	20001774 	.word	0x20001774
 8004038:	08009e04 	.word	0x08009e04
 800403c:	20000c50 	.word	0x20000c50

08004040 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 8004040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8004044:	4fad      	ldr	r7, [pc, #692]	; (80042fc <oslib_test_001_002_execute+0x2bc>)
 8004046:	f04f 0801 	mov.w	r8, #1
static void oslib_test_001_002_execute(void) {
 800404a:	b082      	sub	sp, #8
  test_set_step(1);
 800404c:	f8c7 8000 	str.w	r8, [r7]
 8004050:	2620      	movs	r6, #32
 8004052:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8004056:	4caa      	ldr	r4, [pc, #680]	; (8004300 <oslib_test_001_002_execute+0x2c0>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004058:	49aa      	ldr	r1, [pc, #680]	; (8004304 <oslib_test_001_002_execute+0x2c4>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800405a:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800405c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004060:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004062:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004066:	f1a0 0004 	sub.w	r0, r0, #4
 800406a:	fab0 f080 	clz	r0, r0
 800406e:	0940      	lsrs	r0, r0, #5
 8004070:	f7fc fe0e 	bl	8000c90 <_test_assert>
 8004074:	b128      	cbz	r0, 8004082 <oslib_test_001_002_execute+0x42>
 8004076:	2300      	movs	r3, #0
 8004078:	f383 8811 	msr	BASEPRI, r3
}
 800407c:	b002      	add	sp, #8
 800407e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004082:	4605      	mov	r5, r0
 8004084:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8004088:	2302      	movs	r3, #2
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 8004090:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 8004092:	6120      	str	r0, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8004094:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 8004098:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 800409c:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80040a0:	f7fd fa4e 	bl	8001540 <chThdDequeueAllI.constprop.68>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80040a4:	f104 0020 	add.w	r0, r4, #32
 80040a8:	f7fd fa4a 	bl	8001540 <chThdDequeueAllI.constprop.68>
 80040ac:	f385 8811 	msr	BASEPRI, r5
 80040b0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80040b4:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80040b8:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80040ba:	4993      	ldr	r1, [pc, #588]	; (8004308 <oslib_test_001_002_execute+0x2c8>)
  return (size_t)(mbp->top - mbp->buffer);
 80040bc:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80040be:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80040c2:	f1a0 0004 	sub.w	r0, r0, #4
 80040c6:	fab0 f080 	clz	r0, r0
 80040ca:	0940      	lsrs	r0, r0, #5
 80040cc:	f7fc fde0 	bl	8000c90 <_test_assert>
 80040d0:	4680      	mov	r8, r0
 80040d2:	b120      	cbz	r0, 80040de <oslib_test_001_002_execute+0x9e>
 80040d4:	f385 8811 	msr	BASEPRI, r5
}
 80040d8:	b002      	add	sp, #8
 80040da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040de:	f380 8811 	msr	BASEPRI, r0
 80040e2:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80040e6:	6920      	ldr	r0, [r4, #16]
 80040e8:	4988      	ldr	r1, [pc, #544]	; (800430c <oslib_test_001_002_execute+0x2cc>)
 80040ea:	fab0 f080 	clz	r0, r0
 80040ee:	0940      	lsrs	r0, r0, #5
 80040f0:	f7fc fdce 	bl	8000c90 <_test_assert>
 80040f4:	4605      	mov	r5, r0
 80040f6:	b110      	cbz	r0, 80040fe <oslib_test_001_002_execute+0xbe>
 80040f8:	f388 8811 	msr	BASEPRI, r8
 80040fc:	e7be      	b.n	800407c <oslib_test_001_002_execute+0x3c>
 80040fe:	f380 8811 	msr	BASEPRI, r0
 8004102:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	68a3      	ldr	r3, [r4, #8]
 800410a:	4981      	ldr	r1, [pc, #516]	; (8004310 <oslib_test_001_002_execute+0x2d0>)
 800410c:	1ac0      	subs	r0, r0, r3
 800410e:	fab0 f080 	clz	r0, r0
 8004112:	0940      	lsrs	r0, r0, #5
 8004114:	f7fc fdbc 	bl	8000c90 <_test_assert>
 8004118:	4680      	mov	r8, r0
 800411a:	2800      	cmp	r0, #0
 800411c:	d1da      	bne.n	80040d4 <oslib_test_001_002_execute+0x94>
 800411e:	f380 8811 	msr	BASEPRI, r0
 8004122:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	68e3      	ldr	r3, [r4, #12]
 800412a:	497a      	ldr	r1, [pc, #488]	; (8004314 <oslib_test_001_002_execute+0x2d4>)
 800412c:	1ac0      	subs	r0, r0, r3
 800412e:	fab0 f080 	clz	r0, r0
 8004132:	0940      	lsrs	r0, r0, #5
 8004134:	f7fc fdac 	bl	8000c90 <_test_assert>
 8004138:	2800      	cmp	r0, #0
 800413a:	d1dd      	bne.n	80040f8 <oslib_test_001_002_execute+0xb8>
 800413c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8004140:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004142:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8004318 <oslib_test_001_002_execute+0x2d8>
  mbp->reset = false;
 8004146:	7520      	strb	r0, [r4, #20]
 8004148:	4680      	mov	r8, r0
  test_set_step(3);
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	2542      	movs	r5, #66	; 0x42
 800414e:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 8004152:	4628      	mov	r0, r5
 8004154:	f7fd f97c 	bl	8001450 <chMBPostI.constprop.36>
 8004158:	f388 8811 	msr	BASEPRI, r8
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800415c:	fab0 f080 	clz	r0, r0
 8004160:	0940      	lsrs	r0, r0, #5
 8004162:	4651      	mov	r1, sl
 8004164:	f7fc fd94 	bl	8000c90 <_test_assert>
 8004168:	3501      	adds	r5, #1
 800416a:	4681      	mov	r9, r0
 800416c:	2800      	cmp	r0, #0
 800416e:	d185      	bne.n	800407c <oslib_test_001_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8004170:	2d45      	cmp	r5, #69	; 0x45
 8004172:	d1ec      	bne.n	800414e <oslib_test_001_002_execute+0x10e>
 8004174:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 8004178:	2041      	movs	r0, #65	; 0x41
 800417a:	f7fd f991 	bl	80014a0 <chMBPostAheadI.constprop.33>
 800417e:	f389 8811 	msr	BASEPRI, r9
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004182:	fab0 f080 	clz	r0, r0
 8004186:	0940      	lsrs	r0, r0, #5
 8004188:	4963      	ldr	r1, [pc, #396]	; (8004318 <oslib_test_001_002_execute+0x2d8>)
 800418a:	f7fc fd81 	bl	8000c90 <_test_assert>
 800418e:	4605      	mov	r5, r0
 8004190:	2800      	cmp	r0, #0
 8004192:	f47f af73 	bne.w	800407c <oslib_test_001_002_execute+0x3c>
  test_set_step(4);
 8004196:	f04f 0804 	mov.w	r8, #4
 800419a:	f8c7 8000 	str.w	r8, [r7]
 800419e:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80041a2:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80041a6:	6922      	ldr	r2, [r4, #16]
 80041a8:	1a5b      	subs	r3, r3, r1
 80041aa:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80041ae:	bf0c      	ite	eq
 80041b0:	2001      	moveq	r0, #1
 80041b2:	2000      	movne	r0, #0
 80041b4:	4959      	ldr	r1, [pc, #356]	; (800431c <oslib_test_001_002_execute+0x2dc>)
 80041b6:	f7fc fd6b 	bl	8000c90 <_test_assert>
 80041ba:	4681      	mov	r9, r0
 80041bc:	2800      	cmp	r0, #0
 80041be:	d189      	bne.n	80040d4 <oslib_test_001_002_execute+0x94>
 80041c0:	f380 8811 	msr	BASEPRI, r0
 80041c4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80041c8:	6920      	ldr	r0, [r4, #16]
 80041ca:	4955      	ldr	r1, [pc, #340]	; (8004320 <oslib_test_001_002_execute+0x2e0>)
 80041cc:	f1a0 0004 	sub.w	r0, r0, #4
 80041d0:	fab0 f080 	clz	r0, r0
 80041d4:	0940      	lsrs	r0, r0, #5
 80041d6:	f7fc fd5b 	bl	8000c90 <_test_assert>
 80041da:	4605      	mov	r5, r0
 80041dc:	b110      	cbz	r0, 80041e4 <oslib_test_001_002_execute+0x1a4>
 80041de:	f389 8811 	msr	BASEPRI, r9
 80041e2:	e74b      	b.n	800407c <oslib_test_001_002_execute+0x3c>
 80041e4:	f380 8811 	msr	BASEPRI, r0
 80041e8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80041ec:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 80041f0:	1ac6      	subs	r6, r0, r3
 80041f2:	4270      	negs	r0, r6
 80041f4:	4170      	adcs	r0, r6
 80041f6:	494b      	ldr	r1, [pc, #300]	; (8004324 <oslib_test_001_002_execute+0x2e4>)
 80041f8:	f7fc fd4a 	bl	8000c90 <_test_assert>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	f47f af69 	bne.w	80040d4 <oslib_test_001_002_execute+0x94>
 8004202:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 8004206:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004208:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8004318 <oslib_test_001_002_execute+0x2d8>
  test_set_step(5);
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4645      	mov	r5, r8
 8004210:	4606      	mov	r6, r0
 8004212:	f04f 0820 	mov.w	r8, #32
 8004216:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 800421a:	a801      	add	r0, sp, #4
 800421c:	f7fd f968 	bl	80014f0 <chMBFetchI.constprop.30>
 8004220:	f386 8811 	msr	BASEPRI, r6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004224:	fab0 f080 	clz	r0, r0
 8004228:	0940      	lsrs	r0, r0, #5
 800422a:	4649      	mov	r1, r9
 800422c:	f7fc fd30 	bl	8000c90 <_test_assert>
 8004230:	2800      	cmp	r0, #0
 8004232:	f47f af23 	bne.w	800407c <oslib_test_001_002_execute+0x3c>
      test_emit_token(msg2);
 8004236:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800423a:	f7fc fdc9 	bl	8000dd0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800423e:	3d01      	subs	r5, #1
 8004240:	d1e9      	bne.n	8004216 <oslib_test_001_002_execute+0x1d6>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004242:	4939      	ldr	r1, [pc, #228]	; (8004328 <oslib_test_001_002_execute+0x2e8>)
 8004244:	4839      	ldr	r0, [pc, #228]	; (800432c <oslib_test_001_002_execute+0x2ec>)
 8004246:	f7fc fe3b 	bl	8000ec0 <_test_assert_sequence>
 800424a:	2800      	cmp	r0, #0
 800424c:	f47f af16 	bne.w	800407c <oslib_test_001_002_execute+0x3c>
  test_set_step(6);
 8004250:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004252:	f04f 31ff 	mov.w	r1, #4294967295
 8004256:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 8004258:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800425a:	f7ff fdb1 	bl	8003dc0 <chMBPostTimeout.constprop.37>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800425e:	fab0 f080 	clz	r0, r0
 8004262:	0940      	lsrs	r0, r0, #5
 8004264:	492c      	ldr	r1, [pc, #176]	; (8004318 <oslib_test_001_002_execute+0x2d8>)
 8004266:	f7fc fd13 	bl	8000c90 <_test_assert>
 800426a:	2800      	cmp	r0, #0
 800426c:	f47f af06 	bne.w	800407c <oslib_test_001_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004270:	f04f 31ff 	mov.w	r1, #4294967295
 8004274:	a801      	add	r0, sp, #4
 8004276:	f7ff fe23 	bl	8003ec0 <chMBFetchTimeout.constprop.31>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800427a:	fab0 f080 	clz	r0, r0
 800427e:	0940      	lsrs	r0, r0, #5
 8004280:	4925      	ldr	r1, [pc, #148]	; (8004318 <oslib_test_001_002_execute+0x2d8>)
 8004282:	f7fc fd05 	bl	8000c90 <_test_assert>
 8004286:	2800      	cmp	r0, #0
 8004288:	f47f aef8 	bne.w	800407c <oslib_test_001_002_execute+0x3c>
  test_set_step(7);
 800428c:	2307      	movs	r3, #7
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	f388 8811 	msr	BASEPRI, r8
 8004294:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004298:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800429a:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800429c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80042a0:	1f19      	subs	r1, r3, #4
 80042a2:	4248      	negs	r0, r1
 80042a4:	4148      	adcs	r0, r1
 80042a6:	4918      	ldr	r1, [pc, #96]	; (8004308 <oslib_test_001_002_execute+0x2c8>)
 80042a8:	f7fc fcf2 	bl	8000c90 <_test_assert>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f47f af11 	bne.w	80040d4 <oslib_test_001_002_execute+0x94>
 80042b2:	f385 8811 	msr	BASEPRI, r5
 80042b6:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80042ba:	6920      	ldr	r0, [r4, #16]
 80042bc:	4913      	ldr	r1, [pc, #76]	; (800430c <oslib_test_001_002_execute+0x2cc>)
 80042be:	fab0 f080 	clz	r0, r0
 80042c2:	0940      	lsrs	r0, r0, #5
 80042c4:	f7fc fce4 	bl	8000c90 <_test_assert>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	f47f af03 	bne.w	80040d4 <oslib_test_001_002_execute+0x94>
 80042ce:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	68a3      	ldr	r3, [r4, #8]
 80042d6:	490e      	ldr	r1, [pc, #56]	; (8004310 <oslib_test_001_002_execute+0x2d0>)
 80042d8:	1ac2      	subs	r2, r0, r3
 80042da:	4250      	negs	r0, r2
 80042dc:	4150      	adcs	r0, r2
 80042de:	f7fc fcd7 	bl	8000c90 <_test_assert>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	f47f aeca 	bne.w	800407c <oslib_test_001_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80042e8:	6820      	ldr	r0, [r4, #0]
 80042ea:	68e3      	ldr	r3, [r4, #12]
 80042ec:	4909      	ldr	r1, [pc, #36]	; (8004314 <oslib_test_001_002_execute+0x2d4>)
 80042ee:	1ac3      	subs	r3, r0, r3
 80042f0:	4258      	negs	r0, r3
 80042f2:	4158      	adcs	r0, r3
 80042f4:	f7fc fccc 	bl	8000c90 <_test_assert>
 80042f8:	e6c0      	b.n	800407c <oslib_test_001_002_execute+0x3c>
 80042fa:	bf00      	nop
 80042fc:	20001774 	.word	0x20001774
 8004300:	20000c50 	.word	0x20000c50
 8004304:	08009d3c 	.word	0x08009d3c
 8004308:	08009d48 	.word	0x08009d48
 800430c:	08009d54 	.word	0x08009d54
 8004310:	08009d60 	.word	0x08009d60
 8004314:	08009d84 	.word	0x08009d84
 8004318:	08009e04 	.word	0x08009e04
 800431c:	08009da8 	.word	0x08009da8
 8004320:	08009db4 	.word	0x08009db4
 8004324:	08009dc0 	.word	0x08009dc0
 8004328:	08009dd8 	.word	0x08009dd8
 800432c:	08009dec 	.word	0x08009dec

08004330 <oslib_test_001_001_execute>:
static void oslib_test_001_001_execute(void) {
 8004330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8004334:	4fb3      	ldr	r7, [pc, #716]	; (8004604 <oslib_test_001_001_execute+0x2d4>)
 8004336:	2301      	movs	r3, #1
static void oslib_test_001_001_execute(void) {
 8004338:	b082      	sub	sp, #8
  test_set_step(1);
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	2620      	movs	r6, #32
 800433e:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8004342:	4cb1      	ldr	r4, [pc, #708]	; (8004608 <oslib_test_001_001_execute+0x2d8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004344:	49b1      	ldr	r1, [pc, #708]	; (800460c <oslib_test_001_001_execute+0x2dc>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004346:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8004348:	e9d4 2300 	ldrd	r2, r3, [r4]
 800434c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800434e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004352:	f1a0 0004 	sub.w	r0, r0, #4
 8004356:	fab0 f080 	clz	r0, r0
 800435a:	0940      	lsrs	r0, r0, #5
 800435c:	f7fc fc98 	bl	8000c90 <_test_assert>
 8004360:	b128      	cbz	r0, 800436e <oslib_test_001_001_execute+0x3e>
 8004362:	2300      	movs	r3, #0
 8004364:	f383 8811 	msr	BASEPRI, r3
}
 8004368:	b002      	add	sp, #8
 800436a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800436e:	4605      	mov	r5, r0
 8004370:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8004374:	2302      	movs	r3, #2
 8004376:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8004378:	f7ff fcea 	bl	8003d50 <chMBReset.constprop.39>
 800437c:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8004380:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004384:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004386:	49a2      	ldr	r1, [pc, #648]	; (8004610 <oslib_test_001_001_execute+0x2e0>)
  return (size_t)(mbp->top - mbp->buffer);
 8004388:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800438a:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800438e:	f1a0 0004 	sub.w	r0, r0, #4
 8004392:	fab0 f080 	clz	r0, r0
 8004396:	0940      	lsrs	r0, r0, #5
 8004398:	f7fc fc7a 	bl	8000c90 <_test_assert>
 800439c:	4680      	mov	r8, r0
 800439e:	b120      	cbz	r0, 80043aa <oslib_test_001_001_execute+0x7a>
 80043a0:	f385 8811 	msr	BASEPRI, r5
}
 80043a4:	b002      	add	sp, #8
 80043a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043aa:	f380 8811 	msr	BASEPRI, r0
 80043ae:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80043b2:	6920      	ldr	r0, [r4, #16]
 80043b4:	4997      	ldr	r1, [pc, #604]	; (8004614 <oslib_test_001_001_execute+0x2e4>)
 80043b6:	fab0 f080 	clz	r0, r0
 80043ba:	0940      	lsrs	r0, r0, #5
 80043bc:	f7fc fc68 	bl	8000c90 <_test_assert>
 80043c0:	4605      	mov	r5, r0
 80043c2:	b110      	cbz	r0, 80043ca <oslib_test_001_001_execute+0x9a>
 80043c4:	f388 8811 	msr	BASEPRI, r8
 80043c8:	e7ce      	b.n	8004368 <oslib_test_001_001_execute+0x38>
 80043ca:	f380 8811 	msr	BASEPRI, r0
 80043ce:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80043d2:	6820      	ldr	r0, [r4, #0]
 80043d4:	68a3      	ldr	r3, [r4, #8]
 80043d6:	4990      	ldr	r1, [pc, #576]	; (8004618 <oslib_test_001_001_execute+0x2e8>)
 80043d8:	1ac0      	subs	r0, r0, r3
 80043da:	fab0 f080 	clz	r0, r0
 80043de:	0940      	lsrs	r0, r0, #5
 80043e0:	f7fc fc56 	bl	8000c90 <_test_assert>
 80043e4:	4680      	mov	r8, r0
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d1da      	bne.n	80043a0 <oslib_test_001_001_execute+0x70>
 80043ea:	f380 8811 	msr	BASEPRI, r0
 80043ee:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	68e3      	ldr	r3, [r4, #12]
 80043f6:	4989      	ldr	r1, [pc, #548]	; (800461c <oslib_test_001_001_execute+0x2ec>)
 80043f8:	1ac0      	subs	r0, r0, r3
 80043fa:	fab0 f080 	clz	r0, r0
 80043fe:	0940      	lsrs	r0, r0, #5
 8004400:	f7fc fc46 	bl	8000c90 <_test_assert>
 8004404:	2800      	cmp	r0, #0
 8004406:	d1dd      	bne.n	80043c4 <oslib_test_001_001_execute+0x94>
 8004408:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800440c:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800440e:	f04f 31ff 	mov.w	r1, #4294967295
  test_set_step(3);
 8004412:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004414:	f7ff fcd4 	bl	8003dc0 <chMBPostTimeout.constprop.37>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004418:	1c85      	adds	r5, r0, #2
 800441a:	bf14      	ite	ne
 800441c:	2000      	movne	r0, #0
 800441e:	2001      	moveq	r0, #1
 8004420:	497f      	ldr	r1, [pc, #508]	; (8004620 <oslib_test_001_001_execute+0x2f0>)
 8004422:	f7fc fc35 	bl	8000c90 <_test_assert>
 8004426:	2800      	cmp	r0, #0
 8004428:	d19e      	bne.n	8004368 <oslib_test_001_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800442a:	f04f 31ff 	mov.w	r1, #4294967295
 800442e:	f7ff fd07 	bl	8003e40 <chMBPostAheadTimeout.constprop.34>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004432:	1c82      	adds	r2, r0, #2
 8004434:	bf14      	ite	ne
 8004436:	2000      	movne	r0, #0
 8004438:	2001      	moveq	r0, #1
 800443a:	4979      	ldr	r1, [pc, #484]	; (8004620 <oslib_test_001_001_execute+0x2f0>)
 800443c:	f7fc fc28 	bl	8000c90 <_test_assert>
 8004440:	2800      	cmp	r0, #0
 8004442:	d191      	bne.n	8004368 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004444:	f04f 31ff 	mov.w	r1, #4294967295
 8004448:	a801      	add	r0, sp, #4
 800444a:	f7ff fd39 	bl	8003ec0 <chMBFetchTimeout.constprop.31>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800444e:	1c83      	adds	r3, r0, #2
 8004450:	bf14      	ite	ne
 8004452:	2000      	movne	r0, #0
 8004454:	2001      	moveq	r0, #1
 8004456:	4972      	ldr	r1, [pc, #456]	; (8004620 <oslib_test_001_001_execute+0x2f0>)
 8004458:	f7fc fc1a 	bl	8000c90 <_test_assert>
 800445c:	2800      	cmp	r0, #0
 800445e:	d183      	bne.n	8004368 <oslib_test_001_001_execute+0x38>
  test_set_step(4);
 8004460:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004462:	4e70      	ldr	r6, [pc, #448]	; (8004624 <oslib_test_001_001_execute+0x2f4>)
  mbp->reset = false;
 8004464:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800446a:	f04f 31ff 	mov.w	r1, #4294967295
 800446e:	4628      	mov	r0, r5
 8004470:	f7ff fca6 	bl	8003dc0 <chMBPostTimeout.constprop.37>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004474:	fab0 f080 	clz	r0, r0
 8004478:	4631      	mov	r1, r6
 800447a:	0940      	lsrs	r0, r0, #5
 800447c:	f7fc fc08 	bl	8000c90 <_test_assert>
 8004480:	3501      	adds	r5, #1
 8004482:	2800      	cmp	r0, #0
 8004484:	f47f af70 	bne.w	8004368 <oslib_test_001_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8004488:	2d45      	cmp	r5, #69	; 0x45
 800448a:	d1ee      	bne.n	800446a <oslib_test_001_001_execute+0x13a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 800448c:	f04f 31ff 	mov.w	r1, #4294967295
 8004490:	2041      	movs	r0, #65	; 0x41
 8004492:	f7ff fcd5 	bl	8003e40 <chMBPostAheadTimeout.constprop.34>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004496:	fab0 f080 	clz	r0, r0
 800449a:	0940      	lsrs	r0, r0, #5
 800449c:	4961      	ldr	r1, [pc, #388]	; (8004624 <oslib_test_001_001_execute+0x2f4>)
 800449e:	f7fc fbf7 	bl	8000c90 <_test_assert>
 80044a2:	4605      	mov	r5, r0
 80044a4:	2800      	cmp	r0, #0
 80044a6:	f47f af5f 	bne.w	8004368 <oslib_test_001_001_execute+0x38>
  test_set_step(5);
 80044aa:	2305      	movs	r3, #5
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	2620      	movs	r6, #32
 80044b0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80044b4:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80044b8:	6922      	ldr	r2, [r4, #16]
 80044ba:	1a5b      	subs	r3, r3, r1
 80044bc:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80044c0:	bf0c      	ite	eq
 80044c2:	2001      	moveq	r0, #1
 80044c4:	2000      	movne	r0, #0
 80044c6:	4958      	ldr	r1, [pc, #352]	; (8004628 <oslib_test_001_001_execute+0x2f8>)
 80044c8:	f7fc fbe2 	bl	8000c90 <_test_assert>
 80044cc:	4680      	mov	r8, r0
 80044ce:	2800      	cmp	r0, #0
 80044d0:	f47f af66 	bne.w	80043a0 <oslib_test_001_001_execute+0x70>
 80044d4:	f380 8811 	msr	BASEPRI, r0
 80044d8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80044dc:	6920      	ldr	r0, [r4, #16]
 80044de:	4953      	ldr	r1, [pc, #332]	; (800462c <oslib_test_001_001_execute+0x2fc>)
 80044e0:	f1a0 0c04 	sub.w	ip, r0, #4
 80044e4:	f1dc 0000 	rsbs	r0, ip, #0
 80044e8:	eb40 000c 	adc.w	r0, r0, ip
 80044ec:	f7fc fbd0 	bl	8000c90 <_test_assert>
 80044f0:	4605      	mov	r5, r0
 80044f2:	2800      	cmp	r0, #0
 80044f4:	f47f af66 	bne.w	80043c4 <oslib_test_001_001_execute+0x94>
 80044f8:	f380 8811 	msr	BASEPRI, r0
 80044fc:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8004500:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8004504:	1ac6      	subs	r6, r0, r3
 8004506:	4270      	negs	r0, r6
 8004508:	4170      	adcs	r0, r6
 800450a:	4949      	ldr	r1, [pc, #292]	; (8004630 <oslib_test_001_001_execute+0x300>)
 800450c:	f7fc fbc0 	bl	8000c90 <_test_assert>
 8004510:	2800      	cmp	r0, #0
 8004512:	f47f af45 	bne.w	80043a0 <oslib_test_001_001_execute+0x70>
 8004516:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 800451a:	2306      	movs	r3, #6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800451c:	4e41      	ldr	r6, [pc, #260]	; (8004624 <oslib_test_001_001_execute+0x2f4>)
  test_set_step(6);
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004522:	f04f 31ff 	mov.w	r1, #4294967295
 8004526:	a801      	add	r0, sp, #4
 8004528:	f7ff fcca 	bl	8003ec0 <chMBFetchTimeout.constprop.31>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800452c:	fab0 f080 	clz	r0, r0
 8004530:	4631      	mov	r1, r6
 8004532:	0940      	lsrs	r0, r0, #5
 8004534:	f7fc fbac 	bl	8000c90 <_test_assert>
 8004538:	2800      	cmp	r0, #0
 800453a:	f47f af15 	bne.w	8004368 <oslib_test_001_001_execute+0x38>
      test_emit_token(msg2);
 800453e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004542:	f7fc fc45 	bl	8000dd0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004546:	3d01      	subs	r5, #1
 8004548:	d1eb      	bne.n	8004522 <oslib_test_001_001_execute+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 800454a:	493a      	ldr	r1, [pc, #232]	; (8004634 <oslib_test_001_001_execute+0x304>)
 800454c:	483a      	ldr	r0, [pc, #232]	; (8004638 <oslib_test_001_001_execute+0x308>)
 800454e:	f7fc fcb7 	bl	8000ec0 <_test_assert_sequence>
 8004552:	2800      	cmp	r0, #0
 8004554:	f47f af08 	bne.w	8004368 <oslib_test_001_001_execute+0x38>
  test_set_step(7);
 8004558:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800455a:	f04f 31ff 	mov.w	r1, #4294967295
 800455e:	2046      	movs	r0, #70	; 0x46
  test_set_step(7);
 8004560:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004562:	f7ff fc2d 	bl	8003dc0 <chMBPostTimeout.constprop.37>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004566:	fab0 f080 	clz	r0, r0
 800456a:	0940      	lsrs	r0, r0, #5
 800456c:	492d      	ldr	r1, [pc, #180]	; (8004624 <oslib_test_001_001_execute+0x2f4>)
 800456e:	f7fc fb8f 	bl	8000c90 <_test_assert>
 8004572:	2800      	cmp	r0, #0
 8004574:	f47f aef8 	bne.w	8004368 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004578:	f04f 31ff 	mov.w	r1, #4294967295
 800457c:	a801      	add	r0, sp, #4
 800457e:	f7ff fc9f 	bl	8003ec0 <chMBFetchTimeout.constprop.31>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004582:	fab0 f080 	clz	r0, r0
 8004586:	0940      	lsrs	r0, r0, #5
 8004588:	4926      	ldr	r1, [pc, #152]	; (8004624 <oslib_test_001_001_execute+0x2f4>)
 800458a:	f7fc fb81 	bl	8000c90 <_test_assert>
 800458e:	2800      	cmp	r0, #0
 8004590:	f47f aeea 	bne.w	8004368 <oslib_test_001_001_execute+0x38>
  test_set_step(8);
 8004594:	2308      	movs	r3, #8
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	2620      	movs	r6, #32
 800459a:	f386 8811 	msr	BASEPRI, r6
 800459e:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80045a2:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80045a4:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80045a6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80045aa:	1f19      	subs	r1, r3, #4
 80045ac:	4248      	negs	r0, r1
 80045ae:	4148      	adcs	r0, r1
 80045b0:	4917      	ldr	r1, [pc, #92]	; (8004610 <oslib_test_001_001_execute+0x2e0>)
 80045b2:	f7fc fb6d 	bl	8000c90 <_test_assert>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f47f aef2 	bne.w	80043a0 <oslib_test_001_001_execute+0x70>
 80045bc:	f385 8811 	msr	BASEPRI, r5
 80045c0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80045c4:	6920      	ldr	r0, [r4, #16]
 80045c6:	4913      	ldr	r1, [pc, #76]	; (8004614 <oslib_test_001_001_execute+0x2e4>)
 80045c8:	fab0 f080 	clz	r0, r0
 80045cc:	0940      	lsrs	r0, r0, #5
 80045ce:	f7fc fb5f 	bl	8000c90 <_test_assert>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f47f aee4 	bne.w	80043a0 <oslib_test_001_001_execute+0x70>
 80045d8:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	68a3      	ldr	r3, [r4, #8]
 80045e0:	490d      	ldr	r1, [pc, #52]	; (8004618 <oslib_test_001_001_execute+0x2e8>)
 80045e2:	1ac2      	subs	r2, r0, r3
 80045e4:	4250      	negs	r0, r2
 80045e6:	4150      	adcs	r0, r2
 80045e8:	f7fc fb52 	bl	8000c90 <_test_assert>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	f47f aebb 	bne.w	8004368 <oslib_test_001_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80045f2:	6820      	ldr	r0, [r4, #0]
 80045f4:	68e3      	ldr	r3, [r4, #12]
 80045f6:	4909      	ldr	r1, [pc, #36]	; (800461c <oslib_test_001_001_execute+0x2ec>)
 80045f8:	1ac3      	subs	r3, r0, r3
 80045fa:	4258      	negs	r0, r3
 80045fc:	4158      	adcs	r0, r3
 80045fe:	f7fc fb47 	bl	8000c90 <_test_assert>
 8004602:	e6b1      	b.n	8004368 <oslib_test_001_001_execute+0x38>
 8004604:	20001774 	.word	0x20001774
 8004608:	20000c50 	.word	0x20000c50
 800460c:	08009d3c 	.word	0x08009d3c
 8004610:	08009d48 	.word	0x08009d48
 8004614:	08009d54 	.word	0x08009d54
 8004618:	08009d60 	.word	0x08009d60
 800461c:	08009d84 	.word	0x08009d84
 8004620:	08009d18 	.word	0x08009d18
 8004624:	08009e04 	.word	0x08009e04
 8004628:	08009da8 	.word	0x08009da8
 800462c:	08009db4 	.word	0x08009db4
 8004630:	08009dc0 	.word	0x08009dc0
 8004634:	08009dd8 	.word	0x08009dd8
 8004638:	08009dec 	.word	0x08009dec
 800463c:	00000000 	.word	0x00000000

08004640 <oslib_test_003_002_execute>:
static void oslib_test_003_002_execute(void) {
 8004640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8004644:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800473c <oslib_test_003_002_execute+0xfc>
 8004648:	4d38      	ldr	r5, [pc, #224]	; (800472c <oslib_test_003_002_execute+0xec>)
 800464a:	4c39      	ldr	r4, [pc, #228]	; (8004730 <oslib_test_003_002_execute+0xf0>)
 800464c:	2301      	movs	r3, #1
 800464e:	f8ca 3000 	str.w	r3, [sl]
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8004652:	46a9      	mov	r9, r5
 8004654:	2604      	movs	r6, #4
 8004656:	f04f 0820 	mov.w	r8, #32
 800465a:	2700      	movs	r7, #0
 800465c:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8004660:	68eb      	ldr	r3, [r5, #12]
 8004662:	6023      	str	r3, [r4, #0]
 8004664:	4648      	mov	r0, r9
  mp->next = php;
 8004666:	60ec      	str	r4, [r5, #12]
 8004668:	f7fc fff2 	bl	8001650 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800466c:	f7ff fad0 	bl	8003c10 <chSchRescheduleS>
 8004670:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004674:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 8004676:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004678:	441c      	add	r4, r3
  while (n != 0U) {
 800467a:	d1ef      	bne.n	800465c <oslib_test_003_002_execute+0x1c>
  test_set_step(2);
 800467c:	2302      	movs	r3, #2
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800467e:	4e2d      	ldr	r6, [pc, #180]	; (8004734 <oslib_test_003_002_execute+0xf4>)
  test_set_step(2);
 8004680:	f8ca 3000 	str.w	r3, [sl]
 8004684:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8004686:	2000      	movs	r0, #0
 8004688:	f7fe fa0a 	bl	8002aa0 <chGuardedPoolAllocTimeout.constprop.25>
 800468c:	3000      	adds	r0, #0
 800468e:	bf18      	it	ne
 8004690:	2001      	movne	r0, #1
 8004692:	4631      	mov	r1, r6
 8004694:	f7fc fafc 	bl	8000c90 <_test_assert>
 8004698:	2800      	cmp	r0, #0
 800469a:	d144      	bne.n	8004726 <oslib_test_003_002_execute+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800469c:	3c01      	subs	r4, #1
 800469e:	d1f2      	bne.n	8004686 <oslib_test_003_002_execute+0x46>
  test_set_step(3);
 80046a0:	2303      	movs	r3, #3
 80046a2:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80046a6:	f7fe f9fb 	bl	8002aa0 <chGuardedPoolAllocTimeout.constprop.25>
 80046aa:	fab0 f080 	clz	r0, r0
 80046ae:	0940      	lsrs	r0, r0, #5
 80046b0:	4921      	ldr	r1, [pc, #132]	; (8004738 <oslib_test_003_002_execute+0xf8>)
 80046b2:	f7fc faed 	bl	8000c90 <_test_assert>
 80046b6:	bbb0      	cbnz	r0, 8004726 <oslib_test_003_002_execute+0xe6>
 80046b8:	4e1d      	ldr	r6, [pc, #116]	; (8004730 <oslib_test_003_002_execute+0xf0>)
 80046ba:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800472c <oslib_test_003_002_execute+0xec>
  test_set_step(4);
 80046be:	2304      	movs	r3, #4
 80046c0:	f106 0910 	add.w	r9, r6, #16
 80046c4:	f8ca 3000 	str.w	r3, [sl]
 80046c8:	2720      	movs	r7, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 80046ca:	4633      	mov	r3, r6
 80046cc:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 80046d0:	68ea      	ldr	r2, [r5, #12]
 80046d2:	f846 2b04 	str.w	r2, [r6], #4
 80046d6:	4640      	mov	r0, r8
  mp->next = php;
 80046d8:	60eb      	str	r3, [r5, #12]
 80046da:	f7fc ffb9 	bl	8001650 <chSemSignalI>
  chSchRescheduleS();
 80046de:	f7ff fa97 	bl	8003c10 <chSchRescheduleS>
 80046e2:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80046e6:	45b1      	cmp	r9, r6
 80046e8:	d1ef      	bne.n	80046ca <oslib_test_003_002_execute+0x8a>
  test_set_step(5);
 80046ea:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80046ec:	4d11      	ldr	r5, [pc, #68]	; (8004734 <oslib_test_003_002_execute+0xf4>)
  test_set_step(5);
 80046ee:	f8ca 3000 	str.w	r3, [sl]
 80046f2:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80046f4:	2000      	movs	r0, #0
 80046f6:	f7fe f9d3 	bl	8002aa0 <chGuardedPoolAllocTimeout.constprop.25>
 80046fa:	3000      	adds	r0, #0
 80046fc:	bf18      	it	ne
 80046fe:	2001      	movne	r0, #1
 8004700:	4629      	mov	r1, r5
 8004702:	f7fc fac5 	bl	8000c90 <_test_assert>
 8004706:	b970      	cbnz	r0, 8004726 <oslib_test_003_002_execute+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8004708:	3c01      	subs	r4, #1
 800470a:	d1f3      	bne.n	80046f4 <oslib_test_003_002_execute+0xb4>
  test_set_step(6);
 800470c:	2306      	movs	r3, #6
 800470e:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004712:	f7fe f9c5 	bl	8002aa0 <chGuardedPoolAllocTimeout.constprop.25>
 8004716:	fab0 f080 	clz	r0, r0
 800471a:	0940      	lsrs	r0, r0, #5
 800471c:	4906      	ldr	r1, [pc, #24]	; (8004738 <oslib_test_003_002_execute+0xf8>)
}
 800471e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004722:	f7fc bab5 	b.w	8000c90 <_test_assert>
}
 8004726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472a:	bf00      	nop
 800472c:	20000c14 	.word	0x20000c14
 8004730:	20001030 	.word	0x20001030
 8004734:	08009e80 	.word	0x08009e80
 8004738:	08009e8c 	.word	0x08009e8c
 800473c:	20001774 	.word	0x20001774

08004740 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	2520      	movs	r5, #32
 8004744:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8004748:	2100      	movs	r1, #0
 800474a:	480b      	ldr	r0, [pc, #44]	; (8004778 <evt_thread7+0x38>)
 800474c:	f7fc ff40 	bl	80015d0 <chEvtBroadcastFlagsI>
 8004750:	2400      	movs	r4, #0
  chSchRescheduleS();
 8004752:	f7ff fa5d 	bl	8003c10 <chSchRescheduleS>
 8004756:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800475a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800475e:	f7fe fc27 	bl	8002fb0 <chThdSleep>
 8004762:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8004766:	4805      	ldr	r0, [pc, #20]	; (800477c <evt_thread7+0x3c>)
 8004768:	4621      	mov	r1, r4
 800476a:	f7fc ff31 	bl	80015d0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800476e:	f7ff fa4f 	bl	8003c10 <chSchRescheduleS>
 8004772:	f384 8811 	msr	BASEPRI, r4
}
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	20000c0c 	.word	0x20000c0c
 800477c:	20000c10 	.word	0x20000c10

08004780 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8004780:	b510      	push	{r4, lr}
 8004782:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8004784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004788:	f7fe fc12 	bl	8002fb0 <chThdSleep>
 800478c:	2320      	movs	r3, #32
 800478e:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8004792:	2101      	movs	r1, #1
 8004794:	4620      	mov	r0, r4
 8004796:	f7fc ff03 	bl	80015a0 <chEvtSignalI>
  chSchRescheduleS();
 800479a:	f7ff fa39 	bl	8003c10 <chSchRescheduleS>
 800479e:	2300      	movs	r3, #0
 80047a0:	f383 8811 	msr	BASEPRI, r3
}
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	bf00      	nop
	...

080047b0 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 80047b0:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 80047b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80047b6:	f7fe fbfb 	bl	8002fb0 <chThdSleep>
 80047ba:	2320      	movs	r3, #32
 80047bc:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 80047c0:	4c06      	ldr	r4, [pc, #24]	; (80047dc <thread4B+0x2c>)
 80047c2:	4620      	mov	r0, r4
 80047c4:	f7fe ff1c 	bl	8003600 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 80047c8:	4620      	mov	r0, r4
 80047ca:	f7fc ff19 	bl	8001600 <chMtxUnlockS>
  chSchRescheduleS();
 80047ce:	f7ff fa1f 	bl	8003c10 <chSchRescheduleS>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f383 8811 	msr	BASEPRI, r3
}
 80047d8:	bd10      	pop	{r4, pc}
 80047da:	bf00      	nop
 80047dc:	20000c40 	.word	0x20000c40

080047e0 <thread2>:
static THD_FUNCTION(thread2, p) {
 80047e0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 80047e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047e6:	f7fe fbe3 	bl	8002fb0 <chThdSleep>
 80047ea:	2320      	movs	r3, #32
 80047ec:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 80047f0:	4804      	ldr	r0, [pc, #16]	; (8004804 <thread2+0x24>)
 80047f2:	f7fc ff2d 	bl	8001650 <chSemSignalI>
  chSchRescheduleS();
 80047f6:	f7ff fa0b 	bl	8003c10 <chSchRescheduleS>
 80047fa:	2300      	movs	r3, #0
 80047fc:	f383 8811 	msr	BASEPRI, r3
}
 8004800:	bd08      	pop	{r3, pc}
 8004802:	bf00      	nop
 8004804:	20001040 	.word	0x20001040
	...

08004810 <thread4>:
static THD_FUNCTION(thread4, p) {
 8004810:	b508      	push	{r3, lr}
 8004812:	2220      	movs	r2, #32
 8004814:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8004818:	6883      	ldr	r3, [r0, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	dd05      	ble.n	800482a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800481e:	f7ff f9f7 	bl	8003c10 <chSchRescheduleS>
 8004822:	2300      	movs	r3, #0
 8004824:	f383 8811 	msr	BASEPRI, r3
}
 8004828:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 800482a:	f7fc ff11 	bl	8001650 <chSemSignalI>
  chSchRescheduleS();
 800482e:	f7ff f9ef 	bl	8003c10 <chSchRescheduleS>
 8004832:	2300      	movs	r3, #0
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	bd08      	pop	{r3, pc}
 800483a:	bf00      	nop
 800483c:	0000      	movs	r0, r0
	...

08004840 <thread1.lto_priv.95>:
static THD_FUNCTION(thread1, p) {
 8004840:	b510      	push	{r4, lr}
 8004842:	2320      	movs	r3, #32
 8004844:	4604      	mov	r4, r0
 8004846:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(&tr1, MSG_OK);
 800484a:	2100      	movs	r1, #0
 800484c:	4806      	ldr	r0, [pc, #24]	; (8004868 <thread1.lto_priv.95+0x28>)
 800484e:	f7fc ff0f 	bl	8001670 <chThdResumeI>
  chSchRescheduleS();
 8004852:	f7ff f9dd 	bl	8003c10 <chSchRescheduleS>
 8004856:	2300      	movs	r3, #0
 8004858:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800485c:	7820      	ldrb	r0, [r4, #0]
}
 800485e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8004862:	f7fc bab5 	b.w	8000dd0 <test_emit_token>
 8004866:	bf00      	nop
 8004868:	200017a0 	.word	0x200017a0
 800486c:	00000000 	.word	0x00000000

08004870 <chMtxUnlock>:
  thread_t *ctp = currp;
 8004870:	4b17      	ldr	r3, [pc, #92]	; (80048d0 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 8004872:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8004874:	699d      	ldr	r5, [r3, #24]
 8004876:	2320      	movs	r3, #32
 8004878:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800487c:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
 800487e:	68c3      	ldr	r3, [r0, #12]
 8004880:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8004882:	4284      	cmp	r4, r0
 8004884:	d01d      	beq.n	80048c2 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
 8004886:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8004888:	b14b      	cbz	r3, 800489e <chMtxUnlock+0x2e>
 800488a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <chMtxUnlock+0x28>
 8004890:	6892      	ldr	r2, [r2, #8]
 8004892:	4291      	cmp	r1, r2
 8004894:	bf38      	it	cc
 8004896:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8004898:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f5      	bne.n	800488a <chMtxUnlock+0x1a>
 800489e:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 80048a0:	6822      	ldr	r2, [r4, #0]
      mp->next = tp->mtxlist;
 80048a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      ctp->prio = newprio;
 80048a4:	60a9      	str	r1, [r5, #8]
      (void) chSchReadyI(tp);
 80048a6:	4620      	mov	r0, r4
 80048a8:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80048aa:	6053      	str	r3, [r2, #4]
      mp->next = tp->mtxlist;
 80048ac:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->mtxlist = mp;
 80048b0:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 80048b2:	f7fc fda5 	bl	8001400 <chSchReadyI>
      chSchRescheduleS();
 80048b6:	f7ff f9ab 	bl	8003c10 <chSchRescheduleS>
 80048ba:	2300      	movs	r3, #0
 80048bc:	f383 8811 	msr	BASEPRI, r3
}
 80048c0:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60a3      	str	r3, [r4, #8]
 80048c6:	2300      	movs	r3, #0
 80048c8:	f383 8811 	msr	BASEPRI, r3
}
 80048cc:	bd70      	pop	{r4, r5, r6, pc}
 80048ce:	bf00      	nop
 80048d0:	20000da0 	.word	0x20000da0
	...

080048e0 <chHeapAllocAligned.constprop.42>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 80048e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 80048e4:	4c37      	ldr	r4, [pc, #220]	; (80049c4 <chHeapAllocAligned.constprop.42+0xe4>)
 80048e6:	2800      	cmp	r0, #0
 80048e8:	bf18      	it	ne
 80048ea:	4604      	movne	r4, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80048ec:	f104 070c 	add.w	r7, r4, #12
 80048f0:	4638      	mov	r0, r7
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80048f2:	f101 0807 	add.w	r8, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 80048f6:	460d      	mov	r5, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80048f8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  H_LOCK(heapp);
 80048fc:	f7fe fef8 	bl	80036f0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 8004900:	1d20      	adds	r0, r4, #4
  while (H_NEXT(qp) != NULL) {
 8004902:	6802      	ldr	r2, [r0, #0]

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004904:	f102 030f 	add.w	r3, r2, #15
 8004908:	f023 0307 	bic.w	r3, r3, #7

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800490c:	461e      	mov	r6, r3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800490e:	f102 0908 	add.w	r9, r2, #8
 8004912:	3b08      	subs	r3, #8
  while (H_NEXT(qp) != NULL) {
 8004914:	b17a      	cbz	r2, 8004936 <chHeapAllocAligned.constprop.42+0x56>
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004916:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800491a:	f10c 0101 	add.w	r1, ip, #1
 800491e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8004922:	eba1 0e06 	sub.w	lr, r1, r6
 8004926:	428b      	cmp	r3, r1
 8004928:	ea4f 0eee 	mov.w	lr, lr, asr #3
 800492c:	d201      	bcs.n	8004932 <chHeapAllocAligned.constprop.42+0x52>
 800492e:	45f0      	cmp	r8, lr
 8004930:	d912      	bls.n	8004958 <chHeapAllocAligned.constprop.42+0x78>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 8004932:	4610      	mov	r0, r2
 8004934:	e7e5      	b.n	8004902 <chHeapAllocAligned.constprop.42+0x22>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004936:	4638      	mov	r0, r7
 8004938:	f7ff ff9a 	bl	8004870 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 800493c:	6826      	ldr	r6, [r4, #0]
 800493e:	b146      	cbz	r6, 8004952 <chHeapAllocAligned.constprop.42+0x72>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004940:	2208      	movs	r2, #8
 8004942:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 8004946:	4611      	mov	r1, r2
 8004948:	47b0      	blx	r6
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 800494a:	4606      	mov	r6, r0
 800494c:	b108      	cbz	r0, 8004952 <chHeapAllocAligned.constprop.42+0x72>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 800494e:	e940 4502 	strd	r4, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8004952:	4630      	mov	r0, r6
 8004954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8004958:	429a      	cmp	r2, r3
 800495a:	d31a      	bcc.n	8004992 <chHeapAllocAligned.constprop.42+0xb2>
        if (H_PAGES(hp) == pages) {
 800495c:	45e0      	cmp	r8, ip
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	d02c      	beq.n	80049bc <chHeapAllocAligned.constprop.42+0xdc>
          fp = H_BLOCK(hp) + pages;
 8004962:	f108 0801 	add.w	r8, r8, #1
 8004966:	eb02 0cc8 	add.w	ip, r2, r8, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 800496a:	f10c 0608 	add.w	r6, ip, #8
 800496e:	1b89      	subs	r1, r1, r6
 8004970:	10c9      	asrs	r1, r1, #3
          H_NEXT(fp) = H_NEXT(hp);
 8004972:	f842 3038 	str.w	r3, [r2, r8, lsl #3]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004976:	464e      	mov	r6, r9
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004978:	f8cc 1004 	str.w	r1, [ip, #4]
          H_NEXT(qp) = fp;
 800497c:	4613      	mov	r3, r2
 800497e:	f8c0 c000 	str.w	ip, [r0]
      H_UNLOCK(heapp);
 8004982:	4638      	mov	r0, r7
      H_HEAP(hp) = heapp;
 8004984:	e9c3 4500 	strd	r4, r5, [r3]
      H_UNLOCK(heapp);
 8004988:	f7ff ff72 	bl	8004870 <chMtxUnlock>
}
 800498c:	4630      	mov	r0, r6
 800498e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004992:	eba3 0909 	sub.w	r9, r3, r9
 8004996:	ea4f 01e9 	mov.w	r1, r9, asr #3
        if (bpages > pages) {
 800499a:	45f0      	cmp	r8, lr
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800499c:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 800499e:	d2f0      	bcs.n	8004982 <chHeapAllocAligned.constprop.42+0xa2>
          fp = H_BLOCK(ahp) + pages;
 80049a0:	f108 0c01 	add.w	ip, r8, #1
 80049a4:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 80049a8:	ea6f 0108 	mvn.w	r1, r8
 80049ac:	4471      	add	r1, lr
          H_NEXT(fp) = H_NEXT(hp);
 80049ae:	f8d2 e000 	ldr.w	lr, [r2]
          H_PAGES(fp) = (bpages - pages) - 1U;
 80049b2:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 80049b4:	f843 e03c 	str.w	lr, [r3, ip, lsl #3]
          H_NEXT(hp) = fp;
 80049b8:	6010      	str	r0, [r2, #0]
 80049ba:	e7e2      	b.n	8004982 <chHeapAllocAligned.constprop.42+0xa2>
          H_NEXT(qp) = H_NEXT(hp);
 80049bc:	6003      	str	r3, [r0, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80049be:	464e      	mov	r6, r9
          H_NEXT(qp) = H_NEXT(hp);
 80049c0:	4613      	mov	r3, r2
 80049c2:	e7de      	b.n	8004982 <chHeapAllocAligned.constprop.42+0xa2>
 80049c4:	20000f40 	.word	0x20000f40
	...

080049d0 <dyn_create_object_heap>:
                                             size_t size) {
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 80049d2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 80049d4:	42a1      	cmp	r1, r4
                                             size_t size) {
 80049d6:	460d      	mov	r5, r1
 80049d8:	4606      	mov	r6, r0
 80049da:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 80049dc:	d103      	bne.n	80049e6 <dyn_create_object_heap+0x16>
 80049de:	e00d      	b.n	80049fc <dyn_create_object_heap+0x2c>
    p = p->next;
 80049e0:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80049e2:	42a5      	cmp	r5, r4
 80049e4:	d00a      	beq.n	80049fc <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80049e6:	2208      	movs	r2, #8
 80049e8:	4631      	mov	r1, r6
 80049ea:	18a0      	adds	r0, r4, r2
 80049ec:	f004 fe9a 	bl	8009724 <strncmp>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d1f5      	bne.n	80049e0 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 80049f4:	b114      	cbz	r4, 80049fc <dyn_create_object_heap+0x2c>
    return NULL;
 80049f6:	4604      	mov	r4, r0
}
 80049f8:	4620      	mov	r0, r4
 80049fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 80049fc:	4639      	mov	r1, r7
 80049fe:	2000      	movs	r0, #0
 8004a00:	f7ff ff6e 	bl	80048e0 <chHeapAllocAligned.constprop.42>
  if (dep == NULL) {
 8004a04:	4604      	mov	r4, r0
 8004a06:	b148      	cbz	r0, 8004a1c <dyn_create_object_heap+0x4c>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8004a08:	2208      	movs	r2, #8
 8004a0a:	4410      	add	r0, r2
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	f004 fed5 	bl	80097bc <strncpy>
  dep->next = dlp->next;
 8004a12:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8004a14:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8004a16:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = dep;
 8004a1a:	602c      	str	r4, [r5, #0]
}
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a20 <chThdCreateFromHeap>:
                              tfunc_t pf, void *arg) {
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	4616      	mov	r6, r2
 8004a26:	461d      	mov	r5, r3
 8004a28:	460c      	mov	r4, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004a2a:	f7ff ff59 	bl	80048e0 <chHeapAllocAligned.constprop.42>
  if (wsp == NULL) {
 8004a2e:	b1d8      	cbz	r0, 8004a68 <chThdCreateFromHeap+0x48>
  thread_descriptor_t td = {
 8004a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a32:	9304      	str	r3, [sp, #16]
    (stkalign_t *)((uint8_t *)wsp + size),
 8004a34:	4404      	add	r4, r0
  thread_descriptor_t td = {
 8004a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a38:	9305      	str	r3, [sp, #20]
 8004a3a:	9402      	str	r4, [sp, #8]
 8004a3c:	e9cd 6000 	strd	r6, r0, [sp]
 8004a40:	9503      	str	r5, [sp, #12]
 8004a42:	2320      	movs	r3, #32
 8004a44:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 8004a48:	4668      	mov	r0, sp
 8004a4a:	f7fc fc61 	bl	8001310 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8004a54:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8004a56:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8004a58:	f7fd fe32 	bl	80026c0 <chSchWakeupS>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f383 8811 	msr	BASEPRI, r3
}
 8004a62:	4620      	mov	r0, r4
 8004a64:	b006      	add	sp, #24
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8004a68:	4604      	mov	r4, r0
 8004a6a:	e7fa      	b.n	8004a62 <chThdCreateFromHeap+0x42>
 8004a6c:	0000      	movs	r0, r0
	...

08004a70 <chPipeWriteTimeout.constprop.18>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8004a74:	4d37      	ldr	r5, [pc, #220]	; (8004b54 <chPipeWriteTimeout.constprop.18+0xe4>)
 8004a76:	7d2c      	ldrb	r4, [r5, #20]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004a78:	b083      	sub	sp, #12
  if (pp->reset) {
 8004a7a:	b11c      	cbz	r4, 8004a84 <chPipeWriteTimeout.constprop.18+0x14>
    return (size_t)0;
 8004a7c:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 8004a7e:	b003      	add	sp, #12
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	4681      	mov	r9, r0
  PW_LOCK(pp);
 8004a86:	4f34      	ldr	r7, [pc, #208]	; (8004b58 <chPipeWriteTimeout.constprop.18+0xe8>)
 8004a88:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004a8c:	f7fe fe30 	bl	80036f0 <chMtxLock>
    *trp = NULL;
 8004a90:	46a2      	mov	sl, r4
  PC_LOCK(pp);
 8004a92:	f105 0b20 	add.w	fp, r5, #32
 8004a96:	464e      	mov	r6, r9
 8004a98:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a9c:	4658      	mov	r0, fp
 8004a9e:	f7fe fe27 	bl	80036f0 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 8004aa2:	e9d5 4200 	ldrd	r4, r2, [r5]
 8004aa6:	692b      	ldr	r3, [r5, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 8004aa8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004aac:	1b14      	subs	r4, r2, r4
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8004aae:	1ae4      	subs	r4, r4, r3
 8004ab0:	42b4      	cmp	r4, r6
 8004ab2:	bf28      	it	cs
 8004ab4:	4634      	movcs	r4, r6
 8004ab6:	eba2 080c 	sub.w	r8, r2, ip
  pp->cnt += n;
 8004aba:	4423      	add	r3, r4
  if (n < s1) {
 8004abc:	45a0      	cmp	r8, r4
  pp->cnt += n;
 8004abe:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 8004ac0:	d83f      	bhi.n	8004b42 <chPipeWriteTimeout.constprop.18+0xd2>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	4639      	mov	r1, r7
    s2 = n - s1;
 8004ac6:	eba4 0908 	sub.w	r9, r4, r8
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004aca:	4660      	mov	r0, ip
  else if (n > s1) {
 8004acc:	d32c      	bcc.n	8004b28 <chPipeWriteTimeout.constprop.18+0xb8>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8004ace:	4622      	mov	r2, r4
 8004ad0:	f7fb fc0a 	bl	80002e8 <memcpy>
    pp->wrptr = pp->buffer;
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8004ad8:	4658      	mov	r0, fp
      bp += done;
 8004ada:	4427      	add	r7, r4
  PC_UNLOCK(pp);
 8004adc:	f7ff fec8 	bl	8004870 <chMtxUnlock>
    if (done == (size_t)0) {
 8004ae0:	b97c      	cbnz	r4, 8004b02 <chPipeWriteTimeout.constprop.18+0x92>
 8004ae2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004ae6:	2320      	movs	r3, #32
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f384 8811 	msr	BASEPRI, r4
 8004af0:	eba9 0906 	sub.w	r9, r9, r6
  PW_UNLOCK(pp);
 8004af4:	4819      	ldr	r0, [pc, #100]	; (8004b5c <chPipeWriteTimeout.constprop.18+0xec>)
 8004af6:	f7ff febb 	bl	8004870 <chMtxUnlock>
 8004afa:	4648      	mov	r0, r9
}
 8004afc:	b003      	add	sp, #12
 8004afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 8004b02:	1b36      	subs	r6, r6, r4
 8004b04:	2320      	movs	r3, #32
 8004b06:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8004b0a:	69eb      	ldr	r3, [r5, #28]
    chSchWakeupS(tp, msg);
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
  if (*trp != NULL) {
 8004b10:	b11b      	cbz	r3, 8004b1a <chPipeWriteTimeout.constprop.18+0xaa>
    *trp = NULL;
 8004b12:	f8c5 a01c 	str.w	sl, [r5, #28]
    chSchWakeupS(tp, msg);
 8004b16:	f7fd fdd3 	bl	80026c0 <chSchWakeupS>
 8004b1a:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	d1bc      	bne.n	8004a9c <chPipeWriteTimeout.constprop.18+0x2c>
 8004b22:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004b26:	e7e5      	b.n	8004af4 <chPipeWriteTimeout.constprop.18+0x84>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004b28:	f7fb fbde 	bl	80002e8 <memcpy>
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8004b2c:	464a      	mov	r2, r9
 8004b2e:	eb07 0108 	add.w	r1, r7, r8
 8004b32:	6828      	ldr	r0, [r5, #0]
 8004b34:	f7fb fbd8 	bl	80002e8 <memcpy>
    pp->wrptr = pp->buffer + s2;
 8004b38:	682a      	ldr	r2, [r5, #0]
 8004b3a:	eb02 0309 	add.w	r3, r2, r9
 8004b3e:	60ab      	str	r3, [r5, #8]
 8004b40:	e7ca      	b.n	8004ad8 <chPipeWriteTimeout.constprop.18+0x68>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8004b42:	4660      	mov	r0, ip
 8004b44:	4622      	mov	r2, r4
 8004b46:	4639      	mov	r1, r7
 8004b48:	f7fb fbce 	bl	80002e8 <memcpy>
    pp->wrptr += n;
 8004b4c:	68ab      	ldr	r3, [r5, #8]
 8004b4e:	4423      	add	r3, r4
 8004b50:	60ab      	str	r3, [r5, #8]
 8004b52:	e7c1      	b.n	8004ad8 <chPipeWriteTimeout.constprop.18+0x68>
 8004b54:	20000c90 	.word	0x20000c90
 8004b58:	0800a108 	.word	0x0800a108
 8004b5c:	20000cc0 	.word	0x20000cc0

08004b60 <chPipeReadTimeout.constprop.17>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8004b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8004b64:	4c36      	ldr	r4, [pc, #216]	; (8004c40 <chPipeReadTimeout.constprop.17+0xe0>)
 8004b66:	7d25      	ldrb	r5, [r4, #20]
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8004b68:	b083      	sub	sp, #12
  if (pp->reset) {
 8004b6a:	b11d      	cbz	r5, 8004b74 <chPipeReadTimeout.constprop.17+0x14>
    return (size_t)0;
 8004b6c:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 8004b6e:	b003      	add	sp, #12
 8004b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b74:	4689      	mov	r9, r1
 8004b76:	4607      	mov	r7, r0
  PR_LOCK(pp);
 8004b78:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8004b7c:	f7fe fdb8 	bl	80036f0 <chMtxLock>
    *trp = NULL;
 8004b80:	46aa      	mov	sl, r5
 8004b82:	46c8      	mov	r8, r9
  PC_LOCK(pp);
 8004b84:	f104 0b20 	add.w	fp, r4, #32
 8004b88:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b8c:	4658      	mov	r0, fp
 8004b8e:	f7fe fdaf 	bl	80036f0 <chMtxLock>
  s1 = (size_t)(pp->top - pp->rdptr);
 8004b92:	e9d4 c303 	ldrd	ip, r3, [r4, #12]
 8004b96:	6866      	ldr	r6, [r4, #4]
 8004b98:	4543      	cmp	r3, r8
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	eba6 060c 	sub.w	r6, r6, ip
 8004ba0:	bf28      	it	cs
 8004ba2:	4645      	movcs	r5, r8
  pp->cnt -= n;
 8004ba4:	1b5b      	subs	r3, r3, r5
  if (n < s1) {
 8004ba6:	42ae      	cmp	r6, r5
  pp->cnt -= n;
 8004ba8:	6123      	str	r3, [r4, #16]
  if (n < s1) {
 8004baa:	d840      	bhi.n	8004c2e <chPipeReadTimeout.constprop.17+0xce>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8004bac:	4632      	mov	r2, r6
 8004bae:	4661      	mov	r1, ip
    s2 = n - s1;
 8004bb0:	eba5 0906 	sub.w	r9, r5, r6
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8004bb4:	4638      	mov	r0, r7
  else if (n > s1) {
 8004bb6:	d32e      	bcc.n	8004c16 <chPipeReadTimeout.constprop.17+0xb6>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8004bb8:	462a      	mov	r2, r5
 8004bba:	f7fb fb95 	bl	80002e8 <memcpy>
    pp->rdptr = pp->buffer;
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 8004bc2:	4658      	mov	r0, fp
      bp += done;
 8004bc4:	442f      	add	r7, r5
  PC_UNLOCK(pp);
 8004bc6:	f7ff fe53 	bl	8004870 <chMtxUnlock>
    if (done == (size_t)0) {
 8004bca:	b97d      	cbnz	r5, 8004bec <chPipeReadTimeout.constprop.17+0x8c>
 8004bcc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f385 8811 	msr	BASEPRI, r5
 8004bda:	eba9 0908 	sub.w	r9, r9, r8
  PR_UNLOCK(pp);
 8004bde:	4819      	ldr	r0, [pc, #100]	; (8004c44 <chPipeReadTimeout.constprop.17+0xe4>)
 8004be0:	f7ff fe46 	bl	8004870 <chMtxUnlock>
 8004be4:	4648      	mov	r0, r9
}
 8004be6:	b003      	add	sp, #12
 8004be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 8004bec:	eba8 0805 	sub.w	r8, r8, r5
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8004bf6:	69a3      	ldr	r3, [r4, #24]
    chSchWakeupS(tp, msg);
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
  if (*trp != NULL) {
 8004bfc:	b11b      	cbz	r3, 8004c06 <chPipeReadTimeout.constprop.17+0xa6>
    *trp = NULL;
 8004bfe:	f8c4 a018 	str.w	sl, [r4, #24]
    chSchWakeupS(tp, msg);
 8004c02:	f7fd fd5d 	bl	80026c0 <chSchWakeupS>
 8004c06:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8004c0a:	f1b8 0f00 	cmp.w	r8, #0
 8004c0e:	d1bd      	bne.n	8004b8c <chPipeReadTimeout.constprop.17+0x2c>
 8004c10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004c14:	e7e3      	b.n	8004bde <chPipeReadTimeout.constprop.17+0x7e>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8004c16:	f7fb fb67 	bl	80002e8 <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 8004c1a:	464a      	mov	r2, r9
 8004c1c:	19b8      	adds	r0, r7, r6
 8004c1e:	6821      	ldr	r1, [r4, #0]
 8004c20:	f7fb fb62 	bl	80002e8 <memcpy>
    pp->rdptr = pp->buffer + s2;
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	eb02 0309 	add.w	r3, r2, r9
 8004c2a:	60e3      	str	r3, [r4, #12]
 8004c2c:	e7c9      	b.n	8004bc2 <chPipeReadTimeout.constprop.17+0x62>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8004c2e:	4661      	mov	r1, ip
 8004c30:	462a      	mov	r2, r5
 8004c32:	4638      	mov	r0, r7
 8004c34:	f7fb fb58 	bl	80002e8 <memcpy>
    pp->rdptr += n;
 8004c38:	68e3      	ldr	r3, [r4, #12]
 8004c3a:	442b      	add	r3, r5
 8004c3c:	60e3      	str	r3, [r4, #12]
 8004c3e:	e7c0      	b.n	8004bc2 <chPipeReadTimeout.constprop.17+0x62>
 8004c40:	20000c90 	.word	0x20000c90
 8004c44:	20000cd0 	.word	0x20000cd0
	...

08004c50 <oslib_test_002_002_execute>:

static void oslib_test_002_002_execute(void) {
 8004c50:	b530      	push	{r4, r5, lr}

  /* [2.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8004c52:	4c22      	ldr	r4, [pc, #136]	; (8004cdc <oslib_test_002_002_execute+0x8c>)
static void oslib_test_002_002_execute(void) {
 8004c54:	b085      	sub	sp, #20
  test_set_step(1);
 8004c56:	2301      	movs	r3, #1
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004c58:	2110      	movs	r1, #16
 8004c5a:	4668      	mov	r0, sp
  test_set_step(1);
 8004c5c:	6023      	str	r3, [r4, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004c5e:	f7ff ff7f 	bl	8004b60 <chPipeReadTimeout.constprop.17>
    test_assert(n == 0, "wrong size");
 8004c62:	fab0 f080 	clz	r0, r0
 8004c66:	0940      	lsrs	r0, r0, #5
 8004c68:	491d      	ldr	r1, [pc, #116]	; (8004ce0 <oslib_test_002_002_execute+0x90>)
 8004c6a:	f7fc f811 	bl	8000c90 <_test_assert>
 8004c6e:	b940      	cbnz	r0, 8004c82 <oslib_test_002_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004c70:	4d1c      	ldr	r5, [pc, #112]	; (8004ce4 <oslib_test_002_002_execute+0x94>)
 8004c72:	68eb      	ldr	r3, [r5, #12]
 8004c74:	682a      	ldr	r2, [r5, #0]
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01d      	beq.n	8004cb6 <oslib_test_002_002_execute+0x66>
 8004c7a:	491b      	ldr	r1, [pc, #108]	; (8004ce8 <oslib_test_002_002_execute+0x98>)
 8004c7c:	f7fc f808 	bl	8000c90 <_test_assert>
 8004c80:	b108      	cbz	r0, 8004c86 <oslib_test_002_002_execute+0x36>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
}
 8004c82:	b005      	add	sp, #20
 8004c84:	bd30      	pop	{r4, r5, pc}
  test_set_step(2);
 8004c86:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004c88:	2010      	movs	r0, #16
  test_set_step(2);
 8004c8a:	6023      	str	r3, [r4, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004c8c:	f7ff fef0 	bl	8004a70 <chPipeWriteTimeout.constprop.18>
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 8004c90:	f1a0 0008 	sub.w	r0, r0, #8
 8004c94:	fab0 f080 	clz	r0, r0
 8004c98:	4911      	ldr	r1, [pc, #68]	; (8004ce0 <oslib_test_002_002_execute+0x90>)
 8004c9a:	0940      	lsrs	r0, r0, #5
 8004c9c:	f7fb fff8 	bl	8000c90 <_test_assert>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d1ee      	bne.n	8004c82 <oslib_test_002_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004ca4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00c      	beq.n	8004cc6 <oslib_test_002_002_execute+0x76>
 8004cac:	490e      	ldr	r1, [pc, #56]	; (8004ce8 <oslib_test_002_002_execute+0x98>)
 8004cae:	f7fb ffef 	bl	8000c90 <_test_assert>
}
 8004cb2:	b005      	add	sp, #20
 8004cb4:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004cb6:	68aa      	ldr	r2, [r5, #8]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d1de      	bne.n	8004c7a <oslib_test_002_002_execute+0x2a>
 8004cbc:	6928      	ldr	r0, [r5, #16]
 8004cbe:	fab0 f080 	clz	r0, r0
 8004cc2:	0940      	lsrs	r0, r0, #5
 8004cc4:	e7d9      	b.n	8004c7a <oslib_test_002_002_execute+0x2a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004cc6:	682a      	ldr	r2, [r5, #0]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d1ef      	bne.n	8004cac <oslib_test_002_002_execute+0x5c>
 8004ccc:	6928      	ldr	r0, [r5, #16]
 8004cce:	f1a0 0008 	sub.w	r0, r0, #8
 8004cd2:	fab0 f080 	clz	r0, r0
 8004cd6:	0940      	lsrs	r0, r0, #5
 8004cd8:	e7e8      	b.n	8004cac <oslib_test_002_002_execute+0x5c>
 8004cda:	bf00      	nop
 8004cdc:	20001774 	.word	0x20001774
 8004ce0:	08009d3c 	.word	0x08009d3c
 8004ce4:	20000c90 	.word	0x20000c90
 8004ce8:	08009e5c 	.word	0x08009e5c
 8004cec:	00000000 	.word	0x00000000

08004cf0 <chFactoryRegisterObject.constprop.15>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 8004cf4:	4807      	ldr	r0, [pc, #28]	; (8004d14 <chFactoryRegisterObject.constprop.15+0x24>)
 8004cf6:	f7fe fcfb 	bl	80036f0 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 8004cfa:	4a07      	ldr	r2, [pc, #28]	; (8004d18 <chFactoryRegisterObject.constprop.15+0x28>)
 8004cfc:	4807      	ldr	r0, [pc, #28]	; (8004d1c <chFactoryRegisterObject.constprop.15+0x2c>)
 8004cfe:	1f11      	subs	r1, r2, #4
 8004d00:	f7fd fc6e 	bl	80025e0 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 8004d04:	4604      	mov	r4, r0
 8004d06:	b100      	cbz	r0, 8004d0a <chFactoryRegisterObject.constprop.15+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8004d08:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 8004d0a:	4802      	ldr	r0, [pc, #8]	; (8004d14 <chFactoryRegisterObject.constprop.15+0x24>)
 8004d0c:	f7ff fdb0 	bl	8004870 <chMtxUnlock>

  return rop;
}
 8004d10:	4620      	mov	r0, r4
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	20000e18 	.word	0x20000e18
 8004d18:	20000e2c 	.word	0x20000e2c
 8004d1c:	080099b0 	.word	0x080099b0

08004d20 <chFactoryFindObject.constprop.14>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8004d20:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8004d22:	4c07      	ldr	r4, [pc, #28]	; (8004d40 <chFactoryFindObject.constprop.14+0x20>)
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7fe fce3 	bl	80036f0 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 8004d2a:	f104 0110 	add.w	r1, r4, #16
 8004d2e:	4805      	ldr	r0, [pc, #20]	; (8004d44 <chFactoryFindObject.constprop.14+0x24>)
 8004d30:	f7fd fc36 	bl	80025a0 <dyn_find_object>
 8004d34:	4605      	mov	r5, r0

  F_UNLOCK();
 8004d36:	4620      	mov	r0, r4
 8004d38:	f7ff fd9a 	bl	8004870 <chMtxUnlock>

  return rop;
}
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	20000e18 	.word	0x20000e18
 8004d44:	080099b0 	.word	0x080099b0
	...

08004d50 <chFactoryCreateBuffer.constprop.13>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8004d50:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8004d52:	480a      	ldr	r0, [pc, #40]	; (8004d7c <chFactoryCreateBuffer.constprop.13+0x2c>)
 8004d54:	f7fe fccc 	bl	80036f0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8004d58:	2280      	movs	r2, #128	; 0x80
 8004d5a:	4909      	ldr	r1, [pc, #36]	; (8004d80 <chFactoryCreateBuffer.constprop.13+0x30>)
 8004d5c:	4809      	ldr	r0, [pc, #36]	; (8004d84 <chFactoryCreateBuffer.constprop.13+0x34>)
 8004d5e:	f7ff fe37 	bl	80049d0 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 8004d62:	4604      	mov	r4, r0
 8004d64:	b120      	cbz	r0, 8004d70 <chFactoryCreateBuffer.constprop.13+0x20>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
 8004d66:	2280      	movs	r2, #128	; 0x80
 8004d68:	2100      	movs	r1, #0
 8004d6a:	3010      	adds	r0, #16
 8004d6c:	f004 fc1c 	bl	80095a8 <memset>
  }

  F_UNLOCK();
 8004d70:	4802      	ldr	r0, [pc, #8]	; (8004d7c <chFactoryCreateBuffer.constprop.13+0x2c>)
 8004d72:	f7ff fd7d 	bl	8004870 <chMtxUnlock>

  return dbp;
}
 8004d76:	4620      	mov	r0, r4
 8004d78:	bd10      	pop	{r4, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000e18 	.word	0x20000e18
 8004d80:	20000e3c 	.word	0x20000e3c
 8004d84:	08009988 	.word	0x08009988
	...

08004d90 <chFactoryFindBuffer.constprop.12>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8004d90:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8004d92:	4c07      	ldr	r4, [pc, #28]	; (8004db0 <chFactoryFindBuffer.constprop.12+0x20>)
 8004d94:	4620      	mov	r0, r4
 8004d96:	f7fe fcab 	bl	80036f0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 8004d9a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8004d9e:	4805      	ldr	r0, [pc, #20]	; (8004db4 <chFactoryFindBuffer.constprop.12+0x24>)
 8004da0:	f7fd fbfe 	bl	80025a0 <dyn_find_object>
 8004da4:	4605      	mov	r5, r0

  F_UNLOCK();
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7ff fd62 	bl	8004870 <chMtxUnlock>

  return dbp;
}
 8004dac:	4628      	mov	r0, r5
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	20000e18 	.word	0x20000e18
 8004db4:	08009988 	.word	0x08009988
	...

08004dc0 <chFactoryCreateSemaphore.constprop.11>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8004dc0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8004dc2:	480a      	ldr	r0, [pc, #40]	; (8004dec <chFactoryCreateSemaphore.constprop.11+0x2c>)
 8004dc4:	f7fe fc94 	bl	80036f0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <chFactoryCreateSemaphore.constprop.11+0x30>)
 8004dca:	480a      	ldr	r0, [pc, #40]	; (8004df4 <chFactoryCreateSemaphore.constprop.11+0x34>)
 8004dcc:	1f11      	subs	r1, r2, #4
 8004dce:	f7fd fc07 	bl	80025e0 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	b128      	cbz	r0, 8004de2 <chFactoryCreateSemaphore.constprop.11+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 8004dd6:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 8004dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
  sp->cnt = n;
 8004dde:	2200      	movs	r2, #0
 8004de0:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 8004de2:	4802      	ldr	r0, [pc, #8]	; (8004dec <chFactoryCreateSemaphore.constprop.11+0x2c>)
 8004de4:	f7ff fd44 	bl	8004870 <chMtxUnlock>

  return dsp;
}
 8004de8:	4620      	mov	r0, r4
 8004dea:	bd10      	pop	{r4, pc}
 8004dec:	20000e18 	.word	0x20000e18
 8004df0:	20000e44 	.word	0x20000e44
 8004df4:	080099a8 	.word	0x080099a8
	...

08004e00 <chFactoryFindSemaphore.constprop.10>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8004e00:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8004e02:	4c07      	ldr	r4, [pc, #28]	; (8004e20 <chFactoryFindSemaphore.constprop.10+0x20>)
 8004e04:	4620      	mov	r0, r4
 8004e06:	f7fe fc73 	bl	80036f0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 8004e0a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8004e0e:	4805      	ldr	r0, [pc, #20]	; (8004e24 <chFactoryFindSemaphore.constprop.10+0x24>)
 8004e10:	f7fd fbc6 	bl	80025a0 <dyn_find_object>
 8004e14:	4605      	mov	r5, r0

  F_UNLOCK();
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7ff fd2a 	bl	8004870 <chMtxUnlock>

  return dsp;
}
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20000e18 	.word	0x20000e18
 8004e24:	080099a8 	.word	0x080099a8
	...

08004e30 <chFactoryCreateMailbox.constprop.9>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8004e30:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8004e32:	4811      	ldr	r0, [pc, #68]	; (8004e78 <chFactoryCreateMailbox.constprop.9+0x48>)
 8004e34:	f7fe fc5c 	bl	80036f0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8004e38:	2278      	movs	r2, #120	; 0x78
 8004e3a:	4910      	ldr	r1, [pc, #64]	; (8004e7c <chFactoryCreateMailbox.constprop.9+0x4c>)
 8004e3c:	4810      	ldr	r0, [pc, #64]	; (8004e80 <chFactoryCreateMailbox.constprop.9+0x50>)
 8004e3e:	f7ff fdc7 	bl	80049d0 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8004e42:	4604      	mov	r4, r0
 8004e44:	b198      	cbz	r0, 8004e6e <chFactoryCreateMailbox.constprop.9+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 8004e46:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 8004e4a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 8004e4e:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8004e52:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004e56:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 8004e5a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 8004e5e:	f100 0578 	add.w	r5, r0, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8004e62:	2000      	movs	r0, #0
  mbp->buffer = buf;
 8004e64:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 8004e66:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 8004e68:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 8004e6a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  }

  F_UNLOCK();
 8004e6e:	4802      	ldr	r0, [pc, #8]	; (8004e78 <chFactoryCreateMailbox.constprop.9+0x48>)
 8004e70:	f7ff fcfe 	bl	8004870 <chMtxUnlock>

  return dmp;
}
 8004e74:	4620      	mov	r0, r4
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	20000e18 	.word	0x20000e18
 8004e7c:	20000e54 	.word	0x20000e54
 8004e80:	08009990 	.word	0x08009990
	...

08004e90 <chFactoryFindMailbox.constprop.8>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8004e90:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8004e92:	4c07      	ldr	r4, [pc, #28]	; (8004eb0 <chFactoryFindMailbox.constprop.8+0x20>)
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7fe fc2b 	bl	80036f0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 8004e9a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8004e9e:	4805      	ldr	r0, [pc, #20]	; (8004eb4 <chFactoryFindMailbox.constprop.8+0x24>)
 8004ea0:	f7fd fb7e 	bl	80025a0 <dyn_find_object>
 8004ea4:	4605      	mov	r5, r0

  F_UNLOCK();
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f7ff fce2 	bl	8004870 <chMtxUnlock>

  return dmp;
}
 8004eac:	4628      	mov	r0, r5
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000e18 	.word	0x20000e18
 8004eb4:	08009990 	.word	0x08009990
	...

08004ec0 <chFactoryCreateObjectsFIFO.constprop.7>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8004ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8004ec4:	4822      	ldr	r0, [pc, #136]	; (8004f50 <chFactoryCreateObjectsFIFO.constprop.7+0x90>)
 8004ec6:	f7fe fc13 	bl	80036f0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8004eca:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8004ece:	4921      	ldr	r1, [pc, #132]	; (8004f54 <chFactoryCreateObjectsFIFO.constprop.7+0x94>)
 8004ed0:	4821      	ldr	r0, [pc, #132]	; (8004f58 <chFactoryCreateObjectsFIFO.constprop.7+0x98>)
 8004ed2:	f7ff fd7d 	bl	80049d0 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	b398      	cbz	r0, 8004f42 <chFactoryCreateObjectsFIFO.constprop.7+0x82>
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8004eda:	f100 0810 	add.w	r8, r0, #16
  mp->object_size = size;
 8004ede:	2610      	movs	r6, #16
  mp->align = align;
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	e9c0 8804 	strd	r8, r8, [r0, #16]
 8004ee6:	e9c0 6308 	strd	r6, r3, [r0, #32]
  mp->next = NULL;
 8004eea:	2700      	movs	r7, #0
    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
                            (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 8004eec:	f100 0b94 	add.w	fp, r0, #148	; 0x94
 8004ef0:	465d      	mov	r5, fp
 8004ef2:	61c7      	str	r7, [r0, #28]
  mp->provider = provider;
 8004ef4:	6287      	str	r7, [r0, #40]	; 0x28
 8004ef6:	6187      	str	r7, [r0, #24]
 8004ef8:	f100 0a54 	add.w	sl, r0, #84	; 0x54
 8004efc:	f04f 0920 	mov.w	r9, #32
 8004f00:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 8004f04:	69e3      	ldr	r3, [r4, #28]
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	4640      	mov	r0, r8
  mp->next = php;
 8004f0a:	61e5      	str	r5, [r4, #28]
 8004f0c:	f7fc fba0 	bl	8001650 <chSemSignalI>
  chSchRescheduleS();
 8004f10:	f7fe fe7e 	bl	8003c10 <chSchRescheduleS>
 8004f14:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004f18:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 8004f1a:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004f1c:	441d      	add	r5, r3
  while (n != 0U) {
 8004f1e:	d1ef      	bne.n	8004f00 <chFactoryCreateObjectsFIFO.constprop.7+0x40>
  chThdQueueObjectInit(&mbp->qw);
 8004f20:	f104 0244 	add.w	r2, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8004f24:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8004f28:	e9c4 aa0d 	strd	sl, sl, [r4, #52]	; 0x34
 8004f2c:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 8004f30:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->buffer = buf;
 8004f34:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
  mbp->top    = &buf[n];
 8004f38:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8004f3c:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8004f3e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }

  F_UNLOCK();
 8004f42:	4803      	ldr	r0, [pc, #12]	; (8004f50 <chFactoryCreateObjectsFIFO.constprop.7+0x90>)
 8004f44:	f7ff fc94 	bl	8004870 <chMtxUnlock>

  return dofp;
}
 8004f48:	4620      	mov	r0, r4
 8004f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000e18 	.word	0x20000e18
 8004f54:	20000e58 	.word	0x20000e58
 8004f58:	08009998 	.word	0x08009998
 8004f5c:	00000000 	.word	0x00000000

08004f60 <chFactoryFindObjectsFIFO.constprop.6>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8004f60:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8004f62:	4c07      	ldr	r4, [pc, #28]	; (8004f80 <chFactoryFindObjectsFIFO.constprop.6+0x20>)
 8004f64:	4620      	mov	r0, r4
 8004f66:	f7fe fbc3 	bl	80036f0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 8004f6a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004f6e:	4805      	ldr	r0, [pc, #20]	; (8004f84 <chFactoryFindObjectsFIFO.constprop.6+0x24>)
 8004f70:	f7fd fb16 	bl	80025a0 <dyn_find_object>
 8004f74:	4605      	mov	r5, r0

  F_UNLOCK();
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7ff fc7a 	bl	8004870 <chMtxUnlock>

  return dofp;
}
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20000e18 	.word	0x20000e18
 8004f84:	08009998 	.word	0x08009998
	...

08004f90 <chFactoryCreatePipe.constprop.5>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 8004f90:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8004f92:	4815      	ldr	r0, [pc, #84]	; (8004fe8 <chFactoryCreatePipe.constprop.5+0x58>)
 8004f94:	f7fe fbac 	bl	80036f0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8004f98:	2270      	movs	r2, #112	; 0x70
 8004f9a:	4914      	ldr	r1, [pc, #80]	; (8004fec <chFactoryCreatePipe.constprop.5+0x5c>)
 8004f9c:	4814      	ldr	r0, [pc, #80]	; (8004ff0 <chFactoryCreatePipe.constprop.5+0x60>)
 8004f9e:	f7ff fd17 	bl	80049d0 <dyn_create_object_heap>
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size);
  if (dpp != NULL) {
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	b1d8      	cbz	r0, 8004fde <chFactoryCreatePipe.constprop.5+0x4e>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, dpp->buffer, size);
 8004fa6:	f100 0260 	add.w	r2, r0, #96	; 0x60
  pp->cnt    = (size_t)0;
 8004faa:	2300      	movs	r3, #0
  pp->top    = &buf[n];
 8004fac:	f100 0570 	add.w	r5, r0, #112	; 0x70
  PW_INIT(pp);
 8004fb0:	f104 0140 	add.w	r1, r4, #64	; 0x40
  PC_INIT(pp);
 8004fb4:	3030      	adds	r0, #48	; 0x30
  pp->buffer = buf;
 8004fb6:	6122      	str	r2, [r4, #16]
  pp->wrptr  = buf;
 8004fb8:	e9c4 2206 	strd	r2, r2, [r4, #24]
  PR_INIT(pp);
 8004fbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
  pp->rtr    = NULL;
 8004fc0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8004fc4:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
 8004fc8:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
 8004fcc:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
  pp->top    = &buf[n];
 8004fd0:	6165      	str	r5, [r4, #20]
  pp->cnt    = (size_t)0;
 8004fd2:	6223      	str	r3, [r4, #32]
  pp->reset  = false;
 8004fd4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 8004fd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fda:	64a3      	str	r3, [r4, #72]	; 0x48
 8004fdc:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  F_UNLOCK();
 8004fde:	4802      	ldr	r0, [pc, #8]	; (8004fe8 <chFactoryCreatePipe.constprop.5+0x58>)
 8004fe0:	f7ff fc46 	bl	8004870 <chMtxUnlock>

  return dpp;
}
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20000e18 	.word	0x20000e18
 8004fec:	20000e5c 	.word	0x20000e5c
 8004ff0:	080099a0 	.word	0x080099a0
	...

08005000 <chFactoryFindPipe.constprop.4>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8005000:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8005002:	4c07      	ldr	r4, [pc, #28]	; (8005020 <chFactoryFindPipe.constprop.4+0x20>)
 8005004:	4620      	mov	r0, r4
 8005006:	f7fe fb73 	bl	80036f0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800500a:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800500e:	4805      	ldr	r0, [pc, #20]	; (8005024 <chFactoryFindPipe.constprop.4+0x24>)
 8005010:	f7fd fac6 	bl	80025a0 <dyn_find_object>
 8005014:	4605      	mov	r5, r0

  F_UNLOCK();
 8005016:	4620      	mov	r0, r4
 8005018:	f7ff fc2a 	bl	8004870 <chMtxUnlock>

  return dpp;
}
 800501c:	4628      	mov	r0, r5
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	20000e18 	.word	0x20000e18
 8005024:	080099a0 	.word	0x080099a0
	...

08005030 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8005030:	b5f0      	push	{r4, r5, r6, r7, lr}
  PC_LOCK(pp);
 8005032:	4c1c      	ldr	r4, [pc, #112]	; (80050a4 <oslib_test_002_001_execute+0x74>)
  test_set_step(1);
 8005034:	4f1c      	ldr	r7, [pc, #112]	; (80050a8 <oslib_test_002_001_execute+0x78>)
 8005036:	2601      	movs	r6, #1
static void oslib_test_002_001_execute(void) {
 8005038:	b085      	sub	sp, #20
 800503a:	f104 0020 	add.w	r0, r4, #32
  test_set_step(1);
 800503e:	603e      	str	r6, [r7, #0]
 8005040:	f7fe fb56 	bl	80036f0 <chMtxLock>
  pp->wrptr = pp->buffer;
 8005044:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8005046:	7526      	strb	r6, [r4, #20]
  pp->cnt   = (size_t)0;
 8005048:	2500      	movs	r5, #0
  pp->rdptr = pp->buffer;
 800504a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 800504e:	6125      	str	r5, [r4, #16]
 8005050:	2320      	movs	r3, #32
 8005052:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(&pp->wtr, MSG_RESET);
 8005056:	f06f 0101 	mvn.w	r1, #1
 800505a:	f104 0018 	add.w	r0, r4, #24
 800505e:	f7fc fb07 	bl	8001670 <chThdResumeI>
  chThdResumeI(&pp->rtr, MSG_RESET);
 8005062:	f104 001c 	add.w	r0, r4, #28
 8005066:	f06f 0101 	mvn.w	r1, #1
 800506a:	f7fc fb01 	bl	8001670 <chThdResumeI>
  chSchRescheduleS();
 800506e:	f7fe fdcf 	bl	8003c10 <chSchRescheduleS>
 8005072:	f385 8811 	msr	BASEPRI, r5
  PC_UNLOCK(pp);
 8005076:	f104 0020 	add.w	r0, r4, #32
 800507a:	f7ff fbf9 	bl	8004870 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800507e:	68e3      	ldr	r3, [r4, #12]
 8005080:	6822      	ldr	r2, [r4, #0]
 8005082:	4293      	cmp	r3, r2
 8005084:	d006      	beq.n	8005094 <oslib_test_002_001_execute+0x64>
 8005086:	4628      	mov	r0, r5
 8005088:	4908      	ldr	r1, [pc, #32]	; (80050ac <oslib_test_002_001_execute+0x7c>)
 800508a:	f7fb fe01 	bl	8000c90 <_test_assert>
 800508e:	b178      	cbz	r0, 80050b0 <oslib_test_002_001_execute+0x80>
}
 8005090:	b005      	add	sp, #20
 8005092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005094:	68a2      	ldr	r2, [r4, #8]
 8005096:	4293      	cmp	r3, r2
 8005098:	d1f5      	bne.n	8005086 <oslib_test_002_001_execute+0x56>
 800509a:	6925      	ldr	r5, [r4, #16]
 800509c:	fab5 f085 	clz	r0, r5
 80050a0:	0940      	lsrs	r0, r0, #5
 80050a2:	e7f1      	b.n	8005088 <oslib_test_002_001_execute+0x58>
 80050a4:	20000c90 	.word	0x20000c90
 80050a8:	20001774 	.word	0x20001774
 80050ac:	08009e5c 	.word	0x08009e5c
  test_set_step(2);
 80050b0:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80050b2:	2010      	movs	r0, #16
  test_set_step(2);
 80050b4:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80050b6:	f7ff fcdb 	bl	8004a70 <chPipeWriteTimeout.constprop.18>
    test_assert(n == 0, "not reset");
 80050ba:	fab0 f080 	clz	r0, r0
 80050be:	0940      	lsrs	r0, r0, #5
 80050c0:	49be      	ldr	r1, [pc, #760]	; (80053bc <oslib_test_002_001_execute+0x38c>)
 80050c2:	f7fb fde5 	bl	8000c90 <_test_assert>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d1e2      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80050ca:	68e3      	ldr	r3, [r4, #12]
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f000 8199 	beq.w	8005406 <oslib_test_002_001_execute+0x3d6>
 80050d4:	49ba      	ldr	r1, [pc, #744]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 80050d6:	f7fb fddb 	bl	8000c90 <_test_assert>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d1d8      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(3);
 80050de:	2303      	movs	r3, #3
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80050e0:	2110      	movs	r1, #16
 80050e2:	4668      	mov	r0, sp
  test_set_step(3);
 80050e4:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80050e6:	f7ff fd3b 	bl	8004b60 <chPipeReadTimeout.constprop.17>
    test_assert(n == 0, "not reset");
 80050ea:	fab0 f080 	clz	r0, r0
 80050ee:	0940      	lsrs	r0, r0, #5
 80050f0:	49b2      	ldr	r1, [pc, #712]	; (80053bc <oslib_test_002_001_execute+0x38c>)
 80050f2:	f7fb fdcd 	bl	8000c90 <_test_assert>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d1ca      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	6822      	ldr	r2, [r4, #0]
 80050fe:	4293      	cmp	r3, r2
 8005100:	f000 818a 	beq.w	8005418 <oslib_test_002_001_execute+0x3e8>
 8005104:	49ae      	ldr	r1, [pc, #696]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 8005106:	f7fb fdc3 	bl	8000c90 <_test_assert>
 800510a:	2800      	cmp	r0, #0
 800510c:	d1c0      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800510e:	68e3      	ldr	r3, [r4, #12]
 8005110:	6822      	ldr	r2, [r4, #0]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8005112:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8005114:	2104      	movs	r1, #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005116:	4293      	cmp	r3, r2
  test_set_step(4);
 8005118:	6039      	str	r1, [r7, #0]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800511a:	f000 8186 	beq.w	800542a <oslib_test_002_001_execute+0x3fa>
 800511e:	49a8      	ldr	r1, [pc, #672]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 8005120:	f7fb fdb6 	bl	8000c90 <_test_assert>
 8005124:	2800      	cmp	r0, #0
 8005126:	d1b3      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(5);
 8005128:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800512a:	2010      	movs	r0, #16
  test_set_step(5);
 800512c:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800512e:	f7ff fc9f 	bl	8004a70 <chPipeWriteTimeout.constprop.18>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005132:	f1a0 0010 	sub.w	r0, r0, #16
 8005136:	fab0 f080 	clz	r0, r0
 800513a:	49a2      	ldr	r1, [pc, #648]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 800513c:	0940      	lsrs	r0, r0, #5
 800513e:	f7fb fda7 	bl	8000c90 <_test_assert>
 8005142:	2800      	cmp	r0, #0
 8005144:	d1a4      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	4293      	cmp	r3, r2
 800514c:	f000 8176 	beq.w	800543c <oslib_test_002_001_execute+0x40c>
 8005150:	499b      	ldr	r1, [pc, #620]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 8005152:	f7fb fd9d 	bl	8000c90 <_test_assert>
 8005156:	2800      	cmp	r0, #0
 8005158:	d19a      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(6);
 800515a:	2306      	movs	r3, #6
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800515c:	2110      	movs	r1, #16
 800515e:	4668      	mov	r0, sp
  test_set_step(6);
 8005160:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005162:	f7ff fcfd 	bl	8004b60 <chPipeReadTimeout.constprop.17>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005166:	f1a0 0010 	sub.w	r0, r0, #16
 800516a:	fab0 f080 	clz	r0, r0
 800516e:	4995      	ldr	r1, [pc, #596]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 8005170:	0940      	lsrs	r0, r0, #5
 8005172:	f7fb fd8d 	bl	8000c90 <_test_assert>
 8005176:	2800      	cmp	r0, #0
 8005178:	d18a      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800517a:	68e3      	ldr	r3, [r4, #12]
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	4293      	cmp	r3, r2
 8005180:	f000 8166 	beq.w	8005450 <oslib_test_002_001_execute+0x420>
 8005184:	498e      	ldr	r1, [pc, #568]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 8005186:	f7fb fd83 	bl	8000c90 <_test_assert>
 800518a:	2800      	cmp	r0, #0
 800518c:	d180      	bne.n	8005090 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800518e:	4669      	mov	r1, sp
 8005190:	2210      	movs	r2, #16
 8005192:	488d      	ldr	r0, [pc, #564]	; (80053c8 <oslib_test_002_001_execute+0x398>)
 8005194:	f004 f9d6 	bl	8009544 <memcmp>
 8005198:	fab0 f080 	clz	r0, r0
 800519c:	0940      	lsrs	r0, r0, #5
 800519e:	498b      	ldr	r1, [pc, #556]	; (80053cc <oslib_test_002_001_execute+0x39c>)
 80051a0:	f7fb fd76 	bl	8000c90 <_test_assert>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	f47f af73 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(7);
 80051aa:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80051ac:	2004      	movs	r0, #4
  test_set_step(7);
 80051ae:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80051b0:	f7ff fc5e 	bl	8004a70 <chPipeWriteTimeout.constprop.18>
    test_assert(n == 4, "wrong size");
 80051b4:	1f03      	subs	r3, r0, #4
 80051b6:	4258      	negs	r0, r3
 80051b8:	4158      	adcs	r0, r3
 80051ba:	4982      	ldr	r1, [pc, #520]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 80051bc:	f7fb fd68 	bl	8000c90 <_test_assert>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	f47f af65 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80051c6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <oslib_test_002_001_execute+0x1b2>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d106      	bne.n	80051e2 <oslib_test_002_001_execute+0x1b2>
 80051d4:	6920      	ldr	r0, [r4, #16]
 80051d6:	f1a0 0e04 	sub.w	lr, r0, #4
 80051da:	f1de 0000 	rsbs	r0, lr, #0
 80051de:	eb40 000e 	adc.w	r0, r0, lr
 80051e2:	4977      	ldr	r1, [pc, #476]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 80051e4:	f7fb fd54 	bl	8000c90 <_test_assert>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	f47f af51 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(8);
 80051ee:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80051f0:	200c      	movs	r0, #12
  test_set_step(8);
 80051f2:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80051f4:	f7ff fc3c 	bl	8004a70 <chPipeWriteTimeout.constprop.18>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 80051f8:	f1a0 0c0c 	sub.w	ip, r0, #12
 80051fc:	f1dc 0000 	rsbs	r0, ip, #0
 8005200:	eb40 000c 	adc.w	r0, r0, ip
 8005204:	496f      	ldr	r1, [pc, #444]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 8005206:	f7fb fd43 	bl	8000c90 <_test_assert>
 800520a:	2800      	cmp	r0, #0
 800520c:	f47f af40 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005210:	68e3      	ldr	r3, [r4, #12]
 8005212:	6822      	ldr	r2, [r4, #0]
 8005214:	4293      	cmp	r3, r2
 8005216:	f000 8124 	beq.w	8005462 <oslib_test_002_001_execute+0x432>
 800521a:	4969      	ldr	r1, [pc, #420]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 800521c:	f7fb fd38 	bl	8000c90 <_test_assert>
 8005220:	2800      	cmp	r0, #0
 8005222:	f47f af35 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(9);
 8005226:	2309      	movs	r3, #9
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005228:	2104      	movs	r1, #4
 800522a:	4668      	mov	r0, sp
  test_set_step(9);
 800522c:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 800522e:	f7ff fc97 	bl	8004b60 <chPipeReadTimeout.constprop.17>
    test_assert(n == 4, "wrong size");
 8005232:	1f05      	subs	r5, r0, #4
 8005234:	4268      	negs	r0, r5
 8005236:	4168      	adcs	r0, r5
 8005238:	4962      	ldr	r1, [pc, #392]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 800523a:	f7fb fd29 	bl	8000c90 <_test_assert>
 800523e:	2800      	cmp	r0, #0
 8005240:	f47f af26 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	68e2      	ldr	r2, [r4, #12]
 8005248:	429a      	cmp	r2, r3
 800524a:	d007      	beq.n	800525c <oslib_test_002_001_execute+0x22c>
 800524c:	68a2      	ldr	r2, [r4, #8]
 800524e:	4293      	cmp	r3, r2
 8005250:	d104      	bne.n	800525c <oslib_test_002_001_execute+0x22c>
 8005252:	6920      	ldr	r0, [r4, #16]
 8005254:	f1a0 010c 	sub.w	r1, r0, #12
 8005258:	4248      	negs	r0, r1
 800525a:	4148      	adcs	r0, r1
 800525c:	4958      	ldr	r1, [pc, #352]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 800525e:	f7fb fd17 	bl	8000c90 <_test_assert>
 8005262:	2800      	cmp	r0, #0
 8005264:	f47f af14 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 8005268:	9800      	ldr	r0, [sp, #0]
 800526a:	4b59      	ldr	r3, [pc, #356]	; (80053d0 <oslib_test_002_001_execute+0x3a0>)
 800526c:	4957      	ldr	r1, [pc, #348]	; (80053cc <oslib_test_002_001_execute+0x39c>)
 800526e:	1ac2      	subs	r2, r0, r3
 8005270:	4250      	negs	r0, r2
 8005272:	4150      	adcs	r0, r2
 8005274:	f7fb fd0c 	bl	8000c90 <_test_assert>
 8005278:	2800      	cmp	r0, #0
 800527a:	f47f af09 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(10);
 800527e:	230a      	movs	r3, #10
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8005280:	210c      	movs	r1, #12
 8005282:	4668      	mov	r0, sp
  test_set_step(10);
 8005284:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8005286:	f7ff fc6b 	bl	8004b60 <chPipeReadTimeout.constprop.17>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800528a:	f1a0 030c 	sub.w	r3, r0, #12
 800528e:	4258      	negs	r0, r3
 8005290:	4158      	adcs	r0, r3
 8005292:	494c      	ldr	r1, [pc, #304]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 8005294:	f7fb fcfc 	bl	8000c90 <_test_assert>
 8005298:	2800      	cmp	r0, #0
 800529a:	f47f aef9 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800529e:	68e3      	ldr	r3, [r4, #12]
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	4293      	cmp	r3, r2
 80052a4:	f000 80e7 	beq.w	8005476 <oslib_test_002_001_execute+0x446>
 80052a8:	4945      	ldr	r1, [pc, #276]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 80052aa:	f7fb fcf1 	bl	8000c90 <_test_assert>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f47f aeee 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 80052b4:	4669      	mov	r1, sp
 80052b6:	220c      	movs	r2, #12
 80052b8:	4843      	ldr	r0, [pc, #268]	; (80053c8 <oslib_test_002_001_execute+0x398>)
 80052ba:	f004 f943 	bl	8009544 <memcmp>
 80052be:	fab0 f080 	clz	r0, r0
 80052c2:	0940      	lsrs	r0, r0, #5
 80052c4:	4941      	ldr	r1, [pc, #260]	; (80053cc <oslib_test_002_001_execute+0x39c>)
 80052c6:	f7fb fce3 	bl	8000c90 <_test_assert>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	f47f aee0 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(11);
 80052d0:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80052d2:	2005      	movs	r0, #5
  test_set_step(11);
 80052d4:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80052d6:	f7ff fbcb 	bl	8004a70 <chPipeWriteTimeout.constprop.18>
    test_assert(n == 5, "wrong size");
 80052da:	f1a0 0e05 	sub.w	lr, r0, #5
 80052de:	f1de 0000 	rsbs	r0, lr, #0
 80052e2:	eb40 000e 	adc.w	r0, r0, lr
 80052e6:	4937      	ldr	r1, [pc, #220]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 80052e8:	f7fb fcd2 	bl	8000c90 <_test_assert>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f47f aecf 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80052f2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <oslib_test_002_001_execute+0x2de>
 80052fa:	6822      	ldr	r2, [r4, #0]
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d106      	bne.n	800530e <oslib_test_002_001_execute+0x2de>
 8005300:	6920      	ldr	r0, [r4, #16]
 8005302:	f1a0 0c05 	sub.w	ip, r0, #5
 8005306:	f1dc 0000 	rsbs	r0, ip, #0
 800530a:	eb40 000c 	adc.w	r0, r0, ip
 800530e:	492c      	ldr	r1, [pc, #176]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 8005310:	f7fb fcbe 	bl	8000c90 <_test_assert>
 8005314:	2800      	cmp	r0, #0
 8005316:	f47f aebb 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(12);
 800531a:	230c      	movs	r3, #12
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 800531c:	2105      	movs	r1, #5
 800531e:	4668      	mov	r0, sp
  test_set_step(12);
 8005320:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005322:	f7ff fc1d 	bl	8004b60 <chPipeReadTimeout.constprop.17>
    test_assert(n == 5, "wrong size");
 8005326:	1f46      	subs	r6, r0, #5
 8005328:	4270      	negs	r0, r6
 800532a:	4170      	adcs	r0, r6
 800532c:	4925      	ldr	r1, [pc, #148]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 800532e:	f7fb fcaf 	bl	8000c90 <_test_assert>
 8005332:	2800      	cmp	r0, #0
 8005334:	f47f aeac 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005338:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800533c:	4293      	cmp	r3, r2
 800533e:	f000 80b5 	beq.w	80054ac <oslib_test_002_001_execute+0x47c>
 8005342:	491f      	ldr	r1, [pc, #124]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 8005344:	f7fb fca4 	bl	8000c90 <_test_assert>
 8005348:	2800      	cmp	r0, #0
 800534a:	f47f aea1 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 800534e:	4669      	mov	r1, sp
 8005350:	2205      	movs	r2, #5
 8005352:	481d      	ldr	r0, [pc, #116]	; (80053c8 <oslib_test_002_001_execute+0x398>)
 8005354:	f004 f8f6 	bl	8009544 <memcmp>
 8005358:	fab0 f080 	clz	r0, r0
 800535c:	0940      	lsrs	r0, r0, #5
 800535e:	491b      	ldr	r1, [pc, #108]	; (80053cc <oslib_test_002_001_execute+0x39c>)
 8005360:	f7fb fc96 	bl	8000c90 <_test_assert>
 8005364:	2800      	cmp	r0, #0
 8005366:	f47f ae93 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(13);
 800536a:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800536c:	2010      	movs	r0, #16
  test_set_step(13);
 800536e:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005370:	f7ff fb7e 	bl	8004a70 <chPipeWriteTimeout.constprop.18>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005374:	f1a0 0510 	sub.w	r5, r0, #16
 8005378:	4268      	negs	r0, r5
 800537a:	4168      	adcs	r0, r5
 800537c:	4911      	ldr	r1, [pc, #68]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 800537e:	f7fb fc87 	bl	8000c90 <_test_assert>
 8005382:	2800      	cmp	r0, #0
 8005384:	f47f ae84 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005388:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800538c:	4293      	cmp	r3, r2
 800538e:	f000 8083 	beq.w	8005498 <oslib_test_002_001_execute+0x468>
 8005392:	490b      	ldr	r1, [pc, #44]	; (80053c0 <oslib_test_002_001_execute+0x390>)
 8005394:	f7fb fc7c 	bl	8000c90 <_test_assert>
 8005398:	2800      	cmp	r0, #0
 800539a:	f47f ae79 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
  test_set_step(14);
 800539e:	230e      	movs	r3, #14
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80053a0:	2110      	movs	r1, #16
 80053a2:	4668      	mov	r0, sp
  test_set_step(14);
 80053a4:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80053a6:	f7ff fbdb 	bl	8004b60 <chPipeReadTimeout.constprop.17>
    test_assert(n == PIPE_SIZE, "wrong size");
 80053aa:	f1a0 0310 	sub.w	r3, r0, #16
 80053ae:	4258      	negs	r0, r3
 80053b0:	4158      	adcs	r0, r3
 80053b2:	4904      	ldr	r1, [pc, #16]	; (80053c4 <oslib_test_002_001_execute+0x394>)
 80053b4:	f7fb fc6c 	bl	8000c90 <_test_assert>
 80053b8:	e00c      	b.n	80053d4 <oslib_test_002_001_execute+0x3a4>
 80053ba:	bf00      	nop
 80053bc:	08009e2c 	.word	0x08009e2c
 80053c0:	08009e5c 	.word	0x08009e5c
 80053c4:	08009d3c 	.word	0x08009d3c
 80053c8:	0800a108 	.word	0x0800a108
 80053cc:	08009e38 	.word	0x08009e38
 80053d0:	33323130 	.word	0x33323130
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f47f ae5b 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80053da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80053de:	4293      	cmp	r3, r2
 80053e0:	d052      	beq.n	8005488 <oslib_test_002_001_execute+0x458>
 80053e2:	4937      	ldr	r1, [pc, #220]	; (80054c0 <oslib_test_002_001_execute+0x490>)
 80053e4:	f7fb fc54 	bl	8000c90 <_test_assert>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f47f ae51 	bne.w	8005090 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80053ee:	4669      	mov	r1, sp
 80053f0:	2210      	movs	r2, #16
 80053f2:	4834      	ldr	r0, [pc, #208]	; (80054c4 <oslib_test_002_001_execute+0x494>)
 80053f4:	f004 f8a6 	bl	8009544 <memcmp>
 80053f8:	fab0 f080 	clz	r0, r0
 80053fc:	4932      	ldr	r1, [pc, #200]	; (80054c8 <oslib_test_002_001_execute+0x498>)
 80053fe:	0940      	lsrs	r0, r0, #5
 8005400:	f7fb fc46 	bl	8000c90 <_test_assert>
 8005404:	e644      	b.n	8005090 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005406:	68a2      	ldr	r2, [r4, #8]
 8005408:	4293      	cmp	r3, r2
 800540a:	f47f ae63 	bne.w	80050d4 <oslib_test_002_001_execute+0xa4>
 800540e:	6920      	ldr	r0, [r4, #16]
 8005410:	fab0 f080 	clz	r0, r0
 8005414:	0940      	lsrs	r0, r0, #5
 8005416:	e65d      	b.n	80050d4 <oslib_test_002_001_execute+0xa4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005418:	68a2      	ldr	r2, [r4, #8]
 800541a:	4293      	cmp	r3, r2
 800541c:	f47f ae72 	bne.w	8005104 <oslib_test_002_001_execute+0xd4>
 8005420:	6920      	ldr	r0, [r4, #16]
 8005422:	fab0 f080 	clz	r0, r0
 8005426:	0940      	lsrs	r0, r0, #5
 8005428:	e66c      	b.n	8005104 <oslib_test_002_001_execute+0xd4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800542a:	68a2      	ldr	r2, [r4, #8]
 800542c:	4293      	cmp	r3, r2
 800542e:	f47f ae76 	bne.w	800511e <oslib_test_002_001_execute+0xee>
 8005432:	6920      	ldr	r0, [r4, #16]
 8005434:	fab0 f080 	clz	r0, r0
 8005438:	0940      	lsrs	r0, r0, #5
 800543a:	e670      	b.n	800511e <oslib_test_002_001_execute+0xee>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800543c:	68a2      	ldr	r2, [r4, #8]
 800543e:	4293      	cmp	r3, r2
 8005440:	f47f ae86 	bne.w	8005150 <oslib_test_002_001_execute+0x120>
 8005444:	6920      	ldr	r0, [r4, #16]
 8005446:	f1a0 0210 	sub.w	r2, r0, #16
 800544a:	4250      	negs	r0, r2
 800544c:	4150      	adcs	r0, r2
 800544e:	e67f      	b.n	8005150 <oslib_test_002_001_execute+0x120>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005450:	68a2      	ldr	r2, [r4, #8]
 8005452:	4293      	cmp	r3, r2
 8005454:	f47f ae96 	bne.w	8005184 <oslib_test_002_001_execute+0x154>
 8005458:	6920      	ldr	r0, [r4, #16]
 800545a:	fab0 f080 	clz	r0, r0
 800545e:	0940      	lsrs	r0, r0, #5
 8005460:	e690      	b.n	8005184 <oslib_test_002_001_execute+0x154>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005462:	68a2      	ldr	r2, [r4, #8]
 8005464:	4293      	cmp	r3, r2
 8005466:	f47f aed8 	bne.w	800521a <oslib_test_002_001_execute+0x1ea>
 800546a:	6920      	ldr	r0, [r4, #16]
 800546c:	f1a0 0610 	sub.w	r6, r0, #16
 8005470:	4270      	negs	r0, r6
 8005472:	4170      	adcs	r0, r6
 8005474:	e6d1      	b.n	800521a <oslib_test_002_001_execute+0x1ea>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005476:	68a2      	ldr	r2, [r4, #8]
 8005478:	4293      	cmp	r3, r2
 800547a:	f47f af15 	bne.w	80052a8 <oslib_test_002_001_execute+0x278>
 800547e:	6920      	ldr	r0, [r4, #16]
 8005480:	fab0 f080 	clz	r0, r0
 8005484:	0940      	lsrs	r0, r0, #5
 8005486:	e70f      	b.n	80052a8 <oslib_test_002_001_execute+0x278>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	4293      	cmp	r3, r2
 800548c:	d0a9      	beq.n	80053e2 <oslib_test_002_001_execute+0x3b2>
 800548e:	6920      	ldr	r0, [r4, #16]
 8005490:	fab0 f080 	clz	r0, r0
 8005494:	0940      	lsrs	r0, r0, #5
 8005496:	e7a4      	b.n	80053e2 <oslib_test_002_001_execute+0x3b2>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	4293      	cmp	r3, r2
 800549c:	f43f af79 	beq.w	8005392 <oslib_test_002_001_execute+0x362>
 80054a0:	6920      	ldr	r0, [r4, #16]
 80054a2:	f1a0 0210 	sub.w	r2, r0, #16
 80054a6:	4250      	negs	r0, r2
 80054a8:	4150      	adcs	r0, r2
 80054aa:	e772      	b.n	8005392 <oslib_test_002_001_execute+0x362>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	4293      	cmp	r3, r2
 80054b0:	f43f af47 	beq.w	8005342 <oslib_test_002_001_execute+0x312>
 80054b4:	6920      	ldr	r0, [r4, #16]
 80054b6:	fab0 f080 	clz	r0, r0
 80054ba:	0940      	lsrs	r0, r0, #5
 80054bc:	e741      	b.n	8005342 <oslib_test_002_001_execute+0x312>
 80054be:	bf00      	nop
 80054c0:	08009e5c 	.word	0x08009e5c
 80054c4:	0800a108 	.word	0x0800a108
 80054c8:	08009e38 	.word	0x08009e38
 80054cc:	00000000 	.word	0x00000000

080054d0 <rt_test_010_011_execute>:
static void rt_test_010_011_execute(void) {
 80054d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80054d4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005558 <rt_test_010_011_execute+0x88>
      chMtxLock(&mtx1);
 80054d8:	4c1c      	ldr	r4, [pc, #112]	; (800554c <rt_test_010_011_execute+0x7c>)
  test_set_step(1);
 80054da:	2301      	movs	r3, #1
 80054dc:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80054e0:	f7fd fdee 	bl	80030c0 <test_wait_tick>
    n = 0;
 80054e4:	2500      	movs	r5, #0
    start = test_wait_tick();
 80054e6:	4680      	mov	r8, r0
 80054e8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80054ec:	f242 760f 	movw	r6, #9999	; 0x270f
      chMtxLock(&mtx1);
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7fe f8fd 	bl	80036f0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff f9ba 	bl	8004870 <chMtxUnlock>
      chMtxLock(&mtx1);
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7fe f8f7 	bl	80036f0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005502:	4620      	mov	r0, r4
 8005504:	f7ff f9b4 	bl	8004870 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005508:	4620      	mov	r0, r4
 800550a:	f7fe f8f1 	bl	80036f0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800550e:	4620      	mov	r0, r4
 8005510:	f7ff f9ae 	bl	8004870 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005514:	4620      	mov	r0, r4
 8005516:	f7fe f8eb 	bl	80036f0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800551a:	4620      	mov	r0, r4
 800551c:	f7ff f9a8 	bl	8004870 <chMtxUnlock>
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8005526:	42b3      	cmp	r3, r6
      n++;
 8005528:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800552c:	d9e0      	bls.n	80054f0 <rt_test_010_011_execute+0x20>
  test_set_step(2);
 800552e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8005530:	4807      	ldr	r0, [pc, #28]	; (8005550 <rt_test_010_011_execute+0x80>)
  test_set_step(2);
 8005532:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8005536:	f7fb fcab 	bl	8000e90 <test_print>
    test_printn(n * 4);
 800553a:	00a8      	lsls	r0, r5, #2
 800553c:	f7fb fc38 	bl	8000db0 <test_printn>
    test_println(" lock+unlock/S");
 8005540:	4804      	ldr	r0, [pc, #16]	; (8005554 <rt_test_010_011_execute+0x84>)
}
 8005542:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8005546:	f7fb bc83 	b.w	8000e50 <test_println>
 800554a:	bf00      	nop
 800554c:	20001020 	.word	0x20001020
 8005550:	0800b260 	.word	0x0800b260
 8005554:	0800b2ac 	.word	0x0800b2ac
 8005558:	20001774 	.word	0x20001774
 800555c:	00000000 	.word	0x00000000

08005560 <thread8>:
static THD_FUNCTION(thread8, p) {
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	4607      	mov	r7, r0
  chMtxLock(&m2);
 8005564:	481b      	ldr	r0, [pc, #108]	; (80055d4 <thread8+0x74>)
 8005566:	f7fe f8c3 	bl	80036f0 <chMtxLock>
  chMtxLock(&m1);
 800556a:	481b      	ldr	r0, [pc, #108]	; (80055d8 <thread8+0x78>)
 800556c:	f7fe f8c0 	bl	80036f0 <chMtxLock>
 8005570:	2320      	movs	r3, #32
 8005572:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8005576:	4d19      	ldr	r5, [pc, #100]	; (80055dc <thread8+0x7c>)
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8005578:	69ab      	ldr	r3, [r5, #24]
 800557a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 800557c:	4630      	mov	r0, r6
 800557e:	f7fc f83f 	bl	8001600 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8005582:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <thread8+0x80>)
 8005584:	69ac      	ldr	r4, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8005586:	4618      	mov	r0, r3
 8005588:	6263      	str	r3, [r4, #36]	; 0x24
 800558a:	e003      	b.n	8005594 <thread8+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800558c:	6899      	ldr	r1, [r3, #8]
 800558e:	68a2      	ldr	r2, [r4, #8]
 8005590:	4291      	cmp	r1, r2
 8005592:	d302      	bcc.n	800559a <thread8+0x3a>
    cp = cp->queue.next;
 8005594:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005596:	4283      	cmp	r3, r0
 8005598:	d1f8      	bne.n	800558c <thread8+0x2c>
  tp->queue.prev             = cp->queue.prev;
 800559a:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
 800559c:	2007      	movs	r0, #7
 800559e:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80055a2:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80055a4:	605c      	str	r4, [r3, #4]
 80055a6:	f7fd f9a3 	bl	80028f0 <chSchGoSleepS>
  return currp->u.rdymsg;
 80055aa:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	3301      	adds	r3, #1
 80055b0:	d002      	beq.n	80055b8 <thread8+0x58>
    chMtxLockS(mp);
 80055b2:	4630      	mov	r0, r6
 80055b4:	f7fe f824 	bl	8003600 <chMtxLockS>
 80055b8:	2300      	movs	r3, #0
 80055ba:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80055be:	7838      	ldrb	r0, [r7, #0]
 80055c0:	f7fb fc06 	bl	8000dd0 <test_emit_token>
  chMtxUnlock(&m1);
 80055c4:	4804      	ldr	r0, [pc, #16]	; (80055d8 <thread8+0x78>)
 80055c6:	f7ff f953 	bl	8004870 <chMtxUnlock>
  chMtxUnlock(&m2);
 80055ca:	4802      	ldr	r0, [pc, #8]	; (80055d4 <thread8+0x74>)
}
 80055cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 80055d0:	f7ff b94e 	b.w	8004870 <chMtxUnlock>
 80055d4:	20000c40 	.word	0x20000c40
 80055d8:	20000c30 	.word	0x20000c30
 80055dc:	20000da0 	.word	0x20000da0
 80055e0:	20000c04 	.word	0x20000c04
	...

080055f0 <thread6>:
static THD_FUNCTION(thread6, p) {
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	4606      	mov	r6, r0
  chMtxLock(&m1);
 80055f4:	4816      	ldr	r0, [pc, #88]	; (8005650 <thread6+0x60>)
 80055f6:	f7fe f87b 	bl	80036f0 <chMtxLock>
 80055fa:	2320      	movs	r3, #32
 80055fc:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8005600:	4b14      	ldr	r3, [pc, #80]	; (8005654 <thread6+0x64>)
 8005602:	699c      	ldr	r4, [r3, #24]
 8005604:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8005606:	4628      	mov	r0, r5
 8005608:	f7fb fffa 	bl	8001600 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 800560c:	4812      	ldr	r0, [pc, #72]	; (8005658 <thread6+0x68>)
 800560e:	6260      	str	r0, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8005610:	4603      	mov	r3, r0
 8005612:	e003      	b.n	800561c <thread6+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005614:	6899      	ldr	r1, [r3, #8]
 8005616:	68a2      	ldr	r2, [r4, #8]
 8005618:	4291      	cmp	r1, r2
 800561a:	d302      	bcc.n	8005622 <thread6+0x32>
    cp = cp->queue.next;
 800561c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800561e:	4283      	cmp	r3, r0
 8005620:	d1f8      	bne.n	8005614 <thread6+0x24>
  tp->queue.prev             = cp->queue.prev;
 8005622:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8005624:	2007      	movs	r0, #7
 8005626:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800562a:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800562c:	605c      	str	r4, [r3, #4]
 800562e:	f7fd f95f 	bl	80028f0 <chSchGoSleepS>
  chMtxLockS(mp);
 8005632:	4628      	mov	r0, r5
 8005634:	f7fd ffe4 	bl	8003600 <chMtxLockS>
 8005638:	2300      	movs	r3, #0
 800563a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800563e:	7830      	ldrb	r0, [r6, #0]
 8005640:	f7fb fbc6 	bl	8000dd0 <test_emit_token>
  chMtxUnlock(&m1);
 8005644:	4802      	ldr	r0, [pc, #8]	; (8005650 <thread6+0x60>)
}
 8005646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 800564a:	f7ff b911 	b.w	8004870 <chMtxUnlock>
 800564e:	bf00      	nop
 8005650:	20000c30 	.word	0x20000c30
 8005654:	20000da0 	.word	0x20000da0
 8005658:	20000c04 	.word	0x20000c04
 800565c:	00000000 	.word	0x00000000

08005660 <thread9>:
static THD_FUNCTION(thread9, p) {
 8005660:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 8005662:	4c06      	ldr	r4, [pc, #24]	; (800567c <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 8005664:	4605      	mov	r5, r0
  chMtxLock(&m2);
 8005666:	4620      	mov	r0, r4
 8005668:	f7fe f842 	bl	80036f0 <chMtxLock>
  test_emit_token(*(char *)p);
 800566c:	7828      	ldrb	r0, [r5, #0]
 800566e:	f7fb fbaf 	bl	8000dd0 <test_emit_token>
  chMtxUnlock(&m2);
 8005672:	4620      	mov	r0, r4
}
 8005674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8005678:	f7ff b8fa 	b.w	8004870 <chMtxUnlock>
 800567c:	20000c40 	.word	0x20000c40

08005680 <rt_test_006_005_execute>:
static void rt_test_006_005_execute(void) {
 8005680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005684:	4d4e      	ldr	r5, [pc, #312]	; (80057c0 <rt_test_006_005_execute+0x140>)
  test_set_step(2);
 8005686:	4c4f      	ldr	r4, [pc, #316]	; (80057c4 <rt_test_006_005_execute+0x144>)
  return chThdGetSelfX()->prio;
 8005688:	69aa      	ldr	r2, [r5, #24]
 800568a:	2302      	movs	r3, #2
 800568c:	6896      	ldr	r6, [r2, #8]
 800568e:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005690:	f7fb f8a6 	bl	80007e0 <chMtxTryLock.constprop.62>
    test_assert(b, "already locked");
 8005694:	494c      	ldr	r1, [pc, #304]	; (80057c8 <rt_test_006_005_execute+0x148>)
 8005696:	f7fb fafb 	bl	8000c90 <_test_assert>
 800569a:	b108      	cbz	r0, 80056a0 <rt_test_006_005_execute+0x20>
}
 800569c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 80056a0:	2303      	movs	r3, #3
 80056a2:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 80056a4:	f7fb f89c 	bl	80007e0 <chMtxTryLock.constprop.62>
    test_assert(!b, "not locked");
 80056a8:	f080 0001 	eor.w	r0, r0, #1
 80056ac:	b2c0      	uxtb	r0, r0
 80056ae:	4947      	ldr	r1, [pc, #284]	; (80057cc <rt_test_006_005_execute+0x14c>)
 80056b0:	f7fb faee 	bl	8000c90 <_test_assert>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d1f1      	bne.n	800569c <rt_test_006_005_execute+0x1c>
    chMtxUnlock(&m1);
 80056b8:	4f45      	ldr	r7, [pc, #276]	; (80057d0 <rt_test_006_005_execute+0x150>)
  test_set_step(4);
 80056ba:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 80056bc:	4638      	mov	r0, r7
  test_set_step(4);
 80056be:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 80056c0:	f7ff f8d6 	bl	8004870 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 80056c4:	68b8      	ldr	r0, [r7, #8]
 80056c6:	4943      	ldr	r1, [pc, #268]	; (80057d4 <rt_test_006_005_execute+0x154>)
 80056c8:	fab0 f080 	clz	r0, r0
 80056cc:	0940      	lsrs	r0, r0, #5
 80056ce:	f7fb fadf 	bl	8000c90 <_test_assert>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d1e2      	bne.n	800569c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80056d6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80056d8:	493f      	ldr	r1, [pc, #252]	; (80057d8 <rt_test_006_005_execute+0x158>)
 80056da:	1bc0      	subs	r0, r0, r7
 80056dc:	fab0 f080 	clz	r0, r0
 80056e0:	0940      	lsrs	r0, r0, #5
 80056e2:	f7fb fad5 	bl	8000c90 <_test_assert>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	d1d8      	bne.n	800569c <rt_test_006_005_execute+0x1c>
 80056ea:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80056ec:	493b      	ldr	r1, [pc, #236]	; (80057dc <rt_test_006_005_execute+0x15c>)
 80056ee:	6898      	ldr	r0, [r3, #8]
 80056f0:	1b80      	subs	r0, r0, r6
 80056f2:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 80056f6:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80056f8:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 80056fa:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80056fc:	f7fb fac8 	bl	8000c90 <_test_assert>
 8005700:	2800      	cmp	r0, #0
 8005702:	d1cb      	bne.n	800569c <rt_test_006_005_execute+0x1c>
  test_set_step(6);
 8005704:	2306      	movs	r3, #6
 8005706:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005708:	f7fb f86a 	bl	80007e0 <chMtxTryLock.constprop.62>
    test_assert(b, "already locked");
 800570c:	492e      	ldr	r1, [pc, #184]	; (80057c8 <rt_test_006_005_execute+0x148>)
 800570e:	f7fb fabf 	bl	8000c90 <_test_assert>
 8005712:	2800      	cmp	r0, #0
 8005714:	d1c2      	bne.n	800569c <rt_test_006_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8005716:	f7fb f863 	bl	80007e0 <chMtxTryLock.constprop.62>
    test_assert(!b, "not locked");
 800571a:	f080 0001 	eor.w	r0, r0, #1
 800571e:	b2c0      	uxtb	r0, r0
 8005720:	492a      	ldr	r1, [pc, #168]	; (80057cc <rt_test_006_005_execute+0x14c>)
 8005722:	f7fb fab5 	bl	8000c90 <_test_assert>
 8005726:	2800      	cmp	r0, #0
 8005728:	d1b8      	bne.n	800569c <rt_test_006_005_execute+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 800572a:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800572e:	2320      	movs	r3, #32
 8005730:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 8005734:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8005738:	b1db      	cbz	r3, 8005772 <rt_test_006_005_execute+0xf2>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 800573a:	4681      	mov	r9, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 800573c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 800573e:	68d9      	ldr	r1, [r3, #12]
 8005740:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8005744:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8005746:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8005748:	d035      	beq.n	80057b6 <rt_test_006_005_execute+0x136>
        mp->next = tp->mtxlist;
 800574a:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800574e:	6811      	ldr	r1, [r2, #0]
 8005750:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005752:	604b      	str	r3, [r1, #4]
 8005754:	e9c3 2c02 	strd	r2, ip, [r3, #8]
        tp->mtxlist = mp;
 8005758:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 800575a:	f7fb fe51 	bl	8001400 <chSchReadyI>
 800575e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1ea      	bne.n	800573c <rt_test_006_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 8005766:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800576a:	f8c8 3008 	str.w	r3, [r8, #8]
    chSchRescheduleS();
 800576e:	f7fe fa4f 	bl	8003c10 <chSchRescheduleS>
 8005772:	2300      	movs	r3, #0
 8005774:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8005778:	68b8      	ldr	r0, [r7, #8]
 800577a:	4916      	ldr	r1, [pc, #88]	; (80057d4 <rt_test_006_005_execute+0x154>)
 800577c:	fab0 f080 	clz	r0, r0
 8005780:	0940      	lsrs	r0, r0, #5
 8005782:	f7fb fa85 	bl	8000c90 <_test_assert>
 8005786:	2800      	cmp	r0, #0
 8005788:	d188      	bne.n	800569c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 800578a:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 800578c:	4912      	ldr	r1, [pc, #72]	; (80057d8 <rt_test_006_005_execute+0x158>)
 800578e:	1bc7      	subs	r7, r0, r7
 8005790:	4278      	negs	r0, r7
 8005792:	4178      	adcs	r0, r7
 8005794:	f7fb fa7c 	bl	8000c90 <_test_assert>
 8005798:	2800      	cmp	r0, #0
 800579a:	f47f af7f 	bne.w	800569c <rt_test_006_005_execute+0x1c>
 800579e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80057a0:	490e      	ldr	r1, [pc, #56]	; (80057dc <rt_test_006_005_execute+0x15c>)
 80057a2:	6898      	ldr	r0, [r3, #8]
 80057a4:	1b82      	subs	r2, r0, r6
  test_set_step(7);
 80057a6:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80057a8:	4250      	negs	r0, r2
  test_set_step(7);
 80057aa:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80057ac:	4150      	adcs	r0, r2
}
 80057ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80057b2:	f7fb ba6d 	b.w	8000c90 <_test_assert>
        mp->owner = NULL;
 80057b6:	f8c3 9008 	str.w	r9, [r3, #8]
 80057ba:	460b      	mov	r3, r1
 80057bc:	e7d1      	b.n	8005762 <rt_test_006_005_execute+0xe2>
 80057be:	bf00      	nop
 80057c0:	20000da0 	.word	0x20000da0
 80057c4:	20001774 	.word	0x20001774
 80057c8:	0800af00 	.word	0x0800af00
 80057cc:	0800af10 	.word	0x0800af10
 80057d0:	20000c30 	.word	0x20000c30
 80057d4:	0800af1c 	.word	0x0800af1c
 80057d8:	0800ae54 	.word	0x0800ae54
 80057dc:	0800af28 	.word	0x0800af28

080057e0 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 80057e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80057e4:	4d44      	ldr	r5, [pc, #272]	; (80058f8 <rt_test_006_004_execute+0x118>)
  test_set_step(2);
 80057e6:	4e45      	ldr	r6, [pc, #276]	; (80058fc <rt_test_006_004_execute+0x11c>)
  return chThdGetSelfX()->prio;
 80057e8:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80057ea:	4a45      	ldr	r2, [pc, #276]	; (8005900 <rt_test_006_004_execute+0x120>)
 80057ec:	689c      	ldr	r4, [r3, #8]
 80057ee:	4845      	ldr	r0, [pc, #276]	; (8005904 <rt_test_006_004_execute+0x124>)
 80057f0:	4b45      	ldr	r3, [pc, #276]	; (8005908 <rt_test_006_004_execute+0x128>)
static void rt_test_006_004_execute(void) {
 80057f2:	b083      	sub	sp, #12
    pa = p + 1;
 80057f4:	f104 0801 	add.w	r8, r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80057f8:	9200      	str	r2, [sp, #0]
  test_set_step(2);
 80057fa:	2702      	movs	r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80057fc:	4642      	mov	r2, r8
 80057fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 8005802:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005804:	f7fc fff4 	bl	80027f0 <chThdCreateStatic>
 8005808:	4f40      	ldr	r7, [pc, #256]	; (800590c <rt_test_006_004_execute+0x12c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800580a:	4b41      	ldr	r3, [pc, #260]	; (8005910 <rt_test_006_004_execute+0x130>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800580c:	6038      	str	r0, [r7, #0]
    pb = p + 2;
 800580e:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005812:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005816:	464a      	mov	r2, r9
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	483e      	ldr	r0, [pc, #248]	; (8005914 <rt_test_006_004_execute+0x134>)
 800581c:	4b3e      	ldr	r3, [pc, #248]	; (8005918 <rt_test_006_004_execute+0x138>)
 800581e:	f7fc ffe7 	bl	80027f0 <chThdCreateStatic>
  test_set_step(3);
 8005822:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005824:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
 8005826:	483d      	ldr	r0, [pc, #244]	; (800591c <rt_test_006_004_execute+0x13c>)
  test_set_step(3);
 8005828:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 800582a:	f7fd ff61 	bl	80036f0 <chMtxLock>
 800582e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005830:	493b      	ldr	r1, [pc, #236]	; (8005920 <rt_test_006_004_execute+0x140>)
 8005832:	6898      	ldr	r0, [r3, #8]
 8005834:	1b00      	subs	r0, r0, r4
 8005836:	fab0 f080 	clz	r0, r0
 800583a:	0940      	lsrs	r0, r0, #5
 800583c:	f7fb fa28 	bl	8000c90 <_test_assert>
 8005840:	b110      	cbz	r0, 8005848 <rt_test_006_004_execute+0x68>
}
 8005842:	b003      	add	sp, #12
 8005844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 8005848:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 800584a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 800584e:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8005850:	f7fd fbae 	bl	8002fb0 <chThdSleep>
 8005854:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005856:	4932      	ldr	r1, [pc, #200]	; (8005920 <rt_test_006_004_execute+0x140>)
 8005858:	6898      	ldr	r0, [r3, #8]
 800585a:	eba0 0008 	sub.w	r0, r0, r8
 800585e:	fab0 f080 	clz	r0, r0
 8005862:	0940      	lsrs	r0, r0, #5
 8005864:	f7fb fa14 	bl	8000c90 <_test_assert>
 8005868:	2800      	cmp	r0, #0
 800586a:	d1ea      	bne.n	8005842 <rt_test_006_004_execute+0x62>
  test_set_step(5);
 800586c:	2305      	movs	r3, #5
    chMtxLock(&m2);
 800586e:	482d      	ldr	r0, [pc, #180]	; (8005924 <rt_test_006_004_execute+0x144>)
  test_set_step(5);
 8005870:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8005872:	f7fd ff3d 	bl	80036f0 <chMtxLock>
 8005876:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005878:	4929      	ldr	r1, [pc, #164]	; (8005920 <rt_test_006_004_execute+0x140>)
 800587a:	6898      	ldr	r0, [r3, #8]
 800587c:	eba0 0008 	sub.w	r0, r0, r8
 8005880:	fab0 f080 	clz	r0, r0
 8005884:	0940      	lsrs	r0, r0, #5
 8005886:	f7fb fa03 	bl	8000c90 <_test_assert>
 800588a:	2800      	cmp	r0, #0
 800588c:	d1d9      	bne.n	8005842 <rt_test_006_004_execute+0x62>
  test_set_step(6);
 800588e:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8005890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8005894:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8005896:	f7fd fb8b 	bl	8002fb0 <chThdSleep>
 800589a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 800589c:	4920      	ldr	r1, [pc, #128]	; (8005920 <rt_test_006_004_execute+0x140>)
 800589e:	6898      	ldr	r0, [r3, #8]
 80058a0:	eba0 0009 	sub.w	r0, r0, r9
 80058a4:	fab0 f080 	clz	r0, r0
 80058a8:	0940      	lsrs	r0, r0, #5
 80058aa:	f7fb f9f1 	bl	8000c90 <_test_assert>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d1c7      	bne.n	8005842 <rt_test_006_004_execute+0x62>
  test_set_step(7);
 80058b2:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 80058b4:	481b      	ldr	r0, [pc, #108]	; (8005924 <rt_test_006_004_execute+0x144>)
  test_set_step(7);
 80058b6:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 80058b8:	f7fe ffda 	bl	8004870 <chMtxUnlock>
 80058bc:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80058be:	4918      	ldr	r1, [pc, #96]	; (8005920 <rt_test_006_004_execute+0x140>)
 80058c0:	6898      	ldr	r0, [r3, #8]
 80058c2:	eba0 0008 	sub.w	r0, r0, r8
 80058c6:	fab0 f080 	clz	r0, r0
 80058ca:	0940      	lsrs	r0, r0, #5
 80058cc:	f7fb f9e0 	bl	8000c90 <_test_assert>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d1b6      	bne.n	8005842 <rt_test_006_004_execute+0x62>
  test_set_step(8);
 80058d4:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 80058d6:	4811      	ldr	r0, [pc, #68]	; (800591c <rt_test_006_004_execute+0x13c>)
  test_set_step(8);
 80058d8:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 80058da:	f7fe ffc9 	bl	8004870 <chMtxUnlock>
 80058de:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 80058e0:	490f      	ldr	r1, [pc, #60]	; (8005920 <rt_test_006_004_execute+0x140>)
 80058e2:	6898      	ldr	r0, [r3, #8]
 80058e4:	1b00      	subs	r0, r0, r4
 80058e6:	fab0 f080 	clz	r0, r0
 80058ea:	0940      	lsrs	r0, r0, #5
}
 80058ec:	b003      	add	sp, #12
 80058ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 80058f2:	f7fb b9cd 	b.w	8000c90 <_test_assert>
 80058f6:	bf00      	nop
 80058f8:	20000da0 	.word	0x20000da0
 80058fc:	20001774 	.word	0x20001774
 8005900:	0800aee8 	.word	0x0800aee8
 8005904:	20001060 	.word	0x20001060
 8005908:	08005931 	.word	0x08005931
 800590c:	2000178c 	.word	0x2000178c
 8005910:	0800aeec 	.word	0x0800aeec
 8005914:	200011a8 	.word	0x200011a8
 8005918:	080047b1 	.word	0x080047b1
 800591c:	20000c30 	.word	0x20000c30
 8005920:	0800af28 	.word	0x0800af28
 8005924:	20000c40 	.word	0x20000c40
	...

08005930 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8005930:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8005932:	4c06      	ldr	r4, [pc, #24]	; (800594c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8005934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005938:	f7fd fb3a 	bl	8002fb0 <chThdSleep>
  chMtxLock(&m1);
 800593c:	4620      	mov	r0, r4
 800593e:	f7fd fed7 	bl	80036f0 <chMtxLock>
  chMtxUnlock(&m1);
 8005942:	4620      	mov	r0, r4
}
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8005948:	f7fe bf92 	b.w	8004870 <chMtxUnlock>
 800594c:	20000c30 	.word	0x20000c30

08005950 <thread1.lto_priv.97>:
static THD_FUNCTION(thread1, p) {
 8005950:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8005952:	4c06      	ldr	r4, [pc, #24]	; (800596c <thread1.lto_priv.97+0x1c>)
static THD_FUNCTION(thread1, p) {
 8005954:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8005956:	4620      	mov	r0, r4
 8005958:	f7fd feca 	bl	80036f0 <chMtxLock>
  test_emit_token(*(char *)p);
 800595c:	7828      	ldrb	r0, [r5, #0]
 800595e:	f7fb fa37 	bl	8000dd0 <test_emit_token>
  chMtxUnlock(&m1);
 8005962:	4620      	mov	r0, r4
}
 8005964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8005968:	f7fe bf82 	b.w	8004870 <chMtxUnlock>
 800596c:	20000c30 	.word	0x20000c30

08005970 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005970:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8005972:	4d17      	ldr	r5, [pc, #92]	; (80059d0 <chFactoryReleaseSemaphore+0x60>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005974:	4604      	mov	r4, r0
  F_LOCK();
 8005976:	4628      	mov	r0, r5
 8005978:	f7fd feba 	bl	80036f0 <chMtxLock>
  dep->refs--;
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005982:	b123      	cbz	r3, 800598e <chFactoryReleaseSemaphore+0x1e>
  F_UNLOCK();
 8005984:	4812      	ldr	r0, [pc, #72]	; (80059d0 <chFactoryReleaseSemaphore+0x60>)
}
 8005986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800598a:	f7fe bf71 	b.w	8004870 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800598e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8005992:	460a      	mov	r2, r1
 8005994:	e002      	b.n	800599c <chFactoryReleaseSemaphore+0x2c>
    if (prev->next == element) {
 8005996:	429c      	cmp	r4, r3
 8005998:	d00a      	beq.n	80059b0 <chFactoryReleaseSemaphore+0x40>
 800599a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800599c:	6813      	ldr	r3, [r2, #0]
 800599e:	428b      	cmp	r3, r1
 80059a0:	d1f9      	bne.n	8005996 <chFactoryReleaseSemaphore+0x26>
 80059a2:	2320      	movs	r3, #32
 80059a4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80059a8:	2300      	movs	r3, #0
 80059aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	2320      	movs	r3, #32
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	2300      	movs	r3, #0
  mp->next = php;
 80059c0:	62ec      	str	r4, [r5, #44]	; 0x2c
 80059c2:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 80059c6:	4802      	ldr	r0, [pc, #8]	; (80059d0 <chFactoryReleaseSemaphore+0x60>)
}
 80059c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80059cc:	f7fe bf50 	b.w	8004870 <chMtxUnlock>
 80059d0:	20000e18 	.word	0x20000e18
	...

080059e0 <oslib_test_005_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_005_003_execute(void) {
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [5.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 80059e2:	4c42      	ldr	r4, [pc, #264]	; (8005aec <oslib_test_005_003_execute+0x10c>)
 80059e4:	2501      	movs	r5, #1
 80059e6:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 80059e8:	f7ff fa0a 	bl	8004e00 <chFactoryFindSemaphore.constprop.10>
    test_assert(dsp == NULL, "found");
 80059ec:	fab0 f080 	clz	r0, r0
 80059f0:	0940      	lsrs	r0, r0, #5
 80059f2:	493f      	ldr	r1, [pc, #252]	; (8005af0 <oslib_test_005_003_execute+0x110>)
 80059f4:	f7fb f94c 	bl	8000c90 <_test_assert>
 80059f8:	b100      	cbz	r0, 80059fc <oslib_test_005_003_execute+0x1c>
  test_set_step(6);
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
}
 80059fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80059fc:	2302      	movs	r3, #2
 80059fe:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8005a00:	f7ff f9de 	bl	8004dc0 <chFactoryCreateSemaphore.constprop.11>
    test_assert(dsp != NULL, "cannot create");
 8005a04:	4606      	mov	r6, r0
 8005a06:	3000      	adds	r0, #0
 8005a08:	bf18      	it	ne
 8005a0a:	2001      	movne	r0, #1
 8005a0c:	4939      	ldr	r1, [pc, #228]	; (8005af4 <oslib_test_005_003_execute+0x114>)
 8005a0e:	f7fb f93f 	bl	8000c90 <_test_assert>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d1f1      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
  test_set_step(3);
 8005a16:	2303      	movs	r3, #3
 8005a18:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8005a1a:	f7ff f9d1 	bl	8004dc0 <chFactoryCreateSemaphore.constprop.11>
    test_assert(dsp1 == NULL, "can create");
 8005a1e:	fab0 f080 	clz	r0, r0
 8005a22:	0940      	lsrs	r0, r0, #5
 8005a24:	4934      	ldr	r1, [pc, #208]	; (8005af8 <oslib_test_005_003_execute+0x118>)
 8005a26:	f7fb f933 	bl	8000c90 <_test_assert>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d1e5      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
  test_set_step(4);
 8005a2e:	2304      	movs	r3, #4
 8005a30:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8005a32:	f7ff f9e5 	bl	8004e00 <chFactoryFindSemaphore.constprop.10>
    test_assert(dsp1 != NULL, "not found");
 8005a36:	4607      	mov	r7, r0
 8005a38:	3000      	adds	r0, #0
 8005a3a:	bf18      	it	ne
 8005a3c:	2001      	movne	r0, #1
 8005a3e:	492f      	ldr	r1, [pc, #188]	; (8005afc <oslib_test_005_003_execute+0x11c>)
 8005a40:	f7fb f926 	bl	8000c90 <_test_assert>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d1d8      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8005a48:	1bf0      	subs	r0, r6, r7
 8005a4a:	fab0 f080 	clz	r0, r0
 8005a4e:	492c      	ldr	r1, [pc, #176]	; (8005b00 <oslib_test_005_003_execute+0x120>)
 8005a50:	0940      	lsrs	r0, r0, #5
 8005a52:	f7fb f91d 	bl	8000c90 <_test_assert>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d1cf      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4928      	ldr	r1, [pc, #160]	; (8005b00 <oslib_test_005_003_execute+0x120>)
 8005a5e:	f1a0 0002 	sub.w	r0, r0, #2
 8005a62:	fab0 f080 	clz	r0, r0
 8005a66:	0940      	lsrs	r0, r0, #5
 8005a68:	f7fb f912 	bl	8000c90 <_test_assert>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1c4      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8005a70:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8005a72:	4923      	ldr	r1, [pc, #140]	; (8005b00 <oslib_test_005_003_execute+0x120>)
 8005a74:	442b      	add	r3, r5
 8005a76:	4628      	mov	r0, r5
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	f7fb f909 	bl	8000c90 <_test_assert>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d1bb      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	491e      	ldr	r1, [pc, #120]	; (8005b00 <oslib_test_005_003_execute+0x120>)
 8005a86:	f1a0 0c03 	sub.w	ip, r0, #3
 8005a8a:	f1dc 0000 	rsbs	r0, ip, #0
 8005a8e:	eb40 000c 	adc.w	r0, r0, ip
 8005a92:	f7fb f8fd 	bl	8000c90 <_test_assert>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d1af      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f7ff ff68 	bl	8005970 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4918      	ldr	r1, [pc, #96]	; (8005b04 <oslib_test_005_003_execute+0x124>)
 8005aa4:	1e82      	subs	r2, r0, #2
 8005aa6:	4250      	negs	r0, r2
 8005aa8:	4150      	adcs	r0, r2
 8005aaa:	f7fb f8f1 	bl	8000c90 <_test_assert>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d1a3      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f7ff ff5c 	bl	8005970 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8005ab8:	6870      	ldr	r0, [r6, #4]
 8005aba:	4912      	ldr	r1, [pc, #72]	; (8005b04 <oslib_test_005_003_execute+0x124>)
 8005abc:	1b43      	subs	r3, r0, r5
 8005abe:	4258      	negs	r0, r3
 8005ac0:	4158      	adcs	r0, r3
 8005ac2:	f7fb f8e5 	bl	8000c90 <_test_assert>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d197      	bne.n	80059fa <oslib_test_005_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 8005aca:	4630      	mov	r0, r6
  test_set_step(5);
 8005acc:	2305      	movs	r3, #5
 8005ace:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8005ad0:	f7ff ff4e 	bl	8005970 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8005ad4:	2306      	movs	r3, #6
 8005ad6:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8005ad8:	f7ff f992 	bl	8004e00 <chFactoryFindSemaphore.constprop.10>
    test_assert(dsp == NULL, "found");
 8005adc:	fab0 f080 	clz	r0, r0
 8005ae0:	0940      	lsrs	r0, r0, #5
 8005ae2:	4903      	ldr	r1, [pc, #12]	; (8005af0 <oslib_test_005_003_execute+0x110>)
}
 8005ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8005ae8:	f7fb b8d2 	b.w	8000c90 <_test_assert>
 8005aec:	20001774 	.word	0x20001774
 8005af0:	0800a000 	.word	0x0800a000
 8005af4:	08009fe0 	.word	0x08009fe0
 8005af8:	08009ff0 	.word	0x08009ff0
 8005afc:	08009ffc 	.word	0x08009ffc
 8005b00:	0800a008 	.word	0x0800a008
 8005b04:	0800a024 	.word	0x0800a024
	...

08005b10 <oslib_test_005_003_teardown>:
static void oslib_test_005_003_teardown(void) {
 8005b10:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8005b12:	f7ff f975 	bl	8004e00 <chFactoryFindSemaphore.constprop.10>
  if (dsp != NULL) {
 8005b16:	b140      	cbz	r0, 8005b2a <oslib_test_005_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8005b18:	6843      	ldr	r3, [r0, #4]
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	b12b      	cbz	r3, 8005b2a <oslib_test_005_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff ff26 	bl	8005970 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f9      	bne.n	8005b1e <oslib_test_005_003_teardown+0xe>
}
 8005b2a:	bd10      	pop	{r4, pc}
 8005b2c:	0000      	movs	r0, r0
	...

08005b30 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop){
 8005b30:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8005b32:	4d17      	ldr	r5, [pc, #92]	; (8005b90 <chFactoryReleaseObject+0x60>)
void chFactoryReleaseObject(registered_object_t *rop){
 8005b34:	4604      	mov	r4, r0
  F_LOCK();
 8005b36:	4628      	mov	r0, r5
 8005b38:	f7fd fdda 	bl	80036f0 <chMtxLock>
  dep->refs--;
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005b42:	b123      	cbz	r3, 8005b4e <chFactoryReleaseObject+0x1e>
  F_UNLOCK();
 8005b44:	4812      	ldr	r0, [pc, #72]	; (8005b90 <chFactoryReleaseObject+0x60>)
}
 8005b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8005b4a:	f7fe be91 	b.w	8004870 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005b4e:	f105 0110 	add.w	r1, r5, #16
 8005b52:	460a      	mov	r2, r1
 8005b54:	e002      	b.n	8005b5c <chFactoryReleaseObject+0x2c>
    if (prev->next == element) {
 8005b56:	429c      	cmp	r4, r3
 8005b58:	d00a      	beq.n	8005b70 <chFactoryReleaseObject+0x40>
 8005b5a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8005b5c:	6813      	ldr	r3, [r2, #0]
 8005b5e:	428b      	cmp	r3, r1
 8005b60:	d1f9      	bne.n	8005b56 <chFactoryReleaseObject+0x26>
 8005b62:	2320      	movs	r3, #32
 8005b64:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	696a      	ldr	r2, [r5, #20]
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	2320      	movs	r3, #32
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	696b      	ldr	r3, [r5, #20]
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	2300      	movs	r3, #0
  mp->next = php;
 8005b80:	616c      	str	r4, [r5, #20]
 8005b82:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 8005b86:	4802      	ldr	r0, [pc, #8]	; (8005b90 <chFactoryReleaseObject+0x60>)
}
 8005b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8005b8c:	f7fe be70 	b.w	8004870 <chMtxUnlock>
 8005b90:	20000e18 	.word	0x20000e18
	...

08005ba0 <oslib_test_005_001_execute>:
static void oslib_test_005_001_execute(void) {
 8005ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005ba4:	4c51      	ldr	r4, [pc, #324]	; (8005cec <oslib_test_005_001_execute+0x14c>)
 8005ba6:	2501      	movs	r5, #1
 8005ba8:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8005baa:	f7ff f8b9 	bl	8004d20 <chFactoryFindObject.constprop.14>
    test_assert(rop == NULL, "found");
 8005bae:	fab0 f080 	clz	r0, r0
 8005bb2:	0940      	lsrs	r0, r0, #5
 8005bb4:	494e      	ldr	r1, [pc, #312]	; (8005cf0 <oslib_test_005_001_execute+0x150>)
 8005bb6:	f7fb f86b 	bl	8000c90 <_test_assert>
 8005bba:	b108      	cbz	r0, 8005bc0 <oslib_test_005_001_execute+0x20>
}
 8005bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8005bc0:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005bc2:	484c      	ldr	r0, [pc, #304]	; (8005cf4 <oslib_test_005_001_execute+0x154>)
  test_set_step(2);
 8005bc4:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005bc6:	f7ff f893 	bl	8004cf0 <chFactoryRegisterObject.constprop.15>
    test_assert(rop != NULL, "cannot register");
 8005bca:	4606      	mov	r6, r0
 8005bcc:	3000      	adds	r0, #0
 8005bce:	bf18      	it	ne
 8005bd0:	2001      	movne	r0, #1
 8005bd2:	4949      	ldr	r1, [pc, #292]	; (8005cf8 <oslib_test_005_001_execute+0x158>)
 8005bd4:	f7fb f85c 	bl	8000c90 <_test_assert>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d1ef      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
  test_set_step(3);
 8005bdc:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005bde:	4847      	ldr	r0, [pc, #284]	; (8005cfc <oslib_test_005_001_execute+0x15c>)
  test_set_step(3);
 8005be0:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005be2:	f7ff f885 	bl	8004cf0 <chFactoryRegisterObject.constprop.15>
    test_assert(rop1 == NULL, "can register");
 8005be6:	fab0 f080 	clz	r0, r0
 8005bea:	0940      	lsrs	r0, r0, #5
 8005bec:	4944      	ldr	r1, [pc, #272]	; (8005d00 <oslib_test_005_001_execute+0x160>)
 8005bee:	f7fb f84f 	bl	8000c90 <_test_assert>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d1e2      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
  test_set_step(4);
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 8005bfa:	f7ff f891 	bl	8004d20 <chFactoryFindObject.constprop.14>
    test_assert(rop1 != NULL, "not found");
 8005bfe:	4607      	mov	r7, r0
 8005c00:	3000      	adds	r0, #0
 8005c02:	bf18      	it	ne
 8005c04:	2001      	movne	r0, #1
 8005c06:	493f      	ldr	r1, [pc, #252]	; (8005d04 <oslib_test_005_001_execute+0x164>)
 8005c08:	f7fb f842 	bl	8000c90 <_test_assert>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d1d5      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	493d      	ldr	r1, [pc, #244]	; (8005d08 <oslib_test_005_001_execute+0x168>)
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	f245 58aa 	movw	r8, #21930	; 0x55aa
 8005c1a:	eba0 0008 	sub.w	r0, r0, r8
 8005c1e:	fab0 f080 	clz	r0, r0
 8005c22:	0940      	lsrs	r0, r0, #5
 8005c24:	f7fb f834 	bl	8000c90 <_test_assert>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d1c7      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 8005c2c:	1bf0      	subs	r0, r6, r7
 8005c2e:	fab0 f080 	clz	r0, r0
 8005c32:	4936      	ldr	r1, [pc, #216]	; (8005d0c <oslib_test_005_001_execute+0x16c>)
 8005c34:	0940      	lsrs	r0, r0, #5
 8005c36:	f7fb f82b 	bl	8000c90 <_test_assert>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d1be      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4932      	ldr	r1, [pc, #200]	; (8005d0c <oslib_test_005_001_execute+0x16c>)
 8005c42:	f1a0 0002 	sub.w	r0, r0, #2
 8005c46:	fab0 f080 	clz	r0, r0
 8005c4a:	0940      	lsrs	r0, r0, #5
 8005c4c:	f7fb f820 	bl	8000c90 <_test_assert>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d1b3      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
 8005c54:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8005c56:	492d      	ldr	r1, [pc, #180]	; (8005d0c <oslib_test_005_001_execute+0x16c>)
 8005c58:	442b      	add	r3, r5
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	607b      	str	r3, [r7, #4]
 8005c5e:	f7fb f817 	bl	8000c90 <_test_assert>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d1aa      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4927      	ldr	r1, [pc, #156]	; (8005d08 <oslib_test_005_001_execute+0x168>)
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	eba0 0e08 	sub.w	lr, r0, r8
 8005c70:	f1de 0000 	rsbs	r0, lr, #0
 8005c74:	eb40 000e 	adc.w	r0, r0, lr
 8005c78:	f7fb f80a 	bl	8000c90 <_test_assert>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d19d      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4922      	ldr	r1, [pc, #136]	; (8005d0c <oslib_test_005_001_execute+0x16c>)
 8005c84:	f1a0 0c03 	sub.w	ip, r0, #3
 8005c88:	f1dc 0000 	rsbs	r0, ip, #0
 8005c8c:	eb40 000c 	adc.w	r0, r0, ip
 8005c90:	f7fa fffe 	bl	8000c90 <_test_assert>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d191      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f7ff ff49 	bl	8005b30 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	491b      	ldr	r1, [pc, #108]	; (8005d10 <oslib_test_005_001_execute+0x170>)
 8005ca2:	1e82      	subs	r2, r0, #2
 8005ca4:	4250      	negs	r0, r2
 8005ca6:	4150      	adcs	r0, r2
 8005ca8:	f7fa fff2 	bl	8000c90 <_test_assert>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d185      	bne.n	8005bbc <oslib_test_005_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f7ff ff3d 	bl	8005b30 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 8005cb6:	6870      	ldr	r0, [r6, #4]
 8005cb8:	4915      	ldr	r1, [pc, #84]	; (8005d10 <oslib_test_005_001_execute+0x170>)
 8005cba:	1b43      	subs	r3, r0, r5
 8005cbc:	4258      	negs	r0, r3
 8005cbe:	4158      	adcs	r0, r3
 8005cc0:	f7fa ffe6 	bl	8000c90 <_test_assert>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	f47f af79 	bne.w	8005bbc <oslib_test_005_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 8005cca:	4630      	mov	r0, r6
  test_set_step(5);
 8005ccc:	2305      	movs	r3, #5
 8005cce:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 8005cd0:	f7ff ff2e 	bl	8005b30 <chFactoryReleaseObject>
  test_set_step(6);
 8005cd4:	2306      	movs	r3, #6
 8005cd6:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8005cd8:	f7ff f822 	bl	8004d20 <chFactoryFindObject.constprop.14>
    test_assert(rop == NULL, "found");
 8005cdc:	fab0 f080 	clz	r0, r0
 8005ce0:	0940      	lsrs	r0, r0, #5
 8005ce2:	4903      	ldr	r1, [pc, #12]	; (8005cf0 <oslib_test_005_001_execute+0x150>)
}
 8005ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8005ce8:	f7fa bfd2 	b.w	8000c90 <_test_assert>
 8005cec:	20001774 	.word	0x20001774
 8005cf0:	0800a000 	.word	0x0800a000
 8005cf4:	20000c88 	.word	0x20000c88
 8005cf8:	08009f90 	.word	0x08009f90
 8005cfc:	20000c8c 	.word	0x20000c8c
 8005d00:	08009fa0 	.word	0x08009fa0
 8005d04:	08009ffc 	.word	0x08009ffc
 8005d08:	08009fb0 	.word	0x08009fb0
 8005d0c:	0800a008 	.word	0x0800a008
 8005d10:	0800a024 	.word	0x0800a024
	...

08005d20 <oslib_test_005_001_teardown>:
static void oslib_test_005_001_teardown(void) {
 8005d20:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8005d22:	f7fe fffd 	bl	8004d20 <chFactoryFindObject.constprop.14>
  if (rop != NULL) {
 8005d26:	b140      	cbz	r0, 8005d3a <oslib_test_005_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8005d28:	6843      	ldr	r3, [r0, #4]
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	b12b      	cbz	r3, 8005d3a <oslib_test_005_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff fefe 	bl	8005b30 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f9      	bne.n	8005d2e <oslib_test_005_001_teardown+0xe>
}
 8005d3a:	bd10      	pop	{r4, pc}
 8005d3c:	0000      	movs	r0, r0
	...

08005d40 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8005d44:	4c17      	ldr	r4, [pc, #92]	; (8005da4 <chHeapStatus+0x64>)
 8005d46:	2800      	cmp	r0, #0
 8005d48:	bf18      	it	ne
 8005d4a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8005d4c:	f104 070c 	add.w	r7, r4, #12
 8005d50:	4638      	mov	r0, r7
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005d52:	4689      	mov	r9, r1
 8005d54:	4690      	mov	r8, r2
  H_LOCK(heapp);
 8005d56:	f7fd fccb 	bl	80036f0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	b1f3      	cbz	r3, 8005d9c <chHeapStatus+0x5c>
  lpages = 0U;
 8005d5e:	2400      	movs	r4, #0
  tpages = 0U;
 8005d60:	4625      	mov	r5, r4
  n = 0U;
 8005d62:	4626      	mov	r6, r4
  while (H_NEXT(qp) != NULL) {
 8005d64:	e9d3 3000 	ldrd	r3, r0, [r3]
 8005d68:	4284      	cmp	r4, r0
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 8005d6a:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8005d6e:	4405      	add	r5, r0
 8005d70:	bf38      	it	cc
 8005d72:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f5      	bne.n	8005d64 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8005d78:	f1b9 0f00 	cmp.w	r9, #0
 8005d7c:	d002      	beq.n	8005d84 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8005d7e:	00ed      	lsls	r5, r5, #3
 8005d80:	f8c9 5000 	str.w	r5, [r9]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8005d84:	f1b8 0f00 	cmp.w	r8, #0
 8005d88:	d002      	beq.n	8005d90 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005d8a:	00e4      	lsls	r4, r4, #3
 8005d8c:	f8c8 4000 	str.w	r4, [r8]
  }
  H_UNLOCK(heapp);
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7fe fd6d 	bl	8004870 <chMtxUnlock>

  return n;
}
 8005d96:	4630      	mov	r0, r6
 8005d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
 8005d9c:	461c      	mov	r4, r3
  tpages = 0U;
 8005d9e:	461d      	mov	r5, r3
  n = 0U;
 8005da0:	461e      	mov	r6, r3
 8005da2:	e7e9      	b.n	8005d78 <chHeapStatus+0x38>
 8005da4:	20000f40 	.word	0x20000f40
	...

08005db0 <cmd_mem>:
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005db0:	b530      	push	{r4, r5, lr}
  if (argc > 0) {
 8005db2:	2900      	cmp	r1, #0
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005db4:	b083      	sub	sp, #12
  if (argc > 0) {
 8005db6:	dd05      	ble.n	8005dc4 <cmd_mem+0x14>
    shellUsage(chp, "mem");
 8005db8:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <cmd_mem+0x54>)
 8005dba:	4913      	ldr	r1, [pc, #76]	; (8005e08 <cmd_mem+0x58>)
 8005dbc:	f7fc f8f8 	bl	8001fb0 <chprintf>
}
 8005dc0:	b003      	add	sp, #12
 8005dc2:	bd30      	pop	{r4, r5, pc}
 8005dc4:	4604      	mov	r4, r0
  n = chHeapStatus(NULL, &total, &largest);
 8005dc6:	aa01      	add	r2, sp, #4
 8005dc8:	4669      	mov	r1, sp
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f7ff ffb8 	bl	8005d40 <chHeapStatus>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <cmd_mem+0x5c>)
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8005dd2:	490f      	ldr	r1, [pc, #60]	; (8005e10 <cmd_mem+0x60>)
 8005dd4:	e9d3 3200 	ldrd	r3, r2, [r3]
  n = chHeapStatus(NULL, &total, &largest);
 8005dd8:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f7fc f8e7 	bl	8001fb0 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8005de2:	462a      	mov	r2, r5
 8005de4:	490b      	ldr	r1, [pc, #44]	; (8005e14 <cmd_mem+0x64>)
 8005de6:	4620      	mov	r0, r4
 8005de8:	f7fc f8e2 	bl	8001fb0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 8005dec:	9a00      	ldr	r2, [sp, #0]
 8005dee:	490a      	ldr	r1, [pc, #40]	; (8005e18 <cmd_mem+0x68>)
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7fc f8dd 	bl	8001fb0 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8005df6:	4620      	mov	r0, r4
 8005df8:	9a01      	ldr	r2, [sp, #4]
 8005dfa:	4908      	ldr	r1, [pc, #32]	; (8005e1c <cmd_mem+0x6c>)
 8005dfc:	f7fc f8d8 	bl	8001fb0 <chprintf>
}
 8005e00:	b003      	add	sp, #12
 8005e02:	bd30      	pop	{r4, r5, pc}
 8005e04:	08009b18 	.word	0x08009b18
 8005e08:	08009ba0 	.word	0x08009ba0
 8005e0c:	20000f38 	.word	0x20000f38
 8005e10:	08009b1c 	.word	0x08009b1c
 8005e14:	08009b3c 	.word	0x08009b3c
 8005e18:	08009b54 	.word	0x08009b54
 8005e1c:	08009b74 	.word	0x08009b74

08005e20 <chHeapFree>:
void chHeapFree(void *p) {
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 8005e22:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005e26:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005e28:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 8005e2a:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005e2e:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8005e32:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8005e34:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 8005e38:	3504      	adds	r5, #4
  H_LOCK(heapp);
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f7fd fc58 	bl	80036f0 <chMtxLock>
  qp = &heapp->header;
 8005e40:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005e42:	42ab      	cmp	r3, r5
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	d001      	beq.n	8005e4c <chHeapFree+0x2c>
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d902      	bls.n	8005e52 <chHeapFree+0x32>
 8005e4c:	b11a      	cbz	r2, 8005e56 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005e4e:	4294      	cmp	r4, r2
 8005e50:	d301      	bcc.n	8005e56 <chHeapFree+0x36>
void chHeapFree(void *p) {
 8005e52:	4613      	mov	r3, r2
 8005e54:	e7f5      	b.n	8005e42 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005e56:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8005e5a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8005e5e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005e60:	1c4a      	adds	r2, r1, #1
 8005e62:	f856 0c08 	ldr.w	r0, [r6, #-8]
 8005e66:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 8005e6a:	4281      	cmp	r1, r0
 8005e6c:	d00a      	beq.n	8005e84 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 8005e6e:	6859      	ldr	r1, [r3, #4]
 8005e70:	1c4a      	adds	r2, r1, #1
 8005e72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005e76:	4294      	cmp	r4, r2
 8005e78:	d012      	beq.n	8005ea0 <chHeapFree+0x80>
  H_UNLOCK(heapp);
 8005e7a:	4638      	mov	r0, r7
}
 8005e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8005e80:	f7fe bcf6 	b.w	8004870 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005e84:	6849      	ldr	r1, [r1, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005e86:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
 8005e8a:	f846 0c08 	str.w	r0, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005e8e:	440a      	add	r2, r1
 8005e90:	f846 2c04 	str.w	r2, [r6, #-4]
      if ((H_LIMIT(qp) == hp)) {
 8005e94:	6859      	ldr	r1, [r3, #4]
 8005e96:	1c4a      	adds	r2, r1, #1
 8005e98:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005e9c:	4294      	cmp	r4, r2
 8005e9e:	d1ec      	bne.n	8005e7a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 8005ea0:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8005ea4:	3201      	adds	r2, #1
 8005ea6:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8005ea8:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8005eaa:	6059      	str	r1, [r3, #4]
  H_UNLOCK(heapp);
 8005eac:	4638      	mov	r0, r7
}
 8005eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8005eb2:	f7fe bcdd 	b.w	8004870 <chMtxUnlock>
 8005eb6:	bf00      	nop
	...

08005ec0 <oslib_test_004_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [4.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_004_002_execute(void) {
 8005ec0:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [4.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8005ec2:	4c14      	ldr	r4, [pc, #80]	; (8005f14 <oslib_test_004_002_execute+0x54>)
static void oslib_test_004_002_execute(void) {
 8005ec4:	b082      	sub	sp, #8
  test_set_step(1);
 8005ec6:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8005ec8:	466a      	mov	r2, sp
 8005eca:	a901      	add	r1, sp, #4
 8005ecc:	2000      	movs	r0, #0
  test_set_step(1);
 8005ece:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8005ed0:	f7ff ff36 	bl	8005d40 <chHeapStatus>
 8005ed4:	2110      	movs	r1, #16
 8005ed6:	4810      	ldr	r0, [pc, #64]	; (8005f18 <oslib_test_004_002_execute+0x58>)
 8005ed8:	f7fe fd02 	bl	80048e0 <chHeapAllocAligned.constprop.42>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 8005edc:	4606      	mov	r6, r0
 8005ede:	3000      	adds	r0, #0
 8005ee0:	bf18      	it	ne
 8005ee2:	2001      	movne	r0, #1
 8005ee4:	490d      	ldr	r1, [pc, #52]	; (8005f1c <oslib_test_004_002_execute+0x5c>)
 8005ee6:	f7fa fed3 	bl	8000c90 <_test_assert>
 8005eea:	b980      	cbnz	r0, 8005f0e <oslib_test_004_002_execute+0x4e>
 8005eec:	4605      	mov	r5, r0
    chHeapFree(p1);
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f7ff ff96 	bl	8005e20 <chHeapFree>
  }

  /* [4.2.2] Testing allocation failure.*/
  test_set_step(2);
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8005efa:	4628      	mov	r0, r5
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	f7fe fcef 	bl	80048e0 <chHeapAllocAligned.constprop.42>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 8005f02:	fab0 f080 	clz	r0, r0
 8005f06:	0940      	lsrs	r0, r0, #5
 8005f08:	4905      	ldr	r1, [pc, #20]	; (8005f20 <oslib_test_004_002_execute+0x60>)
 8005f0a:	f7fa fec1 	bl	8000c90 <_test_assert>
  }
}
 8005f0e:	b002      	add	sp, #8
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	bf00      	nop
 8005f14:	20001774 	.word	0x20001774
 8005f18:	200016d4 	.word	0x200016d4
 8005f1c:	08009f54 	.word	0x08009f54
 8005f20:	08009f68 	.word	0x08009f68
	...

08005f30 <oslib_test_004_001_execute>:
static void oslib_test_004_001_execute(void) {
 8005f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005f34:	4cbf      	ldr	r4, [pc, #764]	; (8006234 <oslib_test_004_001_execute+0x304>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005f36:	48c0      	ldr	r0, [pc, #768]	; (8006238 <oslib_test_004_001_execute+0x308>)
static void oslib_test_004_001_execute(void) {
 8005f38:	b084      	sub	sp, #16
  test_set_step(1);
 8005f3a:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005f3c:	4669      	mov	r1, sp
 8005f3e:	2200      	movs	r2, #0
  test_set_step(1);
 8005f40:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005f42:	f7ff fefd 	bl	8005d40 <chHeapStatus>
 8005f46:	f1a0 0001 	sub.w	r0, r0, #1
 8005f4a:	fab0 f080 	clz	r0, r0
 8005f4e:	49bb      	ldr	r1, [pc, #748]	; (800623c <oslib_test_004_001_execute+0x30c>)
 8005f50:	0940      	lsrs	r0, r0, #5
 8005f52:	f7fa fe9d 	bl	8000c90 <_test_assert>
 8005f56:	b110      	cbz	r0, 8005f5e <oslib_test_004_001_execute+0x2e>
}
 8005f58:	b004      	add	sp, #16
 8005f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8005f5e:	2302      	movs	r3, #2
 8005f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f64:	48b4      	ldr	r0, [pc, #720]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	f7fe fcba 	bl	80048e0 <chHeapAllocAligned.constprop.42>
    test_assert(p1 == NULL, "allocation not failed");
 8005f6c:	fab0 f080 	clz	r0, r0
 8005f70:	0940      	lsrs	r0, r0, #5
 8005f72:	49b3      	ldr	r1, [pc, #716]	; (8006240 <oslib_test_004_001_execute+0x310>)
 8005f74:	f7fa fe8c 	bl	8000c90 <_test_assert>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d1ed      	bne.n	8005f58 <oslib_test_004_001_execute+0x28>
  test_set_step(3);
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	2110      	movs	r1, #16
 8005f80:	48ad      	ldr	r0, [pc, #692]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	f7fe fcac 	bl	80048e0 <chHeapAllocAligned.constprop.42>
    test_assert(p1 != NULL, "allocation failed");
 8005f88:	4605      	mov	r5, r0
 8005f8a:	3000      	adds	r0, #0
 8005f8c:	bf18      	it	ne
 8005f8e:	2001      	movne	r0, #1
 8005f90:	49ac      	ldr	r1, [pc, #688]	; (8006244 <oslib_test_004_001_execute+0x314>)
 8005f92:	f7fa fe7d 	bl	8000c90 <_test_assert>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d1de      	bne.n	8005f58 <oslib_test_004_001_execute+0x28>
    chHeapFree(p1);
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f7ff ff40 	bl	8005e20 <chHeapFree>
  test_set_step(4);
 8005fa0:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005fa2:	a903      	add	r1, sp, #12
 8005fa4:	aa02      	add	r2, sp, #8
 8005fa6:	48a4      	ldr	r0, [pc, #656]	; (8006238 <oslib_test_004_001_execute+0x308>)
  test_set_step(4);
 8005fa8:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005faa:	f7ff fec9 	bl	8005d40 <chHeapStatus>
 8005fae:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8005fb0:	f1a0 0001 	sub.w	r0, r0, #1
 8005fb4:	fab0 f080 	clz	r0, r0
 8005fb8:	0940      	lsrs	r0, r0, #5
 8005fba:	49a3      	ldr	r1, [pc, #652]	; (8006248 <oslib_test_004_001_execute+0x318>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005fbc:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 8005fbe:	f7fa fe67 	bl	8000c90 <_test_assert>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d1c8      	bne.n	8005f58 <oslib_test_004_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8005fc6:	9803      	ldr	r0, [sp, #12]
 8005fc8:	49a0      	ldr	r1, [pc, #640]	; (800624c <oslib_test_004_001_execute+0x31c>)
 8005fca:	280f      	cmp	r0, #15
 8005fcc:	bf94      	ite	ls
 8005fce:	2000      	movls	r0, #0
 8005fd0:	2001      	movhi	r0, #1
 8005fd2:	f7fa fe5d 	bl	8000c90 <_test_assert>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d1be      	bne.n	8005f58 <oslib_test_004_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 8005fda:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8005fde:	1ac0      	subs	r0, r0, r3
 8005fe0:	fab0 f080 	clz	r0, r0
 8005fe4:	4999      	ldr	r1, [pc, #612]	; (800624c <oslib_test_004_001_execute+0x31c>)
 8005fe6:	0940      	lsrs	r0, r0, #5
 8005fe8:	f7fa fe52 	bl	8000c90 <_test_assert>
 8005fec:	4605      	mov	r5, r0
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d1b2      	bne.n	8005f58 <oslib_test_004_001_execute+0x28>
  test_set_step(5);
 8005ff2:	2305      	movs	r3, #5
 8005ff4:	2110      	movs	r1, #16
 8005ff6:	4890      	ldr	r0, [pc, #576]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	f7fe fc71 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 8005ffe:	2110      	movs	r1, #16
 8006000:	4680      	mov	r8, r0
 8006002:	488d      	ldr	r0, [pc, #564]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8006004:	f7fe fc6c 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 8006008:	2110      	movs	r1, #16
 800600a:	4607      	mov	r7, r0
 800600c:	488a      	ldr	r0, [pc, #552]	; (8006238 <oslib_test_004_001_execute+0x308>)
 800600e:	f7fe fc67 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 8006012:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 8006014:	4640      	mov	r0, r8
 8006016:	f7ff ff03 	bl	8005e20 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800601a:	4638      	mov	r0, r7
 800601c:	f7ff ff00 	bl	8005e20 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff fefd 	bl	8005e20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006026:	462a      	mov	r2, r5
 8006028:	a901      	add	r1, sp, #4
 800602a:	4883      	ldr	r0, [pc, #524]	; (8006238 <oslib_test_004_001_execute+0x308>)
 800602c:	f7ff fe88 	bl	8005d40 <chHeapStatus>
 8006030:	f1a0 0001 	sub.w	r0, r0, #1
 8006034:	fab0 f080 	clz	r0, r0
 8006038:	4980      	ldr	r1, [pc, #512]	; (800623c <oslib_test_004_001_execute+0x30c>)
 800603a:	0940      	lsrs	r0, r0, #5
 800603c:	f7fa fe28 	bl	8000c90 <_test_assert>
 8006040:	4605      	mov	r5, r0
 8006042:	2800      	cmp	r0, #0
 8006044:	d188      	bne.n	8005f58 <oslib_test_004_001_execute+0x28>
  test_set_step(6);
 8006046:	2306      	movs	r3, #6
 8006048:	2110      	movs	r1, #16
 800604a:	487b      	ldr	r0, [pc, #492]	; (8006238 <oslib_test_004_001_execute+0x308>)
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	f7fe fc47 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 8006052:	2110      	movs	r1, #16
 8006054:	4606      	mov	r6, r0
 8006056:	4878      	ldr	r0, [pc, #480]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8006058:	f7fe fc42 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 800605c:	2110      	movs	r1, #16
 800605e:	4607      	mov	r7, r0
 8006060:	4875      	ldr	r0, [pc, #468]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8006062:	f7fe fc3d 	bl	80048e0 <chHeapAllocAligned.constprop.42>
    chHeapFree(p3);                                 /* Merges forward.*/
 8006066:	f7ff fedb 	bl	8005e20 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800606a:	4638      	mov	r0, r7
 800606c:	f7ff fed8 	bl	8005e20 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8006070:	4630      	mov	r0, r6
 8006072:	f7ff fed5 	bl	8005e20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006076:	462a      	mov	r2, r5
 8006078:	a901      	add	r1, sp, #4
 800607a:	486f      	ldr	r0, [pc, #444]	; (8006238 <oslib_test_004_001_execute+0x308>)
 800607c:	f7ff fe60 	bl	8005d40 <chHeapStatus>
 8006080:	1e43      	subs	r3, r0, #1
 8006082:	4258      	negs	r0, r3
 8006084:	496d      	ldr	r1, [pc, #436]	; (800623c <oslib_test_004_001_execute+0x30c>)
 8006086:	4158      	adcs	r0, r3
 8006088:	f7fa fe02 	bl	8000c90 <_test_assert>
 800608c:	4605      	mov	r5, r0
 800608e:	2800      	cmp	r0, #0
 8006090:	f47f af62 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
  test_set_step(7);
 8006094:	2307      	movs	r3, #7
 8006096:	2111      	movs	r1, #17
 8006098:	4867      	ldr	r0, [pc, #412]	; (8006238 <oslib_test_004_001_execute+0x308>)
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	f7fe fc20 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 80060a0:	2110      	movs	r1, #16
 80060a2:	4606      	mov	r6, r0
 80060a4:	4864      	ldr	r0, [pc, #400]	; (8006238 <oslib_test_004_001_execute+0x308>)
 80060a6:	f7fe fc1b 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 80060aa:	4607      	mov	r7, r0
    chHeapFree(p1);
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff feb7 	bl	8005e20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80060b2:	462a      	mov	r2, r5
 80060b4:	a901      	add	r1, sp, #4
 80060b6:	4860      	ldr	r0, [pc, #384]	; (8006238 <oslib_test_004_001_execute+0x308>)
 80060b8:	f7ff fe42 	bl	8005d40 <chHeapStatus>
 80060bc:	f1a0 0802 	sub.w	r8, r0, #2
 80060c0:	f1d8 0000 	rsbs	r0, r8, #0
 80060c4:	4962      	ldr	r1, [pc, #392]	; (8006250 <oslib_test_004_001_execute+0x320>)
 80060c6:	eb40 0008 	adc.w	r0, r0, r8
 80060ca:	f7fa fde1 	bl	8000c90 <_test_assert>
 80060ce:	4605      	mov	r5, r0
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f47f af41 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
 80060d6:	2110      	movs	r1, #16
 80060d8:	4857      	ldr	r0, [pc, #348]	; (8006238 <oslib_test_004_001_execute+0x308>)
 80060da:	f7fe fc01 	bl	80048e0 <chHeapAllocAligned.constprop.42>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80060de:	462a      	mov	r2, r5
 80060e0:	4606      	mov	r6, r0
 80060e2:	a901      	add	r1, sp, #4
 80060e4:	4854      	ldr	r0, [pc, #336]	; (8006238 <oslib_test_004_001_execute+0x308>)
 80060e6:	f7ff fe2b 	bl	8005d40 <chHeapStatus>
 80060ea:	2801      	cmp	r0, #1
 80060ec:	f000 809f 	beq.w	800622e <oslib_test_004_001_execute+0x2fe>
 80060f0:	2200      	movs	r2, #0
 80060f2:	a901      	add	r1, sp, #4
 80060f4:	4850      	ldr	r0, [pc, #320]	; (8006238 <oslib_test_004_001_execute+0x308>)
 80060f6:	f7ff fe23 	bl	8005d40 <chHeapStatus>
 80060fa:	f1a0 0e02 	sub.w	lr, r0, #2
 80060fe:	f1de 0000 	rsbs	r0, lr, #0
 8006102:	eb40 000e 	adc.w	r0, r0, lr
 8006106:	494d      	ldr	r1, [pc, #308]	; (800623c <oslib_test_004_001_execute+0x30c>)
 8006108:	f7fa fdc2 	bl	8000c90 <_test_assert>
 800610c:	4605      	mov	r5, r0
 800610e:	2800      	cmp	r0, #0
 8006110:	f47f af22 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
    chHeapFree(p2);
 8006114:	4638      	mov	r0, r7
 8006116:	f7ff fe83 	bl	8005e20 <chHeapFree>
    chHeapFree(p1);
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff fe80 	bl	8005e20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006120:	462a      	mov	r2, r5
 8006122:	a901      	add	r1, sp, #4
 8006124:	4844      	ldr	r0, [pc, #272]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8006126:	f7ff fe0b 	bl	8005d40 <chHeapStatus>
 800612a:	f100 3cff 	add.w	ip, r0, #4294967295
 800612e:	f1dc 0000 	rsbs	r0, ip, #0
 8006132:	4942      	ldr	r1, [pc, #264]	; (800623c <oslib_test_004_001_execute+0x30c>)
 8006134:	eb40 000c 	adc.w	r0, r0, ip
 8006138:	f7fa fdaa 	bl	8000c90 <_test_assert>
 800613c:	4605      	mov	r5, r0
 800613e:	2800      	cmp	r0, #0
 8006140:	f47f af0a 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
  test_set_step(8);
 8006144:	2308      	movs	r3, #8
 8006146:	2110      	movs	r1, #16
 8006148:	483b      	ldr	r0, [pc, #236]	; (8006238 <oslib_test_004_001_execute+0x308>)
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	f7fe fbc8 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 8006150:	2110      	movs	r1, #16
 8006152:	4607      	mov	r7, r0
 8006154:	4838      	ldr	r0, [pc, #224]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8006156:	f7fe fbc3 	bl	80048e0 <chHeapAllocAligned.constprop.42>
 800615a:	4606      	mov	r6, r0
    chHeapFree(p1);
 800615c:	4638      	mov	r0, r7
 800615e:	f7ff fe5f 	bl	8005e20 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006162:	462a      	mov	r2, r5
 8006164:	a901      	add	r1, sp, #4
 8006166:	4834      	ldr	r0, [pc, #208]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8006168:	f7ff fdea 	bl	8005d40 <chHeapStatus>
 800616c:	1e87      	subs	r7, r0, #2
 800616e:	4278      	negs	r0, r7
 8006170:	4937      	ldr	r1, [pc, #220]	; (8006250 <oslib_test_004_001_execute+0x320>)
 8006172:	4178      	adcs	r0, r7
 8006174:	f7fa fd8c 	bl	8000c90 <_test_assert>
 8006178:	4605      	mov	r5, r0
 800617a:	2800      	cmp	r0, #0
 800617c:	f47f aeec 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
 8006180:	2120      	movs	r1, #32
 8006182:	482d      	ldr	r0, [pc, #180]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8006184:	f7fe fbac 	bl	80048e0 <chHeapAllocAligned.constprop.42>
    chHeapFree(p1);
 8006188:	f7ff fe4a 	bl	8005e20 <chHeapFree>
    chHeapFree(p2);
 800618c:	4630      	mov	r0, r6
 800618e:	f7ff fe47 	bl	8005e20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006192:	462a      	mov	r2, r5
 8006194:	a901      	add	r1, sp, #4
 8006196:	4828      	ldr	r0, [pc, #160]	; (8006238 <oslib_test_004_001_execute+0x308>)
 8006198:	f7ff fdd2 	bl	8005d40 <chHeapStatus>
 800619c:	1e45      	subs	r5, r0, #1
 800619e:	4268      	negs	r0, r5
 80061a0:	4926      	ldr	r1, [pc, #152]	; (800623c <oslib_test_004_001_execute+0x30c>)
 80061a2:	4168      	adcs	r0, r5
 80061a4:	f7fa fd74 	bl	8000c90 <_test_assert>
 80061a8:	4602      	mov	r2, r0
 80061aa:	2800      	cmp	r0, #0
 80061ac:	f47f aed4 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
  test_set_step(9);
 80061b0:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 80061b2:	a901      	add	r1, sp, #4
 80061b4:	4820      	ldr	r0, [pc, #128]	; (8006238 <oslib_test_004_001_execute+0x308>)
  test_set_step(9);
 80061b6:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 80061b8:	f7ff fdc2 	bl	8005d40 <chHeapStatus>
 80061bc:	9901      	ldr	r1, [sp, #4]
 80061be:	481e      	ldr	r0, [pc, #120]	; (8006238 <oslib_test_004_001_execute+0x308>)
 80061c0:	f7fe fb8e 	bl	80048e0 <chHeapAllocAligned.constprop.42>
    test_assert(p1 != NULL, "allocation failed");
 80061c4:	4606      	mov	r6, r0
 80061c6:	3000      	adds	r0, #0
 80061c8:	491e      	ldr	r1, [pc, #120]	; (8006244 <oslib_test_004_001_execute+0x314>)
 80061ca:	bf18      	it	ne
 80061cc:	2001      	movne	r0, #1
 80061ce:	f7fa fd5f 	bl	8000c90 <_test_assert>
 80061d2:	4602      	mov	r2, r0
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f47f aebf 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 80061da:	4601      	mov	r1, r0
 80061dc:	4816      	ldr	r0, [pc, #88]	; (8006238 <oslib_test_004_001_execute+0x308>)
 80061de:	f7ff fdaf 	bl	8005d40 <chHeapStatus>
 80061e2:	fab0 f080 	clz	r0, r0
 80061e6:	0940      	lsrs	r0, r0, #5
 80061e8:	491a      	ldr	r1, [pc, #104]	; (8006254 <oslib_test_004_001_execute+0x324>)
 80061ea:	f7fa fd51 	bl	8000c90 <_test_assert>
 80061ee:	4605      	mov	r5, r0
 80061f0:	2800      	cmp	r0, #0
 80061f2:	f47f aeb1 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
    chHeapFree(p1);
 80061f6:	4630      	mov	r0, r6
 80061f8:	f7ff fe12 	bl	8005e20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80061fc:	462a      	mov	r2, r5
 80061fe:	a901      	add	r1, sp, #4
  test_set_step(10);
 8006200:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006202:	480d      	ldr	r0, [pc, #52]	; (8006238 <oslib_test_004_001_execute+0x308>)
  test_set_step(10);
 8006204:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006206:	f7ff fd9b 	bl	8005d40 <chHeapStatus>
 800620a:	1e42      	subs	r2, r0, #1
 800620c:	4250      	negs	r0, r2
 800620e:	4150      	adcs	r0, r2
 8006210:	490a      	ldr	r1, [pc, #40]	; (800623c <oslib_test_004_001_execute+0x30c>)
 8006212:	f7fa fd3d 	bl	8000c90 <_test_assert>
 8006216:	2800      	cmp	r0, #0
 8006218:	f47f ae9e 	bne.w	8005f58 <oslib_test_004_001_execute+0x28>
    test_assert(n == sz, "size changed");
 800621c:	e9dd 3000 	ldrd	r3, r0, [sp]
 8006220:	1ac3      	subs	r3, r0, r3
 8006222:	4258      	negs	r0, r3
 8006224:	490c      	ldr	r1, [pc, #48]	; (8006258 <oslib_test_004_001_execute+0x328>)
 8006226:	4158      	adcs	r0, r3
 8006228:	f7fa fd32 	bl	8000c90 <_test_assert>
 800622c:	e694      	b.n	8005f58 <oslib_test_004_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800622e:	2001      	movs	r0, #1
 8006230:	e769      	b.n	8006106 <oslib_test_004_001_execute+0x1d6>
 8006232:	bf00      	nop
 8006234:	20001774 	.word	0x20001774
 8006238:	200016d4 	.word	0x200016d4
 800623c:	08009ee8 	.word	0x08009ee8
 8006240:	08009f68 	.word	0x08009f68
 8006244:	08009f54 	.word	0x08009f54
 8006248:	08009ef8 	.word	0x08009ef8
 800624c:	08009f0c 	.word	0x08009f0c
 8006250:	08009f24 	.word	0x08009f24
 8006254:	08009d48 	.word	0x08009d48
 8006258:	08009f34 	.word	0x08009f34
 800625c:	00000000 	.word	0x00000000

08006260 <dyn_release_object_heap.part.3>:
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006260:	460a      	mov	r2, r1
 8006262:	e002      	b.n	800626a <dyn_release_object_heap.part.3+0xa>
    if (prev->next == element) {
 8006264:	4298      	cmp	r0, r3
 8006266:	d006      	beq.n	8006276 <dyn_release_object_heap.part.3+0x16>
 8006268:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	428b      	cmp	r3, r1
 800626e:	d1f9      	bne.n	8006264 <dyn_release_object_heap.part.3+0x4>
  return NULL;
 8006270:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006272:	f7ff bdd5 	b.w	8005e20 <chHeapFree>
      prev->next = element->next;
 8006276:	6803      	ldr	r3, [r0, #0]
 8006278:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800627a:	f7ff bdd1 	b.w	8005e20 <chHeapFree>
 800627e:	bf00      	nop

08006280 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8006280:	b510      	push	{r4, lr}
 8006282:	4604      	mov	r4, r0

  F_LOCK();
 8006284:	4807      	ldr	r0, [pc, #28]	; (80062a4 <chFactoryReleasePipe+0x24>)
 8006286:	f7fd fa33 	bl	80036f0 <chMtxLock>
  dep->refs--;
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	3b01      	subs	r3, #1
 800628e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006290:	b91b      	cbnz	r3, 800629a <chFactoryReleasePipe+0x1a>
 8006292:	4620      	mov	r0, r4
 8006294:	4904      	ldr	r1, [pc, #16]	; (80062a8 <chFactoryReleasePipe+0x28>)
 8006296:	f7ff ffe3 	bl	8006260 <dyn_release_object_heap.part.3>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
 800629a:	4802      	ldr	r0, [pc, #8]	; (80062a4 <chFactoryReleasePipe+0x24>)
}
 800629c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80062a0:	f7fe bae6 	b.w	8004870 <chMtxUnlock>
 80062a4:	20000e18 	.word	0x20000e18
 80062a8:	20000e5c 	.word	0x20000e5c
 80062ac:	00000000 	.word	0x00000000

080062b0 <oslib_test_005_006_execute>:
      chFactoryReleasePipe(dpp);
    }
  }
}

static void oslib_test_005_006_execute(void) {
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [5.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 80062b2:	4c42      	ldr	r4, [pc, #264]	; (80063bc <oslib_test_005_006_execute+0x10c>)
 80062b4:	2501      	movs	r5, #1
 80062b6:	6025      	str	r5, [r4, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 80062b8:	f7fe fea2 	bl	8005000 <chFactoryFindPipe.constprop.4>
    test_assert(dpp == NULL, "found");
 80062bc:	fab0 f080 	clz	r0, r0
 80062c0:	0940      	lsrs	r0, r0, #5
 80062c2:	493f      	ldr	r1, [pc, #252]	; (80063c0 <oslib_test_005_006_execute+0x110>)
 80062c4:	f7fa fce4 	bl	8000c90 <_test_assert>
 80062c8:	b100      	cbz	r0, 80062cc <oslib_test_005_006_execute+0x1c>
  test_set_step(6);
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
}
 80062ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80062cc:	2302      	movs	r3, #2
 80062ce:	6023      	str	r3, [r4, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 80062d0:	f7fe fe5e 	bl	8004f90 <chFactoryCreatePipe.constprop.5>
    test_assert(dpp != NULL, "cannot create");
 80062d4:	4606      	mov	r6, r0
 80062d6:	3000      	adds	r0, #0
 80062d8:	bf18      	it	ne
 80062da:	2001      	movne	r0, #1
 80062dc:	4939      	ldr	r1, [pc, #228]	; (80063c4 <oslib_test_005_006_execute+0x114>)
 80062de:	f7fa fcd7 	bl	8000c90 <_test_assert>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d1f1      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
  test_set_step(3);
 80062e6:	2303      	movs	r3, #3
 80062e8:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 80062ea:	f7fe fe51 	bl	8004f90 <chFactoryCreatePipe.constprop.5>
    test_assert(dpp1 == NULL, "can create");
 80062ee:	fab0 f080 	clz	r0, r0
 80062f2:	0940      	lsrs	r0, r0, #5
 80062f4:	4934      	ldr	r1, [pc, #208]	; (80063c8 <oslib_test_005_006_execute+0x118>)
 80062f6:	f7fa fccb 	bl	8000c90 <_test_assert>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d1e5      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
  test_set_step(4);
 80062fe:	2304      	movs	r3, #4
 8006300:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 8006302:	f7fe fe7d 	bl	8005000 <chFactoryFindPipe.constprop.4>
    test_assert(dpp1 != NULL, "not found");
 8006306:	4607      	mov	r7, r0
 8006308:	3000      	adds	r0, #0
 800630a:	bf18      	it	ne
 800630c:	2001      	movne	r0, #1
 800630e:	492f      	ldr	r1, [pc, #188]	; (80063cc <oslib_test_005_006_execute+0x11c>)
 8006310:	f7fa fcbe 	bl	8000c90 <_test_assert>
 8006314:	2800      	cmp	r0, #0
 8006316:	d1d8      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
    test_assert(dpp == dpp1, "object reference mismatch");
 8006318:	1bf0      	subs	r0, r6, r7
 800631a:	fab0 f080 	clz	r0, r0
 800631e:	492c      	ldr	r1, [pc, #176]	; (80063d0 <oslib_test_005_006_execute+0x120>)
 8006320:	0940      	lsrs	r0, r0, #5
 8006322:	f7fa fcb5 	bl	8000c90 <_test_assert>
 8006326:	2800      	cmp	r0, #0
 8006328:	d1cf      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4928      	ldr	r1, [pc, #160]	; (80063d0 <oslib_test_005_006_execute+0x120>)
 800632e:	f1a0 0002 	sub.w	r0, r0, #2
 8006332:	fab0 f080 	clz	r0, r0
 8006336:	0940      	lsrs	r0, r0, #5
 8006338:	f7fa fcaa 	bl	8000c90 <_test_assert>
 800633c:	2800      	cmp	r0, #0
 800633e:	d1c4      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
 8006340:	687b      	ldr	r3, [r7, #4]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 8006342:	4923      	ldr	r1, [pc, #140]	; (80063d0 <oslib_test_005_006_execute+0x120>)
 8006344:	442b      	add	r3, r5
 8006346:	4628      	mov	r0, r5
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	f7fa fca1 	bl	8000c90 <_test_assert>
 800634e:	2800      	cmp	r0, #0
 8006350:	d1bb      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	491e      	ldr	r1, [pc, #120]	; (80063d0 <oslib_test_005_006_execute+0x120>)
 8006356:	f1a0 0c03 	sub.w	ip, r0, #3
 800635a:	f1dc 0000 	rsbs	r0, ip, #0
 800635e:	eb40 000c 	adc.w	r0, r0, ip
 8006362:	f7fa fc95 	bl	8000c90 <_test_assert>
 8006366:	2800      	cmp	r0, #0
 8006368:	d1af      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
    chFactoryReleasePipe(dpp2);
 800636a:	4638      	mov	r0, r7
 800636c:	f7ff ff88 	bl	8006280 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4918      	ldr	r1, [pc, #96]	; (80063d4 <oslib_test_005_006_execute+0x124>)
 8006374:	1e82      	subs	r2, r0, #2
 8006376:	4250      	negs	r0, r2
 8006378:	4150      	adcs	r0, r2
 800637a:	f7fa fc89 	bl	8000c90 <_test_assert>
 800637e:	2800      	cmp	r0, #0
 8006380:	d1a3      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
    chFactoryReleasePipe(dpp1);
 8006382:	4638      	mov	r0, r7
 8006384:	f7ff ff7c 	bl	8006280 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 8006388:	6870      	ldr	r0, [r6, #4]
 800638a:	4912      	ldr	r1, [pc, #72]	; (80063d4 <oslib_test_005_006_execute+0x124>)
 800638c:	1b43      	subs	r3, r0, r5
 800638e:	4258      	negs	r0, r3
 8006390:	4158      	adcs	r0, r3
 8006392:	f7fa fc7d 	bl	8000c90 <_test_assert>
 8006396:	2800      	cmp	r0, #0
 8006398:	d197      	bne.n	80062ca <oslib_test_005_006_execute+0x1a>
    chFactoryReleasePipe(dpp);
 800639a:	4630      	mov	r0, r6
  test_set_step(5);
 800639c:	2305      	movs	r3, #5
 800639e:	6023      	str	r3, [r4, #0]
    chFactoryReleasePipe(dpp);
 80063a0:	f7ff ff6e 	bl	8006280 <chFactoryReleasePipe>
  test_set_step(6);
 80063a4:	2306      	movs	r3, #6
 80063a6:	6023      	str	r3, [r4, #0]
    dpp = chFactoryFindPipe("mypipe");
 80063a8:	f7fe fe2a 	bl	8005000 <chFactoryFindPipe.constprop.4>
    test_assert(dpp == NULL, "found");
 80063ac:	fab0 f080 	clz	r0, r0
 80063b0:	0940      	lsrs	r0, r0, #5
 80063b2:	4903      	ldr	r1, [pc, #12]	; (80063c0 <oslib_test_005_006_execute+0x110>)
}
 80063b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 80063b8:	f7fa bc6a 	b.w	8000c90 <_test_assert>
 80063bc:	20001774 	.word	0x20001774
 80063c0:	0800a000 	.word	0x0800a000
 80063c4:	08009fe0 	.word	0x08009fe0
 80063c8:	08009ff0 	.word	0x08009ff0
 80063cc:	08009ffc 	.word	0x08009ffc
 80063d0:	0800a008 	.word	0x0800a008
 80063d4:	0800a024 	.word	0x0800a024
	...

080063e0 <oslib_test_005_006_teardown>:
static void oslib_test_005_006_teardown(void) {
 80063e0:	b510      	push	{r4, lr}
  dpp = chFactoryFindPipe("mypipe");
 80063e2:	f7fe fe0d 	bl	8005000 <chFactoryFindPipe.constprop.4>
  if (dpp != NULL) {
 80063e6:	b140      	cbz	r0, 80063fa <oslib_test_005_006_teardown+0x1a>
    while (dpp->element.refs > 0U) {
 80063e8:	6843      	ldr	r3, [r0, #4]
 80063ea:	4604      	mov	r4, r0
 80063ec:	b12b      	cbz	r3, 80063fa <oslib_test_005_006_teardown+0x1a>
      chFactoryReleasePipe(dpp);
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff ff46 	bl	8006280 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f9      	bne.n	80063ee <oslib_test_005_006_teardown+0xe>
}
 80063fa:	bd10      	pop	{r4, pc}
 80063fc:	0000      	movs	r0, r0
	...

08006400 <chFactoryReleaseObjectsFIFO>:
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8006400:	b510      	push	{r4, lr}
 8006402:	4604      	mov	r4, r0
  F_LOCK();
 8006404:	4807      	ldr	r0, [pc, #28]	; (8006424 <chFactoryReleaseObjectsFIFO+0x24>)
 8006406:	f7fd f973 	bl	80036f0 <chMtxLock>
  dep->refs--;
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	3b01      	subs	r3, #1
 800640e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006410:	b91b      	cbnz	r3, 800641a <chFactoryReleaseObjectsFIFO+0x1a>
 8006412:	4620      	mov	r0, r4
 8006414:	4904      	ldr	r1, [pc, #16]	; (8006428 <chFactoryReleaseObjectsFIFO+0x28>)
 8006416:	f7ff ff23 	bl	8006260 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 800641a:	4802      	ldr	r0, [pc, #8]	; (8006424 <chFactoryReleaseObjectsFIFO+0x24>)
}
 800641c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8006420:	f7fe ba26 	b.w	8004870 <chMtxUnlock>
 8006424:	20000e18 	.word	0x20000e18
 8006428:	20000e58 	.word	0x20000e58
 800642c:	00000000 	.word	0x00000000

08006430 <oslib_test_005_005_execute>:
static void oslib_test_005_005_execute(void) {
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006432:	4c42      	ldr	r4, [pc, #264]	; (800653c <oslib_test_005_005_execute+0x10c>)
 8006434:	2501      	movs	r5, #1
 8006436:	6025      	str	r5, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8006438:	f7fe fd92 	bl	8004f60 <chFactoryFindObjectsFIFO.constprop.6>
    test_assert(dofp == NULL, "found");
 800643c:	fab0 f080 	clz	r0, r0
 8006440:	0940      	lsrs	r0, r0, #5
 8006442:	493f      	ldr	r1, [pc, #252]	; (8006540 <oslib_test_005_005_execute+0x110>)
 8006444:	f7fa fc24 	bl	8000c90 <_test_assert>
 8006448:	b100      	cbz	r0, 800644c <oslib_test_005_005_execute+0x1c>
}
 800644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800644c:	2302      	movs	r3, #2
 800644e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8006450:	f7fe fd36 	bl	8004ec0 <chFactoryCreateObjectsFIFO.constprop.7>
    test_assert(dofp != NULL, "cannot create");
 8006454:	4606      	mov	r6, r0
 8006456:	3000      	adds	r0, #0
 8006458:	bf18      	it	ne
 800645a:	2001      	movne	r0, #1
 800645c:	4939      	ldr	r1, [pc, #228]	; (8006544 <oslib_test_005_005_execute+0x114>)
 800645e:	f7fa fc17 	bl	8000c90 <_test_assert>
 8006462:	2800      	cmp	r0, #0
 8006464:	d1f1      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
  test_set_step(3);
 8006466:	2303      	movs	r3, #3
 8006468:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800646a:	f7fe fd29 	bl	8004ec0 <chFactoryCreateObjectsFIFO.constprop.7>
    test_assert(dofp1 == NULL, "can create");
 800646e:	fab0 f080 	clz	r0, r0
 8006472:	0940      	lsrs	r0, r0, #5
 8006474:	4934      	ldr	r1, [pc, #208]	; (8006548 <oslib_test_005_005_execute+0x118>)
 8006476:	f7fa fc0b 	bl	8000c90 <_test_assert>
 800647a:	2800      	cmp	r0, #0
 800647c:	d1e5      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
  test_set_step(4);
 800647e:	2304      	movs	r3, #4
 8006480:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8006482:	f7fe fd6d 	bl	8004f60 <chFactoryFindObjectsFIFO.constprop.6>
    test_assert(dofp1 != NULL, "not found");
 8006486:	4607      	mov	r7, r0
 8006488:	3000      	adds	r0, #0
 800648a:	bf18      	it	ne
 800648c:	2001      	movne	r0, #1
 800648e:	492f      	ldr	r1, [pc, #188]	; (800654c <oslib_test_005_005_execute+0x11c>)
 8006490:	f7fa fbfe 	bl	8000c90 <_test_assert>
 8006494:	2800      	cmp	r0, #0
 8006496:	d1d8      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 8006498:	1bf0      	subs	r0, r6, r7
 800649a:	fab0 f080 	clz	r0, r0
 800649e:	492c      	ldr	r1, [pc, #176]	; (8006550 <oslib_test_005_005_execute+0x120>)
 80064a0:	0940      	lsrs	r0, r0, #5
 80064a2:	f7fa fbf5 	bl	8000c90 <_test_assert>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d1cf      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4928      	ldr	r1, [pc, #160]	; (8006550 <oslib_test_005_005_execute+0x120>)
 80064ae:	f1a0 0002 	sub.w	r0, r0, #2
 80064b2:	fab0 f080 	clz	r0, r0
 80064b6:	0940      	lsrs	r0, r0, #5
 80064b8:	f7fa fbea 	bl	8000c90 <_test_assert>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d1c4      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
 80064c0:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 80064c2:	4923      	ldr	r1, [pc, #140]	; (8006550 <oslib_test_005_005_execute+0x120>)
 80064c4:	442b      	add	r3, r5
 80064c6:	4628      	mov	r0, r5
 80064c8:	607b      	str	r3, [r7, #4]
 80064ca:	f7fa fbe1 	bl	8000c90 <_test_assert>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d1bb      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	491e      	ldr	r1, [pc, #120]	; (8006550 <oslib_test_005_005_execute+0x120>)
 80064d6:	f1a0 0c03 	sub.w	ip, r0, #3
 80064da:	f1dc 0000 	rsbs	r0, ip, #0
 80064de:	eb40 000c 	adc.w	r0, r0, ip
 80064e2:	f7fa fbd5 	bl	8000c90 <_test_assert>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d1af      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 80064ea:	4638      	mov	r0, r7
 80064ec:	f7ff ff88 	bl	8006400 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4918      	ldr	r1, [pc, #96]	; (8006554 <oslib_test_005_005_execute+0x124>)
 80064f4:	1e82      	subs	r2, r0, #2
 80064f6:	4250      	negs	r0, r2
 80064f8:	4150      	adcs	r0, r2
 80064fa:	f7fa fbc9 	bl	8000c90 <_test_assert>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d1a3      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 8006502:	4638      	mov	r0, r7
 8006504:	f7ff ff7c 	bl	8006400 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 8006508:	6870      	ldr	r0, [r6, #4]
 800650a:	4912      	ldr	r1, [pc, #72]	; (8006554 <oslib_test_005_005_execute+0x124>)
 800650c:	1b43      	subs	r3, r0, r5
 800650e:	4258      	negs	r0, r3
 8006510:	4158      	adcs	r0, r3
 8006512:	f7fa fbbd 	bl	8000c90 <_test_assert>
 8006516:	2800      	cmp	r0, #0
 8006518:	d197      	bne.n	800644a <oslib_test_005_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp);
 800651a:	4630      	mov	r0, r6
  test_set_step(5);
 800651c:	2305      	movs	r3, #5
 800651e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 8006520:	f7ff ff6e 	bl	8006400 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 8006524:	2306      	movs	r3, #6
 8006526:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8006528:	f7fe fd1a 	bl	8004f60 <chFactoryFindObjectsFIFO.constprop.6>
    test_assert(dofp == NULL, "found");
 800652c:	fab0 f080 	clz	r0, r0
 8006530:	0940      	lsrs	r0, r0, #5
 8006532:	4903      	ldr	r1, [pc, #12]	; (8006540 <oslib_test_005_005_execute+0x110>)
}
 8006534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8006538:	f7fa bbaa 	b.w	8000c90 <_test_assert>
 800653c:	20001774 	.word	0x20001774
 8006540:	0800a000 	.word	0x0800a000
 8006544:	08009fe0 	.word	0x08009fe0
 8006548:	08009ff0 	.word	0x08009ff0
 800654c:	08009ffc 	.word	0x08009ffc
 8006550:	0800a008 	.word	0x0800a008
 8006554:	0800a024 	.word	0x0800a024
	...

08006560 <oslib_test_005_005_teardown>:
static void oslib_test_005_005_teardown(void) {
 8006560:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8006562:	f7fe fcfd 	bl	8004f60 <chFactoryFindObjectsFIFO.constprop.6>
  if (dofp != NULL) {
 8006566:	b140      	cbz	r0, 800657a <oslib_test_005_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8006568:	6843      	ldr	r3, [r0, #4]
 800656a:	4604      	mov	r4, r0
 800656c:	b12b      	cbz	r3, 800657a <oslib_test_005_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 800656e:	4620      	mov	r0, r4
 8006570:	f7ff ff46 	bl	8006400 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f9      	bne.n	800656e <oslib_test_005_005_teardown+0xe>
}
 800657a:	bd10      	pop	{r4, pc}
 800657c:	0000      	movs	r0, r0
	...

08006580 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006580:	b510      	push	{r4, lr}
 8006582:	4604      	mov	r4, r0
  F_LOCK();
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <chFactoryReleaseMailbox+0x24>)
 8006586:	f7fd f8b3 	bl	80036f0 <chMtxLock>
  dep->refs--;
 800658a:	6863      	ldr	r3, [r4, #4]
 800658c:	3b01      	subs	r3, #1
 800658e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006590:	b91b      	cbnz	r3, 800659a <chFactoryReleaseMailbox+0x1a>
 8006592:	4620      	mov	r0, r4
 8006594:	4904      	ldr	r1, [pc, #16]	; (80065a8 <chFactoryReleaseMailbox+0x28>)
 8006596:	f7ff fe63 	bl	8006260 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 800659a:	4802      	ldr	r0, [pc, #8]	; (80065a4 <chFactoryReleaseMailbox+0x24>)
}
 800659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80065a0:	f7fe b966 	b.w	8004870 <chMtxUnlock>
 80065a4:	20000e18 	.word	0x20000e18
 80065a8:	20000e54 	.word	0x20000e54
 80065ac:	00000000 	.word	0x00000000

080065b0 <oslib_test_005_004_execute>:
static void oslib_test_005_004_execute(void) {
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80065b2:	4c42      	ldr	r4, [pc, #264]	; (80066bc <oslib_test_005_004_execute+0x10c>)
 80065b4:	2501      	movs	r5, #1
 80065b6:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80065b8:	f7fe fc6a 	bl	8004e90 <chFactoryFindMailbox.constprop.8>
    test_assert(dmp == NULL, "found");
 80065bc:	fab0 f080 	clz	r0, r0
 80065c0:	0940      	lsrs	r0, r0, #5
 80065c2:	493f      	ldr	r1, [pc, #252]	; (80066c0 <oslib_test_005_004_execute+0x110>)
 80065c4:	f7fa fb64 	bl	8000c90 <_test_assert>
 80065c8:	b100      	cbz	r0, 80065cc <oslib_test_005_004_execute+0x1c>
}
 80065ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80065cc:	2302      	movs	r3, #2
 80065ce:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 80065d0:	f7fe fc2e 	bl	8004e30 <chFactoryCreateMailbox.constprop.9>
    test_assert(dmp != NULL, "cannot create");
 80065d4:	4606      	mov	r6, r0
 80065d6:	3000      	adds	r0, #0
 80065d8:	bf18      	it	ne
 80065da:	2001      	movne	r0, #1
 80065dc:	4939      	ldr	r1, [pc, #228]	; (80066c4 <oslib_test_005_004_execute+0x114>)
 80065de:	f7fa fb57 	bl	8000c90 <_test_assert>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d1f1      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
  test_set_step(3);
 80065e6:	2303      	movs	r3, #3
 80065e8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 80065ea:	f7fe fc21 	bl	8004e30 <chFactoryCreateMailbox.constprop.9>
    test_assert(dmp1 == NULL, "can create");
 80065ee:	fab0 f080 	clz	r0, r0
 80065f2:	0940      	lsrs	r0, r0, #5
 80065f4:	4934      	ldr	r1, [pc, #208]	; (80066c8 <oslib_test_005_004_execute+0x118>)
 80065f6:	f7fa fb4b 	bl	8000c90 <_test_assert>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d1e5      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
  test_set_step(4);
 80065fe:	2304      	movs	r3, #4
 8006600:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8006602:	f7fe fc45 	bl	8004e90 <chFactoryFindMailbox.constprop.8>
    test_assert(dmp1 != NULL, "not found");
 8006606:	4607      	mov	r7, r0
 8006608:	3000      	adds	r0, #0
 800660a:	bf18      	it	ne
 800660c:	2001      	movne	r0, #1
 800660e:	492f      	ldr	r1, [pc, #188]	; (80066cc <oslib_test_005_004_execute+0x11c>)
 8006610:	f7fa fb3e 	bl	8000c90 <_test_assert>
 8006614:	2800      	cmp	r0, #0
 8006616:	d1d8      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8006618:	1bf0      	subs	r0, r6, r7
 800661a:	fab0 f080 	clz	r0, r0
 800661e:	492c      	ldr	r1, [pc, #176]	; (80066d0 <oslib_test_005_004_execute+0x120>)
 8006620:	0940      	lsrs	r0, r0, #5
 8006622:	f7fa fb35 	bl	8000c90 <_test_assert>
 8006626:	2800      	cmp	r0, #0
 8006628:	d1cf      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4928      	ldr	r1, [pc, #160]	; (80066d0 <oslib_test_005_004_execute+0x120>)
 800662e:	f1a0 0002 	sub.w	r0, r0, #2
 8006632:	fab0 f080 	clz	r0, r0
 8006636:	0940      	lsrs	r0, r0, #5
 8006638:	f7fa fb2a 	bl	8000c90 <_test_assert>
 800663c:	2800      	cmp	r0, #0
 800663e:	d1c4      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
 8006640:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8006642:	4923      	ldr	r1, [pc, #140]	; (80066d0 <oslib_test_005_004_execute+0x120>)
 8006644:	442b      	add	r3, r5
 8006646:	4628      	mov	r0, r5
 8006648:	607b      	str	r3, [r7, #4]
 800664a:	f7fa fb21 	bl	8000c90 <_test_assert>
 800664e:	2800      	cmp	r0, #0
 8006650:	d1bb      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	491e      	ldr	r1, [pc, #120]	; (80066d0 <oslib_test_005_004_execute+0x120>)
 8006656:	f1a0 0c03 	sub.w	ip, r0, #3
 800665a:	f1dc 0000 	rsbs	r0, ip, #0
 800665e:	eb40 000c 	adc.w	r0, r0, ip
 8006662:	f7fa fb15 	bl	8000c90 <_test_assert>
 8006666:	2800      	cmp	r0, #0
 8006668:	d1af      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 800666a:	4638      	mov	r0, r7
 800666c:	f7ff ff88 	bl	8006580 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4918      	ldr	r1, [pc, #96]	; (80066d4 <oslib_test_005_004_execute+0x124>)
 8006674:	1e82      	subs	r2, r0, #2
 8006676:	4250      	negs	r0, r2
 8006678:	4150      	adcs	r0, r2
 800667a:	f7fa fb09 	bl	8000c90 <_test_assert>
 800667e:	2800      	cmp	r0, #0
 8006680:	d1a3      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8006682:	4638      	mov	r0, r7
 8006684:	f7ff ff7c 	bl	8006580 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8006688:	6870      	ldr	r0, [r6, #4]
 800668a:	4912      	ldr	r1, [pc, #72]	; (80066d4 <oslib_test_005_004_execute+0x124>)
 800668c:	1b43      	subs	r3, r0, r5
 800668e:	4258      	negs	r0, r3
 8006690:	4158      	adcs	r0, r3
 8006692:	f7fa fafd 	bl	8000c90 <_test_assert>
 8006696:	2800      	cmp	r0, #0
 8006698:	d197      	bne.n	80065ca <oslib_test_005_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 800669a:	4630      	mov	r0, r6
  test_set_step(5);
 800669c:	2305      	movs	r3, #5
 800669e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 80066a0:	f7ff ff6e 	bl	8006580 <chFactoryReleaseMailbox>
  test_set_step(6);
 80066a4:	2306      	movs	r3, #6
 80066a6:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80066a8:	f7fe fbf2 	bl	8004e90 <chFactoryFindMailbox.constprop.8>
    test_assert(dmp == NULL, "found");
 80066ac:	fab0 f080 	clz	r0, r0
 80066b0:	0940      	lsrs	r0, r0, #5
 80066b2:	4903      	ldr	r1, [pc, #12]	; (80066c0 <oslib_test_005_004_execute+0x110>)
}
 80066b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 80066b8:	f7fa baea 	b.w	8000c90 <_test_assert>
 80066bc:	20001774 	.word	0x20001774
 80066c0:	0800a000 	.word	0x0800a000
 80066c4:	08009fe0 	.word	0x08009fe0
 80066c8:	08009ff0 	.word	0x08009ff0
 80066cc:	08009ffc 	.word	0x08009ffc
 80066d0:	0800a008 	.word	0x0800a008
 80066d4:	0800a024 	.word	0x0800a024
	...

080066e0 <oslib_test_005_004_teardown>:
static void oslib_test_005_004_teardown(void) {
 80066e0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 80066e2:	f7fe fbd5 	bl	8004e90 <chFactoryFindMailbox.constprop.8>
  if (dmp != NULL) {
 80066e6:	b140      	cbz	r0, 80066fa <oslib_test_005_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 80066e8:	6843      	ldr	r3, [r0, #4]
 80066ea:	4604      	mov	r4, r0
 80066ec:	b12b      	cbz	r3, 80066fa <oslib_test_005_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 80066ee:	4620      	mov	r0, r4
 80066f0:	f7ff ff46 	bl	8006580 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f9      	bne.n	80066ee <oslib_test_005_004_teardown+0xe>
}
 80066fa:	bd10      	pop	{r4, pc}
 80066fc:	0000      	movs	r0, r0
	...

08006700 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006700:	b510      	push	{r4, lr}
 8006702:	4604      	mov	r4, r0
  F_LOCK();
 8006704:	4807      	ldr	r0, [pc, #28]	; (8006724 <chFactoryReleaseBuffer+0x24>)
 8006706:	f7fc fff3 	bl	80036f0 <chMtxLock>
  dep->refs--;
 800670a:	6863      	ldr	r3, [r4, #4]
 800670c:	3b01      	subs	r3, #1
 800670e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006710:	b91b      	cbnz	r3, 800671a <chFactoryReleaseBuffer+0x1a>
 8006712:	4620      	mov	r0, r4
 8006714:	4904      	ldr	r1, [pc, #16]	; (8006728 <chFactoryReleaseBuffer+0x28>)
 8006716:	f7ff fda3 	bl	8006260 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 800671a:	4802      	ldr	r0, [pc, #8]	; (8006724 <chFactoryReleaseBuffer+0x24>)
}
 800671c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8006720:	f7fe b8a6 	b.w	8004870 <chMtxUnlock>
 8006724:	20000e18 	.word	0x20000e18
 8006728:	20000e3c 	.word	0x20000e3c
 800672c:	00000000 	.word	0x00000000

08006730 <oslib_test_005_002_execute>:
static void oslib_test_005_002_execute(void) {
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006732:	4c42      	ldr	r4, [pc, #264]	; (800683c <oslib_test_005_002_execute+0x10c>)
 8006734:	2501      	movs	r5, #1
 8006736:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006738:	f7fe fb2a 	bl	8004d90 <chFactoryFindBuffer.constprop.12>
    test_assert(dbp == NULL, "found");
 800673c:	fab0 f080 	clz	r0, r0
 8006740:	0940      	lsrs	r0, r0, #5
 8006742:	493f      	ldr	r1, [pc, #252]	; (8006840 <oslib_test_005_002_execute+0x110>)
 8006744:	f7fa faa4 	bl	8000c90 <_test_assert>
 8006748:	b100      	cbz	r0, 800674c <oslib_test_005_002_execute+0x1c>
}
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800674c:	2302      	movs	r3, #2
 800674e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8006750:	f7fe fafe 	bl	8004d50 <chFactoryCreateBuffer.constprop.13>
    test_assert(dbp != NULL, "cannot create");
 8006754:	4606      	mov	r6, r0
 8006756:	3000      	adds	r0, #0
 8006758:	bf18      	it	ne
 800675a:	2001      	movne	r0, #1
 800675c:	4939      	ldr	r1, [pc, #228]	; (8006844 <oslib_test_005_002_execute+0x114>)
 800675e:	f7fa fa97 	bl	8000c90 <_test_assert>
 8006762:	2800      	cmp	r0, #0
 8006764:	d1f1      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
  test_set_step(3);
 8006766:	2303      	movs	r3, #3
 8006768:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 800676a:	f7fe faf1 	bl	8004d50 <chFactoryCreateBuffer.constprop.13>
    test_assert(dbp1 == NULL, "can create");
 800676e:	fab0 f080 	clz	r0, r0
 8006772:	0940      	lsrs	r0, r0, #5
 8006774:	4934      	ldr	r1, [pc, #208]	; (8006848 <oslib_test_005_002_execute+0x118>)
 8006776:	f7fa fa8b 	bl	8000c90 <_test_assert>
 800677a:	2800      	cmp	r0, #0
 800677c:	d1e5      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
  test_set_step(4);
 800677e:	2304      	movs	r3, #4
 8006780:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8006782:	f7fe fb05 	bl	8004d90 <chFactoryFindBuffer.constprop.12>
    test_assert(dbp1 != NULL, "not found");
 8006786:	4607      	mov	r7, r0
 8006788:	3000      	adds	r0, #0
 800678a:	bf18      	it	ne
 800678c:	2001      	movne	r0, #1
 800678e:	492f      	ldr	r1, [pc, #188]	; (800684c <oslib_test_005_002_execute+0x11c>)
 8006790:	f7fa fa7e 	bl	8000c90 <_test_assert>
 8006794:	2800      	cmp	r0, #0
 8006796:	d1d8      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 8006798:	1bf0      	subs	r0, r6, r7
 800679a:	fab0 f080 	clz	r0, r0
 800679e:	492c      	ldr	r1, [pc, #176]	; (8006850 <oslib_test_005_002_execute+0x120>)
 80067a0:	0940      	lsrs	r0, r0, #5
 80067a2:	f7fa fa75 	bl	8000c90 <_test_assert>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d1cf      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	4928      	ldr	r1, [pc, #160]	; (8006850 <oslib_test_005_002_execute+0x120>)
 80067ae:	f1a0 0002 	sub.w	r0, r0, #2
 80067b2:	fab0 f080 	clz	r0, r0
 80067b6:	0940      	lsrs	r0, r0, #5
 80067b8:	f7fa fa6a 	bl	8000c90 <_test_assert>
 80067bc:	2800      	cmp	r0, #0
 80067be:	d1c4      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
 80067c0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 80067c2:	4923      	ldr	r1, [pc, #140]	; (8006850 <oslib_test_005_002_execute+0x120>)
 80067c4:	442b      	add	r3, r5
 80067c6:	4628      	mov	r0, r5
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	f7fa fa61 	bl	8000c90 <_test_assert>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d1bb      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	491e      	ldr	r1, [pc, #120]	; (8006850 <oslib_test_005_002_execute+0x120>)
 80067d6:	f1a0 0c03 	sub.w	ip, r0, #3
 80067da:	f1dc 0000 	rsbs	r0, ip, #0
 80067de:	eb40 000c 	adc.w	r0, r0, ip
 80067e2:	f7fa fa55 	bl	8000c90 <_test_assert>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d1af      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7ff ff88 	bl	8006700 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4918      	ldr	r1, [pc, #96]	; (8006854 <oslib_test_005_002_execute+0x124>)
 80067f4:	1e82      	subs	r2, r0, #2
 80067f6:	4250      	negs	r0, r2
 80067f8:	4150      	adcs	r0, r2
 80067fa:	f7fa fa49 	bl	8000c90 <_test_assert>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d1a3      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8006802:	4638      	mov	r0, r7
 8006804:	f7ff ff7c 	bl	8006700 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8006808:	6870      	ldr	r0, [r6, #4]
 800680a:	4912      	ldr	r1, [pc, #72]	; (8006854 <oslib_test_005_002_execute+0x124>)
 800680c:	1b43      	subs	r3, r0, r5
 800680e:	4258      	negs	r0, r3
 8006810:	4158      	adcs	r0, r3
 8006812:	f7fa fa3d 	bl	8000c90 <_test_assert>
 8006816:	2800      	cmp	r0, #0
 8006818:	d197      	bne.n	800674a <oslib_test_005_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 800681a:	4630      	mov	r0, r6
  test_set_step(5);
 800681c:	2305      	movs	r3, #5
 800681e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8006820:	f7ff ff6e 	bl	8006700 <chFactoryReleaseBuffer>
  test_set_step(6);
 8006824:	2306      	movs	r3, #6
 8006826:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006828:	f7fe fab2 	bl	8004d90 <chFactoryFindBuffer.constprop.12>
    test_assert(dbp == NULL, "found");
 800682c:	fab0 f080 	clz	r0, r0
 8006830:	0940      	lsrs	r0, r0, #5
 8006832:	4903      	ldr	r1, [pc, #12]	; (8006840 <oslib_test_005_002_execute+0x110>)
}
 8006834:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8006838:	f7fa ba2a 	b.w	8000c90 <_test_assert>
 800683c:	20001774 	.word	0x20001774
 8006840:	0800a000 	.word	0x0800a000
 8006844:	08009fe0 	.word	0x08009fe0
 8006848:	08009ff0 	.word	0x08009ff0
 800684c:	08009ffc 	.word	0x08009ffc
 8006850:	0800a008 	.word	0x0800a008
 8006854:	0800a024 	.word	0x0800a024
	...

08006860 <oslib_test_005_002_teardown>:
static void oslib_test_005_002_teardown(void) {
 8006860:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8006862:	f7fe fa95 	bl	8004d90 <chFactoryFindBuffer.constprop.12>
  if (dbp != NULL) {
 8006866:	b140      	cbz	r0, 800687a <oslib_test_005_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8006868:	6843      	ldr	r3, [r0, #4]
 800686a:	4604      	mov	r4, r0
 800686c:	b12b      	cbz	r3, 800687a <oslib_test_005_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff ff46 	bl	8006700 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8006874:	6863      	ldr	r3, [r4, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f9      	bne.n	800686e <oslib_test_005_002_teardown+0xe>
}
 800687a:	bd10      	pop	{r4, pc}
 800687c:	0000      	movs	r0, r0
	...

08006880 <chThdRelease>:
 8006880:	2220      	movs	r2, #32
 8006882:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8006886:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800688a:	3b01      	subs	r3, #1
 800688c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8006890:	6a03      	ldr	r3, [r0, #32]
 8006892:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d003      	beq.n	80068a2 <chThdRelease+0x22>
 800689a:	2300      	movs	r3, #0
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	4770      	bx	lr
    REG_REMOVE(tp);
 80068a2:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void chThdRelease(thread_t *tp) {
 80068a6:	b410      	push	{r4}
    REG_REMOVE(tp);
 80068a8:	6119      	str	r1, [r3, #16]
 80068aa:	6904      	ldr	r4, [r0, #16]
 80068ac:	2100      	movs	r1, #0
 80068ae:	6163      	str	r3, [r4, #20]
 80068b0:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80068b4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d00c      	beq.n	80068da <chThdRelease+0x5a>
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d108      	bne.n	80068d6 <chThdRelease+0x56>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80068c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80068c6:	69c0      	ldr	r0, [r0, #28]
 80068c8:	f382 8811 	msr	BASEPRI, r2
  php->next = mp->next;
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	6002      	str	r2, [r0, #0]
  mp->next = php;
 80068d0:	6018      	str	r0, [r3, #0]
 80068d2:	f381 8811 	msr	BASEPRI, r1
}
 80068d6:	bc10      	pop	{r4}
 80068d8:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 80068da:	69c0      	ldr	r0, [r0, #28]
}
 80068dc:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 80068de:	f7ff ba9f 	b.w	8005e20 <chHeapFree>
 80068e2:	bf00      	nop
	...

080068f0 <rt_test_010_006_execute>:
static void rt_test_010_006_execute(void) {
 80068f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 80068f4:	4b1a      	ldr	r3, [pc, #104]	; (8006960 <rt_test_010_006_execute+0x70>)
  test_set_step(1);
 80068f6:	f8df a074 	ldr.w	sl, [pc, #116]	; 800696c <rt_test_010_006_execute+0x7c>
  return chThdGetSelfX()->prio;
 80068fa:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80068fc:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006970 <rt_test_010_006_execute+0x80>
  tprio_t prio = chThdGetPriorityX() + 1;
 8006900:	689d      	ldr	r5, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006902:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006974 <rt_test_010_006_execute+0x84>
  test_set_step(1);
 8006906:	2301      	movs	r3, #1
static void rt_test_010_006_execute(void) {
 8006908:	b082      	sub	sp, #8
  tprio_t prio = chThdGetPriorityX() + 1;
 800690a:	441d      	add	r5, r3
  test_set_step(1);
 800690c:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8006910:	f7fc fbd6 	bl	80030c0 <test_wait_tick>
    n = 0;
 8006914:	2400      	movs	r4, #0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006916:	4627      	mov	r7, r4
    start = test_wait_tick();
 8006918:	4606      	mov	r6, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800691a:	464b      	mov	r3, r9
 800691c:	462a      	mov	r2, r5
 800691e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006922:	9700      	str	r7, [sp, #0]
 8006924:	4640      	mov	r0, r8
 8006926:	f7fb ff63 	bl	80027f0 <chThdCreateStatic>
 800692a:	f7ff ffa9 	bl	8006880 <chThdRelease>
 800692e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8006932:	f242 720f 	movw	r2, #9999	; 0x270f
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	1b9b      	subs	r3, r3, r6
 800693a:	4293      	cmp	r3, r2
      n++;
 800693c:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8006940:	d9eb      	bls.n	800691a <rt_test_010_006_execute+0x2a>
  test_set_step(2);
 8006942:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8006944:	4807      	ldr	r0, [pc, #28]	; (8006964 <rt_test_010_006_execute+0x74>)
  test_set_step(2);
 8006946:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800694a:	f7fa faa1 	bl	8000e90 <test_print>
    test_printn(n);
 800694e:	4620      	mov	r0, r4
 8006950:	f7fa fa2e 	bl	8000db0 <test_printn>
    test_println(" threads/S");
 8006954:	4804      	ldr	r0, [pc, #16]	; (8006968 <rt_test_010_006_execute+0x78>)
}
 8006956:	b002      	add	sp, #8
 8006958:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 800695c:	f7fa ba78 	b.w	8000e50 <test_println>
 8006960:	20000da0 	.word	0x20000da0
 8006964:	0800b260 	.word	0x0800b260
 8006968:	0800b204 	.word	0x0800b204
 800696c:	20001774 	.word	0x20001774
 8006970:	08003bc1 	.word	0x08003bc1
 8006974:	20001060 	.word	0x20001060
	...

08006980 <cmd_threads>:
  if (argc > 0) {
 8006980:	2900      	cmp	r1, #0
 8006982:	dd03      	ble.n	800698c <cmd_threads+0xc>
    shellUsage(chp, "threads");
 8006984:	4a29      	ldr	r2, [pc, #164]	; (8006a2c <cmd_threads+0xac>)
 8006986:	492a      	ldr	r1, [pc, #168]	; (8006a30 <cmd_threads+0xb0>)
 8006988:	f7fb bb12 	b.w	8001fb0 <chprintf>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8006990:	4928      	ldr	r1, [pc, #160]	; (8006a34 <cmd_threads+0xb4>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	4605      	mov	r5, r0
 8006996:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8006998:	f7fb fb0a 	bl	8001fb0 <chprintf>
 800699c:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 80069a0:	4f25      	ldr	r7, [pc, #148]	; (8006a38 <cmd_threads+0xb8>)
 80069a2:	693c      	ldr	r4, [r7, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 80069a4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80069a8:	3301      	adds	r3, #1
 80069aa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80069ae:	2300      	movs	r3, #0
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f8df a084 	ldr.w	sl, [pc, #132]	; 8006a3c <cmd_threads+0xbc>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80069b8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8006a40 <cmd_threads+0xc0>
 80069bc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006a44 <cmd_threads+0xc4>
 80069c0:	9607      	str	r6, [sp, #28]
 80069c2:	e00a      	b.n	80069da <cmd_threads+0x5a>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 80069c4:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 80069c8:	3301      	adds	r3, #1
 80069ca:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 80069ce:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7ff ff54 	bl	8006880 <chThdRelease>
 80069d8:	465c      	mov	r4, fp
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 80069da:	f894 c020 	ldrb.w	ip, [r4, #32]
 80069de:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80069e2:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 80069e6:	68a6      	ldr	r6, [r4, #8]
 80069e8:	68e3      	ldr	r3, [r4, #12]
    uint32_t stklimit = (uint32_t)tp->wabase;
 80069ea:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80069ee:	3801      	subs	r0, #1
 80069f0:	2900      	cmp	r1, #0
 80069f2:	bf08      	it	eq
 80069f4:	4649      	moveq	r1, r9
 80069f6:	9001      	str	r0, [sp, #4]
 80069f8:	e9cd c103 	strd	ip, r1, [sp, #12]
 80069fc:	9602      	str	r6, [sp, #8]
 80069fe:	9400      	str	r4, [sp, #0]
 8006a00:	4641      	mov	r1, r8
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7fb fad4 	bl	8001fb0 <chprintf>
 8006a08:	9b07      	ldr	r3, [sp, #28]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
  ntp = tp->newer;
 8006a0e:	f8d4 b010 	ldr.w	fp, [r4, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8006a12:	45bb      	cmp	fp, r7
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	d1d4      	bne.n	80069c4 <cmd_threads+0x44>
 8006a1a:	f382 8811 	msr	BASEPRI, r2
  chThdRelease(tp);
 8006a1e:	4620      	mov	r0, r4
}
 8006a20:	b009      	add	sp, #36	; 0x24
 8006a22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a26:	f7ff bf2b 	b.w	8006880 <chThdRelease>
 8006a2a:	bf00      	nop
 8006a2c:	0800bb90 	.word	0x0800bb90
 8006a30:	08009ba0 	.word	0x08009ba0
 8006a34:	08009c34 	.word	0x08009c34
 8006a38:	20000da0 	.word	0x20000da0
 8006a3c:	0800b580 	.word	0x0800b580
 8006a40:	08009c04 	.word	0x08009c04
 8006a44:	08009c74 	.word	0x08009c74
	...

08006a50 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4604      	mov	r4, r0
 8006a54:	2320      	movs	r3, #32
 8006a56:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 8006a5a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006a5e:	2b0f      	cmp	r3, #15
 8006a60:	d007      	beq.n	8006a72 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8006a64:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006a66:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8006a68:	2009      	movs	r0, #9
 8006a6a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 8006a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a6e:	f7fb ff3f 	bl	80028f0 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8006a72:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006a74:	2300      	movs	r3, #0
 8006a76:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7ff ff00 	bl	8006880 <chThdRelease>
}
 8006a80:	4628      	mov	r0, r5
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	20000da0 	.word	0x20000da0
	...

08006a90 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <main+0x94>)
  PWR->CR |= PWR_CR_DBP;
 8006a92:	4825      	ldr	r0, [pc, #148]	; (8006b28 <main+0x98>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	f062 021f 	orn	r2, r2, #31


/*
 * Application entry point.
 */
int main(void) {
 8006a9a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8006a9e:	611a      	str	r2, [r3, #16]
 8006aa0:	691a      	ldr	r2, [r3, #16]
 8006aa2:	f002 021f 	and.w	r2, r2, #31
 8006aa6:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8006aa8:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006aac:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8006aae:	695a      	ldr	r2, [r3, #20]
 8006ab0:	615c      	str	r4, [r3, #20]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	6959      	ldr	r1, [r3, #20]
 8006ab6:	615a      	str	r2, [r3, #20]
 8006ab8:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8006aba:	6a19      	ldr	r1, [r3, #32]
 8006abc:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8006ac0:	6219      	str	r1, [r3, #32]
 8006ac2:	6a19      	ldr	r1, [r3, #32]
 8006ac4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8006ac8:	6219      	str	r1, [r3, #32]
 8006aca:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8006acc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ace:	625c      	str	r4, [r3, #36]	; 0x24
 8006ad0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ad4:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8006ad6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ad8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006adc:	6419      	str	r1, [r3, #64]	; 0x40
 8006ade:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006ae0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006ae4:	6619      	str	r1, [r3, #96]	; 0x60
 8006ae6:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8006ae8:	6801      	ldr	r1, [r0, #0]
 8006aea:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006aee:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8006af0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006af2:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8006af6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006afa:	b08b      	sub	sp, #44	; 0x2c
 8006afc:	d003      	beq.n	8006b06 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 8006afe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b02:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8006b04:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8006b06:	4808      	ldr	r0, [pc, #32]	; (8006b28 <main+0x98>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 8006b08:	4908      	ldr	r1, [pc, #32]	; (8006b2c <main+0x9c>)
 8006b0a:	6842      	ldr	r2, [r0, #4]
 8006b0c:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <main+0xa0>)
 8006b0e:	4d09      	ldr	r5, [pc, #36]	; (8006b34 <main+0xa4>)
 8006b10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b14:	2400      	movs	r4, #0
 8006b16:	6042      	str	r2, [r0, #4]
 8006b18:	460a      	mov	r2, r1
 8006b1a:	600c      	str	r4, [r1, #0]
 8006b1c:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8006b20:	e00c      	b.n	8006b3c <main+0xac>
 8006b22:	bf00      	nop
 8006b24:	40023800 	.word	0x40023800
 8006b28:	40007000 	.word	0x40007000
 8006b2c:	20000f5c 	.word	0x20000f5c
 8006b30:	080098c0 	.word	0x080098c0
 8006b34:	40026010 	.word	0x40026010
 8006b38:	f853 5c0c 	ldr.w	r5, [r3, #-12]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8006b3c:	602c      	str	r4, [r5, #0]
 8006b3e:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8006b40:	4299      	cmp	r1, r3
    dma.streams[i].func = NULL;
 8006b42:	6054      	str	r4, [r2, #4]
 8006b44:	f102 0208 	add.w	r2, r2, #8
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8006b48:	d1f6      	bne.n	8006b38 <main+0xa8>
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8006b4a:	4bcb      	ldr	r3, [pc, #812]	; (8006e78 <main+0x3e8>)
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8006b4c:	f8df b378 	ldr.w	fp, [pc, #888]	; 8006ec8 <main+0x438>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8006b50:	f8df e378 	ldr.w	lr, [pc, #888]	; 8006ecc <main+0x43c>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006b54:	4ec9      	ldr	r6, [pc, #804]	; (8006e7c <main+0x3ec>)
  adcp->config   = NULL;
 8006b56:	605c      	str	r4, [r3, #4]
  DMA1->LIFCR = 0xFFFFFFFFU;
 8006b58:	f04f 3cff 	mov.w	ip, #4294967295
 8006b5c:	f8cb c008 	str.w	ip, [fp, #8]
 8006b60:	2260      	movs	r2, #96	; 0x60
  adcp->samples  = NULL;
 8006b62:	609c      	str	r4, [r3, #8]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006b64:	f04f 0a80 	mov.w	sl, #128	; 0x80
  DMA1->HIFCR = 0xFFFFFFFFU;
 8006b68:	f8cb c00c 	str.w	ip, [fp, #12]
 8006b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
  DMA2->LIFCR = 0xFFFFFFFFU;
 8006b70:	f8ce c008 	str.w	ip, [lr, #8]
 8006b74:	f04f 0940 	mov.w	r9, #64	; 0x40
  adcp->depth    = 0;
 8006b78:	60dc      	str	r4, [r3, #12]
 8006b7a:	f44f 7800 	mov.w	r8, #512	; 0x200
  DMA2->HIFCR = 0xFFFFFFFFU;
 8006b7e:	f8ce c00c 	str.w	ip, [lr, #12]
  tqp->next = (thread_t *)tqp;
 8006b82:	f103 0e18 	add.w	lr, r3, #24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006b86:	f886 2306 	strb.w	r2, [r6, #774]	; 0x306
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8006b8a:	4dbd      	ldr	r5, [pc, #756]	; (8006e80 <main+0x3f0>)
  adcp->grpp     = NULL;
 8006b8c:	611c      	str	r4, [r3, #16]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006b8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006b92:	f8c6 9180 	str.w	r9, [r6, #384]	; 0x180
 8006b96:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8006b9a:	615c      	str	r4, [r3, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006b9c:	f8c6 9000 	str.w	r9, [r6]
 8006ba0:	f8c3 e018 	str.w	lr, [r3, #24]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006ba4:	f886 2307 	strb.w	r2, [r6, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006ba8:	f8c6 a180 	str.w	sl, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006bac:	f8c6 a000 	str.w	sl, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006bb0:	f886 2308 	strb.w	r2, [r6, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006bb4:	f8c6 1180 	str.w	r1, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006bb8:	6031      	str	r1, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006bba:	f886 2309 	strb.w	r2, [r6, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006bbe:	f8c6 8180 	str.w	r8, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006bc2:	f8c6 8000 	str.w	r8, [r6]
  adcp->state    = ADC_STOP;
 8006bc6:	f04f 0801 	mov.w	r8, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006bca:	f886 230a 	strb.w	r2, [r6, #778]	; 0x30a

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8006bce:	4fad      	ldr	r7, [pc, #692]	; (8006e84 <main+0x3f4>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006bd0:	f8c6 0180 	str.w	r0, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006bd4:	6030      	str	r0, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006bd6:	f886 2317 	strb.w	r2, [r6, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006bda:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006bde:	f8c6 b180 	str.w	fp, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006be2:	f8c6 b000 	str.w	fp, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006be6:	f886 2328 	strb.w	r2, [r6, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006bea:	f8c6 1184 	str.w	r1, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006bee:	6071      	str	r1, [r6, #4]
 8006bf0:	f883 8000 	strb.w	r8, [r3]
  tqp->prev = (thread_t *)tqp;
 8006bf4:	f8c3 e01c 	str.w	lr, [r3, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006bf8:	f886 2312 	strb.w	r2, [r6, #786]	; 0x312
  oqp->q_counter = size;
 8006bfc:	2210      	movs	r2, #16
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006bfe:	f8c6 0180 	str.w	r0, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006c02:	6030      	str	r0, [r6, #0]
  iqp->q_counter = 0;
 8006c04:	616c      	str	r4, [r5, #20]
  oqp->q_counter = size;
 8006c06:	63aa      	str	r2, [r5, #56]	; 0x38
 8006c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c0a:	489f      	ldr	r0, [pc, #636]	; (8006e88 <main+0x3f8>)
  mp->owner = NULL;
 8006c0c:	621c      	str	r4, [r3, #32]
 8006c0e:	4629      	mov	r1, r5
 8006c10:	ea42 0208 	orr.w	r2, r2, r8
 8006c14:	f841 0b04 	str.w	r0, [r1], #4
  ADCD1.adc     = ADC1;
 8006c18:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 8006ed0 <main+0x440>
 8006c1c:	643a      	str	r2, [r7, #64]	; 0x40
 8006c1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c20:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8006c24:	f8df e2ac 	ldr.w	lr, [pc, #684]	; 8006ed4 <main+0x444>
  ADCD1.dmastp  = NULL;
 8006c28:	62dc      	str	r4, [r3, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8006c2a:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  oqp->q_top     = bp + size;
 8006c2e:	f105 0374 	add.w	r3, r5, #116	; 0x74
  oqp->q_notify  = onfy;
 8006c32:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8006ed8 <main+0x448>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8006c36:	4895      	ldr	r0, [pc, #596]	; (8006e8c <main+0x3fc>)
  oqp->q_top     = bp + size;
 8006c38:	642b      	str	r3, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 8006c3a:	f8c5 e04c 	str.w	lr, [r5, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8006c3e:	4b94      	ldr	r3, [pc, #592]	; (8006e90 <main+0x400>)
 8006c40:	676b      	str	r3, [r5, #116]	; 0x74
  tqp->next = (thread_t *)tqp;
 8006c42:	f105 0e0c 	add.w	lr, r5, #12
  iqp->q_buffer  = bp;
 8006c46:	f105 0354 	add.w	r3, r5, #84	; 0x54
  ST_ENABLE_CLOCK();
 8006c4a:	ea42 0208 	orr.w	r2, r2, r8
  esp->next = (event_listener_t *)esp;
 8006c4e:	6069      	str	r1, [r5, #4]
  tqp->prev = (thread_t *)tqp;
 8006c50:	e9c5 ee03 	strd	lr, lr, [r5, #12]
  iqp->q_top     = bp + size;
 8006c54:	f105 0164 	add.w	r1, r5, #100	; 0x64
  tqp->next = (thread_t *)tqp;
 8006c58:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  iqp->q_buffer  = bp;
 8006c5c:	61ab      	str	r3, [r5, #24]
  iqp->q_wrptr   = bp;
 8006c5e:	e9c5 3308 	strd	r3, r3, [r5, #32]
  iqp->q_top     = bp + size;
 8006c62:	61e9      	str	r1, [r5, #28]
  oqp->q_buffer  = bp;
 8006c64:	63e9      	str	r1, [r5, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 8006c66:	e9c5 1111 	strd	r1, r1, [r5, #68]	; 0x44
  tqp->prev = (thread_t *)tqp;
 8006c6a:	e9c5 ee0c 	strd	lr, lr, [r5, #48]	; 0x30
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8006c6e:	f885 8008 	strb.w	r8, [r5, #8]
  iqp->q_link    = link;
 8006c72:	e9c5 450a 	strd	r4, r5, [r5, #40]	; 0x28
  oqp->q_link    = link;
 8006c76:	652d      	str	r5, [r5, #80]	; 0x50
 8006c78:	663a      	str	r2, [r7, #96]	; 0x60
 8006c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  ST_ENABLE_STOP();
 8006c7c:	6882      	ldr	r2, [r0, #8]
  tqp->next = (thread_t *)tqp;
 8006c7e:	4985      	ldr	r1, [pc, #532]	; (8006e94 <main+0x404>)
  ch_memcore.nextmem = __heap_base__;
 8006c80:	f8df b258 	ldr.w	fp, [pc, #600]	; 8006edc <main+0x44c>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 8006c88:	ea42 0208 	orr.w	r2, r2, r8
 8006c8c:	6082      	str	r2, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006c8e:	f242 0ecf 	movw	lr, #8399	; 0x20cf
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c96:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  chTMStartMeasurementX(&tm);
 8006c9a:	a804      	add	r0, sp, #16
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8006c9c:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8006ca0:	f101 0e1c 	add.w	lr, r1, #28
  STM32_ST_TIM->CCMR1  = 0;
 8006ca4:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8006ca6:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8006ca8:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8006caa:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8006cac:	f8c3 8014 	str.w	r8, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8006cb0:	f8c3 8000 	str.w	r8, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006cb4:	f886 a31c 	strb.w	sl, [r6, #796]	; 0x31c
  tmp->cumulative = (rttime_t)0;
 8006cb8:	2300      	movs	r3, #0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006cba:	f8c6 2180 	str.w	r2, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006cbe:	6032      	str	r2, [r6, #0]
 8006cc0:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8006cc2:	e9c1 1100 	strd	r1, r1, [r1]
 8006cc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  tmp->worst      = (rtcnt_t)0;
 8006cca:	e9cd c404 	strd	ip, r4, [sp, #16]
  ch.vtlist.delta = (sysinterval_t)-1;
 8006cce:	f8c1 c024 	str.w	ip, [r1, #36]	; 0x24
  ch.rlist.prio = NOPRIO;
 8006cd2:	608c      	str	r4, [r1, #8]
  ch.vtlist.lasttime = (systime_t)0;
 8006cd4:	628c      	str	r4, [r1, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
 8006cd6:	674c      	str	r4, [r1, #116]	; 0x74
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8006cd8:	e9c1 ee07 	strd	lr, lr, [r1, #28]
 8006cdc:	9103      	str	r1, [sp, #12]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8006cde:	e9c1 1104 	strd	r1, r1, [r1, #16]
  tmp->n          = (ucnt_t)0;
 8006ce2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  chTMStartMeasurementX(&tm);
 8006ce6:	f7f9 fd73 	bl	80007d0 <chTMStartMeasurementX.constprop.70>
  chTMStopMeasurementX(&tm);
 8006cea:	a804      	add	r0, sp, #16
 8006cec:	f7fa fae8 	bl	80012c0 <chTMStopMeasurementX>
  tqp->next = (thread_t *)tqp;
 8006cf0:	4a69      	ldr	r2, [pc, #420]	; (8006e98 <main+0x408>)
  tp->prio      = prio;
 8006cf2:	9903      	ldr	r1, [sp, #12]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8006cf4:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8006ee0 <main+0x450>
 8006cf8:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8006ee4 <main+0x454>
 8006cfc:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
  tp->realprio  = prio;
 8006d00:	f8c1 a06c 	str.w	sl, [r1, #108]	; 0x6c
 8006d04:	f8cc e000 	str.w	lr, [ip]
 8006d08:	f10c 0a0c 	add.w	sl, ip, #12
  dlp->next = (dyn_element_t *)dlp;
 8006d0c:	f102 0e10 	add.w	lr, r2, #16
  H_PAGES(&default_heap.header) = 0;
 8006d10:	e9cc 4401 	strd	r4, r4, [ip, #4]
 8006d14:	f8cc 4014 	str.w	r4, [ip, #20]
  tqp->prev = (thread_t *)tqp;
 8006d18:	e9cc aa03 	strd	sl, sl, [ip, #12]
 8006d1c:	f8c2 e010 	str.w	lr, [r2, #16]
 8006d20:	f102 0a24 	add.w	sl, r2, #36	; 0x24
 8006d24:	f102 0e28 	add.w	lr, r2, #40	; 0x28
  mp->object_size = size;
 8006d28:	f04f 0c14 	mov.w	ip, #20
 8006d2c:	f8c2 c018 	str.w	ip, [r2, #24]
 8006d30:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
 8006d34:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 8006d38:	f102 0a3c 	add.w	sl, r2, #60	; 0x3c
 8006d3c:	eb02 0e09 	add.w	lr, r2, r9
 8006d40:	f04f 0c1c 	mov.w	ip, #28
 8006d44:	f8c2 c030 	str.w	ip, [r2, #48]	; 0x30
 8006d48:	f8c2 a03c 	str.w	sl, [r2, #60]	; 0x3c
 8006d4c:	f102 0c44 	add.w	ip, r2, #68	; 0x44
  mp->align = align;
 8006d50:	f04f 0a04 	mov.w	sl, #4
 8006d54:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
  mp->provider = provider;
 8006d58:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8006ee8 <main+0x458>
 8006d5c:	6094      	str	r4, [r2, #8]
  mp->next = NULL;
 8006d5e:	6154      	str	r4, [r2, #20]
 8006d60:	62d4      	str	r4, [r2, #44]	; 0x2c
 8006d62:	f8c2 c044 	str.w	ip, [r2, #68]	; 0x44
  mp->align = align;
 8006d66:	f8c2 a01c 	str.w	sl, [r2, #28]
 8006d6a:	f8c2 a034 	str.w	sl, [r2, #52]	; 0x34
  mp->provider = provider;
 8006d6e:	f8c2 e020 	str.w	lr, [r2, #32]
 8006d72:	f8c2 e038 	str.w	lr, [r2, #56]	; 0x38
 8006d76:	e9c2 2200 	strd	r2, r2, [r2]
 8006d7a:	f8df c170 	ldr.w	ip, [pc, #368]	; 8006eec <main+0x45c>
  ch_memcore.endmem  = __heap_end__;
 8006d7e:	4a47      	ldr	r2, [pc, #284]	; (8006e9c <main+0x40c>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d80:	4b47      	ldr	r3, [pc, #284]	; (8006ea0 <main+0x410>)
  ch.tm.offset = tm.last;
 8006d82:	9806      	ldr	r0, [sp, #24]
 8006d84:	6748      	str	r0, [r1, #116]	; 0x74
  tp->flags     = CH_FLAG_MODE_STATIC;
 8006d86:	f881 4051 	strb.w	r4, [r1, #81]	; 0x51
  tp->epending  = (eventmask_t)0;
 8006d8a:	e9c1 4419 	strd	r4, r4, [r1, #100]	; 0x64
 8006d8e:	e9cb c200 	strd	ip, r2, [fp]
  tp->refs      = (trefs_t)1;
 8006d92:	f881 8052 	strb.w	r8, [r1, #82]	; 0x52
 8006d96:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8006d98:	4a42      	ldr	r2, [pc, #264]	; (8006ea4 <main+0x414>)
  REG_INSERT(tp);
 8006d9a:	f8d1 b014 	ldr.w	fp, [r1, #20]
  tp->name      = name;
 8006d9e:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006ef0 <main+0x460>
 8006da2:	f8c1 c048 	str.w	ip, [r1, #72]	; 0x48
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006da6:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
 8006daa:	ea00 000e 	and.w	r0, r0, lr
  reg_value  =  (reg_value                                   |
 8006dae:	4302      	orrs	r2, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006db0:	f8df c140 	ldr.w	ip, [pc, #320]	; 8006ef4 <main+0x464>
  REG_INSERT(tp);
 8006db4:	f8c1 b044 	str.w	fp, [r1, #68]	; 0x44
 8006db8:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8006dbc:	6409      	str	r1, [r1, #64]	; 0x40
 8006dbe:	f8cb 0010 	str.w	r0, [fp, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8006dc2:	60da      	str	r2, [r3, #12]
 8006dc4:	f8dc e00c 	ldr.w	lr, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006dc8:	4a37      	ldr	r2, [pc, #220]	; (8006ea8 <main+0x418>)
 8006dca:	6148      	str	r0, [r1, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006dcc:	f04e 7e80 	orr.w	lr, lr, #16777216	; 0x1000000
 8006dd0:	f8cc e00c 	str.w	lr, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006dd4:	f8d2 c000 	ldr.w	ip, [r2]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8006dd8:	6188      	str	r0, [r1, #24]
 8006dda:	ea4c 0008 	orr.w	r0, ip, r8
  currp->wabase = NULL;
 8006dde:	64cc      	str	r4, [r1, #76]	; 0x4c
  currp->state = CH_STATE_CURRENT;
 8006de0:	f881 8050 	strb.w	r8, [r1, #80]	; 0x50
  tlp->next = (thread_t *)tlp;
 8006de4:	f101 0c58 	add.w	ip, r1, #88	; 0x58
 8006de8:	6010      	str	r0, [r2, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dea:	f04f 0b20 	mov.w	fp, #32
  tqp->next = (thread_t *)tqp;
 8006dee:	f101 025c 	add.w	r2, r1, #92	; 0x5c
 8006df2:	f04f 0010 	mov.w	r0, #16
 8006df6:	77d8      	strb	r0, [r3, #31]
  tlp->next = (thread_t *)tlp;
 8006df8:	f8c1 c058 	str.w	ip, [r1, #88]	; 0x58
 8006dfc:	f883 b022 	strb.w	fp, [r3, #34]	; 0x22
  tqp->prev = (thread_t *)tqp;
 8006e00:	e9c1 2217 	strd	r2, r2, [r1, #92]	; 0x5c
 8006e04:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8006e08:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006e0a:	f38b 8811 	msr	BASEPRI, fp
  tp = chThdCreateSuspendedI(tdp);
 8006e0e:	4827      	ldr	r0, [pc, #156]	; (8006eac <main+0x41c>)
 8006e10:	f7fa fa7e 	bl	8001310 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8006e14:	2100      	movs	r1, #0
 8006e16:	f7fb fc53 	bl	80026c0 <chSchWakeupS>
 8006e1a:	f384 8811 	msr	BASEPRI, r4
 8006e1e:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <main+0x420>)
  *
  *
  *
  */

  palSetLineMode(LINE_LED_RGB_RED, PAL_MODE_OUTPUT_PUSHPULL);
 8006e20:	4640      	mov	r0, r8
 8006e22:	601b      	str	r3, [r3, #0]
 8006e24:	f7f9 fc8c 	bl	8000740 <_pal_lld_setgroupmode.constprop.76>
  palSetLineMode(LINE_LED_RGB_GREEN, PAL_MODE_OUTPUT_PUSHPULL);
 8006e28:	2002      	movs	r0, #2
 8006e2a:	f7f9 fc89 	bl	8000740 <_pal_lld_setgroupmode.constprop.76>
  palSetLineMode(LINE_LED_RGB_BLUE, PAL_MODE_OUTPUT_PUSHPULL);
 8006e2e:	4650      	mov	r0, sl
 8006e30:	f7f9 fc86 	bl	8000740 <_pal_lld_setgroupmode.constprop.76>

  palSetLine(LINE_LED_RGB_RED);
 8006e34:	491f      	ldr	r1, [pc, #124]	; (8006eb4 <main+0x424>)
  palSetLine(LINE_LED_RGB_GREEN);
  palSetLine(LINE_LED_RGB_BLUE);

  chThdCreateStatic(waThd1, sizeof(waThd1), NORMALPRIO + 1,Thd1, NULL);
 8006e36:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <main+0x428>)
  palSetLine(LINE_LED_RGB_RED);
 8006e38:	f8a1 8018 	strh.w	r8, [r1, #24]
  palSetLine(LINE_LED_RGB_GREEN);
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	830a      	strh	r2, [r1, #24]
  chThdCreateStatic(waThd1, sizeof(waThd1), NORMALPRIO + 1,Thd1, NULL);
 8006e40:	481e      	ldr	r0, [pc, #120]	; (8006ebc <main+0x42c>)
  palSetLine(LINE_LED_RGB_BLUE);
 8006e42:	f8a1 a018 	strh.w	sl, [r1, #24]
  chThdCreateStatic(waThd1, sizeof(waThd1), NORMALPRIO + 1,Thd1, NULL);
 8006e46:	2281      	movs	r2, #129	; 0x81
 8006e48:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8006e4c:	9400      	str	r4, [sp, #0]
 8006e4e:	f7fb fccf 	bl	80027f0 <chThdCreateStatic>
 8006e52:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8006e56:	7a2b      	ldrb	r3, [r5, #8]
 8006e58:	4543      	cmp	r3, r8
 8006e5a:	d06f      	beq.n	8006f3c <main+0x4ac>
  USART_TypeDef *u = sdp->usart;
 8006e5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8006e5e:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <main+0x430>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d07c      	beq.n	8006f5e <main+0x4ce>
 8006e64:	4817      	ldr	r0, [pc, #92]	; (8006ec4 <main+0x434>)
    fck = STM32_PCLK2 / config->speed;
 8006e66:	f240 4245 	movw	r2, #1093	; 0x445
 8006e6a:	f640 018b 	movw	r1, #2187	; 0x88b
 8006e6e:	4283      	cmp	r3, r0
 8006e70:	bf08      	it	eq
 8006e72:	460a      	moveq	r2, r1
 8006e74:	e040      	b.n	8006ef8 <main+0x468>
 8006e76:	bf00      	nop
 8006e78:	20000ce0 	.word	0x20000ce0
 8006e7c:	e000e100 	.word	0xe000e100
 8006e80:	20000d14 	.word	0x20000d14
 8006e84:	40023800 	.word	0x40023800
 8006e88:	0800c078 	.word	0x0800c078
 8006e8c:	e0042000 	.word	0xe0042000
 8006e90:	40004400 	.word	0x40004400
 8006e94:	20000da0 	.word	0x20000da0
 8006e98:	20000e18 	.word	0x20000e18
 8006e9c:	20018000 	.word	0x20018000
 8006ea0:	e000ed00 	.word	0xe000ed00
 8006ea4:	05fa0300 	.word	0x05fa0300
 8006ea8:	e0001000 	.word	0xe0001000
 8006eac:	08009ce8 	.word	0x08009ce8
 8006eb0:	20001058 	.word	0x20001058
 8006eb4:	40020800 	.word	0x40020800
 8006eb8:	08002fd1 	.word	0x08002fd1
 8006ebc:	200017d0 	.word	0x200017d0
 8006ec0:	40011000 	.word	0x40011000
 8006ec4:	40011400 	.word	0x40011400
 8006ec8:	40026000 	.word	0x40026000
 8006ecc:	40026400 	.word	0x40026400
 8006ed0:	40012000 	.word	0x40012000
 8006ed4:	00022c16 	.word	0x00022c16
 8006ed8:	080008d1 	.word	0x080008d1
 8006edc:	20000f38 	.word	0x20000f38
 8006ee0:	20000f40 	.word	0x20000f40
 8006ee4:	08000881 	.word	0x08000881
 8006ee8:	08000ff1 	.word	0x08000ff1
 8006eec:	20001b60 	.word	0x20001b60
 8006ef0:	080099c0 	.word	0x080099c0
 8006ef4:	e000edf0 	.word	0xe000edf0
  u->BRR = fck;
 8006ef8:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8006efa:	2440      	movs	r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8006efc:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8006efe:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 8006f02:	2200      	movs	r2, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8006f04:	611c      	str	r4, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8006f06:	6158      	str	r0, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8006f08:	60d9      	str	r1, [r3, #12]
    sdp->rxmask = 0xFF;
 8006f0a:	20ff      	movs	r0, #255	; 0xff
  u->SR = 0;
 8006f0c:	601a      	str	r2, [r3, #0]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8006f0e:	2102      	movs	r1, #2
  (void)u->SR;  /* SR reset step 1.*/
 8006f10:	681c      	ldr	r4, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8006f12:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8006f14:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 8006f18:	7229      	strb	r1, [r5, #8]
 8006f1a:	f382 8811 	msr	BASEPRI, r2
 8006f1e:	4e11      	ldr	r6, [pc, #68]	; (8006f64 <main+0x4d4>)
 8006f20:	4d11      	ldr	r5, [pc, #68]	; (8006f68 <main+0x4d8>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 8006f22:	4c12      	ldr	r4, [pc, #72]	; (8006f6c <main+0x4dc>)
 8006f24:	2381      	movs	r3, #129	; 0x81
 8006f26:	4622      	mov	r2, r4
 8006f28:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8006f2c:	e9cd 5600 	strd	r5, r6, [sp]
 8006f30:	2000      	movs	r0, #0
 8006f32:	f7fd fd75 	bl	8004a20 <chThdCreateFromHeap>
                                            "shell", NORMALPRIO + 1,
                                            shellThread, (void *)&shell_cfg1);
    chThdWait(shelltp);               /* Waiting termination.             */
 8006f36:	f7ff fd8b 	bl	8006a50 <chThdWait>
 8006f3a:	e7f3      	b.n	8006f24 <main+0x494>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8006f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f42:	643b      	str	r3, [r7, #64]	; 0x40
 8006f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f4a:	663b      	str	r3, [r7, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f4c:	23c0      	movs	r3, #192	; 0xc0
 8006f4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f50:	f886 3326 	strb.w	r3, [r6, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f54:	f8c6 9184 	str.w	r9, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006f58:	f8c6 9004 	str.w	r9, [r6, #4]
 8006f5c:	e77e      	b.n	8006e5c <main+0x3cc>
    fck = STM32_PCLK2 / config->speed;
 8006f5e:	f640 028b 	movw	r2, #2187	; 0x88b
 8006f62:	e7c9      	b.n	8006ef8 <main+0x468>
 8006f64:	0800b538 	.word	0x0800b538
 8006f68:	080038b1 	.word	0x080038b1
 8006f6c:	08009d00 	.word	0x08009d00

08006f70 <rt_test_010_005_execute>:
static void rt_test_010_005_execute(void) {
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8006f74:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <rt_test_010_005_execute+0x70>)
  test_set_step(1);
 8006f76:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006fec <rt_test_010_005_execute+0x7c>
  return chThdGetSelfX()->prio;
 8006f7a:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006f7c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006ff0 <rt_test_010_005_execute+0x80>
  tprio_t prio = chThdGetPriorityX() - 1;
 8006f80:	689d      	ldr	r5, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006f82:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006ff4 <rt_test_010_005_execute+0x84>
  test_set_step(1);
 8006f86:	2301      	movs	r3, #1
static void rt_test_010_005_execute(void) {
 8006f88:	b082      	sub	sp, #8
  test_set_step(1);
 8006f8a:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8006f8e:	f7fc f897 	bl	80030c0 <test_wait_tick>
    n = 0;
 8006f92:	2400      	movs	r4, #0
  tprio_t prio = chThdGetPriorityX() - 1;
 8006f94:	3d01      	subs	r5, #1
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006f96:	4627      	mov	r7, r4
    start = test_wait_tick();
 8006f98:	4606      	mov	r6, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	462a      	mov	r2, r5
 8006f9e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006fa2:	9700      	str	r7, [sp, #0]
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	f7fb fc23 	bl	80027f0 <chThdCreateStatic>
 8006faa:	f7ff fd51 	bl	8006a50 <chThdWait>
 8006fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8006fb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	1b9b      	subs	r3, r3, r6
 8006fba:	4293      	cmp	r3, r2
      n++;
 8006fbc:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8006fc0:	d9eb      	bls.n	8006f9a <rt_test_010_005_execute+0x2a>
  test_set_step(2);
 8006fc2:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8006fc4:	4807      	ldr	r0, [pc, #28]	; (8006fe4 <rt_test_010_005_execute+0x74>)
  test_set_step(2);
 8006fc6:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8006fca:	f7f9 ff61 	bl	8000e90 <test_print>
    test_printn(n);
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7f9 feee 	bl	8000db0 <test_printn>
    test_println(" threads/S");
 8006fd4:	4804      	ldr	r0, [pc, #16]	; (8006fe8 <rt_test_010_005_execute+0x78>)
}
 8006fd6:	b002      	add	sp, #8
 8006fd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 8006fdc:	f7f9 bf38 	b.w	8000e50 <test_println>
 8006fe0:	20000da0 	.word	0x20000da0
 8006fe4:	0800b260 	.word	0x0800b260
 8006fe8:	0800b204 	.word	0x0800b204
 8006fec:	20001774 	.word	0x20001774
 8006ff0:	08003bc1 	.word	0x08003bc1
 8006ff4:	20001060 	.word	0x20001060
	...

08007000 <test_wait_threads>:
void test_wait_threads(void) {
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4c07      	ldr	r4, [pc, #28]	; (8007020 <test_wait_threads+0x20>)
      threads[i] = NULL;
 8007004:	2600      	movs	r6, #0
 8007006:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800700a:	f854 0b04 	ldr.w	r0, [r4], #4
 800700e:	b118      	cbz	r0, 8007018 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8007010:	f7ff fd1e 	bl	8006a50 <chThdWait>
      threads[i] = NULL;
 8007014:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007018:	42ac      	cmp	r4, r5
 800701a:	d1f6      	bne.n	800700a <test_wait_threads+0xa>
}
 800701c:	bd70      	pop	{r4, r5, r6, pc}
 800701e:	bf00      	nop
 8007020:	2000178c 	.word	0x2000178c
	...

08007030 <rt_test_010_008_execute>:
static void rt_test_010_008_execute(void) {
 8007030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007034:	b085      	sub	sp, #20
    n = 0;
 8007036:	ac04      	add	r4, sp, #16
  return ch.rlist.current;
 8007038:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8007120 <rt_test_010_008_execute+0xf0>
  test_set_step(1);
 800703c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8007124 <rt_test_010_008_execute+0xf4>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007040:	4f32      	ldr	r7, [pc, #200]	; (800710c <rt_test_010_008_execute+0xdc>)
 8007042:	4e33      	ldr	r6, [pc, #204]	; (8007110 <rt_test_010_008_execute+0xe0>)
 8007044:	4d33      	ldr	r5, [pc, #204]	; (8007114 <rt_test_010_008_execute+0xe4>)
  test_set_step(1);
 8007046:	2201      	movs	r2, #1
    n = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_set_step(1);
 800704e:	f8c9 2000 	str.w	r2, [r9]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007052:	f7fc f835 	bl	80030c0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8007056:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	9400      	str	r4, [sp, #0]
 800705e:	463b      	mov	r3, r7
 8007060:	3a01      	subs	r2, #1
 8007062:	4630      	mov	r0, r6
 8007064:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007068:	f7fb fbc2 	bl	80027f0 <chThdCreateStatic>
 800706c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007070:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	9400      	str	r4, [sp, #0]
 8007076:	463b      	mov	r3, r7
 8007078:	3a01      	subs	r2, #1
 800707a:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800707e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007082:	f7fb fbb5 	bl	80027f0 <chThdCreateStatic>
 8007086:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800708a:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	9400      	str	r4, [sp, #0]
 8007090:	463b      	mov	r3, r7
 8007092:	3a01      	subs	r2, #1
 8007094:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8007098:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800709c:	f7fb fba8 	bl	80027f0 <chThdCreateStatic>
 80070a0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80070a4:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	9400      	str	r4, [sp, #0]
 80070aa:	463b      	mov	r3, r7
 80070ac:	3a01      	subs	r2, #1
 80070ae:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80070b2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80070b6:	f7fb fb9b 	bl	80027f0 <chThdCreateStatic>
 80070ba:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80070be:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	9400      	str	r4, [sp, #0]
 80070c4:	3a01      	subs	r2, #1
 80070c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80070ca:	463b      	mov	r3, r7
 80070cc:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80070d0:	f7fb fb8e 	bl	80027f0 <chThdCreateStatic>
  test_set_step(2);
 80070d4:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80070d6:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
 80070d8:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(2);
 80070dc:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 80070e0:	f7fb ff66 	bl	8002fb0 <chThdSleep>
    test_terminate_threads();
 80070e4:	f7f9 fe14 	bl	8000d10 <test_terminate_threads>
    test_wait_threads();
 80070e8:	f7ff ff8a 	bl	8007000 <test_wait_threads>
  test_set_step(3);
 80070ec:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80070ee:	480a      	ldr	r0, [pc, #40]	; (8007118 <rt_test_010_008_execute+0xe8>)
  test_set_step(3);
 80070f0:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80070f4:	f7f9 fecc 	bl	8000e90 <test_print>
    test_printn(n);
 80070f8:	9803      	ldr	r0, [sp, #12]
 80070fa:	f7f9 fe59 	bl	8000db0 <test_printn>
    test_println(" ctxswc/S");
 80070fe:	4807      	ldr	r0, [pc, #28]	; (800711c <rt_test_010_008_execute+0xec>)
 8007100:	f7f9 fea6 	bl	8000e50 <test_println>
}
 8007104:	b005      	add	sp, #20
 8007106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800710a:	bf00      	nop
 800710c:	08002691 	.word	0x08002691
 8007110:	20001060 	.word	0x20001060
 8007114:	2000178c 	.word	0x2000178c
 8007118:	0800b260 	.word	0x0800b260
 800711c:	0800b244 	.word	0x0800b244
 8007120:	20000da0 	.word	0x20000da0
 8007124:	20001774 	.word	0x20001774
	...

08007130 <rt_test_010_004_execute>:
static void rt_test_010_004_execute(void) {
 8007130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8007134:	4b2c      	ldr	r3, [pc, #176]	; (80071e8 <rt_test_010_004_execute+0xb8>)
  test_set_step(1);
 8007136:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007200 <rt_test_010_004_execute+0xd0>
  return chThdGetSelfX()->prio;
 800713a:	699a      	ldr	r2, [r3, #24]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800713c:	482b      	ldr	r0, [pc, #172]	; (80071ec <rt_test_010_004_execute+0xbc>)
 800713e:	6892      	ldr	r2, [r2, #8]
 8007140:	4b2b      	ldr	r3, [pc, #172]	; (80071f0 <rt_test_010_004_execute+0xc0>)
static void rt_test_010_004_execute(void) {
 8007142:	b082      	sub	sp, #8
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007144:	2500      	movs	r5, #0
 8007146:	3201      	adds	r2, #1
  test_set_step(1);
 8007148:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800714a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800714e:	9500      	str	r5, [sp, #0]
  test_set_step(1);
 8007150:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007154:	f7fb fb4c 	bl	80027f0 <chThdCreateStatic>
 8007158:	4a26      	ldr	r2, [pc, #152]	; (80071f4 <rt_test_010_004_execute+0xc4>)
  test_set_step(2);
 800715a:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800715c:	4604      	mov	r4, r0
 800715e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007160:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8007164:	f7fb ffac 	bl	80030c0 <test_wait_tick>
      chSchWakeupS(tp, MSG_OK);
 8007168:	462e      	mov	r6, r5
    start = test_wait_tick();
 800716a:	4681      	mov	r9, r0
 800716c:	2720      	movs	r7, #32
 800716e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8007172:	f387 8811 	msr	BASEPRI, r7
      chSchWakeupS(tp, MSG_OK);
 8007176:	2100      	movs	r1, #0
 8007178:	4620      	mov	r0, r4
 800717a:	f7fb faa1 	bl	80026c0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800717e:	4620      	mov	r0, r4
 8007180:	2100      	movs	r1, #0
 8007182:	f7fb fa9d 	bl	80026c0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007186:	4620      	mov	r0, r4
 8007188:	2100      	movs	r1, #0
 800718a:	f7fb fa99 	bl	80026c0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800718e:	4620      	mov	r0, r4
 8007190:	2100      	movs	r1, #0
 8007192:	f7fb fa95 	bl	80026c0 <chSchWakeupS>
 8007196:	f386 8811 	msr	BASEPRI, r6
 800719a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 800719e:	f242 720f 	movw	r2, #9999	; 0x270f
 80071a2:	eba3 0309 	sub.w	r3, r3, r9
 80071a6:	4293      	cmp	r3, r2
      n += 4;
 80071a8:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 80071ac:	d9e1      	bls.n	8007172 <rt_test_010_004_execute+0x42>
  test_set_step(3);
 80071ae:	2303      	movs	r3, #3
 80071b0:	f8ca 3000 	str.w	r3, [sl]
 80071b4:	f387 8811 	msr	BASEPRI, r7
    chSchWakeupS(tp, MSG_TIMEOUT);
 80071b8:	f04f 31ff 	mov.w	r1, #4294967295
 80071bc:	4620      	mov	r0, r4
 80071be:	f7fb fa7f 	bl	80026c0 <chSchWakeupS>
 80071c2:	f386 8811 	msr	BASEPRI, r6
    test_wait_threads();
 80071c6:	f7ff ff1b 	bl	8007000 <test_wait_threads>
  test_set_step(4);
 80071ca:	2304      	movs	r3, #4
    test_print("--- Score : ");
 80071cc:	480a      	ldr	r0, [pc, #40]	; (80071f8 <rt_test_010_004_execute+0xc8>)
  test_set_step(4);
 80071ce:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 80071d2:	f7f9 fe5d 	bl	8000e90 <test_print>
    test_printn(n * 2);
 80071d6:	0068      	lsls	r0, r5, #1
 80071d8:	f7f9 fdea 	bl	8000db0 <test_printn>
    test_println(" ctxswc/S");
 80071dc:	4807      	ldr	r0, [pc, #28]	; (80071fc <rt_test_010_004_execute+0xcc>)
}
 80071de:	b002      	add	sp, #8
 80071e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 80071e4:	f7f9 be34 	b.w	8000e50 <test_println>
 80071e8:	20000da0 	.word	0x20000da0
 80071ec:	20001060 	.word	0x20001060
 80071f0:	080029d1 	.word	0x080029d1
 80071f4:	2000178c 	.word	0x2000178c
 80071f8:	0800b260 	.word	0x0800b260
 80071fc:	0800b244 	.word	0x0800b244
 8007200:	20001774 	.word	0x20001774
	...

08007210 <rt_test_010_003_execute>:
static void rt_test_010_003_execute(void) {
 8007210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8007214:	4f34      	ldr	r7, [pc, #208]	; (80072e8 <rt_test_010_003_execute+0xd8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007216:	4d35      	ldr	r5, [pc, #212]	; (80072ec <rt_test_010_003_execute+0xdc>)
  return chThdGetSelfX()->prio;
 8007218:	69bb      	ldr	r3, [r7, #24]
  test_set_step(1);
 800721a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8007304 <rt_test_010_003_execute+0xf4>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	4b33      	ldr	r3, [pc, #204]	; (80072f0 <rt_test_010_003_execute+0xe0>)
 8007222:	4c34      	ldr	r4, [pc, #208]	; (80072f4 <rt_test_010_003_execute+0xe4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007224:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8007308 <rt_test_010_003_execute+0xf8>
static void rt_test_010_003_execute(void) {
 8007228:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800722a:	2600      	movs	r6, #0
  test_set_step(1);
 800722c:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007230:	3201      	adds	r2, #1
 8007232:	4628      	mov	r0, r5
 8007234:	9600      	str	r6, [sp, #0]
 8007236:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 800723a:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800723e:	f7fb fad7 	bl	80027f0 <chThdCreateStatic>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	9600      	str	r6, [sp, #0]
  test_set_step(2);
 800724a:	f04f 0c02 	mov.w	ip, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800724e:	464b      	mov	r3, r9
 8007250:	3a02      	subs	r2, #2
 8007252:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007256:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 800725a:	f8c8 c000 	str.w	ip, [r8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800725e:	f7fb fac7 	bl	80027f0 <chThdCreateStatic>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	9600      	str	r6, [sp, #0]
 800726a:	464b      	mov	r3, r9
 800726c:	3a03      	subs	r2, #3
 800726e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007272:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007276:	f7fb fabb 	bl	80027f0 <chThdCreateStatic>
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	9600      	str	r6, [sp, #0]
 8007282:	464b      	mov	r3, r9
 8007284:	3a04      	subs	r2, #4
 8007286:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800728a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800728e:	f7fb faaf 	bl	80027f0 <chThdCreateStatic>
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	9600      	str	r6, [sp, #0]
 800729a:	3a05      	subs	r2, #5
 800729c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80072a0:	464b      	mov	r3, r9
 80072a2:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 80072a6:	f7fb faa3 	bl	80027f0 <chThdCreateStatic>
  test_set_step(3);
 80072aa:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80072ac:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 80072ae:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 80072b0:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 80072b4:	f7fc f96c 	bl	8003590 <msg_loop_test>
 80072b8:	4604      	mov	r4, r0
    test_wait_threads();
 80072ba:	f7ff fea1 	bl	8007000 <test_wait_threads>
  test_set_step(4);
 80072be:	2304      	movs	r3, #4
    test_print("--- Score : ");
 80072c0:	480d      	ldr	r0, [pc, #52]	; (80072f8 <rt_test_010_003_execute+0xe8>)
  test_set_step(4);
 80072c2:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 80072c6:	f7f9 fde3 	bl	8000e90 <test_print>
    test_printn(n);
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7f9 fd70 	bl	8000db0 <test_printn>
    test_print(" msgs/S, ");
 80072d0:	480a      	ldr	r0, [pc, #40]	; (80072fc <rt_test_010_003_execute+0xec>)
 80072d2:	f7f9 fddd 	bl	8000e90 <test_print>
    test_printn(n << 1);
 80072d6:	0060      	lsls	r0, r4, #1
 80072d8:	f7f9 fd6a 	bl	8000db0 <test_printn>
    test_println(" ctxswc/S");
 80072dc:	4808      	ldr	r0, [pc, #32]	; (8007300 <rt_test_010_003_execute+0xf0>)
}
 80072de:	b003      	add	sp, #12
 80072e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_println(" ctxswc/S");
 80072e4:	f7f9 bdb4 	b.w	8000e50 <test_println>
 80072e8:	20000da0 	.word	0x20000da0
 80072ec:	20001060 	.word	0x20001060
 80072f0:	08003531 	.word	0x08003531
 80072f4:	2000178c 	.word	0x2000178c
 80072f8:	0800b260 	.word	0x0800b260
 80072fc:	0800b1c8 	.word	0x0800b1c8
 8007300:	0800b244 	.word	0x0800b244
 8007304:	20001774 	.word	0x20001774
 8007308:	08003bc1 	.word	0x08003bc1
 800730c:	00000000 	.word	0x00000000

08007310 <rt_test_010_002_execute>:
static void rt_test_010_002_execute(void) {
 8007310:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 8007312:	4b16      	ldr	r3, [pc, #88]	; (800736c <rt_test_010_002_execute+0x5c>)
  test_set_step(1);
 8007314:	4c16      	ldr	r4, [pc, #88]	; (8007370 <rt_test_010_002_execute+0x60>)
  return chThdGetSelfX()->prio;
 8007316:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007318:	4816      	ldr	r0, [pc, #88]	; (8007374 <rt_test_010_002_execute+0x64>)
 800731a:	6892      	ldr	r2, [r2, #8]
 800731c:	4b16      	ldr	r3, [pc, #88]	; (8007378 <rt_test_010_002_execute+0x68>)
static void rt_test_010_002_execute(void) {
 800731e:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007320:	2100      	movs	r1, #0
 8007322:	9100      	str	r1, [sp, #0]
 8007324:	3201      	adds	r2, #1
 8007326:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 800732a:	2501      	movs	r5, #1
 800732c:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800732e:	f7fb fa5f 	bl	80027f0 <chThdCreateStatic>
 8007332:	4a12      	ldr	r2, [pc, #72]	; (800737c <rt_test_010_002_execute+0x6c>)
  test_set_step(2);
 8007334:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007336:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007338:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 800733a:	f7fc f929 	bl	8003590 <msg_loop_test>
 800733e:	4605      	mov	r5, r0
    test_wait_threads();
 8007340:	f7ff fe5e 	bl	8007000 <test_wait_threads>
  test_set_step(3);
 8007344:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8007346:	480e      	ldr	r0, [pc, #56]	; (8007380 <rt_test_010_002_execute+0x70>)
  test_set_step(3);
 8007348:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 800734a:	f7f9 fda1 	bl	8000e90 <test_print>
    test_printn(n);
 800734e:	4628      	mov	r0, r5
 8007350:	f7f9 fd2e 	bl	8000db0 <test_printn>
    test_print(" msgs/S, ");
 8007354:	480b      	ldr	r0, [pc, #44]	; (8007384 <rt_test_010_002_execute+0x74>)
 8007356:	f7f9 fd9b 	bl	8000e90 <test_print>
    test_printn(n << 1);
 800735a:	0068      	lsls	r0, r5, #1
 800735c:	f7f9 fd28 	bl	8000db0 <test_printn>
    test_println(" ctxswc/S");
 8007360:	4809      	ldr	r0, [pc, #36]	; (8007388 <rt_test_010_002_execute+0x78>)
}
 8007362:	b003      	add	sp, #12
 8007364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_println(" ctxswc/S");
 8007368:	f7f9 bd72 	b.w	8000e50 <test_println>
 800736c:	20000da0 	.word	0x20000da0
 8007370:	20001774 	.word	0x20001774
 8007374:	20001060 	.word	0x20001060
 8007378:	08003531 	.word	0x08003531
 800737c:	2000178c 	.word	0x2000178c
 8007380:	0800b260 	.word	0x0800b260
 8007384:	0800b1c8 	.word	0x0800b1c8
 8007388:	0800b244 	.word	0x0800b244
 800738c:	00000000 	.word	0x00000000

08007390 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 8007390:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 8007392:	4b16      	ldr	r3, [pc, #88]	; (80073ec <rt_test_010_001_execute+0x5c>)
  test_set_step(1);
 8007394:	4c16      	ldr	r4, [pc, #88]	; (80073f0 <rt_test_010_001_execute+0x60>)
  return chThdGetSelfX()->prio;
 8007396:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007398:	4816      	ldr	r0, [pc, #88]	; (80073f4 <rt_test_010_001_execute+0x64>)
 800739a:	6892      	ldr	r2, [r2, #8]
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <rt_test_010_001_execute+0x68>)
static void rt_test_010_001_execute(void) {
 800739e:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80073a0:	2100      	movs	r1, #0
 80073a2:	9100      	str	r1, [sp, #0]
 80073a4:	3a01      	subs	r2, #1
 80073a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 80073aa:	2501      	movs	r5, #1
 80073ac:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80073ae:	f7fb fa1f 	bl	80027f0 <chThdCreateStatic>
 80073b2:	4a12      	ldr	r2, [pc, #72]	; (80073fc <rt_test_010_001_execute+0x6c>)
  test_set_step(2);
 80073b4:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80073b6:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 80073b8:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 80073ba:	f7fc f8e9 	bl	8003590 <msg_loop_test>
 80073be:	4605      	mov	r5, r0
    test_wait_threads();
 80073c0:	f7ff fe1e 	bl	8007000 <test_wait_threads>
  test_set_step(3);
 80073c4:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80073c6:	480e      	ldr	r0, [pc, #56]	; (8007400 <rt_test_010_001_execute+0x70>)
  test_set_step(3);
 80073c8:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 80073ca:	f7f9 fd61 	bl	8000e90 <test_print>
    test_printn(n);
 80073ce:	4628      	mov	r0, r5
 80073d0:	f7f9 fcee 	bl	8000db0 <test_printn>
    test_print(" msgs/S, ");
 80073d4:	480b      	ldr	r0, [pc, #44]	; (8007404 <rt_test_010_001_execute+0x74>)
 80073d6:	f7f9 fd5b 	bl	8000e90 <test_print>
    test_printn(n << 1);
 80073da:	0068      	lsls	r0, r5, #1
 80073dc:	f7f9 fce8 	bl	8000db0 <test_printn>
    test_println(" ctxswc/S");
 80073e0:	4809      	ldr	r0, [pc, #36]	; (8007408 <rt_test_010_001_execute+0x78>)
}
 80073e2:	b003      	add	sp, #12
 80073e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_println(" ctxswc/S");
 80073e8:	f7f9 bd32 	b.w	8000e50 <test_println>
 80073ec:	20000da0 	.word	0x20000da0
 80073f0:	20001774 	.word	0x20001774
 80073f4:	20001060 	.word	0x20001060
 80073f8:	08003531 	.word	0x08003531
 80073fc:	2000178c 	.word	0x2000178c
 8007400:	0800b260 	.word	0x0800b260
 8007404:	0800b1c8 	.word	0x0800b1c8
 8007408:	0800b244 	.word	0x0800b244
 800740c:	00000000 	.word	0x00000000

08007410 <rt_test_009_002_execute>:

static void rt_test_009_002_execute(void) {
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8007412:	4d3d      	ldr	r5, [pc, #244]	; (8007508 <rt_test_009_002_execute+0xf8>)
 8007414:	4b3d      	ldr	r3, [pc, #244]	; (800750c <rt_test_009_002_execute+0xfc>)
 8007416:	4a3e      	ldr	r2, [pc, #248]	; (8007510 <rt_test_009_002_execute+0x100>)
 8007418:	493e      	ldr	r1, [pc, #248]	; (8007514 <rt_test_009_002_execute+0x104>)
 800741a:	2001      	movs	r0, #1
 800741c:	6028      	str	r0, [r5, #0]
 800741e:	f103 070c 	add.w	r7, r3, #12
 8007422:	2620      	movs	r6, #32
 8007424:	2400      	movs	r4, #0
 8007426:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 800742a:	6808      	ldr	r0, [r1, #0]
 800742c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 800742e:	600a      	str	r2, [r1, #0]
 8007430:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
 8007434:	429f      	cmp	r7, r3
 8007436:	d002      	beq.n	800743e <rt_test_009_002_execute+0x2e>
 8007438:	f853 2b04 	ldr.w	r2, [r3], #4
 800743c:	e7f3      	b.n	8007426 <rt_test_009_002_execute+0x16>
  return ch.rlist.current;
 800743e:	4b36      	ldr	r3, [pc, #216]	; (8007518 <rt_test_009_002_execute+0x108>)
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007440:	4a36      	ldr	r2, [pc, #216]	; (800751c <rt_test_009_002_execute+0x10c>)
  return chThdGetSelfX()->prio;
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	4836      	ldr	r0, [pc, #216]	; (8007520 <rt_test_009_002_execute+0x110>)
 8007446:	689e      	ldr	r6, [r3, #8]
 8007448:	4c36      	ldr	r4, [pc, #216]	; (8007524 <rt_test_009_002_execute+0x114>)
  test_set_step(3);
 800744a:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 800744c:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 800744e:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007450:	f7fb f97e 	bl	8002750 <chThdCreateFromMemoryPool.constprop.41>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007454:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007456:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007458:	4a33      	ldr	r2, [pc, #204]	; (8007528 <rt_test_009_002_execute+0x118>)
 800745a:	4834      	ldr	r0, [pc, #208]	; (800752c <rt_test_009_002_execute+0x11c>)
 800745c:	f7fb f978 	bl	8002750 <chThdCreateFromMemoryPool.constprop.41>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007460:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007462:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007464:	4a32      	ldr	r2, [pc, #200]	; (8007530 <rt_test_009_002_execute+0x120>)
 8007466:	4833      	ldr	r0, [pc, #204]	; (8007534 <rt_test_009_002_execute+0x124>)
 8007468:	f7fb f972 	bl	8002750 <chThdCreateFromMemoryPool.constprop.41>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800746c:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800746e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007470:	4a31      	ldr	r2, [pc, #196]	; (8007538 <rt_test_009_002_execute+0x128>)
 8007472:	4832      	ldr	r0, [pc, #200]	; (800753c <rt_test_009_002_execute+0x12c>)
 8007474:	f7fb f96c 	bl	8002750 <chThdCreateFromMemoryPool.constprop.41>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007478:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800747a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800747c:	4a30      	ldr	r2, [pc, #192]	; (8007540 <rt_test_009_002_execute+0x130>)
 800747e:	4831      	ldr	r0, [pc, #196]	; (8007544 <rt_test_009_002_execute+0x134>)
 8007480:	f7fb f966 	bl	8002750 <chThdCreateFromMemoryPool.constprop.41>
 8007484:	4606      	mov	r6, r0
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 8007486:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007488:	6126      	str	r6, [r4, #16]
  test_set_step(4);
 800748a:	2304      	movs	r3, #4
 800748c:	602b      	str	r3, [r5, #0]
    test_assert((threads[0] != NULL) &&
 800748e:	b138      	cbz	r0, 80074a0 <rt_test_009_002_execute+0x90>
 8007490:	6860      	ldr	r0, [r4, #4]
 8007492:	b128      	cbz	r0, 80074a0 <rt_test_009_002_execute+0x90>
 8007494:	68a0      	ldr	r0, [r4, #8]
 8007496:	b118      	cbz	r0, 80074a0 <rt_test_009_002_execute+0x90>
 8007498:	68e0      	ldr	r0, [r4, #12]
 800749a:	3000      	adds	r0, #0
 800749c:	bf18      	it	ne
 800749e:	2001      	movne	r0, #1
 80074a0:	4929      	ldr	r1, [pc, #164]	; (8007548 <rt_test_009_002_execute+0x138>)
 80074a2:	f7f9 fbf5 	bl	8000c90 <_test_assert>
 80074a6:	b100      	cbz	r0, 80074aa <rt_test_009_002_execute+0x9a>
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
}
 80074a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 80074aa:	fab6 f086 	clz	r0, r6
 80074ae:	0940      	lsrs	r0, r0, #5
 80074b0:	4926      	ldr	r1, [pc, #152]	; (800754c <rt_test_009_002_execute+0x13c>)
 80074b2:	f7f9 fbed 	bl	8000c90 <_test_assert>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d1f6      	bne.n	80074a8 <rt_test_009_002_execute+0x98>
  test_set_step(5);
 80074ba:	2305      	movs	r3, #5
 80074bc:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 80074be:	f7ff fd9f 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 80074c2:	4923      	ldr	r1, [pc, #140]	; (8007550 <rt_test_009_002_execute+0x140>)
 80074c4:	4823      	ldr	r0, [pc, #140]	; (8007554 <rt_test_009_002_execute+0x144>)
 80074c6:	f7f9 fcfb 	bl	8000ec0 <_test_assert_sequence>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d1ec      	bne.n	80074a8 <rt_test_009_002_execute+0x98>
  test_set_step(6);
 80074ce:	2306      	movs	r3, #6
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 80074d0:	4f10      	ldr	r7, [pc, #64]	; (8007514 <rt_test_009_002_execute+0x104>)
 80074d2:	4e21      	ldr	r6, [pc, #132]	; (8007558 <rt_test_009_002_execute+0x148>)
  test_set_step(6);
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 80074d8:	4638      	mov	r0, r7
 80074da:	f7f9 fda9 	bl	8001030 <chPoolAlloc>
 80074de:	3000      	adds	r0, #0
 80074e0:	bf18      	it	ne
 80074e2:	2001      	movne	r0, #1
 80074e4:	4631      	mov	r1, r6
 80074e6:	f7f9 fbd3 	bl	8000c90 <_test_assert>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d1dc      	bne.n	80074a8 <rt_test_009_002_execute+0x98>
    for (i = 0; i < 4; i++)
 80074ee:	3c01      	subs	r4, #1
 80074f0:	d1f2      	bne.n	80074d8 <rt_test_009_002_execute+0xc8>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 80074f2:	4808      	ldr	r0, [pc, #32]	; (8007514 <rt_test_009_002_execute+0x104>)
 80074f4:	f7f9 fd9c 	bl	8001030 <chPoolAlloc>
 80074f8:	fab0 f080 	clz	r0, r0
 80074fc:	0940      	lsrs	r0, r0, #5
 80074fe:	4917      	ldr	r1, [pc, #92]	; (800755c <rt_test_009_002_execute+0x14c>)
}
 8007500:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8007504:	f7f9 bbc4 	b.w	8000c90 <_test_assert>
 8007508:	20001774 	.word	0x20001774
 800750c:	0800c0a4 	.word	0x0800c0a4
 8007510:	20001060 	.word	0x20001060
 8007514:	20001010 	.word	0x20001010
 8007518:	20000da0 	.word	0x20000da0
 800751c:	0800aee8 	.word	0x0800aee8
 8007520:	0800b114 	.word	0x0800b114
 8007524:	2000178c 	.word	0x2000178c
 8007528:	0800aeec 	.word	0x0800aeec
 800752c:	0800b11c 	.word	0x0800b11c
 8007530:	0800b124 	.word	0x0800b124
 8007534:	0800b128 	.word	0x0800b128
 8007538:	0800bee0 	.word	0x0800bee0
 800753c:	0800b130 	.word	0x0800b130
 8007540:	0800af64 	.word	0x0800af64
 8007544:	0800b138 	.word	0x0800b138
 8007548:	0800b140 	.word	0x0800b140
 800754c:	0800b158 	.word	0x0800b158
 8007550:	0800afc4 	.word	0x0800afc4
 8007554:	08009dec 	.word	0x08009dec
 8007558:	0800b174 	.word	0x0800b174
 800755c:	0800b184 	.word	0x0800b184

08007560 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8007564:	4b45      	ldr	r3, [pc, #276]	; (800767c <rt_test_009_001_execute+0x11c>)
  test_set_step(2);
 8007566:	4c46      	ldr	r4, [pc, #280]	; (8007680 <rt_test_009_001_execute+0x120>)
  return chThdGetSelfX()->prio;
 8007568:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 800756a:	4846      	ldr	r0, [pc, #280]	; (8007684 <rt_test_009_001_execute+0x124>)
 800756c:	689e      	ldr	r6, [r3, #8]
static void rt_test_009_001_execute(void) {
 800756e:	b086      	sub	sp, #24
  test_set_step(2);
 8007570:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007572:	a905      	add	r1, sp, #20
 8007574:	aa04      	add	r2, sp, #16
  test_set_step(2);
 8007576:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007578:	f7fe fbe2 	bl	8005d40 <chHeapStatus>
 800757c:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 800757e:	f1a0 0001 	sub.w	r0, r0, #1
 8007582:	fab0 f080 	clz	r0, r0
 8007586:	0940      	lsrs	r0, r0, #5
 8007588:	493f      	ldr	r1, [pc, #252]	; (8007688 <rt_test_009_001_execute+0x128>)
 800758a:	f7f9 fb81 	bl	8000c90 <_test_assert>
 800758e:	b110      	cbz	r0, 8007596 <rt_test_009_001_execute+0x36>
}
 8007590:	b006      	add	sp, #24
 8007592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    threads[0] = chThdCreateFromHeap(&heap1,
 8007596:	4b3d      	ldr	r3, [pc, #244]	; (800768c <rt_test_009_001_execute+0x12c>)
 8007598:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80076c4 <rt_test_009_001_execute+0x164>
 800759c:	4a3c      	ldr	r2, [pc, #240]	; (8007690 <rt_test_009_001_execute+0x130>)
 800759e:	4839      	ldr	r0, [pc, #228]	; (8007684 <rt_test_009_001_execute+0x124>)
 80075a0:	4f3c      	ldr	r7, [pc, #240]	; (8007694 <rt_test_009_001_execute+0x134>)
  test_set_step(3);
 80075a2:	2103      	movs	r1, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 80075a4:	e9cd 8300 	strd	r8, r3, [sp]
  test_set_step(3);
 80075a8:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 80075aa:	1e73      	subs	r3, r6, #1
 80075ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80075b0:	f7fd fa36 	bl	8004a20 <chThdCreateFromHeap>
 80075b4:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 80075b6:	3000      	adds	r0, #0
 80075b8:	bf18      	it	ne
 80075ba:	2001      	movne	r0, #1
 80075bc:	4936      	ldr	r1, [pc, #216]	; (8007698 <rt_test_009_001_execute+0x138>)
 80075be:	f7f9 fb67 	bl	8000c90 <_test_assert>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d1e4      	bne.n	8007590 <rt_test_009_001_execute+0x30>
    threads[1] = chThdCreateFromHeap(&heap1,
 80075c6:	4b35      	ldr	r3, [pc, #212]	; (800769c <rt_test_009_001_execute+0x13c>)
 80075c8:	4a35      	ldr	r2, [pc, #212]	; (80076a0 <rt_test_009_001_execute+0x140>)
 80075ca:	482e      	ldr	r0, [pc, #184]	; (8007684 <rt_test_009_001_execute+0x124>)
  test_set_step(4);
 80075cc:	2104      	movs	r1, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 80075ce:	e9cd 8300 	strd	r8, r3, [sp]
  test_set_step(4);
 80075d2:	6021      	str	r1, [r4, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 80075d4:	1eb3      	subs	r3, r6, #2
 80075d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80075da:	f7fd fa21 	bl	8004a20 <chThdCreateFromHeap>
 80075de:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 80075e0:	3000      	adds	r0, #0
 80075e2:	bf18      	it	ne
 80075e4:	2001      	movne	r0, #1
 80075e6:	492c      	ldr	r1, [pc, #176]	; (8007698 <rt_test_009_001_execute+0x138>)
    threads[1] = chThdCreateFromHeap(&heap1,
 80075e8:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 80075ea:	f7f9 fb51 	bl	8000c90 <_test_assert>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d1ce      	bne.n	8007590 <rt_test_009_001_execute+0x30>
    threads[2] = chThdCreateFromHeap(&heap1,
 80075f2:	4a2c      	ldr	r2, [pc, #176]	; (80076a4 <rt_test_009_001_execute+0x144>)
 80075f4:	9201      	str	r2, [sp, #4]
  test_set_step(5);
 80075f6:	2105      	movs	r1, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 80075f8:	1ef3      	subs	r3, r6, #3
  test_set_step(5);
 80075fa:	6021      	str	r1, [r4, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 80075fc:	f8cd 8000 	str.w	r8, [sp]
 8007600:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007604:	4a28      	ldr	r2, [pc, #160]	; (80076a8 <rt_test_009_001_execute+0x148>)
 8007606:	481f      	ldr	r0, [pc, #124]	; (8007684 <rt_test_009_001_execute+0x124>)
 8007608:	f7fd fa0a 	bl	8004a20 <chThdCreateFromHeap>
 800760c:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 800760e:	fab0 f080 	clz	r0, r0
 8007612:	0940      	lsrs	r0, r0, #5
 8007614:	4925      	ldr	r1, [pc, #148]	; (80076ac <rt_test_009_001_execute+0x14c>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8007616:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8007618:	f7f9 fb3a 	bl	8000c90 <_test_assert>
 800761c:	2800      	cmp	r0, #0
 800761e:	d1b7      	bne.n	8007590 <rt_test_009_001_execute+0x30>
  test_set_step(6);
 8007620:	2306      	movs	r3, #6
 8007622:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 8007624:	f7ff fcec 	bl	8007000 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8007628:	4921      	ldr	r1, [pc, #132]	; (80076b0 <rt_test_009_001_execute+0x150>)
 800762a:	4822      	ldr	r0, [pc, #136]	; (80076b4 <rt_test_009_001_execute+0x154>)
 800762c:	f7f9 fc48 	bl	8000ec0 <_test_assert_sequence>
 8007630:	2800      	cmp	r0, #0
 8007632:	d1ad      	bne.n	8007590 <rt_test_009_001_execute+0x30>
  test_set_step(7);
 8007634:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8007636:	a903      	add	r1, sp, #12
 8007638:	aa02      	add	r2, sp, #8
 800763a:	4812      	ldr	r0, [pc, #72]	; (8007684 <rt_test_009_001_execute+0x124>)
  test_set_step(7);
 800763c:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800763e:	f7fe fb7f 	bl	8005d40 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8007642:	1a28      	subs	r0, r5, r0
 8007644:	fab0 f080 	clz	r0, r0
 8007648:	491b      	ldr	r1, [pc, #108]	; (80076b8 <rt_test_009_001_execute+0x158>)
 800764a:	0940      	lsrs	r0, r0, #5
 800764c:	f7f9 fb20 	bl	8000c90 <_test_assert>
 8007650:	2800      	cmp	r0, #0
 8007652:	d19d      	bne.n	8007590 <rt_test_009_001_execute+0x30>
    test_assert(total1 == total2, "total free space changed");
 8007654:	9805      	ldr	r0, [sp, #20]
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	4918      	ldr	r1, [pc, #96]	; (80076bc <rt_test_009_001_execute+0x15c>)
 800765a:	1ac0      	subs	r0, r0, r3
 800765c:	fab0 f080 	clz	r0, r0
 8007660:	0940      	lsrs	r0, r0, #5
 8007662:	f7f9 fb15 	bl	8000c90 <_test_assert>
 8007666:	2800      	cmp	r0, #0
 8007668:	d192      	bne.n	8007590 <rt_test_009_001_execute+0x30>
    test_assert(largest1 == largest2, "largest fragment size changed");
 800766a:	9804      	ldr	r0, [sp, #16]
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	4914      	ldr	r1, [pc, #80]	; (80076c0 <rt_test_009_001_execute+0x160>)
 8007670:	1ac3      	subs	r3, r0, r3
 8007672:	4258      	negs	r0, r3
 8007674:	4158      	adcs	r0, r3
 8007676:	f7f9 fb0b 	bl	8000c90 <_test_assert>
 800767a:	e789      	b.n	8007590 <rt_test_009_001_execute+0x30>
 800767c:	20000da0 	.word	0x20000da0
 8007680:	20001774 	.word	0x20001774
 8007684:	20000fe4 	.word	0x20000fe4
 8007688:	08009ee8 	.word	0x08009ee8
 800768c:	0800aee8 	.word	0x0800aee8
 8007690:	0800b114 	.word	0x0800b114
 8007694:	2000178c 	.word	0x2000178c
 8007698:	0800b140 	.word	0x0800b140
 800769c:	0800aeec 	.word	0x0800aeec
 80076a0:	0800b11c 	.word	0x0800b11c
 80076a4:	0800b124 	.word	0x0800b124
 80076a8:	0800b128 	.word	0x0800b128
 80076ac:	0800b158 	.word	0x0800b158
 80076b0:	0800afc4 	.word	0x0800afc4
 80076b4:	0800b0ac 	.word	0x0800b0ac
 80076b8:	0800b0b0 	.word	0x0800b0b0
 80076bc:	0800b0c8 	.word	0x0800b0c8
 80076c0:	0800b0e4 	.word	0x0800b0e4
 80076c4:	08000e41 	.word	0x08000e41
	...

080076d0 <rt_test_008_007_execute>:

static void rt_test_008_007_execute(void) {
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 80076d4:	4d3e      	ldr	r5, [pc, #248]	; (80077d0 <rt_test_008_007_execute+0x100>)
 80076d6:	2301      	movs	r3, #1
static void rt_test_008_007_execute(void) {
 80076d8:	b08d      	sub	sp, #52	; 0x34
  test_set_step(1);
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	2220      	movs	r2, #32
 80076de:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 80076e2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80077f0 <rt_test_008_007_execute+0x120>
  elp->listener = currp;
 80076e6:	4f3b      	ldr	r7, [pc, #236]	; (80077d4 <rt_test_008_007_execute+0x104>)
  elp->next     = esp->next;
 80076e8:	f8d8 0000 	ldr.w	r0, [r8]
  elp->listener = currp;
 80076ec:	69b9      	ldr	r1, [r7, #24]
  elp->events   = events;
 80076ee:	9309      	str	r3, [sp, #36]	; 0x24
  elp->next     = esp->next;
 80076f0:	ae0c      	add	r6, sp, #48	; 0x30
  elp->flags    = (eventflags_t)0;
 80076f2:	2300      	movs	r3, #0
  elp->next     = esp->next;
 80076f4:	f846 0d14 	str.w	r0, [r6, #-20]!
  elp->wflags   = wflags;
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
  elp->listener = currp;
 80076fc:	9108      	str	r1, [sp, #32]
  esp->next     = elp;
 80076fe:	f8c8 6000 	str.w	r6, [r8]
  elp->wflags   = wflags;
 8007702:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 800770e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80077f4 <rt_test_008_007_execute+0x124>
  elp->listener = currp;
 8007712:	69ba      	ldr	r2, [r7, #24]
  elp->next     = esp->next;
 8007714:	f8d9 1000 	ldr.w	r1, [r9]
  elp->flags    = (eventflags_t)0;
 8007718:	9305      	str	r3, [sp, #20]
  elp->next     = esp->next;
 800771a:	ac0c      	add	r4, sp, #48	; 0x30
  elp->events   = events;
 800771c:	f04f 0a04 	mov.w	sl, #4
  elp->next     = esp->next;
 8007720:	f844 1d28 	str.w	r1, [r4, #-40]!
  elp->wflags   = wflags;
 8007724:	9006      	str	r0, [sp, #24]
  elp->listener = currp;
 8007726:	9203      	str	r2, [sp, #12]
  esp->next     = elp;
 8007728:	f8c9 4000 	str.w	r4, [r9]
  elp->events   = events;
 800772c:	f8cd a010 	str.w	sl, [sp, #16]
 8007730:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8007734:	2302      	movs	r3, #2
 8007736:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007738:	f7fb fcc2 	bl	80030c0 <test_wait_tick>
 800773c:	69bb      	ldr	r3, [r7, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800773e:	4926      	ldr	r1, [pc, #152]	; (80077d8 <rt_test_008_007_execute+0x108>)
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <rt_test_008_007_execute+0x10c>)
 8007744:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007746:	4683      	mov	fp, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007748:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800774c:	3a01      	subs	r2, #1
 800774e:	4824      	ldr	r0, [pc, #144]	; (80077e0 <rt_test_008_007_execute+0x110>)
 8007750:	f7fb f84e 	bl	80027f0 <chThdCreateStatic>
 8007754:	4a23      	ldr	r2, [pc, #140]	; (80077e4 <rt_test_008_007_execute+0x114>)
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8007756:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007758:	6010      	str	r0, [r2, #0]
  test_set_step(3);
 800775a:	602b      	str	r3, [r5, #0]
  {
    m = chEvtWaitAll(5);
 800775c:	f7fb f918 	bl	8002990 <chEvtWaitAll.constprop.46>
    test_assert_time_window(target_time,
 8007760:	f50b 7102 	add.w	r1, fp, #520	; 0x208
 8007764:	f50b 70fa 	add.w	r0, fp, #500	; 0x1f4
 8007768:	f7f9 f86a 	bl	8000840 <_test_assert_time_window.constprop.1>
 800776c:	b110      	cbz	r0, 8007774 <rt_test_008_007_execute+0xa4>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 800776e:	b00d      	add	sp, #52	; 0x34
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007774:	f7f9 f854 	bl	8000820 <chEvtGetAndClearEvents.constprop.52>
    test_assert(m == 0, "stuck event");
 8007778:	fab0 f080 	clz	r0, r0
 800777c:	0940      	lsrs	r0, r0, #5
 800777e:	491a      	ldr	r1, [pc, #104]	; (80077e8 <rt_test_008_007_execute+0x118>)
 8007780:	f7f9 fa86 	bl	8000c90 <_test_assert>
 8007784:	2800      	cmp	r0, #0
 8007786:	d1f2      	bne.n	800776e <rt_test_008_007_execute+0x9e>
    test_wait_threads();
 8007788:	f7ff fc3a 	bl	8007000 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 800778c:	4631      	mov	r1, r6
 800778e:	4640      	mov	r0, r8
  test_set_step(4);
 8007790:	f8c5 a000 	str.w	sl, [r5]
    chEvtUnregister(&es1, &el1);
 8007794:	f7f9 fcfc 	bl	8001190 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8007798:	4621      	mov	r1, r4
 800779a:	4648      	mov	r0, r9
 800779c:	f7f9 fcf8 	bl	8001190 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 80077a0:	f8d8 0000 	ldr.w	r0, [r8]
 80077a4:	4911      	ldr	r1, [pc, #68]	; (80077ec <rt_test_008_007_execute+0x11c>)
 80077a6:	eba0 0008 	sub.w	r0, r0, r8
 80077aa:	fab0 f080 	clz	r0, r0
 80077ae:	0940      	lsrs	r0, r0, #5
 80077b0:	f7f9 fa6e 	bl	8000c90 <_test_assert>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d1da      	bne.n	800776e <rt_test_008_007_execute+0x9e>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 80077b8:	f8d9 0000 	ldr.w	r0, [r9]
 80077bc:	490b      	ldr	r1, [pc, #44]	; (80077ec <rt_test_008_007_execute+0x11c>)
 80077be:	eba0 0009 	sub.w	r0, r0, r9
 80077c2:	fab0 f080 	clz	r0, r0
 80077c6:	0940      	lsrs	r0, r0, #5
 80077c8:	f7f9 fa62 	bl	8000c90 <_test_assert>
 80077cc:	e7cf      	b.n	800776e <rt_test_008_007_execute+0x9e>
 80077ce:	bf00      	nop
 80077d0:	20001774 	.word	0x20001774
 80077d4:	20000da0 	.word	0x20000da0
 80077d8:	0800aee8 	.word	0x0800aee8
 80077dc:	08004741 	.word	0x08004741
 80077e0:	20001060 	.word	0x20001060
 80077e4:	2000178c 	.word	0x2000178c
 80077e8:	0800b090 	.word	0x0800b090
 80077ec:	0800afa4 	.word	0x0800afa4
 80077f0:	20000c0c 	.word	0x20000c0c
 80077f4:	20000c10 	.word	0x20000c10
	...

08007800 <rt_test_008_005_execute>:
static void rt_test_008_005_execute(void) {
 8007800:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(5);
 8007802:	2005      	movs	r0, #5
static void rt_test_008_005_execute(void) {
 8007804:	b083      	sub	sp, #12
  test_set_step(2);
 8007806:	4c2b      	ldr	r4, [pc, #172]	; (80078b4 <rt_test_008_005_execute+0xb4>)
    chEvtAddEvents(5);
 8007808:	f7f9 fcb2 	bl	8001170 <chEvtAddEvents>
  test_set_step(2);
 800780c:	2302      	movs	r3, #2
 800780e:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 8007810:	f7fb f8be 	bl	8002990 <chEvtWaitAll.constprop.46>
    test_assert(m == 5, "unexpected pending bit");
 8007814:	f1a0 0005 	sub.w	r0, r0, #5
 8007818:	fab0 f080 	clz	r0, r0
 800781c:	4926      	ldr	r1, [pc, #152]	; (80078b8 <rt_test_008_005_execute+0xb8>)
 800781e:	0940      	lsrs	r0, r0, #5
 8007820:	f7f9 fa36 	bl	8000c90 <_test_assert>
 8007824:	b108      	cbz	r0, 800782a <rt_test_008_005_execute+0x2a>
}
 8007826:	b003      	add	sp, #12
 8007828:	bd30      	pop	{r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800782a:	f7f8 fff9 	bl	8000820 <chEvtGetAndClearEvents.constprop.52>
    test_assert(m == 0, "stuck event");
 800782e:	fab0 f080 	clz	r0, r0
 8007832:	0940      	lsrs	r0, r0, #5
 8007834:	4921      	ldr	r1, [pc, #132]	; (80078bc <rt_test_008_005_execute+0xbc>)
 8007836:	f7f9 fa2b 	bl	8000c90 <_test_assert>
 800783a:	2800      	cmp	r0, #0
 800783c:	d1f3      	bne.n	8007826 <rt_test_008_005_execute+0x26>
    chEvtAddEvents(4);
 800783e:	2004      	movs	r0, #4
 8007840:	f7f9 fc96 	bl	8001170 <chEvtAddEvents>
  test_set_step(4);
 8007844:	2304      	movs	r3, #4
 8007846:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007848:	f7fb fc3a 	bl	80030c0 <test_wait_tick>
  return ch.rlist.current;
 800784c:	4a1c      	ldr	r2, [pc, #112]	; (80078c0 <rt_test_008_005_execute+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800784e:	4b1d      	ldr	r3, [pc, #116]	; (80078c4 <rt_test_008_005_execute+0xc4>)
 8007850:	6991      	ldr	r1, [r2, #24]
 8007852:	688a      	ldr	r2, [r1, #8]
 8007854:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007856:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007858:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800785c:	3a01      	subs	r2, #1
 800785e:	481a      	ldr	r0, [pc, #104]	; (80078c8 <rt_test_008_005_execute+0xc8>)
 8007860:	f7fa ffc6 	bl	80027f0 <chThdCreateStatic>
 8007864:	4a19      	ldr	r2, [pc, #100]	; (80078cc <rt_test_008_005_execute+0xcc>)
  test_set_step(5);
 8007866:	2305      	movs	r3, #5
 8007868:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800786a:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 800786c:	f7fb f890 	bl	8002990 <chEvtWaitAll.constprop.46>
    test_assert_time_window(target_time,
 8007870:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 8007874:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8007876:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 800787a:	f7f8 ffe1 	bl	8000840 <_test_assert_time_window.constprop.1>
 800787e:	2800      	cmp	r0, #0
 8007880:	d1d1      	bne.n	8007826 <rt_test_008_005_execute+0x26>
    test_assert(m == 5, "event flags error");
 8007882:	f1a4 0005 	sub.w	r0, r4, #5
 8007886:	fab0 f080 	clz	r0, r0
 800788a:	0940      	lsrs	r0, r0, #5
 800788c:	4910      	ldr	r1, [pc, #64]	; (80078d0 <rt_test_008_005_execute+0xd0>)
 800788e:	f7f9 f9ff 	bl	8000c90 <_test_assert>
 8007892:	2800      	cmp	r0, #0
 8007894:	d1c7      	bne.n	8007826 <rt_test_008_005_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007896:	f7f8 ffc3 	bl	8000820 <chEvtGetAndClearEvents.constprop.52>
    test_assert(m == 0, "stuck event");
 800789a:	fab0 f080 	clz	r0, r0
 800789e:	0940      	lsrs	r0, r0, #5
 80078a0:	4906      	ldr	r1, [pc, #24]	; (80078bc <rt_test_008_005_execute+0xbc>)
 80078a2:	f7f9 f9f5 	bl	8000c90 <_test_assert>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d1bd      	bne.n	8007826 <rt_test_008_005_execute+0x26>
}
 80078aa:	b003      	add	sp, #12
 80078ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 80078b0:	f7ff bba6 	b.w	8007000 <test_wait_threads>
 80078b4:	20001774 	.word	0x20001774
 80078b8:	0800b034 	.word	0x0800b034
 80078bc:	0800b090 	.word	0x0800b090
 80078c0:	20000da0 	.word	0x20000da0
 80078c4:	08004781 	.word	0x08004781
 80078c8:	20001060 	.word	0x20001060
 80078cc:	2000178c 	.word	0x2000178c
 80078d0:	0800b04c 	.word	0x0800b04c
	...

080078e0 <rt_test_008_004_execute>:
static void rt_test_008_004_execute(void) {
 80078e0:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(5);
 80078e2:	2005      	movs	r0, #5
static void rt_test_008_004_execute(void) {
 80078e4:	b083      	sub	sp, #12
  test_set_step(2);
 80078e6:	4c2a      	ldr	r4, [pc, #168]	; (8007990 <rt_test_008_004_execute+0xb0>)
    chEvtAddEvents(5);
 80078e8:	f7f9 fc42 	bl	8001170 <chEvtAddEvents>
  test_set_step(2);
 80078ec:	2302      	movs	r3, #2
 80078ee:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 80078f0:	f7fb f836 	bl	8002960 <chEvtWaitAny.constprop.47>
    test_assert(m == 5, "unexpected pending bit");
 80078f4:	f1a0 0005 	sub.w	r0, r0, #5
 80078f8:	fab0 f080 	clz	r0, r0
 80078fc:	4925      	ldr	r1, [pc, #148]	; (8007994 <rt_test_008_004_execute+0xb4>)
 80078fe:	0940      	lsrs	r0, r0, #5
 8007900:	f7f9 f9c6 	bl	8000c90 <_test_assert>
 8007904:	b108      	cbz	r0, 800790a <rt_test_008_004_execute+0x2a>
}
 8007906:	b003      	add	sp, #12
 8007908:	bd30      	pop	{r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800790a:	f7f8 ff89 	bl	8000820 <chEvtGetAndClearEvents.constprop.52>
    test_assert(m == 0, "stuck event");
 800790e:	fab0 f080 	clz	r0, r0
 8007912:	0940      	lsrs	r0, r0, #5
 8007914:	4920      	ldr	r1, [pc, #128]	; (8007998 <rt_test_008_004_execute+0xb8>)
 8007916:	f7f9 f9bb 	bl	8000c90 <_test_assert>
 800791a:	2800      	cmp	r0, #0
 800791c:	d1f3      	bne.n	8007906 <rt_test_008_004_execute+0x26>
  test_set_step(3);
 800791e:	2303      	movs	r3, #3
 8007920:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007922:	f7fb fbcd 	bl	80030c0 <test_wait_tick>
 8007926:	4a1d      	ldr	r2, [pc, #116]	; (800799c <rt_test_008_004_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007928:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <rt_test_008_004_execute+0xc0>)
 800792a:	6991      	ldr	r1, [r2, #24]
 800792c:	688a      	ldr	r2, [r1, #8]
 800792e:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007930:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007932:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007936:	3a01      	subs	r2, #1
 8007938:	481a      	ldr	r0, [pc, #104]	; (80079a4 <rt_test_008_004_execute+0xc4>)
 800793a:	f7fa ff59 	bl	80027f0 <chThdCreateStatic>
 800793e:	4a1a      	ldr	r2, [pc, #104]	; (80079a8 <rt_test_008_004_execute+0xc8>)
  test_set_step(4);
 8007940:	2304      	movs	r3, #4
 8007942:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007944:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8007946:	f7fb f80b 	bl	8002960 <chEvtWaitAny.constprop.47>
    test_assert_time_window(target_time,
 800794a:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 800794e:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8007950:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8007954:	f7f8 ff74 	bl	8000840 <_test_assert_time_window.constprop.1>
 8007958:	2800      	cmp	r0, #0
 800795a:	d1d4      	bne.n	8007906 <rt_test_008_004_execute+0x26>
    test_assert(m == 1, "event flag error");
 800795c:	f1a4 0001 	sub.w	r0, r4, #1
 8007960:	fab0 f080 	clz	r0, r0
 8007964:	0940      	lsrs	r0, r0, #5
 8007966:	4911      	ldr	r1, [pc, #68]	; (80079ac <rt_test_008_004_execute+0xcc>)
 8007968:	f7f9 f992 	bl	8000c90 <_test_assert>
 800796c:	2800      	cmp	r0, #0
 800796e:	d1ca      	bne.n	8007906 <rt_test_008_004_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007970:	f7f8 ff56 	bl	8000820 <chEvtGetAndClearEvents.constprop.52>
    test_assert(m == 0, "stuck event");
 8007974:	fab0 f080 	clz	r0, r0
 8007978:	0940      	lsrs	r0, r0, #5
 800797a:	4907      	ldr	r1, [pc, #28]	; (8007998 <rt_test_008_004_execute+0xb8>)
 800797c:	f7f9 f988 	bl	8000c90 <_test_assert>
 8007980:	2800      	cmp	r0, #0
 8007982:	d1c0      	bne.n	8007906 <rt_test_008_004_execute+0x26>
}
 8007984:	b003      	add	sp, #12
 8007986:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 800798a:	f7ff bb39 	b.w	8007000 <test_wait_threads>
 800798e:	bf00      	nop
 8007990:	20001774 	.word	0x20001774
 8007994:	0800b034 	.word	0x0800b034
 8007998:	0800b090 	.word	0x0800b090
 800799c:	20000da0 	.word	0x20000da0
 80079a0:	08004781 	.word	0x08004781
 80079a4:	20001060 	.word	0x20001060
 80079a8:	2000178c 	.word	0x2000178c
 80079ac:	0800b010 	.word	0x0800b010

080079b0 <rt_test_008_003_execute>:
static void rt_test_008_003_execute(void) {
 80079b0:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(7);
 80079b2:	2007      	movs	r0, #7
static void rt_test_008_003_execute(void) {
 80079b4:	b083      	sub	sp, #12
  test_set_step(2);
 80079b6:	4c36      	ldr	r4, [pc, #216]	; (8007a90 <rt_test_008_003_execute+0xe0>)
    chEvtAddEvents(7);
 80079b8:	f7f9 fbda 	bl	8001170 <chEvtAddEvents>
  test_set_step(2);
 80079bc:	2302      	movs	r3, #2
 80079be:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 80079c0:	f7fa ffae 	bl	8002920 <chEvtWaitOne.constprop.48>
    test_assert(m == 1, "single event error");
 80079c4:	f1a0 0001 	sub.w	r0, r0, #1
 80079c8:	fab0 f080 	clz	r0, r0
 80079cc:	4931      	ldr	r1, [pc, #196]	; (8007a94 <rt_test_008_003_execute+0xe4>)
 80079ce:	0940      	lsrs	r0, r0, #5
 80079d0:	f7f9 f95e 	bl	8000c90 <_test_assert>
 80079d4:	b108      	cbz	r0, 80079da <rt_test_008_003_execute+0x2a>
}
 80079d6:	b003      	add	sp, #12
 80079d8:	bd30      	pop	{r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 80079da:	f7fa ffa1 	bl	8002920 <chEvtWaitOne.constprop.48>
    test_assert(m == 2, "single event error");
 80079de:	f1a0 0002 	sub.w	r0, r0, #2
 80079e2:	fab0 f080 	clz	r0, r0
 80079e6:	492b      	ldr	r1, [pc, #172]	; (8007a94 <rt_test_008_003_execute+0xe4>)
 80079e8:	0940      	lsrs	r0, r0, #5
 80079ea:	f7f9 f951 	bl	8000c90 <_test_assert>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d1f1      	bne.n	80079d6 <rt_test_008_003_execute+0x26>
    m = chEvtWaitOne(ALL_EVENTS);
 80079f2:	f7fa ff95 	bl	8002920 <chEvtWaitOne.constprop.48>
    test_assert(m == 4, "single event error");
 80079f6:	f1a0 0004 	sub.w	r0, r0, #4
 80079fa:	fab0 f080 	clz	r0, r0
 80079fe:	4925      	ldr	r1, [pc, #148]	; (8007a94 <rt_test_008_003_execute+0xe4>)
 8007a00:	0940      	lsrs	r0, r0, #5
 8007a02:	f7f9 f945 	bl	8000c90 <_test_assert>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d1e5      	bne.n	80079d6 <rt_test_008_003_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007a0a:	f7f8 ff09 	bl	8000820 <chEvtGetAndClearEvents.constprop.52>
    test_assert(m == 0, "stuck event");
 8007a0e:	fab0 f080 	clz	r0, r0
 8007a12:	0940      	lsrs	r0, r0, #5
 8007a14:	4920      	ldr	r1, [pc, #128]	; (8007a98 <rt_test_008_003_execute+0xe8>)
 8007a16:	f7f9 f93b 	bl	8000c90 <_test_assert>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d1db      	bne.n	80079d6 <rt_test_008_003_execute+0x26>
  test_set_step(3);
 8007a1e:	2303      	movs	r3, #3
 8007a20:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007a22:	f7fb fb4d 	bl	80030c0 <test_wait_tick>
 8007a26:	4a1d      	ldr	r2, [pc, #116]	; (8007a9c <rt_test_008_003_execute+0xec>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <rt_test_008_003_execute+0xf0>)
 8007a2a:	6991      	ldr	r1, [r2, #24]
 8007a2c:	688a      	ldr	r2, [r1, #8]
 8007a2e:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007a30:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007a32:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a36:	3a01      	subs	r2, #1
 8007a38:	481a      	ldr	r0, [pc, #104]	; (8007aa4 <rt_test_008_003_execute+0xf4>)
 8007a3a:	f7fa fed9 	bl	80027f0 <chThdCreateStatic>
 8007a3e:	4a1a      	ldr	r2, [pc, #104]	; (8007aa8 <rt_test_008_003_execute+0xf8>)
  test_set_step(4);
 8007a40:	2304      	movs	r3, #4
 8007a42:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007a44:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8007a46:	f7fa ff6b 	bl	8002920 <chEvtWaitOne.constprop.48>
    test_assert_time_window(target_time,
 8007a4a:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 8007a4e:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8007a50:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8007a54:	f7f8 fef4 	bl	8000840 <_test_assert_time_window.constprop.1>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1bc      	bne.n	80079d6 <rt_test_008_003_execute+0x26>
    test_assert(m == 1, "event flag error");
 8007a5c:	f1a4 0001 	sub.w	r0, r4, #1
 8007a60:	fab0 f080 	clz	r0, r0
 8007a64:	0940      	lsrs	r0, r0, #5
 8007a66:	4911      	ldr	r1, [pc, #68]	; (8007aac <rt_test_008_003_execute+0xfc>)
 8007a68:	f7f9 f912 	bl	8000c90 <_test_assert>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d1b2      	bne.n	80079d6 <rt_test_008_003_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007a70:	f7f8 fed6 	bl	8000820 <chEvtGetAndClearEvents.constprop.52>
    test_assert(m == 0, "stuck event");
 8007a74:	fab0 f080 	clz	r0, r0
 8007a78:	0940      	lsrs	r0, r0, #5
 8007a7a:	4907      	ldr	r1, [pc, #28]	; (8007a98 <rt_test_008_003_execute+0xe8>)
 8007a7c:	f7f9 f908 	bl	8000c90 <_test_assert>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d1a8      	bne.n	80079d6 <rt_test_008_003_execute+0x26>
}
 8007a84:	b003      	add	sp, #12
 8007a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 8007a8a:	f7ff bab9 	b.w	8007000 <test_wait_threads>
 8007a8e:	bf00      	nop
 8007a90:	20001774 	.word	0x20001774
 8007a94:	0800afec 	.word	0x0800afec
 8007a98:	0800b090 	.word	0x0800b090
 8007a9c:	20000da0 	.word	0x20000da0
 8007aa0:	08004781 	.word	0x08004781
 8007aa4:	20001060 	.word	0x20001060
 8007aa8:	2000178c 	.word	0x2000178c
 8007aac:	0800b010 	.word	0x0800b010

08007ab0 <rt_test_007_001_execute>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
 8007ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ab2:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <rt_test_007_001_execute+0x60>)
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8007ab4:	4c17      	ldr	r4, [pc, #92]	; (8007b14 <rt_test_007_001_execute+0x64>)
 8007ab6:	6999      	ldr	r1, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007ab8:	4817      	ldr	r0, [pc, #92]	; (8007b18 <rt_test_007_001_execute+0x68>)
 8007aba:	688a      	ldr	r2, [r1, #8]
 8007abc:	4b17      	ldr	r3, [pc, #92]	; (8007b1c <rt_test_007_001_execute+0x6c>)
static void rt_test_007_001_execute(void) {
 8007abe:	b083      	sub	sp, #12
  test_set_step(1);
 8007ac0:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007ac2:	9100      	str	r1, [sp, #0]
 8007ac4:	3201      	adds	r2, #1
  test_set_step(1);
 8007ac6:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007ac8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007acc:	f7fa fe90 	bl	80027f0 <chThdCreateStatic>
 8007ad0:	4a13      	ldr	r2, [pc, #76]	; (8007b20 <rt_test_007_001_execute+0x70>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007ad6:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007ad8:	2404      	movs	r4, #4
 8007ada:	2720      	movs	r7, #32
 8007adc:	2600      	movs	r6, #0
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 8007ade:	f7fb fd07 	bl	80034f0 <chMsgWait>
 8007ae2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ae4:	f387 8811 	msr	BASEPRI, r7
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7fa fde9 	bl	80026c0 <chSchWakeupS>
 8007aee:	f386 8811 	msr	BASEPRI, r6
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8007af2:	b2e8      	uxtb	r0, r5
 8007af4:	f7f9 f96c 	bl	8000dd0 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8007af8:	3c01      	subs	r4, #1
 8007afa:	d1f0      	bne.n	8007ade <rt_test_007_001_execute+0x2e>
    }
    test_wait_threads();
 8007afc:	f7ff fa80 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8007b00:	4908      	ldr	r1, [pc, #32]	; (8007b24 <rt_test_007_001_execute+0x74>)
 8007b02:	4809      	ldr	r0, [pc, #36]	; (8007b28 <rt_test_007_001_execute+0x78>)
  }
}
 8007b04:	b003      	add	sp, #12
 8007b06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8007b0a:	f7f9 b9d9 	b.w	8000ec0 <_test_assert_sequence>
 8007b0e:	bf00      	nop
 8007b10:	20000da0 	.word	0x20000da0
 8007b14:	20001774 	.word	0x20001774
 8007b18:	20001060 	.word	0x20001060
 8007b1c:	080035d1 	.word	0x080035d1
 8007b20:	2000178c 	.word	0x2000178c
 8007b24:	0800afc4 	.word	0x0800afc4
 8007b28:	08009dec 	.word	0x08009dec
 8007b2c:	00000000 	.word	0x00000000

08007b30 <rt_test_006_009_execute>:

static void rt_test_006_009_execute(void) {
 8007b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b32:	4b20      	ldr	r3, [pc, #128]	; (8007bb4 <rt_test_006_009_execute+0x84>)
    prio = chThdGetPriorityX();
  }

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8007b34:	4c20      	ldr	r4, [pc, #128]	; (8007bb8 <rt_test_006_009_execute+0x88>)
  return chThdGetSelfX()->prio;
 8007b36:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007b38:	4e20      	ldr	r6, [pc, #128]	; (8007bbc <rt_test_006_009_execute+0x8c>)
 8007b3a:	689f      	ldr	r7, [r3, #8]
 8007b3c:	4b20      	ldr	r3, [pc, #128]	; (8007bc0 <rt_test_006_009_execute+0x90>)
 8007b3e:	4d21      	ldr	r5, [pc, #132]	; (8007bc4 <rt_test_006_009_execute+0x94>)
static void rt_test_006_009_execute(void) {
 8007b40:	b083      	sub	sp, #12
  test_set_step(2);
 8007b42:	2102      	movs	r1, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	1c7a      	adds	r2, r7, #1
  test_set_step(2);
 8007b48:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	4b1e      	ldr	r3, [pc, #120]	; (8007bc8 <rt_test_006_009_execute+0x98>)
 8007b4e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007b52:	f7fa fe4d 	bl	80027f0 <chThdCreateStatic>

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007b56:	4b1d      	ldr	r3, [pc, #116]	; (8007bcc <rt_test_006_009_execute+0x9c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007b58:	6028      	str	r0, [r5, #0]
  test_set_step(3);
 8007b5a:	2103      	movs	r1, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007b5c:	1cba      	adds	r2, r7, #2
 8007b5e:	9300      	str	r3, [sp, #0]
  test_set_step(3);
 8007b60:	6021      	str	r1, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007b62:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <rt_test_006_009_execute+0xa0>)
 8007b68:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007b6c:	f7fa fe40 	bl	80027f0 <chThdCreateStatic>

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007b70:	4b18      	ldr	r3, [pc, #96]	; (8007bd4 <rt_test_006_009_execute+0xa4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007b72:	6068      	str	r0, [r5, #4]
  test_set_step(4);
 8007b74:	2104      	movs	r1, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007b76:	1cfa      	adds	r2, r7, #3
 8007b78:	9300      	str	r3, [sp, #0]
  test_set_step(4);
 8007b7a:	6021      	str	r1, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007b7c:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8007b80:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007b84:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <rt_test_006_009_execute+0xa8>)
 8007b86:	f7fa fe33 	bl	80027f0 <chThdCreateStatic>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8007b8a:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007b8c:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8007b8e:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8007b90:	f7fa fdc6 	bl	8002720 <chCondSignal.constprop.60>
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8007b94:	2306      	movs	r3, #6
 8007b96:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8007b98:	f7fa fdc2 	bl	8002720 <chCondSignal.constprop.60>
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
 8007b9c:	2307      	movs	r3, #7
 8007b9e:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8007ba0:	f7ff fa2e 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 8007ba4:	490d      	ldr	r1, [pc, #52]	; (8007bdc <rt_test_006_009_execute+0xac>)
 8007ba6:	480e      	ldr	r0, [pc, #56]	; (8007be0 <rt_test_006_009_execute+0xb0>)
  }
}
 8007ba8:	b003      	add	sp, #12
 8007baa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8007bae:	f7f9 b987 	b.w	8000ec0 <_test_assert_sequence>
 8007bb2:	bf00      	nop
 8007bb4:	20000da0 	.word	0x20000da0
 8007bb8:	20001774 	.word	0x20001774
 8007bbc:	20001060 	.word	0x20001060
 8007bc0:	0800aee8 	.word	0x0800aee8
 8007bc4:	2000178c 	.word	0x2000178c
 8007bc8:	08005561 	.word	0x08005561
 8007bcc:	0800b124 	.word	0x0800b124
 8007bd0:	080055f1 	.word	0x080055f1
 8007bd4:	0800aeec 	.word	0x0800aeec
 8007bd8:	08005661 	.word	0x08005661
 8007bdc:	0800afc4 	.word	0x0800afc4
 8007be0:	0800afd8 	.word	0x0800afd8
	...

08007bf0 <rt_test_006_008_execute>:
static void rt_test_006_008_execute(void) {
 8007bf0:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8007bf2:	4b2e      	ldr	r3, [pc, #184]	; (8007cac <rt_test_006_008_execute+0xbc>)
  test_set_step(1);
 8007bf4:	4e2e      	ldr	r6, [pc, #184]	; (8007cb0 <rt_test_006_008_execute+0xc0>)
  return chThdGetSelfX()->prio;
 8007bf6:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007bf8:	4a2e      	ldr	r2, [pc, #184]	; (8007cb4 <rt_test_006_008_execute+0xc4>)
 8007bfa:	689d      	ldr	r5, [r3, #8]
 8007bfc:	482e      	ldr	r0, [pc, #184]	; (8007cb8 <rt_test_006_008_execute+0xc8>)
 8007bfe:	4b2f      	ldr	r3, [pc, #188]	; (8007cbc <rt_test_006_008_execute+0xcc>)
static void rt_test_006_008_execute(void) {
 8007c00:	b082      	sub	sp, #8
  test_set_step(1);
 8007c02:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007c04:	9200      	str	r2, [sp, #0]
 8007c06:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c0a:	1c6a      	adds	r2, r5, #1
  test_set_step(1);
 8007c0c:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007c0e:	f7fa fdef 	bl	80027f0 <chThdCreateStatic>
 8007c12:	4c2b      	ldr	r4, [pc, #172]	; (8007cc0 <rt_test_006_008_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007c14:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <rt_test_006_008_execute+0xd4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007c16:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007c18:	1caa      	adds	r2, r5, #2
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c20:	4b26      	ldr	r3, [pc, #152]	; (8007cbc <rt_test_006_008_execute+0xcc>)
 8007c22:	4829      	ldr	r0, [pc, #164]	; (8007cc8 <rt_test_006_008_execute+0xd8>)
 8007c24:	f7fa fde4 	bl	80027f0 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007c28:	4b28      	ldr	r3, [pc, #160]	; (8007ccc <rt_test_006_008_execute+0xdc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007c2a:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007c2c:	1cea      	adds	r2, r5, #3
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c34:	4b21      	ldr	r3, [pc, #132]	; (8007cbc <rt_test_006_008_execute+0xcc>)
 8007c36:	4826      	ldr	r0, [pc, #152]	; (8007cd0 <rt_test_006_008_execute+0xe0>)
 8007c38:	f7fa fdda 	bl	80027f0 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007c3c:	4b25      	ldr	r3, [pc, #148]	; (8007cd4 <rt_test_006_008_execute+0xe4>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007c3e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007c40:	1d2a      	adds	r2, r5, #4
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c48:	4b1c      	ldr	r3, [pc, #112]	; (8007cbc <rt_test_006_008_execute+0xcc>)
 8007c4a:	4823      	ldr	r0, [pc, #140]	; (8007cd8 <rt_test_006_008_execute+0xe8>)
 8007c4c:	f7fa fdd0 	bl	80027f0 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007c50:	4b22      	ldr	r3, [pc, #136]	; (8007cdc <rt_test_006_008_execute+0xec>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007c52:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007c54:	1d6a      	adds	r2, r5, #5
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c5c:	4b17      	ldr	r3, [pc, #92]	; (8007cbc <rt_test_006_008_execute+0xcc>)
 8007c5e:	4820      	ldr	r0, [pc, #128]	; (8007ce0 <rt_test_006_008_execute+0xf0>)
 8007c60:	f7fa fdc6 	bl	80027f0 <chThdCreateStatic>
  test_set_step(2);
 8007c64:	2302      	movs	r3, #2
 8007c66:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007c68:	6120      	str	r0, [r4, #16]
 8007c6a:	2320      	movs	r3, #32
 8007c6c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8007c70:	4c1c      	ldr	r4, [pc, #112]	; (8007ce4 <rt_test_006_008_execute+0xf4>)
 8007c72:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	d00b      	beq.n	8007c90 <rt_test_006_008_execute+0xa0>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8007c78:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	6022      	str	r2, [r4, #0]
 8007c80:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8007c82:	6054      	str	r4, [r2, #4]
 8007c84:	f7f9 fbbc 	bl	8001400 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d1f5      	bne.n	8007c7c <rt_test_006_008_execute+0x8c>
  chSchRescheduleS();
 8007c90:	f7fb ffbe 	bl	8003c10 <chSchRescheduleS>
 8007c94:	2300      	movs	r3, #0
 8007c96:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8007c9a:	f7ff f9b1 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007c9e:	4912      	ldr	r1, [pc, #72]	; (8007ce8 <rt_test_006_008_execute+0xf8>)
 8007ca0:	4812      	ldr	r0, [pc, #72]	; (8007cec <rt_test_006_008_execute+0xfc>)
}
 8007ca2:	b002      	add	sp, #8
 8007ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007ca8:	f7f9 b90a 	b.w	8000ec0 <_test_assert_sequence>
 8007cac:	20000da0 	.word	0x20000da0
 8007cb0:	20001774 	.word	0x20001774
 8007cb4:	0800af64 	.word	0x0800af64
 8007cb8:	20001060 	.word	0x20001060
 8007cbc:	080055f1 	.word	0x080055f1
 8007cc0:	2000178c 	.word	0x2000178c
 8007cc4:	0800bee0 	.word	0x0800bee0
 8007cc8:	200011a8 	.word	0x200011a8
 8007ccc:	0800b124 	.word	0x0800b124
 8007cd0:	200012f0 	.word	0x200012f0
 8007cd4:	0800aeec 	.word	0x0800aeec
 8007cd8:	20001438 	.word	0x20001438
 8007cdc:	0800aee8 	.word	0x0800aee8
 8007ce0:	20001580 	.word	0x20001580
 8007ce4:	20000c04 	.word	0x20000c04
 8007ce8:	0800afc4 	.word	0x0800afc4
 8007cec:	0800af60 	.word	0x0800af60

08007cf0 <rt_test_006_007_execute>:
static void rt_test_006_007_execute(void) {
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8007cf4:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <rt_test_006_007_execute+0xc4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007cf6:	4e30      	ldr	r6, [pc, #192]	; (8007db8 <rt_test_006_007_execute+0xc8>)
  return chThdGetSelfX()->prio;
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	4d30      	ldr	r5, [pc, #192]	; (8007dbc <rt_test_006_007_execute+0xcc>)
 8007cfc:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 8007cfe:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8007de0 <rt_test_006_007_execute+0xf0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d02:	4b2f      	ldr	r3, [pc, #188]	; (8007dc0 <rt_test_006_007_execute+0xd0>)
static void rt_test_006_007_execute(void) {
 8007d04:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d06:	1c7a      	adds	r2, r7, #1
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	4633      	mov	r3, r6
  test_set_step(1);
 8007d0e:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d10:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 8007d14:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d18:	f7fa fd6a 	bl	80027f0 <chThdCreateStatic>
 8007d1c:	4c29      	ldr	r4, [pc, #164]	; (8007dc4 <rt_test_006_007_execute+0xd4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007d1e:	492a      	ldr	r1, [pc, #168]	; (8007dc8 <rt_test_006_007_execute+0xd8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d20:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007d22:	1cba      	adds	r2, r7, #2
 8007d24:	4633      	mov	r3, r6
 8007d26:	9100      	str	r1, [sp, #0]
 8007d28:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007d2c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d30:	f7fa fd5e 	bl	80027f0 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007d34:	4925      	ldr	r1, [pc, #148]	; (8007dcc <rt_test_006_007_execute+0xdc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007d36:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007d38:	1cfa      	adds	r2, r7, #3
 8007d3a:	4633      	mov	r3, r6
 8007d3c:	9100      	str	r1, [sp, #0]
 8007d3e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007d42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d46:	f7fa fd53 	bl	80027f0 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007d4a:	4921      	ldr	r1, [pc, #132]	; (8007dd0 <rt_test_006_007_execute+0xe0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007d4c:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007d4e:	1d3a      	adds	r2, r7, #4
 8007d50:	4633      	mov	r3, r6
 8007d52:	9100      	str	r1, [sp, #0]
 8007d54:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007d58:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d5c:	f7fa fd48 	bl	80027f0 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007d60:	491c      	ldr	r1, [pc, #112]	; (8007dd4 <rt_test_006_007_execute+0xe4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007d62:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007d64:	4633      	mov	r3, r6
 8007d66:	9100      	str	r1, [sp, #0]
 8007d68:	1d7a      	adds	r2, r7, #5
 8007d6a:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8007d6e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d72:	f7fa fd3d 	bl	80027f0 <chThdCreateStatic>
  test_set_step(2);
 8007d76:	2302      	movs	r3, #2
 8007d78:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007d7c:	6120      	str	r0, [r4, #16]
 8007d7e:	2320      	movs	r3, #32
 8007d80:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8007d84:	f7f9 fbf4 	bl	8001570 <chCondSignalI.constprop.59>
    chCondSignalI(&c1);
 8007d88:	f7f9 fbf2 	bl	8001570 <chCondSignalI.constprop.59>
    chCondSignalI(&c1);
 8007d8c:	f7f9 fbf0 	bl	8001570 <chCondSignalI.constprop.59>
    chCondSignalI(&c1);
 8007d90:	f7f9 fbee 	bl	8001570 <chCondSignalI.constprop.59>
    chCondSignalI(&c1);
 8007d94:	f7f9 fbec 	bl	8001570 <chCondSignalI.constprop.59>
    chSchRescheduleS();
 8007d98:	f7fb ff3a 	bl	8003c10 <chSchRescheduleS>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8007da2:	f7ff f92d 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007da6:	490c      	ldr	r1, [pc, #48]	; (8007dd8 <rt_test_006_007_execute+0xe8>)
 8007da8:	480c      	ldr	r0, [pc, #48]	; (8007ddc <rt_test_006_007_execute+0xec>)
}
 8007daa:	b002      	add	sp, #8
 8007dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007db0:	f7f9 b886 	b.w	8000ec0 <_test_assert_sequence>
 8007db4:	20000da0 	.word	0x20000da0
 8007db8:	080055f1 	.word	0x080055f1
 8007dbc:	20001060 	.word	0x20001060
 8007dc0:	0800af64 	.word	0x0800af64
 8007dc4:	2000178c 	.word	0x2000178c
 8007dc8:	0800bee0 	.word	0x0800bee0
 8007dcc:	0800b124 	.word	0x0800b124
 8007dd0:	0800aeec 	.word	0x0800aeec
 8007dd4:	0800aee8 	.word	0x0800aee8
 8007dd8:	0800afc4 	.word	0x0800afc4
 8007ddc:	0800af60 	.word	0x0800af60
 8007de0:	20001774 	.word	0x20001774
	...

08007df0 <rt_test_005_006_teardown>:
 *   must not change from "not taken".
 * .
 */

static void rt_test_005_006_teardown(void) {
  test_wait_threads();
 8007df0:	f7ff b906 	b.w	8007000 <test_wait_threads>
	...

08007e00 <rt_test_006_004_teardown>:
 8007e00:	f7ff b8fe 	b.w	8007000 <test_wait_threads>
	...

08007e10 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8007e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007e12:	4f2c      	ldr	r7, [pc, #176]	; (8007ec4 <rt_test_006_001_execute+0xb4>)
  test_set_step(2);
 8007e14:	4e2c      	ldr	r6, [pc, #176]	; (8007ec8 <rt_test_006_001_execute+0xb8>)
  return chThdGetSelfX()->prio;
 8007e16:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8007e18:	482c      	ldr	r0, [pc, #176]	; (8007ecc <rt_test_006_001_execute+0xbc>)
 8007e1a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007e1c:	4d2c      	ldr	r5, [pc, #176]	; (8007ed0 <rt_test_006_001_execute+0xc0>)
static void rt_test_006_001_execute(void) {
 8007e1e:	b083      	sub	sp, #12
  test_set_step(2);
 8007e20:	2302      	movs	r3, #2
 8007e22:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8007e24:	f7fb fc64 	bl	80036f0 <chMtxLock>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007e28:	4b2a      	ldr	r3, [pc, #168]	; (8007ed4 <rt_test_006_001_execute+0xc4>)
 8007e2a:	9300      	str	r3, [sp, #0]
  test_set_step(3);
 8007e2c:	2103      	movs	r1, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007e2e:	1c62      	adds	r2, r4, #1
 8007e30:	4b29      	ldr	r3, [pc, #164]	; (8007ed8 <rt_test_006_001_execute+0xc8>)
  test_set_step(3);
 8007e32:	6031      	str	r1, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007e34:	4829      	ldr	r0, [pc, #164]	; (8007edc <rt_test_006_001_execute+0xcc>)
 8007e36:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e3a:	f7fa fcd9 	bl	80027f0 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007e3e:	4b28      	ldr	r3, [pc, #160]	; (8007ee0 <rt_test_006_001_execute+0xd0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007e40:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007e42:	1ca2      	adds	r2, r4, #2
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e4a:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <rt_test_006_001_execute+0xc8>)
 8007e4c:	4825      	ldr	r0, [pc, #148]	; (8007ee4 <rt_test_006_001_execute+0xd4>)
 8007e4e:	f7fa fccf 	bl	80027f0 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007e52:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <rt_test_006_001_execute+0xd8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007e54:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007e56:	1ce2      	adds	r2, r4, #3
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ed8 <rt_test_006_001_execute+0xc8>)
 8007e60:	4822      	ldr	r0, [pc, #136]	; (8007eec <rt_test_006_001_execute+0xdc>)
 8007e62:	f7fa fcc5 	bl	80027f0 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007e66:	4b22      	ldr	r3, [pc, #136]	; (8007ef0 <rt_test_006_001_execute+0xe0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007e68:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007e6a:	1d22      	adds	r2, r4, #4
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e72:	4b19      	ldr	r3, [pc, #100]	; (8007ed8 <rt_test_006_001_execute+0xc8>)
 8007e74:	481f      	ldr	r0, [pc, #124]	; (8007ef4 <rt_test_006_001_execute+0xe4>)
 8007e76:	f7fa fcbb 	bl	80027f0 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007e7a:	4b1f      	ldr	r3, [pc, #124]	; (8007ef8 <rt_test_006_001_execute+0xe8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007e7c:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007e7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e82:	1d62      	adds	r2, r4, #5
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	481d      	ldr	r0, [pc, #116]	; (8007efc <rt_test_006_001_execute+0xec>)
 8007e88:	4b13      	ldr	r3, [pc, #76]	; (8007ed8 <rt_test_006_001_execute+0xc8>)
 8007e8a:	f7fa fcb1 	bl	80027f0 <chThdCreateStatic>
  test_set_step(4);
 8007e8e:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007e90:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
 8007e92:	480e      	ldr	r0, [pc, #56]	; (8007ecc <rt_test_006_001_execute+0xbc>)
  test_set_step(4);
 8007e94:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8007e96:	f7fc fceb 	bl	8004870 <chMtxUnlock>
    test_wait_threads();
 8007e9a:	f7ff f8b1 	bl	8007000 <test_wait_threads>
 8007e9e:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8007ea0:	4917      	ldr	r1, [pc, #92]	; (8007f00 <rt_test_006_001_execute+0xf0>)
 8007ea2:	6898      	ldr	r0, [r3, #8]
 8007ea4:	1b00      	subs	r0, r0, r4
 8007ea6:	fab0 f080 	clz	r0, r0
 8007eaa:	0940      	lsrs	r0, r0, #5
 8007eac:	f7f8 fef0 	bl	8000c90 <_test_assert>
 8007eb0:	b108      	cbz	r0, 8007eb6 <rt_test_006_001_execute+0xa6>
}
 8007eb2:	b003      	add	sp, #12
 8007eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007eb6:	4913      	ldr	r1, [pc, #76]	; (8007f04 <rt_test_006_001_execute+0xf4>)
 8007eb8:	4813      	ldr	r0, [pc, #76]	; (8007f08 <rt_test_006_001_execute+0xf8>)
}
 8007eba:	b003      	add	sp, #12
 8007ebc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007ec0:	f7f8 bffe 	b.w	8000ec0 <_test_assert_sequence>
 8007ec4:	20000da0 	.word	0x20000da0
 8007ec8:	20001774 	.word	0x20001774
 8007ecc:	20000c30 	.word	0x20000c30
 8007ed0:	2000178c 	.word	0x2000178c
 8007ed4:	0800af64 	.word	0x0800af64
 8007ed8:	08005951 	.word	0x08005951
 8007edc:	20001060 	.word	0x20001060
 8007ee0:	0800bee0 	.word	0x0800bee0
 8007ee4:	200011a8 	.word	0x200011a8
 8007ee8:	0800b124 	.word	0x0800b124
 8007eec:	200012f0 	.word	0x200012f0
 8007ef0:	0800aeec 	.word	0x0800aeec
 8007ef4:	20001438 	.word	0x20001438
 8007ef8:	0800aee8 	.word	0x0800aee8
 8007efc:	20001580 	.word	0x20001580
 8007f00:	0800af28 	.word	0x0800af28
 8007f04:	0800afc4 	.word	0x0800afc4
 8007f08:	0800af60 	.word	0x0800af60
 8007f0c:	00000000 	.word	0x00000000

08007f10 <rt_test_005_005_teardown>:
 8007f10:	f7ff b876 	b.w	8007000 <test_wait_threads>
	...

08007f20 <rt_test_005_004_execute>:
static void rt_test_005_004_execute(void) {
 8007f20:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8007f22:	4b26      	ldr	r3, [pc, #152]	; (8007fbc <rt_test_005_004_execute+0x9c>)
  test_set_step(1);
 8007f24:	4c26      	ldr	r4, [pc, #152]	; (8007fc0 <rt_test_005_004_execute+0xa0>)
  return chThdGetSelfX()->prio;
 8007f26:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8007f28:	4926      	ldr	r1, [pc, #152]	; (8007fc4 <rt_test_005_004_execute+0xa4>)
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	4826      	ldr	r0, [pc, #152]	; (8007fc8 <rt_test_005_004_execute+0xa8>)
 8007f2e:	4b27      	ldr	r3, [pc, #156]	; (8007fcc <rt_test_005_004_execute+0xac>)
static void rt_test_005_004_execute(void) {
 8007f30:	b082      	sub	sp, #8
  test_set_step(1);
 8007f32:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8007f34:	9100      	str	r1, [sp, #0]
 8007f36:	3201      	adds	r2, #1
  test_set_step(1);
 8007f38:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8007f3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007f3e:	f7fa fc57 	bl	80027f0 <chThdCreateStatic>
 8007f42:	4b23      	ldr	r3, [pc, #140]	; (8007fd0 <rt_test_005_004_execute+0xb0>)
  test_set_step(2);
 8007f44:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8007f46:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8007f48:	6025      	str	r5, [r4, #0]
 8007f4a:	2320      	movs	r3, #32
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	4c20      	ldr	r4, [pc, #128]	; (8007fd4 <rt_test_005_004_execute+0xb4>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8007f52:	2600      	movs	r6, #0
 8007f54:	e002      	b.n	8007f5c <rt_test_005_004_execute+0x3c>
  while (n > (cnt_t)0) {
 8007f56:	2d01      	cmp	r5, #1
 8007f58:	d00e      	beq.n	8007f78 <rt_test_005_004_execute+0x58>
 8007f5a:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8007f5c:	68a3      	ldr	r3, [r4, #8]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	dcf7      	bgt.n	8007f56 <rt_test_005_004_execute+0x36>
  thread_t *tp = tqp->next;
 8007f66:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8007f68:	6803      	ldr	r3, [r0, #0]
 8007f6a:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8007f6c:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8007f6e:	f7f9 fa47 	bl	8001400 <chSchReadyI>
  while (n > (cnt_t)0) {
 8007f72:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8007f74:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 8007f76:	d1f0      	bne.n	8007f5a <rt_test_005_004_execute+0x3a>
    chSchRescheduleS();
 8007f78:	f7fb fe4a 	bl	8003c10 <chSchRescheduleS>
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 8007f82:	f7ff f83d 	bl	8007000 <test_wait_threads>
 8007f86:	2320      	movs	r3, #32
 8007f88:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8007f8c:	68a0      	ldr	r0, [r4, #8]
 8007f8e:	4912      	ldr	r1, [pc, #72]	; (8007fd8 <rt_test_005_004_execute+0xb8>)
 8007f90:	f1a0 0001 	sub.w	r0, r0, #1
 8007f94:	fab0 f080 	clz	r0, r0
 8007f98:	0940      	lsrs	r0, r0, #5
 8007f9a:	f7f8 fe79 	bl	8000c90 <_test_assert>
 8007f9e:	b118      	cbz	r0, 8007fa8 <rt_test_005_004_execute+0x88>
 8007fa0:	f385 8811 	msr	BASEPRI, r5
}
 8007fa4:	b002      	add	sp, #8
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}
 8007fa8:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 8007fac:	490b      	ldr	r1, [pc, #44]	; (8007fdc <rt_test_005_004_execute+0xbc>)
 8007fae:	4805      	ldr	r0, [pc, #20]	; (8007fc4 <rt_test_005_004_execute+0xa4>)
}
 8007fb0:	b002      	add	sp, #8
 8007fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 8007fb6:	f7f8 bf83 	b.w	8000ec0 <_test_assert_sequence>
 8007fba:	bf00      	nop
 8007fbc:	20000da0 	.word	0x20000da0
 8007fc0:	20001774 	.word	0x20001774
 8007fc4:	0800aee8 	.word	0x0800aee8
 8007fc8:	20001060 	.word	0x20001060
 8007fcc:	08003841 	.word	0x08003841
 8007fd0:	2000178c 	.word	0x2000178c
 8007fd4:	20001040 	.word	0x20001040
 8007fd8:	0800ae34 	.word	0x0800ae34
 8007fdc:	0800afc4 	.word	0x0800afc4

08007fe0 <rt_test_005_003_execute>:
static void rt_test_005_003_execute(void) {
 8007fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8007fe4:	4d4e      	ldr	r5, [pc, #312]	; (8008120 <rt_test_005_003_execute+0x140>)
 8007fe6:	2001      	movs	r0, #1
static void rt_test_005_003_execute(void) {
 8007fe8:	b083      	sub	sp, #12
  test_set_step(1);
 8007fea:	6028      	str	r0, [r5, #0]
 8007fec:	2320      	movs	r3, #32
 8007fee:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8007ff2:	4c4c      	ldr	r4, [pc, #304]	; (8008124 <rt_test_005_003_execute+0x144>)
 8007ff4:	68a3      	ldr	r3, [r4, #8]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	bf5c      	itt	pl
 8007ffa:	60a3      	strpl	r3, [r4, #8]
 8007ffc:	2000      	movpl	r0, #0
 8007ffe:	2300      	movs	r3, #0
 8008000:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8008004:	4948      	ldr	r1, [pc, #288]	; (8008128 <rt_test_005_003_execute+0x148>)
 8008006:	f7f8 fe43 	bl	8000c90 <_test_assert>
 800800a:	b110      	cbz	r0, 8008012 <rt_test_005_003_execute+0x32>
}
 800800c:	b003      	add	sp, #12
 800800e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 8008012:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008014:	4945      	ldr	r1, [pc, #276]	; (800812c <rt_test_005_003_execute+0x14c>)
 8008016:	1b00      	subs	r0, r0, r4
 8008018:	fab0 f080 	clz	r0, r0
 800801c:	0940      	lsrs	r0, r0, #5
 800801e:	f7f8 fe37 	bl	8000c90 <_test_assert>
 8008022:	2800      	cmp	r0, #0
 8008024:	d1f2      	bne.n	800800c <rt_test_005_003_execute+0x2c>
    test_assert(sem1.cnt == 0, "counter not zero");
 8008026:	68a0      	ldr	r0, [r4, #8]
 8008028:	4941      	ldr	r1, [pc, #260]	; (8008130 <rt_test_005_003_execute+0x150>)
 800802a:	fab0 f080 	clz	r0, r0
 800802e:	0940      	lsrs	r0, r0, #5
 8008030:	f7f8 fe2e 	bl	8000c90 <_test_assert>
 8008034:	4601      	mov	r1, r0
 8008036:	2800      	cmp	r0, #0
 8008038:	d1e8      	bne.n	800800c <rt_test_005_003_execute+0x2c>
  return ch.rlist.current;
 800803a:	4a3e      	ldr	r2, [pc, #248]	; (8008134 <rt_test_005_003_execute+0x154>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800803c:	4b3e      	ldr	r3, [pc, #248]	; (8008138 <rt_test_005_003_execute+0x158>)
  return chThdGetSelfX()->prio;
 800803e:	6992      	ldr	r2, [r2, #24]
 8008040:	483e      	ldr	r0, [pc, #248]	; (800813c <rt_test_005_003_execute+0x15c>)
 8008042:	6892      	ldr	r2, [r2, #8]
 8008044:	9100      	str	r1, [sp, #0]
  test_set_step(2);
 8008046:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008048:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800804c:	3a01      	subs	r2, #1
  test_set_step(2);
 800804e:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008050:	f7fa fbce 	bl	80027f0 <chThdCreateStatic>
 8008054:	4b3a      	ldr	r3, [pc, #232]	; (8008140 <rt_test_005_003_execute+0x160>)
 8008056:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 8008058:	f241 3088 	movw	r0, #5000	; 0x1388
 800805c:	f7fa fcf8 	bl	8002a50 <chSemWaitTimeout.constprop.67>
 8008060:	4606      	mov	r6, r0
    test_wait_threads();
 8008062:	f7fe ffcd 	bl	8007000 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 8008066:	fab6 f086 	clz	r0, r6
 800806a:	0940      	lsrs	r0, r0, #5
 800806c:	492e      	ldr	r1, [pc, #184]	; (8008128 <rt_test_005_003_execute+0x148>)
 800806e:	f7f8 fe0f 	bl	8000c90 <_test_assert>
 8008072:	2800      	cmp	r0, #0
 8008074:	d1ca      	bne.n	800800c <rt_test_005_003_execute+0x2c>
 8008076:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008078:	492c      	ldr	r1, [pc, #176]	; (800812c <rt_test_005_003_execute+0x14c>)
 800807a:	1b00      	subs	r0, r0, r4
 800807c:	fab0 f080 	clz	r0, r0
 8008080:	0940      	lsrs	r0, r0, #5
 8008082:	f7f8 fe05 	bl	8000c90 <_test_assert>
 8008086:	2800      	cmp	r0, #0
 8008088:	d1c0      	bne.n	800800c <rt_test_005_003_execute+0x2c>
    test_assert(sem1.cnt == 0, "counter not zero");
 800808a:	68a0      	ldr	r0, [r4, #8]
 800808c:	4928      	ldr	r1, [pc, #160]	; (8008130 <rt_test_005_003_execute+0x150>)
 800808e:	fab0 f080 	clz	r0, r0
 8008092:	0940      	lsrs	r0, r0, #5
 8008094:	f7f8 fdfc 	bl	8000c90 <_test_assert>
 8008098:	2800      	cmp	r0, #0
 800809a:	d1b7      	bne.n	800800c <rt_test_005_003_execute+0x2c>
  test_set_step(3);
 800809c:	2303      	movs	r3, #3
 800809e:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80080a0:	f7fb f80e 	bl	80030c0 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80080a4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008128 <rt_test_005_003_execute+0x148>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80080a8:	4f20      	ldr	r7, [pc, #128]	; (800812c <rt_test_005_003_execute+0x14c>)
      test_assert(sem1.cnt == 0, "counter not zero");
 80080aa:	4e21      	ldr	r6, [pc, #132]	; (8008130 <rt_test_005_003_execute+0x150>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80080ac:	2541      	movs	r5, #65	; 0x41
 80080ae:	4681      	mov	r9, r0
      test_emit_token('A' + i);
 80080b0:	4628      	mov	r0, r5
 80080b2:	f7f8 fe8d 	bl	8000dd0 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 80080b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080ba:	f7fa fcc9 	bl	8002a50 <chSemWaitTimeout.constprop.67>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80080be:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80080c2:	fab0 f080 	clz	r0, r0
 80080c6:	4641      	mov	r1, r8
 80080c8:	0940      	lsrs	r0, r0, #5
 80080ca:	f7f8 fde1 	bl	8000c90 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80080ce:	4639      	mov	r1, r7
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d19b      	bne.n	800800c <rt_test_005_003_execute+0x2c>
 80080d4:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80080d6:	1b00      	subs	r0, r0, r4
 80080d8:	fab0 f080 	clz	r0, r0
 80080dc:	0940      	lsrs	r0, r0, #5
 80080de:	f7f8 fdd7 	bl	8000c90 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 80080e2:	4631      	mov	r1, r6
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d191      	bne.n	800800c <rt_test_005_003_execute+0x2c>
      test_assert(sem1.cnt == 0, "counter not zero");
 80080e8:	68a0      	ldr	r0, [r4, #8]
 80080ea:	fab0 f080 	clz	r0, r0
 80080ee:	0940      	lsrs	r0, r0, #5
 80080f0:	f7f8 fdce 	bl	8000c90 <_test_assert>
 80080f4:	3501      	adds	r5, #1
 80080f6:	b2ed      	uxtb	r5, r5
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d187      	bne.n	800800c <rt_test_005_003_execute+0x2c>
    for (i = 0; i < 5; i++) {
 80080fc:	2d46      	cmp	r5, #70	; 0x46
 80080fe:	d1d7      	bne.n	80080b0 <rt_test_005_003_execute+0xd0>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008100:	4910      	ldr	r1, [pc, #64]	; (8008144 <rt_test_005_003_execute+0x164>)
 8008102:	4811      	ldr	r0, [pc, #68]	; (8008148 <rt_test_005_003_execute+0x168>)
 8008104:	f7f8 fedc 	bl	8000ec0 <_test_assert_sequence>
 8008108:	2800      	cmp	r0, #0
 800810a:	f47f af7f 	bne.w	800800c <rt_test_005_003_execute+0x2c>
    test_assert_time_window(target_time,
 800810e:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 8008112:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 8008116:	b003      	add	sp, #12
 8008118:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 800811c:	f7f8 bb90 	b.w	8000840 <_test_assert_time_window.constprop.1>
 8008120:	20001774 	.word	0x20001774
 8008124:	20001040 	.word	0x20001040
 8008128:	08009e04 	.word	0x08009e04
 800812c:	0800ae54 	.word	0x0800ae54
 8008130:	0800ae64 	.word	0x0800ae64
 8008134:	20000da0 	.word	0x20000da0
 8008138:	080047e1 	.word	0x080047e1
 800813c:	20001060 	.word	0x20001060
 8008140:	2000178c 	.word	0x2000178c
 8008144:	0800afc4 	.word	0x0800afc4
 8008148:	0800af60 	.word	0x0800af60
 800814c:	00000000 	.word	0x00000000

08008150 <rt_test_005_002_execute>:
static void rt_test_005_002_execute(void) {
 8008150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008154:	4f32      	ldr	r7, [pc, #200]	; (8008220 <rt_test_005_002_execute+0xd0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008156:	4e33      	ldr	r6, [pc, #204]	; (8008224 <rt_test_005_002_execute+0xd4>)
  return chThdGetSelfX()->prio;
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	4c33      	ldr	r4, [pc, #204]	; (8008228 <rt_test_005_002_execute+0xd8>)
 800815c:	689a      	ldr	r2, [r3, #8]
  test_set_step(1);
 800815e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8008250 <rt_test_005_002_execute+0x100>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008162:	4b32      	ldr	r3, [pc, #200]	; (800822c <rt_test_005_002_execute+0xdc>)
static void rt_test_005_002_execute(void) {
 8008164:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008166:	3205      	adds	r2, #5
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	4620      	mov	r0, r4
 800816c:	4633      	mov	r3, r6
  test_set_step(1);
 800816e:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008170:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 8008174:	f8c8 5000 	str.w	r5, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008178:	f7fa fb3a 	bl	80027f0 <chThdCreateStatic>
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	4d2c      	ldr	r5, [pc, #176]	; (8008230 <rt_test_005_002_execute+0xe0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8008180:	689a      	ldr	r2, [r3, #8]
 8008182:	492c      	ldr	r1, [pc, #176]	; (8008234 <rt_test_005_002_execute+0xe4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008184:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8008186:	4633      	mov	r3, r6
 8008188:	9100      	str	r1, [sp, #0]
 800818a:	3201      	adds	r2, #1
 800818c:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8008190:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008194:	f7fa fb2c 	bl	80027f0 <chThdCreateStatic>
 8008198:	69bb      	ldr	r3, [r7, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800819a:	4927      	ldr	r1, [pc, #156]	; (8008238 <rt_test_005_002_execute+0xe8>)
 800819c:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800819e:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80081a0:	4633      	mov	r3, r6
 80081a2:	9100      	str	r1, [sp, #0]
 80081a4:	3203      	adds	r2, #3
 80081a6:	f504 7024 	add.w	r0, r4, #656	; 0x290
 80081aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081ae:	f7fa fb1f 	bl	80027f0 <chThdCreateStatic>
 80081b2:	69bb      	ldr	r3, [r7, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80081b4:	4921      	ldr	r1, [pc, #132]	; (800823c <rt_test_005_002_execute+0xec>)
 80081b6:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80081b8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80081ba:	4633      	mov	r3, r6
 80081bc:	9100      	str	r1, [sp, #0]
 80081be:	3204      	adds	r2, #4
 80081c0:	f504 7076 	add.w	r0, r4, #984	; 0x3d8
 80081c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081c8:	f7fa fb12 	bl	80027f0 <chThdCreateStatic>
 80081cc:	69bb      	ldr	r3, [r7, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80081ce:	491c      	ldr	r1, [pc, #112]	; (8008240 <rt_test_005_002_execute+0xf0>)
 80081d0:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80081d2:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80081d4:	3202      	adds	r2, #2
 80081d6:	4633      	mov	r3, r6
 80081d8:	9100      	str	r1, [sp, #0]
 80081da:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 80081de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081e2:	f7fa fb05 	bl	80027f0 <chThdCreateStatic>
    chSemSignal(&sem1);
 80081e6:	4c17      	ldr	r4, [pc, #92]	; (8008244 <rt_test_005_002_execute+0xf4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80081e8:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 80081ea:	2302      	movs	r3, #2
    chSemSignal(&sem1);
 80081ec:	4620      	mov	r0, r4
  test_set_step(2);
 80081ee:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 80081f2:	f7fa fadd 	bl	80027b0 <chSemSignal>
    chSemSignal(&sem1);
 80081f6:	4620      	mov	r0, r4
 80081f8:	f7fa fada 	bl	80027b0 <chSemSignal>
    chSemSignal(&sem1);
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7fa fad7 	bl	80027b0 <chSemSignal>
    chSemSignal(&sem1);
 8008202:	4620      	mov	r0, r4
 8008204:	f7fa fad4 	bl	80027b0 <chSemSignal>
    chSemSignal(&sem1);
 8008208:	4620      	mov	r0, r4
 800820a:	f7fa fad1 	bl	80027b0 <chSemSignal>
    test_wait_threads();
 800820e:	f7fe fef7 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008212:	490d      	ldr	r1, [pc, #52]	; (8008248 <rt_test_005_002_execute+0xf8>)
 8008214:	480d      	ldr	r0, [pc, #52]	; (800824c <rt_test_005_002_execute+0xfc>)
}
 8008216:	b002      	add	sp, #8
 8008218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800821c:	f7f8 be50 	b.w	8000ec0 <_test_assert_sequence>
 8008220:	20000da0 	.word	0x20000da0
 8008224:	08003841 	.word	0x08003841
 8008228:	20001060 	.word	0x20001060
 800822c:	0800aee8 	.word	0x0800aee8
 8008230:	2000178c 	.word	0x2000178c
 8008234:	0800aeec 	.word	0x0800aeec
 8008238:	0800b124 	.word	0x0800b124
 800823c:	0800bee0 	.word	0x0800bee0
 8008240:	0800af64 	.word	0x0800af64
 8008244:	20001040 	.word	0x20001040
 8008248:	0800afc4 	.word	0x0800afc4
 800824c:	0800af60 	.word	0x0800af60
 8008250:	20001774 	.word	0x20001774
	...

08008260 <rt_test_004_001_execute>:

static void rt_test_004_001_execute(void) {
 8008260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008264:	4d33      	ldr	r5, [pc, #204]	; (8008334 <rt_test_004_001_execute+0xd4>)
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8008266:	4f34      	ldr	r7, [pc, #208]	; (8008338 <rt_test_004_001_execute+0xd8>)
  return chThdGetSelfX()->prio;
 8008268:	69ab      	ldr	r3, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800826a:	4934      	ldr	r1, [pc, #208]	; (800833c <rt_test_004_001_execute+0xdc>)
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	4834      	ldr	r0, [pc, #208]	; (8008340 <rt_test_004_001_execute+0xe0>)
 8008270:	4b34      	ldr	r3, [pc, #208]	; (8008344 <rt_test_004_001_execute+0xe4>)
static void rt_test_004_001_execute(void) {
 8008272:	b082      	sub	sp, #8
  test_set_step(1);
 8008274:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008276:	9100      	str	r1, [sp, #0]
 8008278:	3a01      	subs	r2, #1
 800827a:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 800827e:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008280:	f7fa fab6 	bl	80027f0 <chThdCreateStatic>
 8008284:	4b30      	ldr	r3, [pc, #192]	; (8008348 <rt_test_004_001_execute+0xe8>)
 8008286:	2620      	movs	r6, #32
 8008288:	6018      	str	r0, [r3, #0]
 800828a:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 800828e:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 8008290:	4c2e      	ldr	r4, [pc, #184]	; (800834c <rt_test_004_001_execute+0xec>)
  tp->u.wttrp = trp;
 8008292:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 8008294:	2003      	movs	r0, #3
  *trp = tp;
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	f7fa fb2a 	bl	80028f0 <chSchGoSleepS>
  return currp->u.rdymsg;
 800829c:	69aa      	ldr	r2, [r5, #24]
 800829e:	2300      	movs	r3, #0
 80082a0:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 80082a4:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 80082a8:	6820      	ldr	r0, [r4, #0]
 80082aa:	4929      	ldr	r1, [pc, #164]	; (8008350 <rt_test_004_001_execute+0xf0>)
 80082ac:	fab0 f080 	clz	r0, r0
 80082b0:	0940      	lsrs	r0, r0, #5
 80082b2:	f7f8 fced 	bl	8000c90 <_test_assert>
 80082b6:	b110      	cbz	r0, 80082be <rt_test_004_001_execute+0x5e>
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
}
 80082b8:	b002      	add	sp, #8
 80082ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 80082be:	fab8 f088 	clz	r0, r8
 80082c2:	0940      	lsrs	r0, r0, #5
 80082c4:	4923      	ldr	r1, [pc, #140]	; (8008354 <rt_test_004_001_execute+0xf4>)
 80082c6:	f7f8 fce3 	bl	8000c90 <_test_assert>
 80082ca:	4680      	mov	r8, r0
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d1f3      	bne.n	80082b8 <rt_test_004_001_execute+0x58>
    test_wait_threads();
 80082d0:	f7fe fe96 	bl	8007000 <test_wait_threads>
  test_set_step(2);
 80082d4:	2302      	movs	r3, #2
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	f386 8811 	msr	BASEPRI, r6
 80082dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80082e0:	69ab      	ldr	r3, [r5, #24]
 80082e2:	6a55      	ldr	r5, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 80082e4:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80082e6:	f242 7110 	movw	r1, #10000	; 0x2710
 80082ea:	2003      	movs	r0, #3
  *trp = tp;
 80082ec:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80082ee:	f7fa fb87 	bl	8002a00 <chSchGoSleepTimeoutS>
 80082f2:	4606      	mov	r6, r0
 80082f4:	f388 8811 	msr	BASEPRI, r8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 80082f8:	f505 511c 	add.w	r1, r5, #9984	; 0x2700
 80082fc:	4608      	mov	r0, r1
 80082fe:	3010      	adds	r0, #16
 8008300:	3113      	adds	r1, #19
 8008302:	f7f8 fa9d 	bl	8000840 <_test_assert_time_window.constprop.1>
 8008306:	2800      	cmp	r0, #0
 8008308:	d1d6      	bne.n	80082b8 <rt_test_004_001_execute+0x58>
    test_assert(NULL == tr1, "not NULL");
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	4910      	ldr	r1, [pc, #64]	; (8008350 <rt_test_004_001_execute+0xf0>)
 800830e:	fab0 f080 	clz	r0, r0
 8008312:	0940      	lsrs	r0, r0, #5
 8008314:	f7f8 fcbc 	bl	8000c90 <_test_assert>
 8008318:	2800      	cmp	r0, #0
 800831a:	d1cd      	bne.n	80082b8 <rt_test_004_001_execute+0x58>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800831c:	f1a6 30ff 	sub.w	r0, r6, #4294967295
 8008320:	fab0 f080 	clz	r0, r0
 8008324:	490b      	ldr	r1, [pc, #44]	; (8008354 <rt_test_004_001_execute+0xf4>)
 8008326:	0940      	lsrs	r0, r0, #5
}
 8008328:	b002      	add	sp, #8
 800832a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800832e:	f7f8 bcaf 	b.w	8000c90 <_test_assert>
 8008332:	bf00      	nop
 8008334:	20000da0 	.word	0x20000da0
 8008338:	20001774 	.word	0x20001774
 800833c:	0800aee8 	.word	0x0800aee8
 8008340:	20001060 	.word	0x20001060
 8008344:	08004841 	.word	0x08004841
 8008348:	2000178c 	.word	0x2000178c
 800834c:	200017a0 	.word	0x200017a0
 8008350:	0800adbc 	.word	0x0800adbc
 8008354:	0800adc8 	.word	0x0800adc8
	...

08008360 <rt_test_003_002_execute>:
 * - [3.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_003_002_execute(void) {
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	4d6f      	ldr	r5, [pc, #444]	; (8008524 <rt_test_003_002_execute+0x1c4>)

  /* [3.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8008366:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8008554 <rt_test_003_002_execute+0x1f4>
  return chThdGetSelfX()->prio;
 800836a:	69ab      	ldr	r3, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800836c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8008558 <rt_test_003_002_execute+0x1f8>
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	486d      	ldr	r0, [pc, #436]	; (8008528 <rt_test_003_002_execute+0x1c8>)
 8008374:	4b6d      	ldr	r3, [pc, #436]	; (800852c <rt_test_003_002_execute+0x1cc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008376:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800855c <rt_test_003_002_execute+0x1fc>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800837a:	4e6d      	ldr	r6, [pc, #436]	; (8008530 <rt_test_003_002_execute+0x1d0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800837c:	4f6d      	ldr	r7, [pc, #436]	; (8008534 <rt_test_003_002_execute+0x1d4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800837e:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8008560 <rt_test_003_002_execute+0x200>
static void rt_test_003_002_execute(void) {
 8008382:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008384:	3a05      	subs	r2, #5
  test_set_step(1);
 8008386:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008388:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800838c:	f8cd 9000 	str.w	r9, [sp]
  test_set_step(1);
 8008390:	f8ca 4000 	str.w	r4, [sl]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008394:	f7fa fa2c 	bl	80027f0 <chThdCreateStatic>
 8008398:	69ab      	ldr	r3, [r5, #24]
 800839a:	4c67      	ldr	r4, [pc, #412]	; (8008538 <rt_test_003_002_execute+0x1d8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800839c:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800839e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80083a0:	3a04      	subs	r2, #4
 80083a2:	4b62      	ldr	r3, [pc, #392]	; (800852c <rt_test_003_002_execute+0x1cc>)
 80083a4:	f8cd b000 	str.w	fp, [sp]
 80083a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083ac:	4863      	ldr	r0, [pc, #396]	; (800853c <rt_test_003_002_execute+0x1dc>)
 80083ae:	f7fa fa1f 	bl	80027f0 <chThdCreateStatic>
 80083b2:	69ab      	ldr	r3, [r5, #24]
 80083b4:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	4861      	ldr	r0, [pc, #388]	; (8008540 <rt_test_003_002_execute+0x1e0>)
 80083ba:	4b5c      	ldr	r3, [pc, #368]	; (800852c <rt_test_003_002_execute+0x1cc>)
 80083bc:	9600      	str	r6, [sp, #0]
 80083be:	3a03      	subs	r2, #3
 80083c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083c4:	f7fa fa14 	bl	80027f0 <chThdCreateStatic>
 80083c8:	69ab      	ldr	r3, [r5, #24]
 80083ca:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	485d      	ldr	r0, [pc, #372]	; (8008544 <rt_test_003_002_execute+0x1e4>)
 80083d0:	4b56      	ldr	r3, [pc, #344]	; (800852c <rt_test_003_002_execute+0x1cc>)
 80083d2:	9700      	str	r7, [sp, #0]
 80083d4:	3a02      	subs	r2, #2
 80083d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083da:	f7fa fa09 	bl	80027f0 <chThdCreateStatic>
 80083de:	69ab      	ldr	r3, [r5, #24]
 80083e0:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	4858      	ldr	r0, [pc, #352]	; (8008548 <rt_test_003_002_execute+0x1e8>)
 80083e6:	4b51      	ldr	r3, [pc, #324]	; (800852c <rt_test_003_002_execute+0x1cc>)
 80083e8:	f8cd 8000 	str.w	r8, [sp]
 80083ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083f0:	3a01      	subs	r2, #1
 80083f2:	f7fa f9fd 	bl	80027f0 <chThdCreateStatic>
 80083f6:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 80083f8:	f7fe fe02 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80083fc:	4953      	ldr	r1, [pc, #332]	; (800854c <rt_test_003_002_execute+0x1ec>)
 80083fe:	4854      	ldr	r0, [pc, #336]	; (8008550 <rt_test_003_002_execute+0x1f0>)
 8008400:	f7f8 fd5e 	bl	8000ec0 <_test_assert_sequence>
 8008404:	b110      	cbz	r0, 800840c <rt_test_003_002_execute+0xac>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 8008406:	b003      	add	sp, #12
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800840e:	4b47      	ldr	r3, [pc, #284]	; (800852c <rt_test_003_002_execute+0x1cc>)
 8008410:	6892      	ldr	r2, [r2, #8]
 8008412:	484d      	ldr	r0, [pc, #308]	; (8008548 <rt_test_003_002_execute+0x1e8>)
 8008414:	f8cd 8000 	str.w	r8, [sp]
  test_set_step(2);
 8008418:	f04f 0c02 	mov.w	ip, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800841c:	3a01      	subs	r2, #1
 800841e:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 8008422:	f8ca c000 	str.w	ip, [sl]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008426:	f7fa f9e3 	bl	80027f0 <chThdCreateStatic>
 800842a:	69ab      	ldr	r3, [r5, #24]
 800842c:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	4844      	ldr	r0, [pc, #272]	; (8008544 <rt_test_003_002_execute+0x1e4>)
 8008432:	4b3e      	ldr	r3, [pc, #248]	; (800852c <rt_test_003_002_execute+0x1cc>)
 8008434:	9700      	str	r7, [sp, #0]
 8008436:	3a02      	subs	r2, #2
 8008438:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800843c:	f7fa f9d8 	bl	80027f0 <chThdCreateStatic>
 8008440:	69ab      	ldr	r3, [r5, #24]
 8008442:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	483e      	ldr	r0, [pc, #248]	; (8008540 <rt_test_003_002_execute+0x1e0>)
 8008448:	4b38      	ldr	r3, [pc, #224]	; (800852c <rt_test_003_002_execute+0x1cc>)
 800844a:	9600      	str	r6, [sp, #0]
 800844c:	3a03      	subs	r2, #3
 800844e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008452:	f7fa f9cd 	bl	80027f0 <chThdCreateStatic>
 8008456:	69ab      	ldr	r3, [r5, #24]
 8008458:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	4837      	ldr	r0, [pc, #220]	; (800853c <rt_test_003_002_execute+0x1dc>)
 800845e:	4b33      	ldr	r3, [pc, #204]	; (800852c <rt_test_003_002_execute+0x1cc>)
 8008460:	f8cd b000 	str.w	fp, [sp]
 8008464:	3a04      	subs	r2, #4
 8008466:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800846a:	f7fa f9c1 	bl	80027f0 <chThdCreateStatic>
 800846e:	69ab      	ldr	r3, [r5, #24]
 8008470:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	482c      	ldr	r0, [pc, #176]	; (8008528 <rt_test_003_002_execute+0x1c8>)
 8008476:	4b2d      	ldr	r3, [pc, #180]	; (800852c <rt_test_003_002_execute+0x1cc>)
 8008478:	f8cd 9000 	str.w	r9, [sp]
 800847c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008480:	3a05      	subs	r2, #5
 8008482:	f7fa f9b5 	bl	80027f0 <chThdCreateStatic>
 8008486:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8008488:	f7fe fdba 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800848c:	492f      	ldr	r1, [pc, #188]	; (800854c <rt_test_003_002_execute+0x1ec>)
 800848e:	4830      	ldr	r0, [pc, #192]	; (8008550 <rt_test_003_002_execute+0x1f0>)
 8008490:	f7f8 fd16 	bl	8000ec0 <_test_assert_sequence>
 8008494:	2800      	cmp	r0, #0
 8008496:	d1b6      	bne.n	8008406 <rt_test_003_002_execute+0xa6>
 8008498:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800849a:	4b24      	ldr	r3, [pc, #144]	; (800852c <rt_test_003_002_execute+0x1cc>)
 800849c:	6892      	ldr	r2, [r2, #8]
 800849e:	f8cd b000 	str.w	fp, [sp]
  test_set_step(3);
 80084a2:	2003      	movs	r0, #3
 80084a4:	f8ca 0000 	str.w	r0, [sl]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80084a8:	3a04      	subs	r2, #4
 80084aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80084ae:	4823      	ldr	r0, [pc, #140]	; (800853c <rt_test_003_002_execute+0x1dc>)
 80084b0:	f7fa f99e 	bl	80027f0 <chThdCreateStatic>
 80084b4:	69ab      	ldr	r3, [r5, #24]
 80084b6:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	481b      	ldr	r0, [pc, #108]	; (8008528 <rt_test_003_002_execute+0x1c8>)
 80084bc:	4b1b      	ldr	r3, [pc, #108]	; (800852c <rt_test_003_002_execute+0x1cc>)
 80084be:	f8cd 9000 	str.w	r9, [sp]
 80084c2:	3a05      	subs	r2, #5
 80084c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80084c8:	f7fa f992 	bl	80027f0 <chThdCreateStatic>
 80084cc:	69ab      	ldr	r3, [r5, #24]
 80084ce:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	481d      	ldr	r0, [pc, #116]	; (8008548 <rt_test_003_002_execute+0x1e8>)
 80084d4:	4b15      	ldr	r3, [pc, #84]	; (800852c <rt_test_003_002_execute+0x1cc>)
 80084d6:	f8cd 8000 	str.w	r8, [sp]
 80084da:	3a01      	subs	r2, #1
 80084dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80084e0:	f7fa f986 	bl	80027f0 <chThdCreateStatic>
 80084e4:	69ab      	ldr	r3, [r5, #24]
 80084e6:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80084e8:	689a      	ldr	r2, [r3, #8]
 80084ea:	4816      	ldr	r0, [pc, #88]	; (8008544 <rt_test_003_002_execute+0x1e4>)
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <rt_test_003_002_execute+0x1cc>)
 80084ee:	9700      	str	r7, [sp, #0]
 80084f0:	3a02      	subs	r2, #2
 80084f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80084f6:	f7fa f97b 	bl	80027f0 <chThdCreateStatic>
 80084fa:	69ab      	ldr	r3, [r5, #24]
 80084fc:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	480f      	ldr	r0, [pc, #60]	; (8008540 <rt_test_003_002_execute+0x1e0>)
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <rt_test_003_002_execute+0x1cc>)
 8008504:	9600      	str	r6, [sp, #0]
 8008506:	3a03      	subs	r2, #3
 8008508:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800850c:	f7fa f970 	bl	80027f0 <chThdCreateStatic>
 8008510:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8008512:	f7fe fd75 	bl	8007000 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008516:	490d      	ldr	r1, [pc, #52]	; (800854c <rt_test_003_002_execute+0x1ec>)
 8008518:	480d      	ldr	r0, [pc, #52]	; (8008550 <rt_test_003_002_execute+0x1f0>)
}
 800851a:	b003      	add	sp, #12
 800851c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008520:	f7f8 bcce 	b.w	8000ec0 <_test_assert_sequence>
 8008524:	20000da0 	.word	0x20000da0
 8008528:	20001060 	.word	0x20001060
 800852c:	08000e31 	.word	0x08000e31
 8008530:	0800b124 	.word	0x0800b124
 8008534:	0800aeec 	.word	0x0800aeec
 8008538:	2000178c 	.word	0x2000178c
 800853c:	200011a8 	.word	0x200011a8
 8008540:	200012f0 	.word	0x200012f0
 8008544:	20001438 	.word	0x20001438
 8008548:	20001580 	.word	0x20001580
 800854c:	0800afc4 	.word	0x0800afc4
 8008550:	0800af60 	.word	0x0800af60
 8008554:	20001774 	.word	0x20001774
 8008558:	0800af64 	.word	0x0800af64
 800855c:	0800bee0 	.word	0x0800bee0
 8008560:	0800aee8 	.word	0x0800aee8
	...

08008570 <cmd_test.lto_priv.93>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008570:	b530      	push	{r4, r5, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 8008572:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008574:	b083      	sub	sp, #12
 8008576:	4604      	mov	r4, r0
  if (argc != 1) {
 8008578:	d11c      	bne.n	80085b4 <cmd_test.lto_priv.93+0x44>
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 800857a:	6815      	ldr	r5, [r2, #0]
 800857c:	4916      	ldr	r1, [pc, #88]	; (80085d8 <cmd_test.lto_priv.93+0x68>)
 800857e:	4628      	mov	r0, r5
 8008580:	f7f7 ff52 	bl	8000428 <strcmp>
 8008584:	b1f0      	cbz	r0, 80085c4 <cmd_test.lto_priv.93+0x54>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 8008586:	4628      	mov	r0, r5
 8008588:	4914      	ldr	r1, [pc, #80]	; (80085dc <cmd_test.lto_priv.93+0x6c>)
 800858a:	f7f7 ff4d 	bl	8000428 <strcmp>
 800858e:	b988      	cbnz	r0, 80085b4 <cmd_test.lto_priv.93+0x44>
    tfp = test_oslib;
 8008590:	4913      	ldr	r1, [pc, #76]	; (80085e0 <cmd_test.lto_priv.93+0x70>)
  return ch.rlist.current;
 8008592:	4b14      	ldr	r3, [pc, #80]	; (80085e4 <cmd_test.lto_priv.93+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 8008594:	4a14      	ldr	r2, [pc, #80]	; (80085e8 <cmd_test.lto_priv.93+0x78>)
  return chThdGetSelfX()->prio;
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	2000      	movs	r0, #0
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	e9cd 1400 	strd	r1, r4, [sp]
 80085a0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80085a4:	f7fc fa3c 	bl	8004a20 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 80085a8:	b170      	cbz	r0, 80085c8 <cmd_test.lto_priv.93+0x58>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 80085aa:	b003      	add	sp, #12
 80085ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chThdWait(tp);
 80085b0:	f7fe ba4e 	b.w	8006a50 <chThdWait>
    shellUsage(chp, "test rt|oslib");
 80085b4:	4a0d      	ldr	r2, [pc, #52]	; (80085ec <cmd_test.lto_priv.93+0x7c>)
 80085b6:	490e      	ldr	r1, [pc, #56]	; (80085f0 <cmd_test.lto_priv.93+0x80>)
 80085b8:	4620      	mov	r0, r4
}
 80085ba:	b003      	add	sp, #12
 80085bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    shellUsage(chp, "test rt|oslib");
 80085c0:	f7f9 bcf6 	b.w	8001fb0 <chprintf>
    tfp = test_rt;
 80085c4:	490b      	ldr	r1, [pc, #44]	; (80085f4 <cmd_test.lto_priv.93+0x84>)
 80085c6:	e7e4      	b.n	8008592 <cmd_test.lto_priv.93+0x22>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 80085c8:	490b      	ldr	r1, [pc, #44]	; (80085f8 <cmd_test.lto_priv.93+0x88>)
 80085ca:	4620      	mov	r0, r4
}
 80085cc:	b003      	add	sp, #12
 80085ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 80085d2:	f7f9 bced 	b.w	8001fb0 <chprintf>
 80085d6:	bf00      	nop
 80085d8:	08009bc4 	.word	0x08009bc4
 80085dc:	08009bbc 	.word	0x08009bbc
 80085e0:	080034e1 	.word	0x080034e1
 80085e4:	20000da0 	.word	0x20000da0
 80085e8:	0800ba74 	.word	0x0800ba74
 80085ec:	08009bb4 	.word	0x08009bb4
 80085f0:	08009ba0 	.word	0x08009ba0
 80085f4:	080034d1 	.word	0x080034d1
 80085f8:	08009bc8 	.word	0x08009bc8
 80085fc:	00000000 	.word	0x00000000

08008600 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	2320      	movs	r3, #32
 8008604:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 8008608:	6884      	ldr	r4, [r0, #8]
  sp->cnt = n;
 800860a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 800860c:	3401      	adds	r4, #1
 800860e:	2c00      	cmp	r4, #0
 8008610:	dc0c      	bgt.n	800862c <chSemReset+0x2c>
 8008612:	4605      	mov	r5, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8008614:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8008618:	6868      	ldr	r0, [r5, #4]
  tqp->prev             = tp->queue.prev;
 800861a:	6843      	ldr	r3, [r0, #4]
 800861c:	606b      	str	r3, [r5, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 800861e:	601d      	str	r5, [r3, #0]
 8008620:	f7f8 feee 	bl	8001400 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8008624:	3401      	adds	r4, #1
 8008626:	2c01      	cmp	r4, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8008628:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 800862a:	d1f5      	bne.n	8008618 <chSemReset+0x18>
  chSchRescheduleS();
 800862c:	f7fb faf0 	bl	8003c10 <chSchRescheduleS>
 8008630:	2300      	movs	r3, #0
 8008632:	f383 8811 	msr	BASEPRI, r3
}
 8008636:	bd70      	pop	{r4, r5, r6, pc}
	...

08008640 <rt_test_010_007_execute>:
static void rt_test_010_007_execute(void) {
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008644:	4e3b      	ldr	r6, [pc, #236]	; (8008734 <rt_test_010_007_execute+0xf4>)
  test_set_step(1);
 8008646:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8008764 <rt_test_010_007_execute+0x124>
  return chThdGetSelfX()->prio;
 800864a:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800864c:	4b3a      	ldr	r3, [pc, #232]	; (8008738 <rt_test_010_007_execute+0xf8>)
 800864e:	6892      	ldr	r2, [r2, #8]
 8008650:	483a      	ldr	r0, [pc, #232]	; (800873c <rt_test_010_007_execute+0xfc>)
 8008652:	4d3b      	ldr	r5, [pc, #236]	; (8008740 <rt_test_010_007_execute+0x100>)
      chSemReset(&sem1, 0);
 8008654:	4f3b      	ldr	r7, [pc, #236]	; (8008744 <rt_test_010_007_execute+0x104>)
static void rt_test_010_007_execute(void) {
 8008656:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008658:	2400      	movs	r4, #0
  test_set_step(1);
 800865a:	2101      	movs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800865c:	3205      	adds	r2, #5
  test_set_step(1);
 800865e:	f8c8 1000 	str.w	r1, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008662:	9400      	str	r4, [sp, #0]
 8008664:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008668:	f7fa f8c2 	bl	80027f0 <chThdCreateStatic>
 800866c:	69b3      	ldr	r3, [r6, #24]
 800866e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	4835      	ldr	r0, [pc, #212]	; (8008748 <rt_test_010_007_execute+0x108>)
 8008674:	4b30      	ldr	r3, [pc, #192]	; (8008738 <rt_test_010_007_execute+0xf8>)
 8008676:	9400      	str	r4, [sp, #0]
 8008678:	3204      	adds	r2, #4
 800867a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800867e:	f7fa f8b7 	bl	80027f0 <chThdCreateStatic>
 8008682:	69b3      	ldr	r3, [r6, #24]
 8008684:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	4830      	ldr	r0, [pc, #192]	; (800874c <rt_test_010_007_execute+0x10c>)
 800868a:	4b2b      	ldr	r3, [pc, #172]	; (8008738 <rt_test_010_007_execute+0xf8>)
 800868c:	9400      	str	r4, [sp, #0]
 800868e:	3203      	adds	r2, #3
 8008690:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008694:	f7fa f8ac 	bl	80027f0 <chThdCreateStatic>
 8008698:	69b3      	ldr	r3, [r6, #24]
 800869a:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	482c      	ldr	r0, [pc, #176]	; (8008750 <rt_test_010_007_execute+0x110>)
 80086a0:	4b25      	ldr	r3, [pc, #148]	; (8008738 <rt_test_010_007_execute+0xf8>)
 80086a2:	9400      	str	r4, [sp, #0]
 80086a4:	3202      	adds	r2, #2
 80086a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80086aa:	f7fa f8a1 	bl	80027f0 <chThdCreateStatic>
 80086ae:	69b3      	ldr	r3, [r6, #24]
 80086b0:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	4827      	ldr	r0, [pc, #156]	; (8008754 <rt_test_010_007_execute+0x114>)
 80086b6:	4b20      	ldr	r3, [pc, #128]	; (8008738 <rt_test_010_007_execute+0xf8>)
 80086b8:	9400      	str	r4, [sp, #0]
 80086ba:	3201      	adds	r2, #1
 80086bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80086c0:	f7fa f896 	bl	80027f0 <chThdCreateStatic>
  test_set_step(2);
 80086c4:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80086c6:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 80086c8:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 80086cc:	f7fa fcf8 	bl	80030c0 <test_wait_tick>
 80086d0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80086d4:	4605      	mov	r5, r0
      chSemReset(&sem1, 0);
 80086d6:	2100      	movs	r1, #0
 80086d8:	4638      	mov	r0, r7
 80086da:	f7ff ff91 	bl	8008600 <chSemReset>
 80086de:	6a73      	ldr	r3, [r6, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 80086e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80086e4:	1b5b      	subs	r3, r3, r5
 80086e6:	4293      	cmp	r3, r2
      n++;
 80086e8:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80086ec:	d9f3      	bls.n	80086d6 <rt_test_010_007_execute+0x96>
  test_set_step(3);
 80086ee:	2303      	movs	r3, #3
 80086f0:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
 80086f4:	f7f8 fb0c 	bl	8000d10 <test_terminate_threads>
    chSemReset(&sem1, 0);
 80086f8:	2100      	movs	r1, #0
 80086fa:	4812      	ldr	r0, [pc, #72]	; (8008744 <rt_test_010_007_execute+0x104>)
 80086fc:	f7ff ff80 	bl	8008600 <chSemReset>
    test_wait_threads();
 8008700:	f7fe fc7e 	bl	8007000 <test_wait_threads>
  test_set_step(4);
 8008704:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8008706:	4814      	ldr	r0, [pc, #80]	; (8008758 <rt_test_010_007_execute+0x118>)
  test_set_step(4);
 8008708:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 800870c:	f7f8 fbc0 	bl	8000e90 <test_print>
    test_printn(n);
 8008710:	4620      	mov	r0, r4
 8008712:	f7f8 fb4d 	bl	8000db0 <test_printn>
    test_printn(n * 6);
 8008716:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 800871a:	4810      	ldr	r0, [pc, #64]	; (800875c <rt_test_010_007_execute+0x11c>)
 800871c:	f7f8 fbb8 	bl	8000e90 <test_print>
    test_printn(n * 6);
 8008720:	0060      	lsls	r0, r4, #1
 8008722:	f7f8 fb45 	bl	8000db0 <test_printn>
    test_println(" ctxswc/S");
 8008726:	480e      	ldr	r0, [pc, #56]	; (8008760 <rt_test_010_007_execute+0x120>)
}
 8008728:	b002      	add	sp, #8
 800872a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 800872e:	f7f8 bb8f 	b.w	8000e50 <test_println>
 8008732:	bf00      	nop
 8008734:	20000da0 	.word	0x20000da0
 8008738:	080037f1 	.word	0x080037f1
 800873c:	20001060 	.word	0x20001060
 8008740:	2000178c 	.word	0x2000178c
 8008744:	2000104c 	.word	0x2000104c
 8008748:	200011a8 	.word	0x200011a8
 800874c:	200012f0 	.word	0x200012f0
 8008750:	20001438 	.word	0x20001438
 8008754:	20001580 	.word	0x20001580
 8008758:	0800b260 	.word	0x0800b260
 800875c:	0800b220 	.word	0x0800b220
 8008760:	0800b244 	.word	0x0800b244
 8008764:	20001774 	.word	0x20001774
	...

08008770 <rt_test_005_006_execute>:
}

static void rt_test_005_006_execute(void) {
 8008770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8008774:	4f61      	ldr	r7, [pc, #388]	; (80088fc <rt_test_005_006_execute+0x18c>)
static void rt_test_005_006_execute(void) {
 8008776:	b086      	sub	sp, #24
  test_set_step(1);
 8008778:	2301      	movs	r3, #1
  tqp->next = (thread_t *)tqp;
 800877a:	ac03      	add	r4, sp, #12
  sp->cnt = n;
 800877c:	2600      	movs	r6, #0
 800877e:	603b      	str	r3, [r7, #0]
  tqp->prev = (thread_t *)tqp;
 8008780:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8008784:	9605      	str	r6, [sp, #20]
 8008786:	f04f 0820 	mov.w	r8, #32
 800878a:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800878e:	9805      	ldr	r0, [sp, #20]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8008790:	495b      	ldr	r1, [pc, #364]	; (8008900 <rt_test_005_006_execute+0x190>)
 8008792:	42b0      	cmp	r0, r6
 8008794:	bfcc      	ite	gt
 8008796:	2000      	movgt	r0, #0
 8008798:	2001      	movle	r0, #1
 800879a:	f7f8 fa79 	bl	8000c90 <_test_assert>
 800879e:	b120      	cbz	r0, 80087aa <rt_test_005_006_execute+0x3a>
 80087a0:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 80087a4:	b006      	add	sp, #24
 80087a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087aa:	4605      	mov	r5, r0
 80087ac:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80087b0:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 80087b2:	4601      	mov	r1, r0
 80087b4:	4620      	mov	r0, r4
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	f7ff ff22 	bl	8008600 <chSemReset>
 80087bc:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80087c0:	9805      	ldr	r0, [sp, #20]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80087c2:	494f      	ldr	r1, [pc, #316]	; (8008900 <rt_test_005_006_execute+0x190>)
 80087c4:	2800      	cmp	r0, #0
 80087c6:	bfcc      	ite	gt
 80087c8:	2000      	movgt	r0, #0
 80087ca:	2001      	movle	r0, #1
 80087cc:	f7f8 fa60 	bl	8000c90 <_test_assert>
 80087d0:	4606      	mov	r6, r0
 80087d2:	b120      	cbz	r0, 80087de <rt_test_005_006_execute+0x6e>
 80087d4:	f385 8811 	msr	BASEPRI, r5
}
 80087d8:	b006      	add	sp, #24
 80087da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087de:	f380 8811 	msr	BASEPRI, r0
  return ch.rlist.current;
 80087e2:	4a48      	ldr	r2, [pc, #288]	; (8008904 <rt_test_005_006_execute+0x194>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80087e4:	4b48      	ldr	r3, [pc, #288]	; (8008908 <rt_test_005_006_execute+0x198>)
  return chThdGetSelfX()->prio;
 80087e6:	6992      	ldr	r2, [r2, #24]
 80087e8:	4848      	ldr	r0, [pc, #288]	; (800890c <rt_test_005_006_execute+0x19c>)
 80087ea:	6892      	ldr	r2, [r2, #8]
 80087ec:	9400      	str	r4, [sp, #0]
  test_set_step(3);
 80087ee:	2503      	movs	r5, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80087f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(3);
 80087f4:	603d      	str	r5, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80087f6:	3a01      	subs	r2, #1
 80087f8:	f7f9 fffa 	bl	80027f0 <chThdCreateStatic>
 80087fc:	4a44      	ldr	r2, [pc, #272]	; (8008910 <rt_test_005_006_execute+0x1a0>)
  test_set_step(4);
 80087fe:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8008800:	6010      	str	r0, [r2, #0]
  return chSemWait(&bsp->sem);
 8008802:	4620      	mov	r0, r4
  test_set_step(4);
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	f7fa ff83 	bl	8003710 <chSemWait>
 800880a:	4605      	mov	r5, r0
 800880c:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8008810:	9805      	ldr	r0, [sp, #20]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8008812:	493b      	ldr	r1, [pc, #236]	; (8008900 <rt_test_005_006_execute+0x190>)
 8008814:	2800      	cmp	r0, #0
 8008816:	bfcc      	ite	gt
 8008818:	2000      	movgt	r0, #0
 800881a:	2001      	movle	r0, #1
 800881c:	f7f8 fa38 	bl	8000c90 <_test_assert>
 8008820:	2800      	cmp	r0, #0
 8008822:	d1bd      	bne.n	80087a0 <rt_test_005_006_execute+0x30>
 8008824:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8008828:	fab5 f085 	clz	r0, r5
 800882c:	0940      	lsrs	r0, r0, #5
 800882e:	4939      	ldr	r1, [pc, #228]	; (8008914 <rt_test_005_006_execute+0x1a4>)
 8008830:	f7f8 fa2e 	bl	8000c90 <_test_assert>
 8008834:	2800      	cmp	r0, #0
 8008836:	d1b5      	bne.n	80087a4 <rt_test_005_006_execute+0x34>
  test_set_step(5);
 8008838:	2305      	movs	r3, #5
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 8008840:	9b05      	ldr	r3, [sp, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	dd4e      	ble.n	80088e4 <rt_test_005_006_execute+0x174>
  chSchRescheduleS();
 8008846:	f7fb f9e3 	bl	8003c10 <chSchRescheduleS>
 800884a:	2500      	movs	r5, #0
 800884c:	f385 8811 	msr	BASEPRI, r5
 8008850:	f04f 0820 	mov.w	r8, #32
 8008854:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8008858:	9805      	ldr	r0, [sp, #20]
 800885a:	492f      	ldr	r1, [pc, #188]	; (8008918 <rt_test_005_006_execute+0x1a8>)
 800885c:	42a8      	cmp	r0, r5
 800885e:	bfd4      	ite	le
 8008860:	2000      	movle	r0, #0
 8008862:	2001      	movgt	r0, #1
 8008864:	f7f8 fa14 	bl	8000c90 <_test_assert>
 8008868:	4606      	mov	r6, r0
 800886a:	2800      	cmp	r0, #0
 800886c:	d1b2      	bne.n	80087d4 <rt_test_005_006_execute+0x64>
 800886e:	f380 8811 	msr	BASEPRI, r0
 8008872:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8008876:	9805      	ldr	r0, [sp, #20]
 8008878:	4928      	ldr	r1, [pc, #160]	; (800891c <rt_test_005_006_execute+0x1ac>)
 800887a:	f1a0 0001 	sub.w	r0, r0, #1
 800887e:	fab0 f080 	clz	r0, r0
 8008882:	0940      	lsrs	r0, r0, #5
 8008884:	f7f8 fa04 	bl	8000c90 <_test_assert>
 8008888:	2800      	cmp	r0, #0
 800888a:	d189      	bne.n	80087a0 <rt_test_005_006_execute+0x30>
 800888c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8008890:	2306      	movs	r3, #6
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 8008898:	9b05      	ldr	r3, [sp, #20]
 800889a:	2b00      	cmp	r3, #0
 800889c:	dd26      	ble.n	80088ec <rt_test_005_006_execute+0x17c>
  chSchRescheduleS();
 800889e:	f7fb f9b7 	bl	8003c10 <chSchRescheduleS>
 80088a2:	2600      	movs	r6, #0
 80088a4:	f386 8811 	msr	BASEPRI, r6
 80088a8:	2520      	movs	r5, #32
 80088aa:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80088ae:	9805      	ldr	r0, [sp, #20]
 80088b0:	491b      	ldr	r1, [pc, #108]	; (8008920 <rt_test_005_006_execute+0x1b0>)
 80088b2:	42b0      	cmp	r0, r6
 80088b4:	bfd4      	ite	le
 80088b6:	2000      	movle	r0, #0
 80088b8:	2001      	movgt	r0, #1
 80088ba:	f7f8 f9e9 	bl	8000c90 <_test_assert>
 80088be:	4604      	mov	r4, r0
 80088c0:	2800      	cmp	r0, #0
 80088c2:	f47f af6d 	bne.w	80087a0 <rt_test_005_006_execute+0x30>
 80088c6:	f380 8811 	msr	BASEPRI, r0
 80088ca:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80088ce:	9805      	ldr	r0, [sp, #20]
 80088d0:	4912      	ldr	r1, [pc, #72]	; (800891c <rt_test_005_006_execute+0x1ac>)
 80088d2:	1e43      	subs	r3, r0, #1
 80088d4:	4258      	negs	r0, r3
 80088d6:	4158      	adcs	r0, r3
 80088d8:	f7f8 f9da 	bl	8000c90 <_test_assert>
 80088dc:	b150      	cbz	r0, 80088f4 <rt_test_005_006_execute+0x184>
 80088de:	f384 8811 	msr	BASEPRI, r4
 80088e2:	e75f      	b.n	80087a4 <rt_test_005_006_execute+0x34>
    chSemSignalI(&bsp->sem);
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7f8 feb3 	bl	8001650 <chSemSignalI>
 80088ea:	e7ac      	b.n	8008846 <rt_test_005_006_execute+0xd6>
 80088ec:	4620      	mov	r0, r4
 80088ee:	f7f8 feaf 	bl	8001650 <chSemSignalI>
 80088f2:	e7d4      	b.n	800889e <rt_test_005_006_execute+0x12e>
 80088f4:	f380 8811 	msr	BASEPRI, r0
 80088f8:	e754      	b.n	80087a4 <rt_test_005_006_execute+0x34>
 80088fa:	bf00      	nop
 80088fc:	20001774 	.word	0x20001774
 8008900:	0800ae88 	.word	0x0800ae88
 8008904:	20000da0 	.word	0x20000da0
 8008908:	08004811 	.word	0x08004811
 800890c:	20001060 	.word	0x20001060
 8008910:	2000178c 	.word	0x2000178c
 8008914:	0800ae94 	.word	0x0800ae94
 8008918:	0800aea8 	.word	0x0800aea8
 800891c:	0800aeb4 	.word	0x0800aeb4
 8008920:	0800ae8c 	.word	0x0800ae8c
	...

08008930 <rt_test_005_001_execute>:
static void rt_test_005_001_execute(void) {
 8008930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 8008934:	4c29      	ldr	r4, [pc, #164]	; (80089dc <rt_test_005_001_execute+0xac>)
  test_set_step(1);
 8008936:	4e2a      	ldr	r6, [pc, #168]	; (80089e0 <rt_test_005_001_execute+0xb0>)
 8008938:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 800893a:	4620      	mov	r0, r4
  test_set_step(1);
 800893c:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
 800893e:	f7fa fee7 	bl	8003710 <chSemWait>
 8008942:	2520      	movs	r5, #32
 8008944:	4607      	mov	r7, r0
 8008946:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 800894a:	68a0      	ldr	r0, [r4, #8]
 800894c:	4925      	ldr	r1, [pc, #148]	; (80089e4 <rt_test_005_001_execute+0xb4>)
 800894e:	fab0 f080 	clz	r0, r0
 8008952:	0940      	lsrs	r0, r0, #5
 8008954:	f7f8 f99c 	bl	8000c90 <_test_assert>
 8008958:	b120      	cbz	r0, 8008964 <rt_test_005_001_execute+0x34>
 800895a:	2300      	movs	r3, #0
 800895c:	f383 8811 	msr	BASEPRI, r3
}
 8008960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008964:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8008968:	fab7 f087 	clz	r0, r7
 800896c:	0940      	lsrs	r0, r0, #5
 800896e:	491e      	ldr	r1, [pc, #120]	; (80089e8 <rt_test_005_001_execute+0xb8>)
 8008970:	f7f8 f98e 	bl	8000c90 <_test_assert>
 8008974:	4607      	mov	r7, r0
 8008976:	2800      	cmp	r0, #0
 8008978:	d1f2      	bne.n	8008960 <rt_test_005_001_execute+0x30>
  test_set_step(2);
 800897a:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 800897e:	4620      	mov	r0, r4
  test_set_step(2);
 8008980:	f8c6 9000 	str.w	r9, [r6]
    chSemSignal(&sem1);
 8008984:	f7f9 ff14 	bl	80027b0 <chSemSignal>
 8008988:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 800898c:	68a0      	ldr	r0, [r4, #8]
 800898e:	4915      	ldr	r1, [pc, #84]	; (80089e4 <rt_test_005_001_execute+0xb4>)
 8008990:	f1a0 0001 	sub.w	r0, r0, #1
 8008994:	fab0 f080 	clz	r0, r0
 8008998:	0940      	lsrs	r0, r0, #5
 800899a:	f7f8 f979 	bl	8000c90 <_test_assert>
 800899e:	4680      	mov	r8, r0
 80089a0:	b110      	cbz	r0, 80089a8 <rt_test_005_001_execute+0x78>
 80089a2:	f387 8811 	msr	BASEPRI, r7
 80089a6:	e7db      	b.n	8008960 <rt_test_005_001_execute+0x30>
 80089a8:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80089ac:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
 80089ae:	4649      	mov	r1, r9
 80089b0:	4620      	mov	r0, r4
  test_set_step(3);
 80089b2:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
 80089b4:	f7ff fe24 	bl	8008600 <chSemReset>
 80089b8:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 80089bc:	68a0      	ldr	r0, [r4, #8]
 80089be:	4909      	ldr	r1, [pc, #36]	; (80089e4 <rt_test_005_001_execute+0xb4>)
 80089c0:	f1a0 0002 	sub.w	r0, r0, #2
 80089c4:	fab0 f080 	clz	r0, r0
 80089c8:	0940      	lsrs	r0, r0, #5
 80089ca:	f7f8 f961 	bl	8000c90 <_test_assert>
 80089ce:	b910      	cbnz	r0, 80089d6 <rt_test_005_001_execute+0xa6>
 80089d0:	f380 8811 	msr	BASEPRI, r0
 80089d4:	e7c4      	b.n	8008960 <rt_test_005_001_execute+0x30>
 80089d6:	f388 8811 	msr	BASEPRI, r8
 80089da:	e7c1      	b.n	8008960 <rt_test_005_001_execute+0x30>
 80089dc:	20001040 	.word	0x20001040
 80089e0:	20001774 	.word	0x20001774
 80089e4:	0800adf0 	.word	0x0800adf0
 80089e8:	0800adc8 	.word	0x0800adc8
 80089ec:	00000000 	.word	0x00000000

080089f0 <rt_test_005_001_teardown>:
  chSemReset(&sem1, 0);
 80089f0:	2100      	movs	r1, #0
 80089f2:	4801      	ldr	r0, [pc, #4]	; (80089f8 <rt_test_005_001_teardown+0x8>)
 80089f4:	f7ff be04 	b.w	8008600 <chSemReset>
 80089f8:	20001040 	.word	0x20001040
 80089fc:	00000000 	.word	0x00000000

08008a00 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 8008a00:	b510      	push	{r4, lr}
 8008a02:	2320      	movs	r3, #32
 8008a04:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8008a08:	4b08      	ldr	r3, [pc, #32]	; (8008a2c <chThdSetPriority+0x2c>)
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8008a0e:	6899      	ldr	r1, [r3, #8]
 8008a10:	42a1      	cmp	r1, r4
 8008a12:	d001      	beq.n	8008a18 <chThdSetPriority+0x18>
 8008a14:	4281      	cmp	r1, r0
 8008a16:	d200      	bcs.n	8008a1a <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8008a18:	6098      	str	r0, [r3, #8]
  currp->realprio = newprio;
 8008a1a:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
 8008a1c:	f7fb f8f8 	bl	8003c10 <chSchRescheduleS>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f383 8811 	msr	BASEPRI, r3
}
 8008a26:	4620      	mov	r0, r4
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000da0 	.word	0x20000da0

08008a30 <rt_test_003_004_execute>:
 * - [3.4.3] Raising thread priority above the boosted level.
 * - [3.4.4] Restoring original conditions.
 * .
 */

static void rt_test_003_004_execute(void) {
 8008a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008a34:	4d2f      	ldr	r5, [pc, #188]	; (8008af4 <rt_test_003_004_execute+0xc4>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8008a36:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b08 <rt_test_003_004_execute+0xd8>
 8008a3a:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8008a3c:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8008a3e:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8008a40:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8008a42:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8008a44:	4638      	mov	r0, r7
  test_set_step(2);
 8008a46:	2302      	movs	r3, #2
 8008a48:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8008a4c:	f7ff ffd8 	bl	8008a00 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8008a50:	1b00      	subs	r0, r0, r4
 8008a52:	fab0 f080 	clz	r0, r0
 8008a56:	4928      	ldr	r1, [pc, #160]	; (8008af8 <rt_test_003_004_execute+0xc8>)
 8008a58:	0940      	lsrs	r0, r0, #5
 8008a5a:	f7f8 f919 	bl	8000c90 <_test_assert>
 8008a5e:	b108      	cbz	r0, 8008a64 <rt_test_003_004_execute+0x34>
    chSysLock();
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
}
 8008a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8008a64:	69ab      	ldr	r3, [r5, #24]
 8008a66:	4925      	ldr	r1, [pc, #148]	; (8008afc <rt_test_003_004_execute+0xcc>)
 8008a68:	6898      	ldr	r0, [r3, #8]
 8008a6a:	1b80      	subs	r0, r0, r6
 8008a6c:	fab0 f080 	clz	r0, r0
 8008a70:	0940      	lsrs	r0, r0, #5
 8008a72:	f7f8 f90d 	bl	8000c90 <_test_assert>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d1f2      	bne.n	8008a60 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8008a7a:	69ab      	ldr	r3, [r5, #24]
 8008a7c:	4920      	ldr	r1, [pc, #128]	; (8008b00 <rt_test_003_004_execute+0xd0>)
 8008a7e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008a80:	1bc0      	subs	r0, r0, r7
 8008a82:	fab0 f080 	clz	r0, r0
 8008a86:	0940      	lsrs	r0, r0, #5
 8008a88:	f7f8 f902 	bl	8000c90 <_test_assert>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d1e7      	bne.n	8008a60 <rt_test_003_004_execute+0x30>
    p1 = chThdSetPriority(prio + 3);
 8008a90:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8008a92:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8008a94:	4630      	mov	r0, r6
  test_set_step(3);
 8008a96:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 8008a9a:	f7ff ffb1 	bl	8008a00 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8008a9e:	1a38      	subs	r0, r7, r0
 8008aa0:	fab0 f080 	clz	r0, r0
 8008aa4:	4914      	ldr	r1, [pc, #80]	; (8008af8 <rt_test_003_004_execute+0xc8>)
 8008aa6:	0940      	lsrs	r0, r0, #5
 8008aa8:	f7f8 f8f2 	bl	8000c90 <_test_assert>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d1d7      	bne.n	8008a60 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8008ab0:	69ab      	ldr	r3, [r5, #24]
 8008ab2:	4912      	ldr	r1, [pc, #72]	; (8008afc <rt_test_003_004_execute+0xcc>)
 8008ab4:	6898      	ldr	r0, [r3, #8]
 8008ab6:	1b80      	subs	r0, r0, r6
 8008ab8:	fab0 f080 	clz	r0, r0
 8008abc:	0940      	lsrs	r0, r0, #5
 8008abe:	f7f8 f8e7 	bl	8000c90 <_test_assert>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d1cc      	bne.n	8008a60 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8008ac6:	69ab      	ldr	r3, [r5, #24]
 8008ac8:	490e      	ldr	r1, [pc, #56]	; (8008b04 <rt_test_003_004_execute+0xd4>)
 8008aca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008acc:	1b80      	subs	r0, r0, r6
 8008ace:	fab0 f080 	clz	r0, r0
 8008ad2:	0940      	lsrs	r0, r0, #5
 8008ad4:	f7f8 f8dc 	bl	8000c90 <_test_assert>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d1c1      	bne.n	8008a60 <rt_test_003_004_execute+0x30>
  test_set_step(4);
 8008adc:	2304      	movs	r3, #4
 8008ade:	f8c8 3000 	str.w	r3, [r8]
 8008ae2:	2320      	movs	r3, #32
 8008ae4:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8008ae8:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 8008aea:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8008aec:	63dc      	str	r4, [r3, #60]	; 0x3c
 8008aee:	f380 8811 	msr	BASEPRI, r0
 8008af2:	e7b5      	b.n	8008a60 <rt_test_003_004_execute+0x30>
 8008af4:	20000da0 	.word	0x20000da0
 8008af8:	0800ad24 	.word	0x0800ad24
 8008afc:	0800ad48 	.word	0x0800ad48
 8008b00:	0800ad64 	.word	0x0800ad64
 8008b04:	0800ad8c 	.word	0x0800ad8c
 8008b08:	20001774 	.word	0x20001774
 8008b0c:	00000000 	.word	0x00000000

08008b10 <rt_test_003_003_execute>:
static void rt_test_003_003_execute(void) {
 8008b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b14:	4e1c      	ldr	r6, [pc, #112]	; (8008b88 <rt_test_003_003_execute+0x78>)
  test_set_step(1);
 8008b16:	4f1d      	ldr	r7, [pc, #116]	; (8008b8c <rt_test_003_003_execute+0x7c>)
  return chThdGetSelfX()->prio;
 8008b18:	69b3      	ldr	r3, [r6, #24]
 8008b1a:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8008b1c:	1c65      	adds	r5, r4, #1
  test_set_step(1);
 8008b1e:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8008b20:	4628      	mov	r0, r5
  test_set_step(1);
 8008b22:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(prio + 1);
 8008b24:	f7ff ff6c 	bl	8008a00 <chThdSetPriority>
 8008b28:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8008b2a:	1b00      	subs	r0, r0, r4
 8008b2c:	fab0 f080 	clz	r0, r0
 8008b30:	0940      	lsrs	r0, r0, #5
 8008b32:	4917      	ldr	r1, [pc, #92]	; (8008b90 <rt_test_003_003_execute+0x80>)
 8008b34:	f7f8 f8ac 	bl	8000c90 <_test_assert>
 8008b38:	b108      	cbz	r0, 8008b3e <rt_test_003_003_execute+0x2e>
}
 8008b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3e:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8008b40:	4914      	ldr	r1, [pc, #80]	; (8008b94 <rt_test_003_003_execute+0x84>)
 8008b42:	6898      	ldr	r0, [r3, #8]
 8008b44:	1b40      	subs	r0, r0, r5
 8008b46:	fab0 f080 	clz	r0, r0
 8008b4a:	0940      	lsrs	r0, r0, #5
 8008b4c:	f7f8 f8a0 	bl	8000c90 <_test_assert>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d1f2      	bne.n	8008b3a <rt_test_003_003_execute+0x2a>
  test_set_step(2);
 8008b54:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8008b56:	4640      	mov	r0, r8
  test_set_step(2);
 8008b58:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
 8008b5a:	f7ff ff51 	bl	8008a00 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8008b5e:	1a28      	subs	r0, r5, r0
 8008b60:	fab0 f080 	clz	r0, r0
 8008b64:	490a      	ldr	r1, [pc, #40]	; (8008b90 <rt_test_003_003_execute+0x80>)
 8008b66:	0940      	lsrs	r0, r0, #5
 8008b68:	f7f8 f892 	bl	8000c90 <_test_assert>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d1e4      	bne.n	8008b3a <rt_test_003_003_execute+0x2a>
 8008b70:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008b72:	4908      	ldr	r1, [pc, #32]	; (8008b94 <rt_test_003_003_execute+0x84>)
 8008b74:	6898      	ldr	r0, [r3, #8]
 8008b76:	1b00      	subs	r0, r0, r4
 8008b78:	fab0 f080 	clz	r0, r0
 8008b7c:	0940      	lsrs	r0, r0, #5
}
 8008b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008b82:	f7f8 b885 	b.w	8000c90 <_test_assert>
 8008b86:	bf00      	nop
 8008b88:	20000da0 	.word	0x20000da0
 8008b8c:	20001774 	.word	0x20001774
 8008b90:	0800ad24 	.word	0x0800ad24
 8008b94:	0800ad48 	.word	0x0800ad48
	...

08008ba0 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8008ba0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ba2:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8008ba6:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8008baa:	b11c      	cbz	r4, 8008bb4 <chSysRestoreStatusX.part.2+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008bac:	2300      	movs	r3, #0
 8008bae:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 8008bb2:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 8008bb4:	f7fb f82c 	bl	8003c10 <chSchRescheduleS>
 8008bb8:	f384 8811 	msr	BASEPRI, r4
}
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop

08008bc0 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 8008bc0:	b510      	push	{r4, lr}
  test_set_step(1);
 8008bc2:	4c31      	ldr	r4, [pc, #196]	; (8008c88 <rt_test_002_002_execute+0xc8>)
 8008bc4:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8008bc6:	b086      	sub	sp, #24
  test_set_step(1);
 8008bc8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bca:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8008bce:	b91b      	cbnz	r3, 8008bd8 <rt_test_002_002_execute+0x18>
 8008bd0:	f7f8 fde6 	bl	80017a0 <chSysGetStatusAndLockX.part.1>
 8008bd4:	f7ff ffe4 	bl	8008ba0 <chSysRestoreStatusX.part.2>
  test_set_step(2);
 8008bd8:	2302      	movs	r3, #2
 8008bda:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008be2:	f3ef 8311 	mrs	r3, BASEPRI
 8008be6:	b91b      	cbnz	r3, 8008bf0 <rt_test_002_002_execute+0x30>
 8008be8:	f7f8 fdda 	bl	80017a0 <chSysGetStatusAndLockX.part.1>
 8008bec:	f7ff ffd8 	bl	8008ba0 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bfa:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8008bfe:	b913      	cbnz	r3, 8008c06 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008c00:	2320      	movs	r3, #32
 8008c02:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c06:	f3ef 8311 	mrs	r3, BASEPRI
 8008c0a:	b913      	cbnz	r3, 8008c12 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	2300      	movs	r3, #0
 8008c14:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8008c18:	2204      	movs	r2, #4
 8008c1a:	6022      	str	r2, [r4, #0]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c22:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8008c26:	b10a      	cbz	r2, 8008c2c <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008c28:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8008c30:	b113      	cbz	r3, 8008c38 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008c32:	2300      	movs	r3, #0
 8008c34:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8008c38:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	6022      	str	r2, [r4, #0]
 8008c40:	2320      	movs	r3, #32
 8008c42:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8008c46:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8008c48:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 8008c4a:	b113      	cbz	r3, 8008c52 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7f8 fd1f 	bl	8001690 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8008c52:	4620      	mov	r0, r4
 8008c54:	2300      	movs	r3, #0
 8008c56:	4a0d      	ldr	r2, [pc, #52]	; (8008c8c <rt_test_002_002_execute+0xcc>)
 8008c58:	2101      	movs	r1, #1
 8008c5a:	f7f8 fd59 	bl	8001710 <chVTDoSetI>
 8008c5e:	2400      	movs	r4, #0
 8008c60:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8008c64:	200a      	movs	r0, #10
 8008c66:	f7fa f9a3 	bl	8002fb0 <chThdSleep>
 8008c6a:	2320      	movs	r3, #32
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	9804      	ldr	r0, [sp, #16]
 8008c72:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8008c76:	fab0 f080 	clz	r0, r0
 8008c7a:	4905      	ldr	r1, [pc, #20]	; (8008c90 <rt_test_002_002_execute+0xd0>)
 8008c7c:	0940      	lsrs	r0, r0, #5
 8008c7e:	f7f8 f807 	bl	8000c90 <_test_assert>
}
 8008c82:	b006      	add	sp, #24
 8008c84:	bd10      	pop	{r4, pc}
 8008c86:	bf00      	nop
 8008c88:	20001774 	.word	0x20001774
 8008c8c:	08008ca1 	.word	0x08008ca1
 8008c90:	0800acb0 	.word	0x0800acb0
	...

08008ca0 <vtcb>:
static void vtcb(void *p) {
 8008ca0:	b508      	push	{r3, lr}
 8008ca2:	2320      	movs	r3, #32
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f382 8811 	msr	BASEPRI, r2
 8008cae:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8008cb6:	b91b      	cbnz	r3, 8008cc0 <vtcb+0x20>
 8008cb8:	f7f8 fd72 	bl	80017a0 <chSysGetStatusAndLockX.part.1>
 8008cbc:	f7ff ff70 	bl	8008ba0 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f383 8811 	msr	BASEPRI, r3
}
 8008cc6:	bd08      	pop	{r3, pc}
	...

08008cd0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8008cd0:	4b5f      	ldr	r3, [pc, #380]	; (8008e50 <__early_init+0x180>)
  gpiop->OTYPER  = config->otyper;
 8008cd2:	4860      	ldr	r0, [pc, #384]	; (8008e54 <__early_init+0x184>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8008cd4:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8008cd6:	4960      	ldr	r1, [pc, #384]	; (8008e58 <__early_init+0x188>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8008cd8:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8008cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8008cde:	611a      	str	r2, [r3, #16]
 8008ce0:	691a      	ldr	r2, [r3, #16]
  gpiop->PUPDR   = config->pupdr;
 8008ce2:	4f5e      	ldr	r7, [pc, #376]	; (8008e5c <__early_init+0x18c>)
  gpiop->MODER   = config->moder;
 8008ce4:	4e5e      	ldr	r6, [pc, #376]	; (8008e60 <__early_init+0x190>)
  gpiop->OTYPER  = config->otyper;
 8008ce6:	4d5f      	ldr	r5, [pc, #380]	; (8008e64 <__early_init+0x194>)
 8008ce8:	4c5f      	ldr	r4, [pc, #380]	; (8008e68 <__early_init+0x198>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8008cea:	f022 021f 	bic.w	r2, r2, #31
 8008cee:	611a      	str	r2, [r3, #16]
 8008cf0:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8008cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf4:	f042 021f 	orr.w	r2, r2, #31
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8008cfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cfc:	f042 021f 	orr.w	r2, r2, #31
 8008d00:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8008d02:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8008d06:	2200      	movs	r2, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8008d08:	f8d3 e050 	ldr.w	lr, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8008d0c:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008d0e:	f8c0 c008 	str.w	ip, [r0, #8]
  gpiop->ODR     = config->odr;
 8008d12:	f64f 7cdf 	movw	ip, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 8008d16:	60c7      	str	r7, [r0, #12]
  gpiop->ODR     = config->odr;
 8008d18:	f8c0 c014 	str.w	ip, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8008d1c:	f44f 47ee 	mov.w	r7, #30464	; 0x7700
  gpiop->AFRH    = config->afrh;
 8008d20:	f44f 2c2a 	mov.w	ip, #696320	; 0xaa000
  gpiop->AFRL    = config->afrl;
 8008d24:	6207      	str	r7, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8008d26:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  gpiop->OSPEEDR = config->ospeedr;
 8008d2a:	f04f 37ff 	mov.w	r7, #4294967295
  gpiop->MODER   = config->moder;
 8008d2e:	6006      	str	r6, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8008d30:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8008d34:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->MODER   = config->moder;
 8008d38:	2080      	movs	r0, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 8008d3a:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008d3c:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8008d3e:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8008d42:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8008d44:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8008d46:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008d48:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8008d4a:	4848      	ldr	r0, [pc, #288]	; (8008e6c <__early_init+0x19c>)
  gpiop->PUPDR   = config->pupdr;
 8008d4c:	4948      	ldr	r1, [pc, #288]	; (8008e70 <__early_init+0x1a0>)
  gpiop->OTYPER  = config->otyper;
 8008d4e:	606a      	str	r2, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008d50:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8008d52:	60e9      	str	r1, [r5, #12]
  gpiop->OTYPER  = config->otyper;
 8008d54:	4947      	ldr	r1, [pc, #284]	; (8008e74 <__early_init+0x1a4>)
  gpiop->ODR     = config->odr;
 8008d56:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8008d58:	622a      	str	r2, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8008d5a:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008d5c:	602a      	str	r2, [r5, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8008d5e:	f5a5 35cc 	sub.w	r5, r5, #104448	; 0x19800
  gpiop->OTYPER  = config->otyper;
 8008d62:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008d64:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8008d66:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->ODR     = config->odr;
 8008d6a:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8008d6c:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8008d6e:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008d70:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8008d72:	6042      	str	r2, [r0, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008d74:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8008d78:	6087      	str	r7, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8008d7a:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
 8008d7e:	6146      	str	r6, [r0, #20]
  gpiop->PUPDR   = config->pupdr;
 8008d80:	f1ac 0c05 	sub.w	ip, ip, #5
  gpiop->AFRL    = config->afrl;
 8008d84:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8008d86:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008d88:	6002      	str	r2, [r0, #0]
  PWR->CR = STM32_VOS;
 8008d8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->OTYPER  = config->otyper;
 8008d8e:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008d90:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8008d92:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8008d96:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8008d98:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8008d9a:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008d9c:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008d9e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8008da0:	6028      	str	r0, [r5, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	f042 0201 	orr.w	r2, r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	0794      	lsls	r4, r2, #30
 8008dae:	d5fc      	bpl.n	8008daa <__early_init+0xda>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8008db0:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8008db2:	4a27      	ldr	r2, [pc, #156]	; (8008e50 <__early_init+0x180>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8008db4:	f021 0103 	bic.w	r1, r1, #3
 8008db8:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8008dba:	6893      	ldr	r3, [r2, #8]
 8008dbc:	f013 030c 	ands.w	r3, r3, #12
 8008dc0:	d1fb      	bne.n	8008dba <__early_init+0xea>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8008dc2:	6810      	ldr	r0, [r2, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8008dc4:	4922      	ldr	r1, [pc, #136]	; (8008e50 <__early_init+0x180>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8008dc6:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8008dca:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8008dcc:	6093      	str	r3, [r2, #8]
  RCC->CSR |= RCC_CSR_LSION;
 8008dce:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008dd0:	f043 0301 	orr.w	r3, r3, #1
 8008dd4:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8008dd6:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8008dd8:	0798      	lsls	r0, r3, #30
 8008dda:	d5fc      	bpl.n	8008dd6 <__early_init+0x106>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8008ddc:	4b26      	ldr	r3, [pc, #152]	; (8008e78 <__early_init+0x1a8>)
 8008dde:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8008de0:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8008de2:	4a26      	ldr	r2, [pc, #152]	; (8008e7c <__early_init+0x1ac>)
  RCC->CR |= RCC_CR_PLLON;
 8008de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008de8:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8008dea:	6853      	ldr	r3, [r2, #4]
 8008dec:	0459      	lsls	r1, r3, #17
 8008dee:	d5fc      	bpl.n	8008dea <__early_init+0x11a>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8008df0:	4a17      	ldr	r2, [pc, #92]	; (8008e50 <__early_init+0x180>)
 8008df2:	6813      	ldr	r3, [r2, #0]
 8008df4:	019b      	lsls	r3, r3, #6
 8008df6:	d5fc      	bpl.n	8008df2 <__early_init+0x122>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8008df8:	4921      	ldr	r1, [pc, #132]	; (8008e80 <__early_init+0x1b0>)
 8008dfa:	6091      	str	r1, [r2, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008dfc:	4b21      	ldr	r3, [pc, #132]	; (8008e84 <__early_init+0x1b4>)
    RCC->DCKCFGR = dckcfgr |
 8008dfe:	2103      	movs	r1, #3
 8008e00:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4b20      	ldr	r3, [pc, #128]	; (8008e88 <__early_init+0x1b8>)
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d017      	beq.n	8008e3c <__early_init+0x16c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8008e0c:	4b1f      	ldr	r3, [pc, #124]	; (8008e8c <__early_init+0x1bc>)
 8008e0e:	f240 7202 	movw	r2, #1794	; 0x702
 8008e12:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8008e14:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <__early_init+0x180>)
 8008e16:	6893      	ldr	r3, [r2, #8]
 8008e18:	f043 0302 	orr.w	r3, r3, #2
 8008e1c:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8008e1e:	6893      	ldr	r3, [r2, #8]
 8008e20:	f003 030c 	and.w	r3, r3, #12
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d1fa      	bne.n	8008e1e <__early_init+0x14e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8008e28:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8008e30:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e36:	6653      	str	r3, [r2, #100]	; 0x64
 8008e38:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8008e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008e3c:	4a14      	ldr	r2, [pc, #80]	; (8008e90 <__early_init+0x1c0>)
 8008e3e:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <__early_init+0x1c4>)
 8008e40:	6812      	ldr	r2, [r2, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d1e2      	bne.n	8008e0c <__early_init+0x13c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8008e46:	4b11      	ldr	r3, [pc, #68]	; (8008e8c <__early_init+0x1bc>)
 8008e48:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e7e1      	b.n	8008e14 <__early_init+0x144>
 8008e50:	40023800 	.word	0x40023800
 8008e54:	40020000 	.word	0x40020000
 8008e58:	40020400 	.word	0x40020400
 8008e5c:	64155105 	.word	0x64155105
 8008e60:	2a8004a0 	.word	0x2a8004a0
 8008e64:	40020800 	.word	0x40020800
 8008e68:	40020c00 	.word	0x40020c00
 8008e6c:	40021000 	.word	0x40021000
 8008e70:	01555555 	.word	0x01555555
 8008e74:	40021c00 	.word	0x40021c00
 8008e78:	07015410 	.word	0x07015410
 8008e7c:	40007000 	.word	0x40007000
 8008e80:	38881000 	.word	0x38881000
 8008e84:	e0042000 	.word	0xe0042000
 8008e88:	20006411 	.word	0x20006411
 8008e8c:	40023c00 	.word	0x40023c00
 8008e90:	e000ed00 	.word	0xe000ed00
 8008e94:	410fc241 	.word	0x410fc241
	...

08008ea0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8008ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8008ea4:	4d61      	ldr	r5, [pc, #388]	; (800902c <VectorD8+0x18c>)
 8008ea6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8008ea8:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8008eac:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8008eae:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8008eb0:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8008eb2:	d477      	bmi.n	8008fa4 <VectorD8+0x104>
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008eba:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8008ebe:	d045      	beq.n	8008f4c <VectorD8+0xac>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8008ec0:	4f5b      	ldr	r7, [pc, #364]	; (8009030 <VectorD8+0x190>)
  chThdDequeueNextI(tqp, msg);
 8008ec2:	f107 0908 	add.w	r9, r7, #8
 8008ec6:	e008      	b.n	8008eda <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 8008ec8:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8008eca:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8008ece:	d41e      	bmi.n	8008f0e <VectorD8+0x6e>
    sr = u->SR;
 8008ed0:	6834      	ldr	r4, [r6, #0]
 8008ed2:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008ed4:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8008ed8:	d038      	beq.n	8008f4c <VectorD8+0xac>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8008eda:	0723      	lsls	r3, r4, #28
 8008edc:	d0f4      	beq.n	8008ec8 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 8008ede:	f014 0f08 	tst.w	r4, #8
 8008ee2:	bf0c      	ite	eq
 8008ee4:	2100      	moveq	r1, #0
 8008ee6:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8008ee8:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8008eea:	bf48      	it	mi
 8008eec:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8008ef0:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8008ef2:	bf48      	it	mi
 8008ef4:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8008ef8:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8008efa:	bf48      	it	mi
 8008efc:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7f8 fb65 	bl	80015d0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8008f06:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8008f08:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8008f0c:	d5e0      	bpl.n	8008ed0 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8008f0e:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8008f10:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8008f14:	b3ab      	cbz	r3, 8008f82 <VectorD8+0xe2>
  if (!iqIsFullI(iqp)) {
 8008f16:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d039      	beq.n	8008f92 <VectorD8+0xf2>
    iqp->q_counter++;
 8008f1e:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8008f20:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8008f22:	3201      	adds	r2, #1
 8008f24:	ea04 0a0a 	and.w	sl, r4, sl
 8008f28:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8008f2a:	6229      	str	r1, [r5, #32]
 8008f2c:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8008f30:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d301      	bcc.n	8008f3c <VectorD8+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 8008f38:	69ab      	ldr	r3, [r5, #24]
 8008f3a:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 8008f3c:	4648      	mov	r0, r9
 8008f3e:	f7f8 fa77 	bl	8001430 <chThdDequeueNextI.constprop.84>
    sr = u->SR;
 8008f42:	6834      	ldr	r4, [r6, #0]
 8008f44:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008f46:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8008f4a:	d1c6      	bne.n	8008eda <VectorD8+0x3a>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8008f52:	f018 0f80 	tst.w	r8, #128	; 0x80
 8008f56:	d001      	beq.n	8008f5c <VectorD8+0xbc>
 8008f58:	0622      	lsls	r2, r4, #24
 8008f5a:	d432      	bmi.n	8008fc2 <VectorD8+0x122>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8008f5c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008f60:	d00b      	beq.n	8008f7a <VectorD8+0xda>
 8008f62:	0663      	lsls	r3, r4, #25
 8008f64:	d509      	bpl.n	8008f7a <VectorD8+0xda>
 8008f66:	2320      	movs	r3, #32
 8008f68:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8008f6c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d040      	beq.n	8008ff6 <VectorD8+0x156>
 8008f74:	2300      	movs	r3, #0
 8008f76:	f383 8811 	msr	BASEPRI, r3
}
 8008f7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8008f7e:	f7f8 b807 	b.w	8000f90 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 8008f82:	2104      	movs	r1, #4
 8008f84:	4638      	mov	r0, r7
 8008f86:	f7f8 fb23 	bl	80015d0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8008f8a:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d1c5      	bne.n	8008f1e <VectorD8+0x7e>
 8008f92:	696a      	ldr	r2, [r5, #20]
 8008f94:	2a00      	cmp	r2, #0
 8008f96:	d0c2      	beq.n	8008f1e <VectorD8+0x7e>
 8008f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f7f8 fb17 	bl	80015d0 <chEvtBroadcastFlagsI>
 8008fa2:	e795      	b.n	8008ed0 <VectorD8+0x30>
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fae:	1d28      	adds	r0, r5, #4
 8008fb0:	f7f8 fb0e 	bl	80015d0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8008fb4:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8008fb8:	6033      	str	r3, [r6, #0]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	e778      	b.n	8008eb4 <VectorD8+0x14>
 8008fc2:	2320      	movs	r3, #32
 8008fc4:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8008fc8:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d01f      	beq.n	8009010 <VectorD8+0x170>
    oqp->q_counter++;
 8008fd0:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8008fd2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8008fd4:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8008fd6:	3201      	adds	r2, #1
 8008fd8:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8008fda:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8008fdc:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8008fde:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8008fe0:	d301      	bcc.n	8008fe6 <VectorD8+0x146>
      oqp->q_rdptr = oqp->q_buffer;
 8008fe2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008fe4:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8008fe6:	4813      	ldr	r0, [pc, #76]	; (8009034 <VectorD8+0x194>)
 8008fe8:	f7f8 fa22 	bl	8001430 <chThdDequeueNextI.constprop.84>
      u->DR = b;
 8008fec:	6077      	str	r7, [r6, #4]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	e7b2      	b.n	8008f5c <VectorD8+0xbc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8008ff6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0bb      	beq.n	8008f74 <VectorD8+0xd4>
  chEvtBroadcastFlagsI(esp, flags);
 8008ffc:	2110      	movs	r1, #16
 8008ffe:	480c      	ldr	r0, [pc, #48]	; (8009030 <VectorD8+0x190>)
 8009000:	f7f8 fae6 	bl	80015d0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8009004:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8009008:	ea08 0303 	and.w	r3, r8, r3
 800900c:	60f3      	str	r3, [r6, #12]
 800900e:	e7b1      	b.n	8008f74 <VectorD8+0xd4>
  if (!oqIsEmptyI(oqp)) {
 8009010:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8009012:	2a00      	cmp	r2, #0
 8009014:	d0dc      	beq.n	8008fd0 <VectorD8+0x130>
 8009016:	2108      	movs	r1, #8
 8009018:	4805      	ldr	r0, [pc, #20]	; (8009030 <VectorD8+0x190>)
 800901a:	f7f8 fad9 	bl	80015d0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800901e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8009022:	ea08 0303 	and.w	r3, r8, r3
 8009026:	60f3      	str	r3, [r6, #12]
 8009028:	e7e1      	b.n	8008fee <VectorD8+0x14e>
 800902a:	bf00      	nop
 800902c:	20000d14 	.word	0x20000d14
 8009030:	20000d18 	.word	0x20000d18
 8009034:	20000d44 	.word	0x20000d44
	...

08009040 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8009040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8009044:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	079b      	lsls	r3, r3, #30
 800904c:	d403      	bmi.n	8009056 <VectorB0+0x16>
}
 800904e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8009052:	f7f7 bf9d 	b.w	8000f90 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8009056:	2100      	movs	r1, #0
 8009058:	6139      	str	r1, [r7, #16]
 800905a:	2320      	movs	r3, #32
 800905c:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8009060:	4c1d      	ldr	r4, [pc, #116]	; (80090d8 <VectorB0+0x98>)
 8009062:	46a1      	mov	r9, r4
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8009064:	4688      	mov	r8, r1
  vtp = ch.vtlist.next;
 8009066:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800906e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8009070:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8009072:	4295      	cmp	r5, r2
 8009074:	d31c      	bcc.n	80090b0 <VectorB0+0x70>
 8009076:	2620      	movs	r6, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8009078:	6818      	ldr	r0, [r3, #0]
      fn = vtp->func;
 800907a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
      ch.vtlist.lasttime += vtp->delta;
 800907e:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8009080:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8009082:	62a1      	str	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8009084:	eba5 0502 	sub.w	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8009088:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 800908c:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 800908e:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 8009092:	bf08      	it	eq
 8009094:	f8c7 800c 	streq.w	r8, [r7, #12]
 8009098:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800909c:	6918      	ldr	r0, [r3, #16]
 800909e:	47d0      	blx	sl
 80090a0:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80090a4:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	4295      	cmp	r5, r2
 80090aa:	d3df      	bcc.n	800906c <VectorB0+0x2c>
 80090ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80090ae:	e7e3      	b.n	8009078 <VectorB0+0x38>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80090b0:	69e2      	ldr	r2, [r4, #28]
 80090b2:	454a      	cmp	r2, r9
 80090b4:	d009      	beq.n	80090ca <VectorB0+0x8a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 80090b6:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 80090b8:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 80090ba:	1b4d      	subs	r5, r1, r5
 80090bc:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	bf2c      	ite	cs
 80090c4:	18c0      	addcs	r0, r0, r3
 80090c6:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80090c8:	6378      	str	r0, [r7, #52]	; 0x34
 80090ca:	2300      	movs	r3, #0
 80090cc:	f383 8811 	msr	BASEPRI, r3
}
 80090d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80090d4:	f7f7 bf5c 	b.w	8000f90 <_port_irq_epilogue>
 80090d8:	20000da0 	.word	0x20000da0
 80090dc:	00000000 	.word	0x00000000

080090e0 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80090e0:	4b08      	ldr	r3, [pc, #32]	; (8009104 <Vector158+0x24>)
  if (dma.streams[15].func)
 80090e2:	4809      	ldr	r0, [pc, #36]	; (8009108 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80090e4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 80090e6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80090e8:	0d89      	lsrs	r1, r1, #22
 80090ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 80090ee:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 80090f0:	058c      	lsls	r4, r1, #22
 80090f2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 80090f4:	b112      	cbz	r2, 80090fc <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 80090f6:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80090fa:	4790      	blx	r2
}
 80090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8009100:	f7f7 bf46 	b.w	8000f90 <_port_irq_epilogue>
 8009104:	40026400 	.word	0x40026400
 8009108:	20000f5c 	.word	0x20000f5c
 800910c:	00000000 	.word	0x00000000

08009110 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009110:	4b08      	ldr	r3, [pc, #32]	; (8009134 <Vector154+0x24>)
  if (dma.streams[14].func)
 8009112:	4809      	ldr	r0, [pc, #36]	; (8009138 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009114:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8009116:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009118:	0c09      	lsrs	r1, r1, #16
 800911a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800911e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8009120:	040c      	lsls	r4, r1, #16
 8009122:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8009124:	b10a      	cbz	r2, 800912a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8009126:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8009128:	4790      	blx	r2
}
 800912a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800912e:	f7f7 bf2f 	b.w	8000f90 <_port_irq_epilogue>
 8009132:	bf00      	nop
 8009134:	40026400 	.word	0x40026400
 8009138:	20000f5c 	.word	0x20000f5c
 800913c:	00000000 	.word	0x00000000

08009140 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009140:	4b08      	ldr	r3, [pc, #32]	; (8009164 <Vector150+0x24>)
  if (dma.streams[13].func)
 8009142:	4809      	ldr	r0, [pc, #36]	; (8009168 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009144:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8009146:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009148:	0989      	lsrs	r1, r1, #6
 800914a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800914e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8009150:	018c      	lsls	r4, r1, #6
 8009152:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 8009154:	b10a      	cbz	r2, 800915a <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8009156:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8009158:	4790      	blx	r2
}
 800915a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800915e:	f7f7 bf17 	b.w	8000f90 <_port_irq_epilogue>
 8009162:	bf00      	nop
 8009164:	40026400 	.word	0x40026400
 8009168:	20000f5c 	.word	0x20000f5c
 800916c:	00000000 	.word	0x00000000

08009170 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8009170:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009172:	4b07      	ldr	r3, [pc, #28]	; (8009190 <Vector130+0x20>)
  if (dma.streams[12].func)
 8009174:	4807      	ldr	r0, [pc, #28]	; (8009194 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009176:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8009178:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800917a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800917e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8009180:	b10a      	cbz	r2, 8009186 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 8009182:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009184:	4790      	blx	r2
}
 8009186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800918a:	f7f7 bf01 	b.w	8000f90 <_port_irq_epilogue>
 800918e:	bf00      	nop
 8009190:	40026400 	.word	0x40026400
 8009194:	20000f5c 	.word	0x20000f5c
	...

080091a0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80091a0:	4b08      	ldr	r3, [pc, #32]	; (80091c4 <Vector12C+0x24>)
  if (dma.streams[11].func)
 80091a2:	4809      	ldr	r0, [pc, #36]	; (80091c8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80091a4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 80091a6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80091a8:	0d89      	lsrs	r1, r1, #22
 80091aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80091ae:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 80091b0:	058c      	lsls	r4, r1, #22
 80091b2:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 80091b4:	b10a      	cbz	r2, 80091ba <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 80091b6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80091b8:	4790      	blx	r2
}
 80091ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80091be:	f7f7 bee7 	b.w	8000f90 <_port_irq_epilogue>
 80091c2:	bf00      	nop
 80091c4:	40026400 	.word	0x40026400
 80091c8:	20000f5c 	.word	0x20000f5c
 80091cc:	00000000 	.word	0x00000000

080091d0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80091d0:	4b08      	ldr	r3, [pc, #32]	; (80091f4 <Vector128+0x24>)
  if (dma.streams[10].func)
 80091d2:	4809      	ldr	r0, [pc, #36]	; (80091f8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80091d4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 80091d6:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80091d8:	0c09      	lsrs	r1, r1, #16
 80091da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80091de:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 80091e0:	040c      	lsls	r4, r1, #16
 80091e2:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 80091e4:	b10a      	cbz	r2, 80091ea <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 80091e6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80091e8:	4790      	blx	r2
}
 80091ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80091ee:	f7f7 becf 	b.w	8000f90 <_port_irq_epilogue>
 80091f2:	bf00      	nop
 80091f4:	40026400 	.word	0x40026400
 80091f8:	20000f5c 	.word	0x20000f5c
 80091fc:	00000000 	.word	0x00000000

08009200 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009200:	4b08      	ldr	r3, [pc, #32]	; (8009224 <Vector124+0x24>)
  if (dma.streams[9].func)
 8009202:	4809      	ldr	r0, [pc, #36]	; (8009228 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009204:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8009206:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009208:	0989      	lsrs	r1, r1, #6
 800920a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800920e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8009210:	018c      	lsls	r4, r1, #6
 8009212:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8009214:	b10a      	cbz	r2, 800921a <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8009216:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8009218:	4790      	blx	r2
}
 800921a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800921e:	f7f7 beb7 	b.w	8000f90 <_port_irq_epilogue>
 8009222:	bf00      	nop
 8009224:	40026400 	.word	0x40026400
 8009228:	20000f5c 	.word	0x20000f5c
 800922c:	00000000 	.word	0x00000000

08009230 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8009230:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8009232:	4b07      	ldr	r3, [pc, #28]	; (8009250 <Vector120+0x20>)
  if (dma.streams[8].func)
 8009234:	4807      	ldr	r0, [pc, #28]	; (8009254 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8009236:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8009238:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800923a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800923e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8009240:	b10a      	cbz	r2, 8009246 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8009242:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8009244:	4790      	blx	r2
}
 8009246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800924a:	f7f7 bea1 	b.w	8000f90 <_port_irq_epilogue>
 800924e:	bf00      	nop
 8009250:	40026400 	.word	0x40026400
 8009254:	20000f5c 	.word	0x20000f5c
	...

08009260 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009260:	4b08      	ldr	r3, [pc, #32]	; (8009284 <VectorFC+0x24>)
  if (dma.streams[7].func)
 8009262:	4809      	ldr	r0, [pc, #36]	; (8009288 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009264:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 8009266:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009268:	0d89      	lsrs	r1, r1, #22
 800926a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800926e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8009270:	058c      	lsls	r4, r1, #22
 8009272:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8009274:	b10a      	cbz	r2, 800927a <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8009276:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009278:	4790      	blx	r2
}
 800927a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800927e:	f7f7 be87 	b.w	8000f90 <_port_irq_epilogue>
 8009282:	bf00      	nop
 8009284:	40026000 	.word	0x40026000
 8009288:	20000f5c 	.word	0x20000f5c
 800928c:	00000000 	.word	0x00000000

08009290 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009290:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <Vector84+0x24>)
  if (dma.streams[6].func)
 8009292:	4809      	ldr	r0, [pc, #36]	; (80092b8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009294:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8009296:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009298:	0c09      	lsrs	r1, r1, #16
 800929a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800929e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 80092a0:	040c      	lsls	r4, r1, #16
 80092a2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 80092a4:	b10a      	cbz	r2, 80092aa <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80092a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80092a8:	4790      	blx	r2
}
 80092aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80092ae:	f7f7 be6f 	b.w	8000f90 <_port_irq_epilogue>
 80092b2:	bf00      	nop
 80092b4:	40026000 	.word	0x40026000
 80092b8:	20000f5c 	.word	0x20000f5c
 80092bc:	00000000 	.word	0x00000000

080092c0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80092c0:	4b08      	ldr	r3, [pc, #32]	; (80092e4 <Vector80+0x24>)
  if (dma.streams[5].func)
 80092c2:	4809      	ldr	r0, [pc, #36]	; (80092e8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80092c4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 80092c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80092c8:	0989      	lsrs	r1, r1, #6
 80092ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80092ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 80092d0:	018c      	lsls	r4, r1, #6
 80092d2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 80092d4:	b10a      	cbz	r2, 80092da <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 80092d6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80092d8:	4790      	blx	r2
}
 80092da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80092de:	f7f7 be57 	b.w	8000f90 <_port_irq_epilogue>
 80092e2:	bf00      	nop
 80092e4:	40026000 	.word	0x40026000
 80092e8:	20000f5c 	.word	0x20000f5c
 80092ec:	00000000 	.word	0x00000000

080092f0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80092f0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80092f2:	4b07      	ldr	r3, [pc, #28]	; (8009310 <Vector7C+0x20>)
  if (dma.streams[4].func)
 80092f4:	4807      	ldr	r0, [pc, #28]	; (8009314 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80092f6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80092f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80092fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80092fe:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8009300:	b10a      	cbz	r2, 8009306 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8009302:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009304:	4790      	blx	r2
}
 8009306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800930a:	f7f7 be41 	b.w	8000f90 <_port_irq_epilogue>
 800930e:	bf00      	nop
 8009310:	40026000 	.word	0x40026000
 8009314:	20000f5c 	.word	0x20000f5c
	...

08009320 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8009320:	4b08      	ldr	r3, [pc, #32]	; (8009344 <Vector78+0x24>)
  if (dma.streams[3].func)
 8009322:	4809      	ldr	r0, [pc, #36]	; (8009348 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8009324:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8009326:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8009328:	0d89      	lsrs	r1, r1, #22
 800932a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800932e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8009330:	058c      	lsls	r4, r1, #22
 8009332:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8009334:	b10a      	cbz	r2, 800933a <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8009336:	6a00      	ldr	r0, [r0, #32]
 8009338:	4790      	blx	r2
}
 800933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800933e:	f7f7 be27 	b.w	8000f90 <_port_irq_epilogue>
 8009342:	bf00      	nop
 8009344:	40026000 	.word	0x40026000
 8009348:	20000f5c 	.word	0x20000f5c
 800934c:	00000000 	.word	0x00000000

08009350 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8009350:	4b08      	ldr	r3, [pc, #32]	; (8009374 <Vector74+0x24>)
  if (dma.streams[2].func)
 8009352:	4809      	ldr	r0, [pc, #36]	; (8009378 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8009354:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 8009356:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8009358:	0c09      	lsrs	r1, r1, #16
 800935a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800935e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8009360:	040c      	lsls	r4, r1, #16
 8009362:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8009364:	b10a      	cbz	r2, 800936a <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8009366:	6980      	ldr	r0, [r0, #24]
 8009368:	4790      	blx	r2
}
 800936a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800936e:	f7f7 be0f 	b.w	8000f90 <_port_irq_epilogue>
 8009372:	bf00      	nop
 8009374:	40026000 	.word	0x40026000
 8009378:	20000f5c 	.word	0x20000f5c
 800937c:	00000000 	.word	0x00000000

08009380 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009380:	4b08      	ldr	r3, [pc, #32]	; (80093a4 <Vector70+0x24>)
  if (dma.streams[1].func)
 8009382:	4809      	ldr	r0, [pc, #36]	; (80093a8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009384:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 8009386:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009388:	0989      	lsrs	r1, r1, #6
 800938a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800938e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8009390:	018c      	lsls	r4, r1, #6
 8009392:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8009394:	b10a      	cbz	r2, 800939a <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8009396:	6900      	ldr	r0, [r0, #16]
 8009398:	4790      	blx	r2
}
 800939a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800939e:	f7f7 bdf7 	b.w	8000f90 <_port_irq_epilogue>
 80093a2:	bf00      	nop
 80093a4:	40026000 	.word	0x40026000
 80093a8:	20000f5c 	.word	0x20000f5c
 80093ac:	00000000 	.word	0x00000000

080093b0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80093b0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <Vector6C+0x20>)
  if (dma.streams[0].func)
 80093b4:	4807      	ldr	r0, [pc, #28]	; (80093d4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80093b6:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 80093b8:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80093ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80093be:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 80093c0:	b10a      	cbz	r2, 80093c6 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 80093c2:	6880      	ldr	r0, [r0, #8]
 80093c4:	4790      	blx	r2
}
 80093c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80093ca:	f7f7 bde1 	b.w	8000f90 <_port_irq_epilogue>
 80093ce:	bf00      	nop
 80093d0:	40026000 	.word	0x40026000
 80093d4:	20000f5c 	.word	0x20000f5c
	...

080093e0 <Vector88>:
  sr = ADC1->SR;
 80093e0:	4a2f      	ldr	r2, [pc, #188]	; (80094a0 <Vector88+0xc0>)
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 80093e2:	b538      	push	{r3, r4, r5, lr}
  sr = ADC1->SR;
 80093e4:	6814      	ldr	r4, [r2, #0]
  ADC1->SR = 0;
 80093e6:	2100      	movs	r1, #0
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 80093e8:	06a3      	lsls	r3, r4, #26
  ADC1->SR = 0;
 80093ea:	6011      	str	r1, [r2, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 80093ec:	d426      	bmi.n	800943c <Vector88+0x5c>
 80093ee:	f004 0401 	and.w	r4, r4, #1
  if (sr & ADC_SR_AWD) {
 80093f2:	b1fc      	cbz	r4, 8009434 <Vector88+0x54>
    if (ADCD1.grpp != NULL) {
 80093f4:	4d2b      	ldr	r5, [pc, #172]	; (80094a4 <Vector88+0xc4>)
 80093f6:	692b      	ldr	r3, [r5, #16]
 80093f8:	b1e3      	cbz	r3, 8009434 <Vector88+0x54>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 80093fa:	f7f7 f981 	bl	8000700 <adc_lld_stop_conversion.constprop.77>
 80093fe:	692b      	ldr	r3, [r5, #16]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d044      	beq.n	8009490 <Vector88+0xb0>
 8009406:	2205      	movs	r2, #5
 8009408:	702a      	strb	r2, [r5, #0]
 800940a:	2102      	movs	r1, #2
 800940c:	4628      	mov	r0, r5
 800940e:	4798      	blx	r3
 8009410:	782b      	ldrb	r3, [r5, #0]
 8009412:	2b05      	cmp	r3, #5
 8009414:	bf04      	itt	eq
 8009416:	2302      	moveq	r3, #2
 8009418:	702b      	strbeq	r3, [r5, #0]
 800941a:	2300      	movs	r3, #0
 800941c:	612b      	str	r3, [r5, #16]
 800941e:	2320      	movs	r3, #32
 8009420:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8009424:	f04f 31ff 	mov.w	r1, #4294967295
 8009428:	481f      	ldr	r0, [pc, #124]	; (80094a8 <Vector88+0xc8>)
 800942a:	f7f8 f921 	bl	8001670 <chThdResumeI>
 800942e:	2300      	movs	r3, #0
 8009430:	f383 8811 	msr	BASEPRI, r3
}
 8009434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8009438:	f7f7 bdaa 	b.w	8000f90 <_port_irq_epilogue>
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800943c:	4d19      	ldr	r5, [pc, #100]	; (80094a4 <Vector88+0xc4>)
 800943e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8009440:	6812      	ldr	r2, [r2, #0]
 8009442:	6852      	ldr	r2, [r2, #4]
 8009444:	f004 0401 	and.w	r4, r4, #1
 8009448:	2a00      	cmp	r2, #0
 800944a:	d0d2      	beq.n	80093f2 <Vector88+0x12>
    if (ADCD1.grpp != NULL)
 800944c:	692b      	ldr	r3, [r5, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0f0      	beq.n	8009434 <Vector88+0x54>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8009452:	f7f7 f955 	bl	8000700 <adc_lld_stop_conversion.constprop.77>
 8009456:	692b      	ldr	r3, [r5, #16]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	b1eb      	cbz	r3, 8009498 <Vector88+0xb8>
 800945c:	2205      	movs	r2, #5
 800945e:	702a      	strb	r2, [r5, #0]
 8009460:	2101      	movs	r1, #1
 8009462:	4628      	mov	r0, r5
 8009464:	4798      	blx	r3
 8009466:	782b      	ldrb	r3, [r5, #0]
 8009468:	2b05      	cmp	r3, #5
 800946a:	bf04      	itt	eq
 800946c:	2302      	moveq	r3, #2
 800946e:	702b      	strbeq	r3, [r5, #0]
 8009470:	2300      	movs	r3, #0
 8009472:	612b      	str	r3, [r5, #16]
 8009474:	2320      	movs	r3, #32
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f04f 31ff 	mov.w	r1, #4294967295
 800947e:	480a      	ldr	r0, [pc, #40]	; (80094a8 <Vector88+0xc8>)
 8009480:	f7f8 f8f6 	bl	8001670 <chThdResumeI>
 8009484:	2300      	movs	r3, #0
 8009486:	f383 8811 	msr	BASEPRI, r3
  if (sr & ADC_SR_AWD) {
 800948a:	2c00      	cmp	r4, #0
 800948c:	d1b2      	bne.n	80093f4 <Vector88+0x14>
 800948e:	e7d1      	b.n	8009434 <Vector88+0x54>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8009490:	2202      	movs	r2, #2
 8009492:	612b      	str	r3, [r5, #16]
 8009494:	702a      	strb	r2, [r5, #0]
 8009496:	e7c2      	b.n	800941e <Vector88+0x3e>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8009498:	2202      	movs	r2, #2
 800949a:	612b      	str	r3, [r5, #16]
 800949c:	702a      	strb	r2, [r5, #0]
 800949e:	e7e9      	b.n	8009474 <Vector88+0x94>
 80094a0:	40012000 	.word	0x40012000
 80094a4:	20000ce0 	.word	0x20000ce0
 80094a8:	20000cf4 	.word	0x20000cf4
 80094ac:	00000000 	.word	0x00000000

080094b0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80094b0:	b4f0      	push	{r4, r5, r6, r7}
 80094b2:	4e14      	ldr	r6, [pc, #80]	; (8009504 <__init_ram_areas+0x54>)
 80094b4:	4d14      	ldr	r5, [pc, #80]	; (8009508 <__init_ram_areas+0x58>)
 80094b6:	4c15      	ldr	r4, [pc, #84]	; (800950c <__init_ram_areas+0x5c>)
 80094b8:	4b15      	ldr	r3, [pc, #84]	; (8009510 <__init_ram_areas+0x60>)
 80094ba:	4916      	ldr	r1, [pc, #88]	; (8009514 <__init_ram_areas+0x64>)
 80094bc:	f106 0c70 	add.w	ip, r6, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80094c0:	2700      	movs	r7, #0
    while (p < rap->clear_area) {
 80094c2:	429c      	cmp	r4, r3
 80094c4:	d911      	bls.n	80094ea <__init_ram_areas+0x3a>
 80094c6:	3904      	subs	r1, #4
 80094c8:	461a      	mov	r2, r3
      *p = *tp;
 80094ca:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80094ce:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80094d2:	4294      	cmp	r4, r2
 80094d4:	d8f9      	bhi.n	80094ca <__init_ram_areas+0x1a>
 80094d6:	43da      	mvns	r2, r3
 80094d8:	4414      	add	r4, r2
 80094da:	f024 0403 	bic.w	r4, r4, #3
 80094de:	3404      	adds	r4, #4
 80094e0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80094e2:	429d      	cmp	r5, r3
 80094e4:	d903      	bls.n	80094ee <__init_ram_areas+0x3e>
      *p = 0;
 80094e6:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 80094ea:	429d      	cmp	r5, r3
 80094ec:	d8fb      	bhi.n	80094e6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80094ee:	4566      	cmp	r6, ip
 80094f0:	d005      	beq.n	80094fe <__init_ram_areas+0x4e>
 80094f2:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 80094f6:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 80094fa:	3610      	adds	r6, #16
 80094fc:	e7e1      	b.n	80094c2 <__init_ram_areas+0x12>
#endif
}
 80094fe:	bcf0      	pop	{r4, r5, r6, r7}
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	0800a11c 	.word	0x0800a11c
 8009508:	20001b60 	.word	0x20001b60
 800950c:	20001b60 	.word	0x20001b60
 8009510:	20001b60 	.word	0x20001b60
 8009514:	0800c594 	.word	0x0800c594
	...

08009520 <__default_exit>:
void __default_exit(void) {
 8009520:	e7fe      	b.n	8009520 <__default_exit>
 8009522:	bf00      	nop
	...

08009530 <__late_init>:
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
	...

08009540 <__core_init>:
}
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop

08009544 <memcmp>:
 8009544:	2a03      	cmp	r2, #3
 8009546:	b470      	push	{r4, r5, r6}
 8009548:	d914      	bls.n	8009574 <memcmp+0x30>
 800954a:	ea40 0501 	orr.w	r5, r0, r1
 800954e:	07ad      	lsls	r5, r5, #30
 8009550:	4604      	mov	r4, r0
 8009552:	460b      	mov	r3, r1
 8009554:	d122      	bne.n	800959c <memcmp+0x58>
 8009556:	681d      	ldr	r5, [r3, #0]
 8009558:	6826      	ldr	r6, [r4, #0]
 800955a:	42ae      	cmp	r6, r5
 800955c:	4619      	mov	r1, r3
 800955e:	4620      	mov	r0, r4
 8009560:	f103 0304 	add.w	r3, r3, #4
 8009564:	f104 0404 	add.w	r4, r4, #4
 8009568:	d118      	bne.n	800959c <memcmp+0x58>
 800956a:	3a04      	subs	r2, #4
 800956c:	2a03      	cmp	r2, #3
 800956e:	4620      	mov	r0, r4
 8009570:	4619      	mov	r1, r3
 8009572:	d8f0      	bhi.n	8009556 <memcmp+0x12>
 8009574:	1e54      	subs	r4, r2, #1
 8009576:	b172      	cbz	r2, 8009596 <memcmp+0x52>
 8009578:	7802      	ldrb	r2, [r0, #0]
 800957a:	780b      	ldrb	r3, [r1, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	bf08      	it	eq
 8009580:	1864      	addeq	r4, r4, r1
 8009582:	d006      	beq.n	8009592 <memcmp+0x4e>
 8009584:	e00c      	b.n	80095a0 <memcmp+0x5c>
 8009586:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800958a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800958e:	429a      	cmp	r2, r3
 8009590:	d106      	bne.n	80095a0 <memcmp+0x5c>
 8009592:	42a1      	cmp	r1, r4
 8009594:	d1f7      	bne.n	8009586 <memcmp+0x42>
 8009596:	2000      	movs	r0, #0
 8009598:	bc70      	pop	{r4, r5, r6}
 800959a:	4770      	bx	lr
 800959c:	1e54      	subs	r4, r2, #1
 800959e:	e7eb      	b.n	8009578 <memcmp+0x34>
 80095a0:	1ad0      	subs	r0, r2, r3
 80095a2:	bc70      	pop	{r4, r5, r6}
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop

080095a8 <memset>:
 80095a8:	b4f0      	push	{r4, r5, r6, r7}
 80095aa:	0786      	lsls	r6, r0, #30
 80095ac:	d043      	beq.n	8009636 <memset+0x8e>
 80095ae:	1e54      	subs	r4, r2, #1
 80095b0:	2a00      	cmp	r2, #0
 80095b2:	d03e      	beq.n	8009632 <memset+0x8a>
 80095b4:	b2ca      	uxtb	r2, r1
 80095b6:	4603      	mov	r3, r0
 80095b8:	e002      	b.n	80095c0 <memset+0x18>
 80095ba:	f114 34ff 	adds.w	r4, r4, #4294967295
 80095be:	d338      	bcc.n	8009632 <memset+0x8a>
 80095c0:	f803 2b01 	strb.w	r2, [r3], #1
 80095c4:	079d      	lsls	r5, r3, #30
 80095c6:	d1f8      	bne.n	80095ba <memset+0x12>
 80095c8:	2c03      	cmp	r4, #3
 80095ca:	d92b      	bls.n	8009624 <memset+0x7c>
 80095cc:	b2cd      	uxtb	r5, r1
 80095ce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80095d2:	2c0f      	cmp	r4, #15
 80095d4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80095d8:	d916      	bls.n	8009608 <memset+0x60>
 80095da:	f1a4 0710 	sub.w	r7, r4, #16
 80095de:	093f      	lsrs	r7, r7, #4
 80095e0:	f103 0620 	add.w	r6, r3, #32
 80095e4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80095e8:	f103 0210 	add.w	r2, r3, #16
 80095ec:	e942 5504 	strd	r5, r5, [r2, #-16]
 80095f0:	e942 5502 	strd	r5, r5, [r2, #-8]
 80095f4:	3210      	adds	r2, #16
 80095f6:	42b2      	cmp	r2, r6
 80095f8:	d1f8      	bne.n	80095ec <memset+0x44>
 80095fa:	f004 040f 	and.w	r4, r4, #15
 80095fe:	3701      	adds	r7, #1
 8009600:	2c03      	cmp	r4, #3
 8009602:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8009606:	d90d      	bls.n	8009624 <memset+0x7c>
 8009608:	461e      	mov	r6, r3
 800960a:	4622      	mov	r2, r4
 800960c:	3a04      	subs	r2, #4
 800960e:	2a03      	cmp	r2, #3
 8009610:	f846 5b04 	str.w	r5, [r6], #4
 8009614:	d8fa      	bhi.n	800960c <memset+0x64>
 8009616:	1f22      	subs	r2, r4, #4
 8009618:	f022 0203 	bic.w	r2, r2, #3
 800961c:	3204      	adds	r2, #4
 800961e:	4413      	add	r3, r2
 8009620:	f004 0403 	and.w	r4, r4, #3
 8009624:	b12c      	cbz	r4, 8009632 <memset+0x8a>
 8009626:	b2c9      	uxtb	r1, r1
 8009628:	441c      	add	r4, r3
 800962a:	f803 1b01 	strb.w	r1, [r3], #1
 800962e:	429c      	cmp	r4, r3
 8009630:	d1fb      	bne.n	800962a <memset+0x82>
 8009632:	bcf0      	pop	{r4, r5, r6, r7}
 8009634:	4770      	bx	lr
 8009636:	4614      	mov	r4, r2
 8009638:	4603      	mov	r3, r0
 800963a:	e7c5      	b.n	80095c8 <memset+0x20>

0800963c <strchr>:
 800963c:	b2c9      	uxtb	r1, r1
 800963e:	f000 0303 	and.w	r3, r0, #3
 8009642:	2900      	cmp	r1, #0
 8009644:	d043      	beq.n	80096ce <strchr+0x92>
 8009646:	b17b      	cbz	r3, 8009668 <strchr+0x2c>
 8009648:	7803      	ldrb	r3, [r0, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d067      	beq.n	800971e <strchr+0xe2>
 800964e:	4299      	cmp	r1, r3
 8009650:	d03c      	beq.n	80096cc <strchr+0x90>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	e005      	b.n	8009662 <strchr+0x26>
 8009656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800965a:	2a00      	cmp	r2, #0
 800965c:	d05d      	beq.n	800971a <strchr+0xde>
 800965e:	428a      	cmp	r2, r1
 8009660:	d034      	beq.n	80096cc <strchr+0x90>
 8009662:	079a      	lsls	r2, r3, #30
 8009664:	4618      	mov	r0, r3
 8009666:	d1f6      	bne.n	8009656 <strchr+0x1a>
 8009668:	b470      	push	{r4, r5, r6}
 800966a:	6804      	ldr	r4, [r0, #0]
 800966c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8009670:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8009674:	ea86 0504 	eor.w	r5, r6, r4
 8009678:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 800967c:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8009680:	ea23 0305 	bic.w	r3, r3, r5
 8009684:	ea22 0204 	bic.w	r2, r2, r4
 8009688:	4313      	orrs	r3, r2
 800968a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800968e:	d10f      	bne.n	80096b0 <strchr+0x74>
 8009690:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8009694:	ea84 0506 	eor.w	r5, r4, r6
 8009698:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 800969c:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 80096a0:	ea22 0205 	bic.w	r2, r2, r5
 80096a4:	ea23 0304 	bic.w	r3, r3, r4
 80096a8:	4313      	orrs	r3, r2
 80096aa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80096ae:	d0ef      	beq.n	8009690 <strchr+0x54>
 80096b0:	7803      	ldrb	r3, [r0, #0]
 80096b2:	b143      	cbz	r3, 80096c6 <strchr+0x8a>
 80096b4:	4299      	cmp	r1, r3
 80096b6:	d102      	bne.n	80096be <strchr+0x82>
 80096b8:	e006      	b.n	80096c8 <strchr+0x8c>
 80096ba:	428b      	cmp	r3, r1
 80096bc:	d004      	beq.n	80096c8 <strchr+0x8c>
 80096be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1f9      	bne.n	80096ba <strchr+0x7e>
 80096c6:	4618      	mov	r0, r3
 80096c8:	bc70      	pop	{r4, r5, r6}
 80096ca:	4770      	bx	lr
 80096cc:	4770      	bx	lr
 80096ce:	b15b      	cbz	r3, 80096e8 <strchr+0xac>
 80096d0:	7803      	ldrb	r3, [r0, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d0fa      	beq.n	80096cc <strchr+0x90>
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	e003      	b.n	80096e2 <strchr+0xa6>
 80096da:	7802      	ldrb	r2, [r0, #0]
 80096dc:	3301      	adds	r3, #1
 80096de:	2a00      	cmp	r2, #0
 80096e0:	d0f4      	beq.n	80096cc <strchr+0x90>
 80096e2:	0799      	lsls	r1, r3, #30
 80096e4:	4618      	mov	r0, r3
 80096e6:	d1f8      	bne.n	80096da <strchr+0x9e>
 80096e8:	6802      	ldr	r2, [r0, #0]
 80096ea:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 80096ee:	ea23 0302 	bic.w	r3, r3, r2
 80096f2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80096f6:	d108      	bne.n	800970a <strchr+0xce>
 80096f8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80096fc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8009700:	ea23 0302 	bic.w	r3, r3, r2
 8009704:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009708:	d0f6      	beq.n	80096f8 <strchr+0xbc>
 800970a:	7803      	ldrb	r3, [r0, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0dd      	beq.n	80096cc <strchr+0x90>
 8009710:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1fb      	bne.n	8009710 <strchr+0xd4>
 8009718:	4770      	bx	lr
 800971a:	4610      	mov	r0, r2
 800971c:	4770      	bx	lr
 800971e:	4618      	mov	r0, r3
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop

08009724 <strncmp>:
 8009724:	2a00      	cmp	r2, #0
 8009726:	d041      	beq.n	80097ac <strncmp+0x88>
 8009728:	ea40 0301 	orr.w	r3, r0, r1
 800972c:	f013 0303 	ands.w	r3, r3, #3
 8009730:	b4f0      	push	{r4, r5, r6, r7}
 8009732:	d125      	bne.n	8009780 <strncmp+0x5c>
 8009734:	2a03      	cmp	r2, #3
 8009736:	d923      	bls.n	8009780 <strncmp+0x5c>
 8009738:	6804      	ldr	r4, [r0, #0]
 800973a:	680d      	ldr	r5, [r1, #0]
 800973c:	42ac      	cmp	r4, r5
 800973e:	d11f      	bne.n	8009780 <strncmp+0x5c>
 8009740:	3a04      	subs	r2, #4
 8009742:	d035      	beq.n	80097b0 <strncmp+0x8c>
 8009744:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8009748:	ea25 0404 	bic.w	r4, r5, r4
 800974c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8009750:	d131      	bne.n	80097b6 <strncmp+0x92>
 8009752:	1d07      	adds	r7, r0, #4
 8009754:	1d0d      	adds	r5, r1, #4
 8009756:	e00d      	b.n	8009774 <strncmp+0x50>
 8009758:	f857 3b04 	ldr.w	r3, [r7], #4
 800975c:	680e      	ldr	r6, [r1, #0]
 800975e:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8009762:	42b3      	cmp	r3, r6
 8009764:	ea24 0403 	bic.w	r4, r4, r3
 8009768:	d10a      	bne.n	8009780 <strncmp+0x5c>
 800976a:	3a04      	subs	r2, #4
 800976c:	d020      	beq.n	80097b0 <strncmp+0x8c>
 800976e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8009772:	d11d      	bne.n	80097b0 <strncmp+0x8c>
 8009774:	2a03      	cmp	r2, #3
 8009776:	4629      	mov	r1, r5
 8009778:	4638      	mov	r0, r7
 800977a:	f105 0504 	add.w	r5, r5, #4
 800977e:	d8eb      	bhi.n	8009758 <strncmp+0x34>
 8009780:	7803      	ldrb	r3, [r0, #0]
 8009782:	780c      	ldrb	r4, [r1, #0]
 8009784:	429c      	cmp	r4, r3
 8009786:	f102 32ff 	add.w	r2, r2, #4294967295
 800978a:	d10c      	bne.n	80097a6 <strncmp+0x82>
 800978c:	b182      	cbz	r2, 80097b0 <strncmp+0x8c>
 800978e:	b914      	cbnz	r4, 8009796 <strncmp+0x72>
 8009790:	e00e      	b.n	80097b0 <strncmp+0x8c>
 8009792:	b16a      	cbz	r2, 80097b0 <strncmp+0x8c>
 8009794:	b17b      	cbz	r3, 80097b6 <strncmp+0x92>
 8009796:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800979a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800979e:	42a3      	cmp	r3, r4
 80097a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80097a4:	d0f5      	beq.n	8009792 <strncmp+0x6e>
 80097a6:	1b18      	subs	r0, r3, r4
 80097a8:	bcf0      	pop	{r4, r5, r6, r7}
 80097aa:	4770      	bx	lr
 80097ac:	4610      	mov	r0, r2
 80097ae:	4770      	bx	lr
 80097b0:	2000      	movs	r0, #0
 80097b2:	bcf0      	pop	{r4, r5, r6, r7}
 80097b4:	4770      	bx	lr
 80097b6:	4618      	mov	r0, r3
 80097b8:	e7f6      	b.n	80097a8 <strncmp+0x84>
 80097ba:	bf00      	nop

080097bc <strncpy>:
 80097bc:	ea40 0301 	orr.w	r3, r0, r1
 80097c0:	079b      	lsls	r3, r3, #30
 80097c2:	b470      	push	{r4, r5, r6}
 80097c4:	d12a      	bne.n	800981c <strncpy+0x60>
 80097c6:	2a03      	cmp	r2, #3
 80097c8:	d928      	bls.n	800981c <strncpy+0x60>
 80097ca:	460c      	mov	r4, r1
 80097cc:	4603      	mov	r3, r0
 80097ce:	4621      	mov	r1, r4
 80097d0:	f854 6b04 	ldr.w	r6, [r4], #4
 80097d4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 80097d8:	ea25 0506 	bic.w	r5, r5, r6
 80097dc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 80097e0:	d106      	bne.n	80097f0 <strncpy+0x34>
 80097e2:	3a04      	subs	r2, #4
 80097e4:	2a03      	cmp	r2, #3
 80097e6:	f843 6b04 	str.w	r6, [r3], #4
 80097ea:	4621      	mov	r1, r4
 80097ec:	d8ef      	bhi.n	80097ce <strncpy+0x12>
 80097ee:	b19a      	cbz	r2, 8009818 <strncpy+0x5c>
 80097f0:	780c      	ldrb	r4, [r1, #0]
 80097f2:	701c      	strb	r4, [r3, #0]
 80097f4:	3a01      	subs	r2, #1
 80097f6:	3301      	adds	r3, #1
 80097f8:	b13c      	cbz	r4, 800980a <strncpy+0x4e>
 80097fa:	b16a      	cbz	r2, 8009818 <strncpy+0x5c>
 80097fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009800:	f803 4b01 	strb.w	r4, [r3], #1
 8009804:	3a01      	subs	r2, #1
 8009806:	2c00      	cmp	r4, #0
 8009808:	d1f7      	bne.n	80097fa <strncpy+0x3e>
 800980a:	b12a      	cbz	r2, 8009818 <strncpy+0x5c>
 800980c:	441a      	add	r2, r3
 800980e:	2100      	movs	r1, #0
 8009810:	f803 1b01 	strb.w	r1, [r3], #1
 8009814:	4293      	cmp	r3, r2
 8009816:	d1fb      	bne.n	8009810 <strncpy+0x54>
 8009818:	bc70      	pop	{r4, r5, r6}
 800981a:	4770      	bx	lr
 800981c:	4603      	mov	r3, r0
 800981e:	e7e6      	b.n	80097ee <strncpy+0x32>

08009820 <strpbrk>:
 8009820:	b430      	push	{r4, r5}
 8009822:	7804      	ldrb	r4, [r0, #0]
 8009824:	b1dc      	cbz	r4, 800985e <strpbrk+0x3e>
 8009826:	780d      	ldrb	r5, [r1, #0]
 8009828:	b19d      	cbz	r5, 8009852 <strpbrk+0x32>
 800982a:	42ac      	cmp	r4, r5
 800982c:	d00f      	beq.n	800984e <strpbrk+0x2e>
 800982e:	460a      	mov	r2, r1
 8009830:	e001      	b.n	8009836 <strpbrk+0x16>
 8009832:	429c      	cmp	r4, r3
 8009834:	d00b      	beq.n	800984e <strpbrk+0x2e>
 8009836:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1f9      	bne.n	8009832 <strpbrk+0x12>
 800983e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009842:	2c00      	cmp	r4, #0
 8009844:	d1f0      	bne.n	8009828 <strpbrk+0x8>
 8009846:	7813      	ldrb	r3, [r2, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	bf08      	it	eq
 800984c:	2000      	moveq	r0, #0
 800984e:	bc30      	pop	{r4, r5}
 8009850:	4770      	bx	lr
 8009852:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009856:	460a      	mov	r2, r1
 8009858:	2c00      	cmp	r4, #0
 800985a:	d1e5      	bne.n	8009828 <strpbrk+0x8>
 800985c:	e7f3      	b.n	8009846 <strpbrk+0x26>
 800985e:	4620      	mov	r0, r4
 8009860:	e7f5      	b.n	800984e <strpbrk+0x2e>
 8009862:	bf00      	nop

08009864 <strspn>:
 8009864:	b470      	push	{r4, r5, r6}
 8009866:	7804      	ldrb	r4, [r0, #0]
 8009868:	b1a4      	cbz	r4, 8009894 <strspn+0x30>
 800986a:	780d      	ldrb	r5, [r1, #0]
 800986c:	4606      	mov	r6, r0
 800986e:	b14d      	cbz	r5, 8009884 <strspn+0x20>
 8009870:	42a5      	cmp	r5, r4
 8009872:	d00a      	beq.n	800988a <strspn+0x26>
 8009874:	460a      	mov	r2, r1
 8009876:	e001      	b.n	800987c <strspn+0x18>
 8009878:	42a3      	cmp	r3, r4
 800987a:	d006      	beq.n	800988a <strspn+0x26>
 800987c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1f9      	bne.n	8009878 <strspn+0x14>
 8009884:	1b80      	subs	r0, r0, r6
 8009886:	bc70      	pop	{r4, r5, r6}
 8009888:	4770      	bx	lr
 800988a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800988e:	2c00      	cmp	r4, #0
 8009890:	d1ed      	bne.n	800986e <strspn+0xa>
 8009892:	e7f7      	b.n	8009884 <strspn+0x20>
 8009894:	4620      	mov	r0, r4
 8009896:	e7f6      	b.n	8009886 <strspn+0x22>
