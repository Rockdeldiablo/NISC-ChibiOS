
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08002631 	.word	0x08002631
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	08002de1 	.word	0x08002de1
 8000070:	08002db1 	.word	0x08002db1
 8000074:	08002d81 	.word	0x08002d81
 8000078:	08002d51 	.word	0x08002d51
 800007c:	08002d21 	.word	0x08002d21
 8000080:	08002cf1 	.word	0x08002cf1
 8000084:	08002cc1 	.word	0x08002cc1
 8000088:	08002e11 	.word	0x08002e11
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08002a71 	.word	0x08002a71
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	080028b1 	.word	0x080028b1
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	08002c91 	.word	0x08002c91
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	08002c61 	.word	0x08002c61
 8000124:	08002c31 	.word	0x08002c31
 8000128:	08002c01 	.word	0x08002c01
 800012c:	08002bd1 	.word	0x08002bd1
 8000130:	08002ba1 	.word	0x08002ba1
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	08002b71 	.word	0x08002b71
 8000154:	08002b41 	.word	0x08002b41
 8000158:	08002b11 	.word	0x08002b11
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f002 feb4 	bl	8002f70 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f002 fa6a 	bl	80026e0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f002 fe46 	bl	8002ee0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f002 fe84 	bl	8002f60 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f001 ff3a 	bl	80020e0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f002 be68 	b.w	8002f50 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000294:	08003188 	.word	0x08003188
                ldr     r2, =_data_start
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800029c:	20000800 	.word	0x20000800
                ldr     r1, =_bss_start
 80002a0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
 80002a4:	20000fa0 	.word	0x20000fa0
                ldr     r4, =__init_array_start
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f002 f9b8 	bl	8002650 <chThdExit>

080002e0 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e0:	f002 f9de 	bl	80026a0 <chSchDoReschedule>

080002e4 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e4:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e6:	e7fe      	b.n	80002e6 <_port_exit_from_isr+0x2>

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000426:	f1a4 0401 	sub.w	r4, r4, #1
 800042a:	d1e9      	bne.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_dmul>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066e:	bf1d      	ittte	ne
 8000670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000674:	ea94 0f0c 	teqne	r4, ip
 8000678:	ea95 0f0c 	teqne	r5, ip
 800067c:	f000 f8de 	bleq	800083c <__aeabi_dmul+0x1dc>
 8000680:	442c      	add	r4, r5
 8000682:	ea81 0603 	eor.w	r6, r1, r3
 8000686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000692:	bf18      	it	ne
 8000694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a0:	d038      	beq.n	8000714 <__aeabi_dmul+0xb4>
 80006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b6:	f04f 0600 	mov.w	r6, #0
 80006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006be:	f09c 0f00 	teq	ip, #0
 80006c2:	bf18      	it	ne
 80006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d4:	d204      	bcs.n	80006e0 <__aeabi_dmul+0x80>
 80006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006da:	416d      	adcs	r5, r5
 80006dc:	eb46 0606 	adc.w	r6, r6, r6
 80006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f8:	bf88      	it	hi
 80006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fe:	d81e      	bhi.n	800073e <__aeabi_dmul+0xde>
 8000700:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000704:	bf08      	it	eq
 8000706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800070a:	f150 0000 	adcs.w	r0, r0, #0
 800070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000718:	ea46 0101 	orr.w	r1, r6, r1
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000728:	bfc2      	ittt	gt
 800072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000732:	bd70      	popgt	{r4, r5, r6, pc}
 8000734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000738:	f04f 0e00 	mov.w	lr, #0
 800073c:	3c01      	subs	r4, #1
 800073e:	f300 80ab 	bgt.w	8000898 <__aeabi_dmul+0x238>
 8000742:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000746:	bfde      	ittt	le
 8000748:	2000      	movle	r0, #0
 800074a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd70      	pople	{r4, r5, r6, pc}
 8000750:	f1c4 0400 	rsb	r4, r4, #0
 8000754:	3c20      	subs	r4, #32
 8000756:	da35      	bge.n	80007c4 <__aeabi_dmul+0x164>
 8000758:	340c      	adds	r4, #12
 800075a:	dc1b      	bgt.n	8000794 <__aeabi_dmul+0x134>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f305 	lsl.w	r3, r0, r5
 8000768:	fa20 f004 	lsr.w	r0, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	fa21 f604 	lsr.w	r6, r1, r4
 8000784:	eb42 0106 	adc.w	r1, r2, r6
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 040c 	rsb	r4, r4, #12
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f304 	lsl.w	r3, r0, r4
 80007a0:	fa20 f005 	lsr.w	r0, r0, r5
 80007a4:	fa01 f204 	lsl.w	r2, r1, r4
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b4:	f141 0100 	adc.w	r1, r1, #0
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f205 	lsl.w	r2, r0, r5
 80007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d0:	fa20 f304 	lsr.w	r3, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea43 0302 	orr.w	r3, r3, r2
 80007dc:	fa21 f004 	lsr.w	r0, r1, r4
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	fa21 f204 	lsr.w	r2, r1, r4
 80007e8:	ea20 0002 	bic.w	r0, r0, r2
 80007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f094 0f00 	teq	r4, #0
 8000800:	d10f      	bne.n	8000822 <__aeabi_dmul+0x1c2>
 8000802:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	eb41 0101 	adc.w	r1, r1, r1
 800080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3c01      	subeq	r4, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1a6>
 8000816:	ea41 0106 	orr.w	r1, r1, r6
 800081a:	f095 0f00 	teq	r5, #0
 800081e:	bf18      	it	ne
 8000820:	4770      	bxne	lr
 8000822:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	eb43 0303 	adc.w	r3, r3, r3
 800082c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000830:	bf08      	it	eq
 8000832:	3d01      	subeq	r5, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1c6>
 8000836:	ea43 0306 	orr.w	r3, r3, r6
 800083a:	4770      	bx	lr
 800083c:	ea94 0f0c 	teq	r4, ip
 8000840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000844:	bf18      	it	ne
 8000846:	ea95 0f0c 	teqne	r5, ip
 800084a:	d00c      	beq.n	8000866 <__aeabi_dmul+0x206>
 800084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000850:	bf18      	it	ne
 8000852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000856:	d1d1      	bne.n	80007fc <__aeabi_dmul+0x19c>
 8000858:	ea81 0103 	eor.w	r1, r1, r3
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086a:	bf06      	itte	eq
 800086c:	4610      	moveq	r0, r2
 800086e:	4619      	moveq	r1, r3
 8000870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000874:	d019      	beq.n	80008aa <__aeabi_dmul+0x24a>
 8000876:	ea94 0f0c 	teq	r4, ip
 800087a:	d102      	bne.n	8000882 <__aeabi_dmul+0x222>
 800087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000880:	d113      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	d105      	bne.n	8000894 <__aeabi_dmul+0x234>
 8000888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800088c:	bf1c      	itt	ne
 800088e:	4610      	movne	r0, r2
 8000890:	4619      	movne	r1, r3
 8000892:	d10a      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__aeabi_ddiv>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c2:	bf1d      	ittte	ne
 80008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c8:	ea94 0f0c 	teqne	r4, ip
 80008cc:	ea95 0f0c 	teqne	r5, ip
 80008d0:	f000 f8a7 	bleq	8000a22 <__aeabi_ddiv+0x16e>
 80008d4:	eba4 0405 	sub.w	r4, r4, r5
 80008d8:	ea81 0e03 	eor.w	lr, r1, r3
 80008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e4:	f000 8088 	beq.w	80009f8 <__aeabi_ddiv+0x144>
 80008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000908:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800090c:	429d      	cmp	r5, r3
 800090e:	bf08      	it	eq
 8000910:	4296      	cmpeq	r6, r2
 8000912:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000916:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800091a:	d202      	bcs.n	8000922 <__aeabi_ddiv+0x6e>
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	eb65 0503 	sbc.w	r5, r5, r3
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000932:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000990:	ea55 0e06 	orrs.w	lr, r5, r6
 8000994:	d018      	beq.n	80009c8 <__aeabi_ddiv+0x114>
 8000996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009b2:	d1c0      	bne.n	8000936 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	d10b      	bne.n	80009d2 <__aeabi_ddiv+0x11e>
 80009ba:	ea41 0100 	orr.w	r1, r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c6:	e7b6      	b.n	8000936 <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009cc:	bf04      	itt	eq
 80009ce:	4301      	orreq	r1, r0
 80009d0:	2000      	moveq	r0, #0
 80009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d6:	bf88      	it	hi
 80009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009dc:	f63f aeaf 	bhi.w	800073e <__aeabi_dmul+0xde>
 80009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e4:	bf04      	itt	eq
 80009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ee:	f150 0000 	adcs.w	r0, r0, #0
 80009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a04:	bfc2      	ittt	gt
 8000a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a14:	f04f 0e00 	mov.w	lr, #0
 8000a18:	3c01      	subs	r4, #1
 8000a1a:	e690      	b.n	800073e <__aeabi_dmul+0xde>
 8000a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a20:	e68d      	b.n	800073e <__aeabi_dmul+0xde>
 8000a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a26:	ea94 0f0c 	teq	r4, ip
 8000a2a:	bf08      	it	eq
 8000a2c:	ea95 0f0c 	teqeq	r5, ip
 8000a30:	f43f af3b 	beq.w	80008aa <__aeabi_dmul+0x24a>
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	d10a      	bne.n	8000a50 <__aeabi_ddiv+0x19c>
 8000a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3e:	f47f af34 	bne.w	80008aa <__aeabi_dmul+0x24a>
 8000a42:	ea95 0f0c 	teq	r5, ip
 8000a46:	f47f af25 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e72c      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a50:	ea95 0f0c 	teq	r5, ip
 8000a54:	d106      	bne.n	8000a64 <__aeabi_ddiv+0x1b0>
 8000a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a5a:	f43f aefd 	beq.w	8000858 <__aeabi_dmul+0x1f8>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e722      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	f47f aec5 	bne.w	80007fc <__aeabi_dmul+0x19c>
 8000a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a76:	f47f af0d 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7e:	f47f aeeb 	bne.w	8000858 <__aeabi_dmul+0x1f8>
 8000a82:	e712      	b.n	80008aa <__aeabi_dmul+0x24a>

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c30:	f1a2 0201 	sub.w	r2, r2, #1
 8000c34:	d1ed      	bne.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__gesf2>:
 8000d90:	f04f 3cff 	mov.w	ip, #4294967295
 8000d94:	e006      	b.n	8000da4 <__cmpsf2+0x4>
 8000d96:	bf00      	nop

08000d98 <__lesf2>:
 8000d98:	f04f 0c01 	mov.w	ip, #1
 8000d9c:	e002      	b.n	8000da4 <__cmpsf2+0x4>
 8000d9e:	bf00      	nop

08000da0 <__cmpsf2>:
 8000da0:	f04f 0c01 	mov.w	ip, #1
 8000da4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000da8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db4:	bf18      	it	ne
 8000db6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dba:	d011      	beq.n	8000de0 <__cmpsf2+0x40>
 8000dbc:	b001      	add	sp, #4
 8000dbe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dc2:	bf18      	it	ne
 8000dc4:	ea90 0f01 	teqne	r0, r1
 8000dc8:	bf58      	it	pl
 8000dca:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dce:	bf88      	it	hi
 8000dd0:	17c8      	asrhi	r0, r1, #31
 8000dd2:	bf38      	it	cc
 8000dd4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dd8:	bf18      	it	ne
 8000dda:	f040 0001 	orrne.w	r0, r0, #1
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de4:	d102      	bne.n	8000dec <__cmpsf2+0x4c>
 8000de6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dea:	d105      	bne.n	8000df8 <__cmpsf2+0x58>
 8000dec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df0:	d1e4      	bne.n	8000dbc <__cmpsf2+0x1c>
 8000df2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000df6:	d0e1      	beq.n	8000dbc <__cmpsf2+0x1c>
 8000df8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <__aeabi_cfrcmple>:
 8000e00:	4684      	mov	ip, r0
 8000e02:	4608      	mov	r0, r1
 8000e04:	4661      	mov	r1, ip
 8000e06:	e7ff      	b.n	8000e08 <__aeabi_cfcmpeq>

08000e08 <__aeabi_cfcmpeq>:
 8000e08:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e0a:	f7ff ffc9 	bl	8000da0 <__cmpsf2>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	bf48      	it	mi
 8000e12:	f110 0f00 	cmnmi.w	r0, #0
 8000e16:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e18 <__aeabi_fcmpeq>:
 8000e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e1c:	f7ff fff4 	bl	8000e08 <__aeabi_cfcmpeq>
 8000e20:	bf0c      	ite	eq
 8000e22:	2001      	moveq	r0, #1
 8000e24:	2000      	movne	r0, #0
 8000e26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2a:	bf00      	nop

08000e2c <__aeabi_fcmplt>:
 8000e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e30:	f7ff ffea 	bl	8000e08 <__aeabi_cfcmpeq>
 8000e34:	bf34      	ite	cc
 8000e36:	2001      	movcc	r0, #1
 8000e38:	2000      	movcs	r0, #0
 8000e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3e:	bf00      	nop

08000e40 <__aeabi_fcmple>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff ffe0 	bl	8000e08 <__aeabi_cfcmpeq>
 8000e48:	bf94      	ite	ls
 8000e4a:	2001      	movls	r0, #1
 8000e4c:	2000      	movhi	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_fcmpge>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff ffd2 	bl	8000e00 <__aeabi_cfrcmple>
 8000e5c:	bf94      	ite	ls
 8000e5e:	2001      	movls	r0, #1
 8000e60:	2000      	movhi	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_fcmpgt>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffc8 	bl	8000e00 <__aeabi_cfrcmple>
 8000e70:	bf34      	ite	cc
 8000e72:	2001      	movcc	r0, #1
 8000e74:	2000      	movcs	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_f2iz>:
 8000e7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e84:	d30f      	bcc.n	8000ea6 <__aeabi_f2iz+0x2a>
 8000e86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e8e:	d90d      	bls.n	8000eac <__aeabi_f2iz+0x30>
 8000e90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea0:	bf18      	it	ne
 8000ea2:	4240      	negne	r0, r0
 8000ea4:	4770      	bx	lr
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	4770      	bx	lr
 8000eac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000eb0:	d101      	bne.n	8000eb6 <__aeabi_f2iz+0x3a>
 8000eb2:	0242      	lsls	r2, r0, #9
 8000eb4:	d105      	bne.n	8000ec2 <__aeabi_f2iz+0x46>
 8000eb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	bf08      	it	eq
 8000ebc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f04f 0000 	mov.w	r0, #0
 8000ec6:	4770      	bx	lr

08000ec8 <memcpy>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	ea41 0300 	orr.w	r3, r1, r0
 8000ece:	f013 0303 	ands.w	r3, r3, #3
 8000ed2:	d16d      	bne.n	8000fb0 <memcpy+0xe8>
 8000ed4:	3a40      	subs	r2, #64	; 0x40
 8000ed6:	d341      	bcc.n	8000f5c <memcpy+0x94>
 8000ed8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000edc:	f840 3b04 	str.w	r3, [r0], #4
 8000ee0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ee4:	f840 3b04 	str.w	r3, [r0], #4
 8000ee8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000eec:	f840 3b04 	str.w	r3, [r0], #4
 8000ef0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ef4:	f840 3b04 	str.w	r3, [r0], #4
 8000ef8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000efc:	f840 3b04 	str.w	r3, [r0], #4
 8000f00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f04:	f840 3b04 	str.w	r3, [r0], #4
 8000f08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f0c:	f840 3b04 	str.w	r3, [r0], #4
 8000f10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f14:	f840 3b04 	str.w	r3, [r0], #4
 8000f18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f1c:	f840 3b04 	str.w	r3, [r0], #4
 8000f20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f24:	f840 3b04 	str.w	r3, [r0], #4
 8000f28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f2c:	f840 3b04 	str.w	r3, [r0], #4
 8000f30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f34:	f840 3b04 	str.w	r3, [r0], #4
 8000f38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f3c:	f840 3b04 	str.w	r3, [r0], #4
 8000f40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f44:	f840 3b04 	str.w	r3, [r0], #4
 8000f48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f4c:	f840 3b04 	str.w	r3, [r0], #4
 8000f50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f54:	f840 3b04 	str.w	r3, [r0], #4
 8000f58:	3a40      	subs	r2, #64	; 0x40
 8000f5a:	d2bd      	bcs.n	8000ed8 <memcpy+0x10>
 8000f5c:	3230      	adds	r2, #48	; 0x30
 8000f5e:	d311      	bcc.n	8000f84 <memcpy+0xbc>
 8000f60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f64:	f840 3b04 	str.w	r3, [r0], #4
 8000f68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f6c:	f840 3b04 	str.w	r3, [r0], #4
 8000f70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f74:	f840 3b04 	str.w	r3, [r0], #4
 8000f78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f7c:	f840 3b04 	str.w	r3, [r0], #4
 8000f80:	3a10      	subs	r2, #16
 8000f82:	d2ed      	bcs.n	8000f60 <memcpy+0x98>
 8000f84:	320c      	adds	r2, #12
 8000f86:	d305      	bcc.n	8000f94 <memcpy+0xcc>
 8000f88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f8c:	f840 3b04 	str.w	r3, [r0], #4
 8000f90:	3a04      	subs	r2, #4
 8000f92:	d2f9      	bcs.n	8000f88 <memcpy+0xc0>
 8000f94:	3204      	adds	r2, #4
 8000f96:	d008      	beq.n	8000faa <memcpy+0xe2>
 8000f98:	07d2      	lsls	r2, r2, #31
 8000f9a:	bf1c      	itt	ne
 8000f9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000fa0:	f800 3b01 	strbne.w	r3, [r0], #1
 8000fa4:	d301      	bcc.n	8000faa <memcpy+0xe2>
 8000fa6:	880b      	ldrh	r3, [r1, #0]
 8000fa8:	8003      	strh	r3, [r0, #0]
 8000faa:	4660      	mov	r0, ip
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2a08      	cmp	r2, #8
 8000fb2:	d313      	bcc.n	8000fdc <memcpy+0x114>
 8000fb4:	078b      	lsls	r3, r1, #30
 8000fb6:	d08d      	beq.n	8000ed4 <memcpy+0xc>
 8000fb8:	f010 0303 	ands.w	r3, r0, #3
 8000fbc:	d08a      	beq.n	8000ed4 <memcpy+0xc>
 8000fbe:	f1c3 0304 	rsb	r3, r3, #4
 8000fc2:	1ad2      	subs	r2, r2, r3
 8000fc4:	07db      	lsls	r3, r3, #31
 8000fc6:	bf1c      	itt	ne
 8000fc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000fcc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000fd0:	d380      	bcc.n	8000ed4 <memcpy+0xc>
 8000fd2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000fd6:	f820 3b02 	strh.w	r3, [r0], #2
 8000fda:	e77b      	b.n	8000ed4 <memcpy+0xc>
 8000fdc:	3a04      	subs	r2, #4
 8000fde:	d3d9      	bcc.n	8000f94 <memcpy+0xcc>
 8000fe0:	3a01      	subs	r2, #1
 8000fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fe6:	f800 3b01 	strb.w	r3, [r0], #1
 8000fea:	d2f9      	bcs.n	8000fe0 <memcpy+0x118>
 8000fec:	780b      	ldrb	r3, [r1, #0]
 8000fee:	7003      	strb	r3, [r0, #0]
 8000ff0:	784b      	ldrb	r3, [r1, #1]
 8000ff2:	7043      	strb	r3, [r0, #1]
 8000ff4:	788b      	ldrb	r3, [r1, #2]
 8000ff6:	7083      	strb	r3, [r0, #2]
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	4770      	bx	lr
 8000ffc:	0000      	movs	r0, r0
	...

08001000 <chTMStartMeasurementX.constprop.5>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001000:	4b01      	ldr	r3, [pc, #4]	; (8001008 <chTMStartMeasurementX.constprop.5+0x8>)
 8001002:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001004:	6083      	str	r3, [r0, #8]
}
 8001006:	4770      	bx	lr
 8001008:	e0001000 	.word	0xe0001000
 800100c:	00000000 	.word	0x00000000

08001010 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8001010:	b4f0      	push	{r4, r5, r6, r7}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001012:	2320      	movs	r3, #32
 8001014:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001018:	4d0d      	ldr	r5, [pc, #52]	; (8001050 <chCoreAllocAlignedWithOffset+0x40>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800101a:	e9d5 7400 	ldrd	r7, r4, [r5]
 800101e:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001020:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 8001022:	1983      	adds	r3, r0, r6
 8001024:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001026:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 8001028:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800102a:	4008      	ands	r0, r1
  next = p + size;
 800102c:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800102e:	42a3      	cmp	r3, r4
 8001030:	d807      	bhi.n	8001042 <chCoreAllocAlignedWithOffset+0x32>
 8001032:	429f      	cmp	r7, r3
 8001034:	d805      	bhi.n	8001042 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8001036:	602b      	str	r3, [r5, #0]
 8001038:	2300      	movs	r3, #0
 800103a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 800103e:	bcf0      	pop	{r4, r5, r6, r7}
 8001040:	4770      	bx	lr
    return NULL;
 8001042:	2000      	movs	r0, #0
 8001044:	2300      	movs	r3, #0
 8001046:	f383 8811 	msr	BASEPRI, r3
}
 800104a:	bcf0      	pop	{r4, r5, r6, r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000a48 	.word	0x20000a48
	...

08001060 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8001060:	4a02      	ldr	r2, [pc, #8]	; (800106c <notify2+0xc>)
 8001062:	68d3      	ldr	r3, [r2, #12]
 8001064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001068:	60d3      	str	r3, [r2, #12]
}
 800106a:	4770      	bx	lr
 800106c:	40004400 	.word	0x40004400

08001070 <_port_irq_epilogue>:
 8001070:	2320      	movs	r3, #32
 8001072:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <_port_irq_epilogue+0x44>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800107e:	d102      	bne.n	8001086 <_port_irq_epilogue+0x16>
 8001080:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001084:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001086:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 800108a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800108e:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8001092:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001096:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <_port_irq_epilogue+0x48>)
 800109c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800109e:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80010a0:	6889      	ldr	r1, [r1, #8]
 80010a2:	6892      	ldr	r2, [r2, #8]
 80010a4:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80010a6:	bf8c      	ite	hi
 80010a8:	4a04      	ldrhi	r2, [pc, #16]	; (80010bc <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80010aa:	4a05      	ldrls	r2, [pc, #20]	; (80010c0 <_port_irq_epilogue+0x50>)
 80010ac:	f843 2c08 	str.w	r2, [r3, #-8]
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	200008b0 	.word	0x200008b0
 80010bc:	080002e1 	.word	0x080002e1
 80010c0:	080002e4 	.word	0x080002e4
	...

080010d0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80010d0:	b470      	push	{r4, r5, r6}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80010d2:	4c0b      	ldr	r4, [pc, #44]	; (8001100 <chCoreAllocAlignedI+0x30>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80010d4:	e9d4 6300 	ldrd	r6, r3, [r4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80010d8:	1e72      	subs	r2, r6, #1
  size = MEM_ALIGN_NEXT(size, align);
 80010da:	424d      	negs	r5, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80010dc:	440a      	add	r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 80010de:	3901      	subs	r1, #1
 80010e0:	4401      	add	r1, r0
 80010e2:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80010e4:	ea02 0005 	and.w	r0, r2, r5
  next = p + size;
 80010e8:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d804      	bhi.n	80010f8 <chCoreAllocAlignedI+0x28>
 80010ee:	428e      	cmp	r6, r1
 80010f0:	d802      	bhi.n	80010f8 <chCoreAllocAlignedI+0x28>
  ch_memcore.nextmem = next;
 80010f2:	6021      	str	r1, [r4, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80010f4:	bc70      	pop	{r4, r5, r6}
 80010f6:	4770      	bx	lr
    return NULL;
 80010f8:	2000      	movs	r0, #0
 80010fa:	bc70      	pop	{r4, r5, r6}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000a48 	.word	0x20000a48
	...

08001110 <chTMStopMeasurementX>:
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <chTMStopMeasurementX+0x40>)
 8001114:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8001116:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001118:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800111a:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800111c:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 800111e:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 8001120:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 8001122:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8001126:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8001128:	18e6      	adds	r6, r4, r3
 800112a:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 800112e:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8001130:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8001132:	bf88      	it	hi
 8001134:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8001136:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8001138:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800113a:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800113e:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 8001142:	bf38      	it	cc
 8001144:	6003      	strcc	r3, [r0, #0]
}
 8001146:	bcf0      	pop	{r4, r5, r6, r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e0001000 	.word	0xe0001000
 8001150:	200008b0 	.word	0x200008b0
	...

08001160 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001160:	2320      	movs	r3, #32
 8001162:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001166:	f890 3020 	ldrb.w	r3, [r0, #32]
 800116a:	2b07      	cmp	r3, #7
 800116c:	d80e      	bhi.n	800118c <wakeup+0x2c>
 800116e:	e8df f003 	tbb	[pc, r3]
 8001172:	0d28      	.short	0x0d28
 8001174:	0408240d 	.word	0x0408240d
 8001178:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 800117a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800117c:	6893      	ldr	r3, [r2, #8]
 800117e:	3301      	adds	r3, #1
 8001180:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001182:	e9d0 2300 	ldrd	r2, r3, [r0]
 8001186:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001188:	6802      	ldr	r2, [r0, #0]
 800118a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800118c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800118e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8001190:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 8001194:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8001198:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800119a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800119e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	428a      	cmp	r2, r1
 80011a4:	d2fb      	bcs.n	800119e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	2100      	movs	r1, #0
 80011aa:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80011ae:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80011b0:	6058      	str	r0, [r3, #4]
 80011b2:	f381 8811 	msr	BASEPRI, r1
}
 80011b6:	bc10      	pop	{r4}
 80011b8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80011ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e7e4      	b.n	800118c <wakeup+0x2c>
 80011c2:	2300      	movs	r3, #0
 80011c4:	f383 8811 	msr	BASEPRI, r3
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200008b0 	.word	0x200008b0

080011d0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 80011d0:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 80011d2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 80011d6:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 80011d8:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 80011dc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	4282      	cmp	r2, r0
 80011e2:	d2fb      	bcs.n	80011dc <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 80011e4:	685a      	ldr	r2, [r3, #4]
}
 80011e6:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 80011e8:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80011ec:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80011ee:	6059      	str	r1, [r3, #4]
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200008b0 	.word	0x200008b0
	...

08001200 <chEvtBroadcastFlagsI.constprop.15>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001202:	4f16      	ldr	r7, [pc, #88]	; (800125c <chEvtBroadcastFlagsI.constprop.15+0x5c>)
 8001204:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001208:	42bc      	cmp	r4, r7
 800120a:	d020      	beq.n	800124e <chEvtBroadcastFlagsI.constprop.15+0x4e>
 800120c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800120e:	2600      	movs	r6, #0
 8001210:	e004      	b.n	800121c <chEvtBroadcastFlagsI.constprop.15+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001212:	2a0b      	cmp	r2, #11
 8001214:	d01c      	beq.n	8001250 <chEvtBroadcastFlagsI.constprop.15+0x50>
    elp = elp->next;
 8001216:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001218:	42bc      	cmp	r4, r7
 800121a:	d018      	beq.n	800124e <chEvtBroadcastFlagsI.constprop.15+0x4e>
    elp->flags |= flags;
 800121c:	68e3      	ldr	r3, [r4, #12]
 800121e:	432b      	orrs	r3, r5
 8001220:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001222:	b115      	cbz	r5, 800122a <chEvtBroadcastFlagsI.constprop.15+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001224:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001226:	421d      	tst	r5, r3
 8001228:	d0f5      	beq.n	8001216 <chEvtBroadcastFlagsI.constprop.15+0x16>
  tp->epending |= events;
 800122a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800122e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001230:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8001234:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001236:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8001238:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800123a:	d1ea      	bne.n	8001212 <chEvtBroadcastFlagsI.constprop.15+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800123c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800123e:	4213      	tst	r3, r2
 8001240:	d0e9      	beq.n	8001216 <chEvtBroadcastFlagsI.constprop.15+0x16>
    tp->u.rdymsg = MSG_OK;
 8001242:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001244:	f7ff ffc4 	bl	80011d0 <chSchReadyI>
    elp = elp->next;
 8001248:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800124a:	42bc      	cmp	r4, r7
 800124c:	d1e6      	bne.n	800121c <chEvtBroadcastFlagsI.constprop.15+0x1c>
}
 800124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8001250:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001252:	ea32 0303 	bics.w	r3, r2, r3
 8001256:	d1de      	bne.n	8001216 <chEvtBroadcastFlagsI.constprop.15+0x16>
 8001258:	e7f3      	b.n	8001242 <chEvtBroadcastFlagsI.constprop.15+0x42>
 800125a:	bf00      	nop
 800125c:	20000834 	.word	0x20000834

08001260 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001260:	6803      	ldr	r3, [r0, #0]
 8001262:	b12b      	cbz	r3, 8001270 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8001264:	2200      	movs	r2, #0
 8001266:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001268:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 800126a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800126c:	f7ff bfb0 	b.w	80011d0 <chSchReadyI>
  }
}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
	...

08001280 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001280:	e7fe      	b.n	8001280 <_idle_thread>
 8001282:	bf00      	nop
	...

08001290 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8001290:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8001292:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	6813      	ldr	r3, [r2, #0]
 8001298:	f023 031f 	bic.w	r3, r3, #31
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f013 0301 	ands.w	r3, r3, #1
 80012a4:	d1fb      	bne.n	800129e <adc_lld_stop_conversion+0xe>
 80012a6:	7a65      	ldrb	r5, [r4, #9]
  adcp->adc->CR1 = 0;
 80012a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 80012aa:	6860      	ldr	r0, [r4, #4]
 80012ac:	213d      	movs	r1, #61	; 0x3d
 80012ae:	40a9      	lsls	r1, r5
 80012b0:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
 80012b2:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80012b4:	6893      	ldr	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80012b6:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80012b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80012bc:	6093      	str	r3, [r2, #8]
}
 80012be:	bc30      	pop	{r4, r5}
  adcp->adc->CR2 = ADC_CR2_ADON;
 80012c0:	6091      	str	r1, [r2, #8]
}
 80012c2:	4770      	bx	lr
	...

080012d0 <adc_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80012d0:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 80012d4:	b510      	push	{r4, lr}
 80012d6:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80012d8:	d111      	bne.n	80012fe <adc_lld_serve_rx_interrupt+0x2e>
    if (adcp->grpp != NULL) {
 80012da:	6903      	ldr	r3, [r0, #16]
 80012dc:	b173      	cbz	r3, 80012fc <adc_lld_serve_rx_interrupt+0x2c>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 80012de:	068a      	lsls	r2, r1, #26
 80012e0:	d52c      	bpl.n	800133c <adc_lld_serve_rx_interrupt+0x6c>
        _adc_isr_full_code(adcp);
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d031      	beq.n	800134c <adc_lld_serve_rx_interrupt+0x7c>
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	b13b      	cbz	r3, 80012fc <adc_lld_serve_rx_interrupt+0x2c>
 80012ec:	2204      	movs	r2, #4
 80012ee:	7002      	strb	r2, [r0, #0]
 80012f0:	4798      	blx	r3
 80012f2:	7823      	ldrb	r3, [r4, #0]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d101      	bne.n	80012fc <adc_lld_serve_rx_interrupt+0x2c>
 80012f8:	2303      	movs	r3, #3
 80012fa:	7023      	strb	r3, [r4, #0]
}
 80012fc:	bd10      	pop	{r4, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80012fe:	f7ff ffc7 	bl	8001290 <adc_lld_stop_conversion>
 8001302:	6923      	ldr	r3, [r4, #16]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d03d      	beq.n	8001386 <adc_lld_serve_rx_interrupt+0xb6>
 800130a:	2205      	movs	r2, #5
 800130c:	7022      	strb	r2, [r4, #0]
 800130e:	2100      	movs	r1, #0
 8001310:	4620      	mov	r0, r4
 8001312:	4798      	blx	r3
 8001314:	7823      	ldrb	r3, [r4, #0]
 8001316:	2b05      	cmp	r3, #5
 8001318:	bf04      	itt	eq
 800131a:	2302      	moveq	r3, #2
 800131c:	7023      	strbeq	r3, [r4, #0]
 800131e:	2300      	movs	r3, #0
 8001320:	6123      	str	r3, [r4, #16]
 8001322:	2320      	movs	r3, #32
 8001324:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	f104 0014 	add.w	r0, r4, #20
 8001330:	f7ff ff96 	bl	8001260 <chThdResumeI>
 8001334:	2300      	movs	r3, #0
 8001336:	f383 8811 	msr	BASEPRI, r3
}
 800133a:	bd10      	pop	{r4, pc}
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 800133c:	06ca      	lsls	r2, r1, #27
 800133e:	d5dd      	bpl.n	80012fc <adc_lld_serve_rx_interrupt+0x2c>
        _adc_isr_half_code(adcp);
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0da      	beq.n	80012fc <adc_lld_serve_rx_interrupt+0x2c>
}
 8001346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _adc_isr_half_code(adcp);
 800134a:	4718      	bx	r3
        _adc_isr_full_code(adcp);
 800134c:	f7ff ffa0 	bl	8001290 <adc_lld_stop_conversion>
 8001350:	6923      	ldr	r3, [r4, #16]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	b193      	cbz	r3, 800137c <adc_lld_serve_rx_interrupt+0xac>
 8001356:	2204      	movs	r2, #4
 8001358:	7022      	strb	r2, [r4, #0]
 800135a:	4620      	mov	r0, r4
 800135c:	4798      	blx	r3
 800135e:	7823      	ldrb	r3, [r4, #0]
 8001360:	2b04      	cmp	r3, #4
 8001362:	d00b      	beq.n	800137c <adc_lld_serve_rx_interrupt+0xac>
 8001364:	2320      	movs	r3, #32
 8001366:	f383 8811 	msr	BASEPRI, r3
 800136a:	2100      	movs	r1, #0
 800136c:	f104 0014 	add.w	r0, r4, #20
 8001370:	f7ff ff76 	bl	8001260 <chThdResumeI>
 8001374:	2300      	movs	r3, #0
 8001376:	f383 8811 	msr	BASEPRI, r3
}
 800137a:	bd10      	pop	{r4, pc}
        _adc_isr_full_code(adcp);
 800137c:	2202      	movs	r2, #2
 800137e:	2300      	movs	r3, #0
 8001380:	7022      	strb	r2, [r4, #0]
 8001382:	6123      	str	r3, [r4, #16]
 8001384:	e7ee      	b.n	8001364 <adc_lld_serve_rx_interrupt+0x94>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001386:	2202      	movs	r2, #2
 8001388:	6123      	str	r3, [r4, #16]
 800138a:	7022      	strb	r2, [r4, #0]
 800138c:	e7c9      	b.n	8001322 <adc_lld_serve_rx_interrupt+0x52>
 800138e:	bf00      	nop

08001390 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001390:	2000      	movs	r0, #0
 8001392:	4770      	bx	lr
	...

080013a0 <chSchWakeupS.constprop.10>:
  thread_t *otp = currp;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <chSchWakeupS.constprop.10+0x58>)
 80013a2:	6999      	ldr	r1, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80013a4:	b430      	push	{r4, r5}
 80013a6:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 80013a8:	688d      	ldr	r5, [r1, #8]
 80013aa:	6880      	ldr	r0, [r0, #8]
  ntp->u.rdymsg = msg;
 80013ac:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 80013ae:	42a8      	cmp	r0, r5
  ntp->u.rdymsg = msg;
 80013b0:	6262      	str	r2, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80013b2:	d80c      	bhi.n	80013ce <chSchWakeupS.constprop.10+0x2e>
  tp->state = CH_STATE_READY;
 80013b4:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80013b8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	4290      	cmp	r0, r2
 80013be:	d9fb      	bls.n	80013b8 <chSchWakeupS.constprop.10+0x18>
  tp->queue.prev             = cp->queue.prev;
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80013c6:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80013c8:	605c      	str	r4, [r3, #4]
}
 80013ca:	bc30      	pop	{r4, r5}
 80013cc:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80013ce:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80013d2:	461a      	mov	r2, r3
    cp = cp->queue.next;
 80013d4:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80013d6:	6890      	ldr	r0, [r2, #8]
 80013d8:	4285      	cmp	r5, r0
 80013da:	d9fb      	bls.n	80013d4 <chSchWakeupS.constprop.10+0x34>
  tp->queue.prev             = cp->queue.prev;
 80013dc:	6850      	ldr	r0, [r2, #4]
 80013de:	6048      	str	r0, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 80013e0:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 80013e2:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 80013e4:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
 80013e6:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80013e8:	f884 5020 	strb.w	r5, [r4, #32]
    chSysSwitch(ntp, otp);
 80013ec:	4620      	mov	r0, r4
    currp = ntp;
 80013ee:	619c      	str	r4, [r3, #24]
}
 80013f0:	bc30      	pop	{r4, r5}
    chSysSwitch(ntp, otp);
 80013f2:	f7fe bf65 	b.w	80002c0 <_port_switch>
 80013f6:	bf00      	nop
 80013f8:	200008b0 	.word	0x200008b0
 80013fc:	00000000 	.word	0x00000000

08001400 <chThdCreateStatic.constprop.4>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	2320      	movs	r3, #32
 8001404:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)wsp + size -
 8001408:	3948      	subs	r1, #72	; 0x48
 800140a:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <chThdCreateStatic.constprop.4+0x64>)
 800140e:	6123      	str	r3, [r4, #16]
 8001410:	6959      	ldr	r1, [r3, #20]
  tp->wabase = (stkalign_t *)wsp;
 8001412:	61e0      	str	r0, [r4, #28]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001414:	f844 2c24 	str.w	r2, [r4, #-36]
 8001418:	f1a4 0624 	sub.w	r6, r4, #36	; 0x24
 800141c:	4d12      	ldr	r5, [pc, #72]	; (8001468 <chThdCreateStatic.constprop.4+0x68>)
 800141e:	60e6      	str	r6, [r4, #12]
  tp->state     = CH_STATE_WTSTART;
 8001420:	2002      	movs	r0, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001422:	2201      	movs	r2, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001424:	f844 5c04 	str.w	r5, [r4, #-4]
  tp->state     = CH_STATE_WTSTART;
 8001428:	8420      	strh	r0, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800142a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800142e:	2500      	movs	r5, #0
  queue_init(&tp->msgqueue);
 8001430:	f104 022c 	add.w	r2, r4, #44	; 0x2c
  tp->prio      = prio;
 8001434:	2081      	movs	r0, #129	; 0x81
  tp->name      = name;
 8001436:	4f0d      	ldr	r7, [pc, #52]	; (800146c <chThdCreateStatic.constprop.4+0x6c>)
  tp->prio      = prio;
 8001438:	60a0      	str	r0, [r4, #8]
  list_init(&tp->waiting);
 800143a:	f104 0628 	add.w	r6, r4, #40	; 0x28
  REG_INSERT(tp);
 800143e:	6161      	str	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001440:	f844 5c20 	str.w	r5, [r4, #-32]
  tp->realprio  = prio;
 8001444:	63e0      	str	r0, [r4, #60]	; 0x3c
  tp->name      = name;
 8001446:	61a7      	str	r7, [r4, #24]
  tp->epending  = (eventmask_t)0;
 8001448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  chSchWakeupS(tp, MSG_OK);
 800144c:	4620      	mov	r0, r4
  REG_INSERT(tp);
 800144e:	610c      	str	r4, [r1, #16]
  tqp->next = (thread_t *)tqp;
 8001450:	e9c4 620a 	strd	r6, r2, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8001454:	6322      	str	r2, [r4, #48]	; 0x30
 8001456:	615c      	str	r4, [r3, #20]
  chSchWakeupS(tp, MSG_OK);
 8001458:	f7ff ffa2 	bl	80013a0 <chSchWakeupS.constprop.10>
 800145c:	f385 8811 	msr	BASEPRI, r5
}
 8001460:	4620      	mov	r0, r4
 8001462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001464:	200008b0 	.word	0x200008b0
 8001468:	080002d1 	.word	0x080002d1
 800146c:	0800304c 	.word	0x0800304c

08001470 <chSchGoSleepS>:
  thread_t *otp = currp;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <chSchGoSleepS+0x24>)
 8001472:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8001474:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8001476:	b410      	push	{r4}
  otp->state = newstate;
 8001478:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800147c:	6810      	ldr	r0, [r2, #0]
 800147e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8001480:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8001482:	6043      	str	r3, [r0, #4]
 8001484:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8001488:	4610      	mov	r0, r2
}
 800148a:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800148c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800148e:	f7fe bf17 	b.w	80002c0 <_port_switch>
 8001492:	bf00      	nop
 8001494:	200008b0 	.word	0x200008b0
	...

080014a0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 80014a2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80014a4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80014a6:	d04c      	beq.n	8001542 <chSchGoSleepTimeoutS+0xa2>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80014a8:	4c41      	ldr	r4, [pc, #260]	; (80015b0 <chSchGoSleepTimeoutS+0x110>)
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80014aa:	4625      	mov	r5, r4
 80014ac:	2902      	cmp	r1, #2
 80014ae:	f855 2f1c 	ldr.w	r2, [r5, #28]!
  vtp->par = par;
 80014b2:	69a3      	ldr	r3, [r4, #24]
 80014b4:	9305      	str	r3, [sp, #20]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80014b6:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 80014ba:	4607      	mov	r7, r0
 80014bc:	bf38      	it	cc
 80014be:	2102      	movcc	r1, #2
  vtp->func = vtfunc;
 80014c0:	483c      	ldr	r0, [pc, #240]	; (80015b4 <chSchGoSleepTimeoutS+0x114>)
 80014c2:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80014c6:	9004      	str	r0, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80014c8:	42aa      	cmp	r2, r5
 80014ca:	d05b      	beq.n	8001584 <chSchGoSleepTimeoutS+0xe4>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80014cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014ce:	6890      	ldr	r0, [r2, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80014d0:	1b9b      	subs	r3, r3, r6
 80014d2:	1859      	adds	r1, r3, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80014d4:	d32f      	bcc.n	8001536 <chSchGoSleepTimeoutS+0x96>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 80014d6:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
 80014d8:	1a09      	subs	r1, r1, r0
 80014da:	6890      	ldr	r0, [r2, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80014dc:	4281      	cmp	r1, r0
 80014de:	d904      	bls.n	80014ea <chSchGoSleepTimeoutS+0x4a>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 80014e0:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
 80014e2:	1a09      	subs	r1, r1, r0
  while (p->delta < delta) {
 80014e4:	6890      	ldr	r0, [r2, #8]
 80014e6:	4288      	cmp	r0, r1
 80014e8:	d3fa      	bcc.n	80014e0 <chSchGoSleepTimeoutS+0x40>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80014ea:	6853      	ldr	r3, [r2, #4]
 80014ec:	9302      	str	r3, [sp, #8]
  vtp->prev->next = vtp;
 80014ee:	ae01      	add	r6, sp, #4
  vtp->next = p;
 80014f0:	9201      	str	r2, [sp, #4]
  vtp->prev->next = vtp;
 80014f2:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 80014f4:	6056      	str	r6, [r2, #4]
  vtp->delta = delta;
 80014f6:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 80014f8:	6893      	ldr	r3, [r2, #8]
 80014fa:	1a59      	subs	r1, r3, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
  p->delta -= delta;
 8001500:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001502:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001504:	4638      	mov	r0, r7
 8001506:	f7ff ffb3 	bl	8001470 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800150a:	9b04      	ldr	r3, [sp, #16]
 800150c:	b17b      	cbz	r3, 800152e <chSchGoSleepTimeoutS+0x8e>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800150e:	69e2      	ldr	r2, [r4, #28]
 8001510:	9b01      	ldr	r3, [sp, #4]
 8001512:	42b2      	cmp	r2, r6
 8001514:	d01c      	beq.n	8001550 <chSchGoSleepTimeoutS+0xb0>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001516:	9a02      	ldr	r2, [sp, #8]
 8001518:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 800151a:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 800151c:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800151e:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
 8001520:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8001522:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001524:	d003      	beq.n	800152e <chSchGoSleepTimeoutS+0x8e>
      vtp->next->delta += vtp->delta;
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	9903      	ldr	r1, [sp, #12]
 800152a:	440a      	add	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 800152e:	69a3      	ldr	r3, [r4, #24]
}
 8001530:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001532:	b007      	add	sp, #28
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8001536:	4281      	cmp	r1, r0
 8001538:	d2d0      	bcs.n	80014dc <chSchGoSleepTimeoutS+0x3c>
  return systime + (systime_t)interval;
 800153a:	440e      	add	r6, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800153c:	f8cc 6034 	str.w	r6, [ip, #52]	; 0x34
 8001540:	e7cc      	b.n	80014dc <chSchGoSleepTimeoutS+0x3c>
 8001542:	4c1b      	ldr	r4, [pc, #108]	; (80015b0 <chSchGoSleepTimeoutS+0x110>)
    chSchGoSleepS(newstate);
 8001544:	f7ff ff94 	bl	8001470 <chSchGoSleepS>
  return currp->u.rdymsg;
 8001548:	69a3      	ldr	r3, [r4, #24]
}
 800154a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800154c:	b007      	add	sp, #28
 800154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8001550:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001552:	42ab      	cmp	r3, r5
  ch.vtlist.next = vtp->next;
 8001554:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001556:	605d      	str	r5, [r3, #4]
  vtp->func = NULL;
 8001558:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800155a:	d024      	beq.n	80015a6 <chSchGoSleepTimeoutS+0x106>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001560:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8001562:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8001564:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800156c:	1a5b      	subs	r3, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 800156e:	429a      	cmp	r2, r3
 8001570:	d9dd      	bls.n	800152e <chSchGoSleepTimeoutS+0x8e>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8001572:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001574:	2801      	cmp	r0, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001576:	bf98      	it	ls
 8001578:	1c9a      	addls	r2, r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800157a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800157e:	440a      	add	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
 8001582:	e7d4      	b.n	800152e <chSchGoSleepTimeoutS+0x8e>
      ch.vtlist.lasttime = now;
 8001584:	62a3      	str	r3, [r4, #40]	; 0x28
 8001586:	1858      	adds	r0, r3, r1
      ch.vtlist.next = vtp;
 8001588:	ae01      	add	r6, sp, #4
  STM32_ST_TIM->SR     = 0;
 800158a:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800158c:	2302      	movs	r3, #2
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800158e:	e9cd 5501 	strd	r5, r5, [sp, #4]
      vtp->delta = delay;
 8001592:	9103      	str	r1, [sp, #12]
      ch.vtlist.prev = vtp;
 8001594:	e9c4 6607 	strd	r6, r6, [r4, #28]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001598:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800159c:	f8cc 2010 	str.w	r2, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80015a0:	f8cc 300c 	str.w	r3, [ip, #12]
 80015a4:	e7ae      	b.n	8001504 <chSchGoSleepTimeoutS+0x64>
  STM32_ST_TIM->DIER = 0;
 80015a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	e7bf      	b.n	800152e <chSchGoSleepTimeoutS+0x8e>
 80015ae:	bf00      	nop
 80015b0:	200008b0 	.word	0x200008b0
 80015b4:	08001161 	.word	0x08001161
	...

080015c0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80015c0:	b161      	cbz	r1, 80015dc <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80015c4:	b410      	push	{r4}
 80015c6:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 80015c8:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 80015ca:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80015cc:	2004      	movs	r0, #4
 80015ce:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 80015d2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80015d4:	6053      	str	r3, [r2, #4]
}
 80015d6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80015d8:	f7ff bf62 	b.w	80014a0 <chSchGoSleepTimeoutS>
}
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200008b0 	.word	0x200008b0
	...

080015f0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	4604      	mov	r4, r0
 80015f4:	460f      	mov	r7, r1
 80015f6:	4616      	mov	r6, r2
 80015f8:	2320      	movs	r3, #32
 80015fa:	f383 8811 	msr	BASEPRI, r3
 80015fe:	e003      	b.n	8001608 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001600:	f7ff ffde 	bl	80015c0 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001604:	2800      	cmp	r0, #0
 8001606:	db18      	blt.n	800163a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8001608:	68a5      	ldr	r5, [r4, #8]
 800160a:	4631      	mov	r1, r6
 800160c:	4620      	mov	r0, r4
 800160e:	2d00      	cmp	r5, #0
 8001610:	d0f6      	beq.n	8001600 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001612:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001614:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001616:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001618:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800161a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800161c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800161e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001620:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001624:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001626:	bf24      	itt	cs
 8001628:	68e3      	ldrcs	r3, [r4, #12]
 800162a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800162c:	69e3      	ldr	r3, [r4, #28]
 800162e:	b103      	cbz	r3, 8001632 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8001630:	4798      	blx	r3
 8001632:	2000      	movs	r0, #0
 8001634:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8001638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800163a:	f385 8811 	msr	BASEPRI, r5
 800163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001640 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001640:	3030      	adds	r0, #48	; 0x30
 8001642:	f7ff bfd5 	b.w	80015f0 <oqPutTimeout>
 8001646:	bf00      	nop
	...

08001650 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001650:	3030      	adds	r0, #48	; 0x30
 8001652:	f04f 32ff 	mov.w	r2, #4294967295
 8001656:	f7ff bfcb 	b.w	80015f0 <oqPutTimeout>
 800165a:	bf00      	nop
 800165c:	0000      	movs	r0, r0
	...

08001660 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001660:	b570      	push	{r4, r5, r6, lr}
 8001662:	2320      	movs	r3, #32
 8001664:	4604      	mov	r4, r0
 8001666:	460e      	mov	r6, r1
 8001668:	f383 8811 	msr	BASEPRI, r3
 800166c:	e003      	b.n	8001676 <iqGetTimeout+0x16>
 800166e:	f7ff ffa7 	bl	80015c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001672:	2800      	cmp	r0, #0
 8001674:	db1a      	blt.n	80016ac <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001676:	68a5      	ldr	r5, [r4, #8]
 8001678:	4631      	mov	r1, r6
 800167a:	4620      	mov	r0, r4
 800167c:	2d00      	cmp	r5, #0
 800167e:	d0f6      	beq.n	800166e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001680:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001682:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001684:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8001686:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001688:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800168a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800168c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800168e:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001690:	bf28      	it	cs
 8001692:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8001694:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001696:	bf28      	it	cs
 8001698:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800169a:	69e3      	ldr	r3, [r4, #28]
 800169c:	b10b      	cbz	r3, 80016a2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800169e:	4620      	mov	r0, r4
 80016a0:	4798      	blx	r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80016a8:	4628      	mov	r0, r5
}
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	f385 8811 	msr	BASEPRI, r5
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
 80016b2:	bf00      	nop
	...

080016c0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80016c0:	300c      	adds	r0, #12
 80016c2:	f7ff bfcd 	b.w	8001660 <iqGetTimeout>
 80016c6:	bf00      	nop
	...

080016d0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80016d0:	300c      	adds	r0, #12
 80016d2:	f04f 31ff 	mov.w	r1, #4294967295
 80016d6:	f7ff bfc3 	b.w	8001660 <iqGetTimeout>
 80016da:	bf00      	nop
 80016dc:	0000      	movs	r0, r0
	...

080016e0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 80016e0:	b508      	push	{r3, lr}
 80016e2:	4601      	mov	r1, r0
 80016e4:	2320      	movs	r3, #32
 80016e6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80016ea:	2008      	movs	r0, #8
 80016ec:	f7ff fed8 	bl	80014a0 <chSchGoSleepTimeoutS>
 80016f0:	2300      	movs	r3, #0
 80016f2:	f383 8811 	msr	BASEPRI, r3
}
 80016f6:	bd08      	pop	{r3, pc}
	...

08001700 <Thd1>:
/*===========================================================================*/
/* Generic code.                                                             */
/*===========================================================================*/

static THD_WORKING_AREA(waThd1, 256);
static THD_FUNCTION(Thd1, arg) {
 8001700:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <Thd1+0x20>)
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <Thd1+0x24>)
 8001706:	699b      	ldr	r3, [r3, #24]

  (void) arg;
  chRegSetThreadName("Led handler");
  while(TRUE) {
    palTogglePad(GPIOA, GPIOA_LED_GREEN);
 8001708:	4c07      	ldr	r4, [pc, #28]	; (8001728 <Thd1+0x28>)
 800170a:	619a      	str	r2, [r3, #24]
 800170c:	6963      	ldr	r3, [r4, #20]
 800170e:	f083 0320 	eor.w	r3, r3, #32
 8001712:	6163      	str	r3, [r4, #20]
    chThdSleepMilliseconds(250);
 8001714:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001718:	f7ff ffe2 	bl	80016e0 <chThdSleep>
 800171c:	e7f6      	b.n	800170c <Thd1+0xc>
 800171e:	bf00      	nop
 8001720:	200008b0 	.word	0x200008b0
 8001724:	08002f74 	.word	0x08002f74
 8001728:	40020000 	.word	0x40020000
 800172c:	00000000 	.word	0x00000000

08001730 <chprintf.constprop.0>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001730:	b40e      	push	{r1, r2, r3}
 8001732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001736:	b092      	sub	sp, #72	; 0x48
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001738:	ab1c      	add	r3, sp, #112	; 0x70
  int n = 0;
 800173a:	f04f 0b00 	mov.w	fp, #0
    c = *fmt++;
 800173e:	f04f 084c 	mov.w	r8, #76	; 0x4c
 8001742:	4c93      	ldr	r4, [pc, #588]	; (8001990 <chprintf.constprop.0+0x260>)
  va_start(ap, fmt);
 8001744:	930b      	str	r3, [sp, #44]	; 0x2c
 8001746:	46da      	mov	sl, fp
 8001748:	4606      	mov	r6, r0
 800174a:	469b      	mov	fp, r3
 800174c:	46c1      	mov	r9, r8
      streamPut(chp, (uint8_t)c);
 800174e:	6833      	ldr	r3, [r6, #0]
 8001750:	4649      	mov	r1, r9
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4630      	mov	r0, r6
 8001756:	4798      	blx	r3
 8001758:	f894 9000 	ldrb.w	r9, [r4]
      n++;
 800175c:	4627      	mov	r7, r4
 800175e:	f10a 0a01 	add.w	sl, sl, #1
 8001762:	f104 0801 	add.w	r8, r4, #1
    if (c == 0)
 8001766:	f1b9 0f00 	cmp.w	r9, #0
 800176a:	d004      	beq.n	8001776 <chprintf.constprop.0+0x46>
    if (c != '%') {
 800176c:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
 8001770:	d007      	beq.n	8001782 <chprintf.constprop.0+0x52>
 8001772:	4644      	mov	r4, r8
 8001774:	e7eb      	b.n	800174e <chprintf.constprop.0+0x1e>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001776:	4650      	mov	r0, sl
 8001778:	b012      	add	sp, #72	; 0x48
 800177a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800177e:	b003      	add	sp, #12
 8001780:	4770      	bx	lr
    if (*fmt == '-') {
 8001782:	787a      	ldrb	r2, [r7, #1]
 8001784:	2a2d      	cmp	r2, #45	; 0x2d
 8001786:	bf05      	ittet	eq
 8001788:	78ba      	ldrbeq	r2, [r7, #2]
      left_align = TRUE;
 800178a:	2301      	moveq	r3, #1
    left_align = FALSE;
 800178c:	2300      	movne	r3, #0
      fmt++;
 800178e:	f107 0802 	addeq.w	r8, r7, #2
    if (*fmt == '0') {
 8001792:	2a30      	cmp	r2, #48	; 0x30
    left_align = FALSE;
 8001794:	9302      	str	r3, [sp, #8]
    if (*fmt == '0') {
 8001796:	f000 8215 	beq.w	8001bc4 <chprintf.constprop.0+0x494>
    filler = ' ';
 800179a:	2320      	movs	r3, #32
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	f108 0801 	add.w	r8, r8, #1
    width = 0;
 80017a2:	2500      	movs	r5, #0
 80017a4:	e007      	b.n	80017b6 <chprintf.constprop.0+0x86>
        c = va_arg(ap, int);
 80017a6:	f89b 3000 	ldrb.w	r3, [fp]
 80017aa:	f10b 0b04 	add.w	fp, fp, #4
 80017ae:	f818 2b01 	ldrb.w	r2, [r8], #1
      width = width * 10 + c;
 80017b2:	eb03 0541 	add.w	r5, r3, r1, lsl #1
      if (c >= '0' && c <= '9')
 80017b6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b09      	cmp	r3, #9
      c = *fmt++;
 80017be:	4647      	mov	r7, r8
      width = width * 10 + c;
 80017c0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
      if (c >= '0' && c <= '9')
 80017c4:	d9f3      	bls.n	80017ae <chprintf.constprop.0+0x7e>
      else if (c == '*')
 80017c6:	2a2a      	cmp	r2, #42	; 0x2a
 80017c8:	d0ed      	beq.n	80017a6 <chprintf.constprop.0+0x76>
    if (c == '.') {
 80017ca:	2a2e      	cmp	r2, #46	; 0x2e
    precision = 0;
 80017cc:	f04f 0300 	mov.w	r3, #0
    if (c == '.') {
 80017d0:	d04b      	beq.n	800186a <chprintf.constprop.0+0x13a>
 80017d2:	46b8      	mov	r8, r7
    if (c == 'l' || c == 'L') {
 80017d4:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 80017d8:	294c      	cmp	r1, #76	; 0x4c
 80017da:	f818 9b01 	ldrb.w	r9, [r8], #1
 80017de:	d050      	beq.n	8001882 <chprintf.constprop.0+0x152>
      is_long = (c >= 'A') && (c <= 'Z');
 80017e0:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    switch (c) {
 80017e4:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 80017e8:	b2c0      	uxtb	r0, r0
    switch (c) {
 80017ea:	2934      	cmp	r1, #52	; 0x34
 80017ec:	f200 81d7 	bhi.w	8001b9e <chprintf.constprop.0+0x46e>
 80017f0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80017f4:	01d5021c 	.word	0x01d5021c
 80017f8:	01d501d5 	.word	0x01d501d5
 80017fc:	021c01d5 	.word	0x021c01d5
 8001800:	01d501d5 	.word	0x01d501d5
 8001804:	01d501d5 	.word	0x01d501d5
 8001808:	01d201d5 	.word	0x01d201d5
 800180c:	01d501d5 	.word	0x01d501d5
 8001810:	01d501d5 	.word	0x01d501d5
 8001814:	01cf01d5 	.word	0x01cf01d5
 8001818:	01d501d5 	.word	0x01d501d5
 800181c:	01d5008c 	.word	0x01d5008c
 8001820:	01d501d5 	.word	0x01d501d5
 8001824:	01d501d5 	.word	0x01d501d5
 8001828:	01d501d5 	.word	0x01d501d5
 800182c:	01d501d5 	.word	0x01d501d5
 8001830:	010301d5 	.word	0x010301d5
 8001834:	01d5021c 	.word	0x01d5021c
 8001838:	01d50131 	.word	0x01d50131
 800183c:	021c01d5 	.word	0x021c01d5
 8001840:	01d501d5 	.word	0x01d501d5
 8001844:	01d501d5 	.word	0x01d501d5
 8001848:	01d201d5 	.word	0x01d201d5
 800184c:	01d501d5 	.word	0x01d501d5
 8001850:	011101d5 	.word	0x011101d5
 8001854:	01cf01d5 	.word	0x01cf01d5
 8001858:	01d501d5 	.word	0x01d501d5
 800185c:	008c      	.short	0x008c
          c = va_arg(ap, int);
 800185e:	f89b 1000 	ldrb.w	r1, [fp]
 8001862:	f10b 0b04 	add.w	fp, fp, #4
        precision += c;
 8001866:	eb01 0340 	add.w	r3, r1, r0, lsl #1
        c = *fmt++;
 800186a:	f817 2b01 	ldrb.w	r2, [r7], #1
        if (c >= '0' && c <= '9')
 800186e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8001872:	b2c9      	uxtb	r1, r1
 8001874:	2909      	cmp	r1, #9
        precision *= 10;
 8001876:	eb03 0083 	add.w	r0, r3, r3, lsl #2
        if (c >= '0' && c <= '9')
 800187a:	d9f4      	bls.n	8001866 <chprintf.constprop.0+0x136>
        else if (c == '*')
 800187c:	2a2a      	cmp	r2, #42	; 0x2a
 800187e:	d0ee      	beq.n	800185e <chprintf.constprop.0+0x12e>
 8001880:	e7a7      	b.n	80017d2 <chprintf.constprop.0+0xa2>
      if (*fmt)
 8001882:	f1b9 0f00 	cmp.w	r9, #0
 8001886:	d005      	beq.n	8001894 <chprintf.constprop.0+0x164>
 8001888:	464a      	mov	r2, r9
 800188a:	f897 9001 	ldrb.w	r9, [r7, #1]
        c = *fmt++;
 800188e:	4647      	mov	r7, r8
 8001890:	f108 0801 	add.w	r8, r8, #1
    switch (c) {
 8001894:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8001898:	2934      	cmp	r1, #52	; 0x34
 800189a:	f200 8180 	bhi.w	8001b9e <chprintf.constprop.0+0x46e>
 800189e:	e8df f011 	tbh	[pc, r1, lsl #1]
 80018a2:	0198      	.short	0x0198
 80018a4:	017e017e 	.word	0x017e017e
 80018a8:	017e017e 	.word	0x017e017e
 80018ac:	017e0198 	.word	0x017e0198
 80018b0:	017e017e 	.word	0x017e017e
 80018b4:	017e017e 	.word	0x017e017e
 80018b8:	017e017b 	.word	0x017e017b
 80018bc:	017e017e 	.word	0x017e017e
 80018c0:	017e017e 	.word	0x017e017e
 80018c4:	017e0178 	.word	0x017e0178
 80018c8:	0035017e 	.word	0x0035017e
 80018cc:	017e017e 	.word	0x017e017e
 80018d0:	017e017e 	.word	0x017e017e
 80018d4:	017e017e 	.word	0x017e017e
 80018d8:	017e017e 	.word	0x017e017e
 80018dc:	017e017e 	.word	0x017e017e
 80018e0:	019800ac 	.word	0x019800ac
 80018e4:	00da017e 	.word	0x00da017e
 80018e8:	017e017e 	.word	0x017e017e
 80018ec:	017e0198 	.word	0x017e0198
 80018f0:	017e017e 	.word	0x017e017e
 80018f4:	017e017e 	.word	0x017e017e
 80018f8:	017e017b 	.word	0x017e017b
 80018fc:	017e017e 	.word	0x017e017e
 8001900:	017e00ba 	.word	0x017e00ba
 8001904:	017e0178 	.word	0x017e0178
 8001908:	0035017e 	.word	0x0035017e
 800190c:	f04f 0c10 	mov.w	ip, #16
  q = p + MAX_FILLER;
 8001910:	f10d 0e3b 	add.w	lr, sp, #59	; 0x3b
 8001914:	4671      	mov	r1, lr
 8001916:	f85b 2b04 	ldr.w	r2, [fp], #4
 800191a:	e000      	b.n	800191e <chprintf.constprop.0+0x1ee>
  } while ((ll /= radix) != 0);
 800191c:	4601      	mov	r1, r0
    i = (int)(l % radix);
 800191e:	fbb2 f4fc 	udiv	r4, r2, ip
 8001922:	fb0c 2214 	mls	r2, ip, r4, r2
    i += '0';
 8001926:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 800192a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800192c:	bfc8      	it	gt
 800192e:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f801 3c01 	strb.w	r3, [r1, #-1]
 8001938:	1e48      	subs	r0, r1, #1
    l /= radix;
 800193a:	4622      	mov	r2, r4
  } while ((ll /= radix) != 0);
 800193c:	2c00      	cmp	r4, #0
 800193e:	d1ed      	bne.n	800191c <chprintf.constprop.0+0x1ec>
  i = (int)(p + MAX_FILLER - q);
 8001940:	ebae 0e00 	sub.w	lr, lr, r0
 8001944:	aa0c      	add	r2, sp, #48	; 0x30
 8001946:	9203      	str	r2, [sp, #12]
 8001948:	4470      	add	r0, lr
 800194a:	e001      	b.n	8001950 <chprintf.constprop.0+0x220>
 800194c:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 8001950:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8001954:	4281      	cmp	r1, r0
 8001956:	d1f9      	bne.n	800194c <chprintf.constprop.0+0x21c>
 8001958:	f10e 33ff 	add.w	r3, lr, #4294967295
    s = tmpbuf;
 800195c:	9c03      	ldr	r4, [sp, #12]
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	eba5 050e 	sub.w	r5, r5, lr
    if ((width -= i) < 0)
 8001964:	2d00      	cmp	r5, #0
 8001966:	f2c0 8127 	blt.w	8001bb8 <chprintf.constprop.0+0x488>
    if (left_align == FALSE)
 800196a:	9b02      	ldr	r3, [sp, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f040 811e 	bne.w	8001bae <chprintf.constprop.0+0x47e>
      width = -width;
 8001972:	426b      	negs	r3, r5
    if (width < 0) {
 8001974:	2d00      	cmp	r5, #0
 8001976:	f000 8119 	beq.w	8001bac <chprintf.constprop.0+0x47c>
      if (*s == '-' && filler == '0') {
 800197a:	7821      	ldrb	r1, [r4, #0]
 800197c:	6832      	ldr	r2, [r6, #0]
 800197e:	292d      	cmp	r1, #45	; 0x2d
 8001980:	68d2      	ldr	r2, [r2, #12]
 8001982:	f000 816f 	beq.w	8001c64 <chprintf.constprop.0+0x534>
 8001986:	9402      	str	r4, [sp, #8]
 8001988:	9503      	str	r5, [sp, #12]
 800198a:	461c      	mov	r4, r3
 800198c:	9d01      	ldr	r5, [sp, #4]
 800198e:	e003      	b.n	8001998 <chprintf.constprop.0+0x268>
 8001990:	0800306d 	.word	0x0800306d
 8001994:	6832      	ldr	r2, [r6, #0]
 8001996:	68d2      	ldr	r2, [r2, #12]
        streamPut(chp, (uint8_t)filler);
 8001998:	4629      	mov	r1, r5
 800199a:	4630      	mov	r0, r6
 800199c:	4790      	blx	r2
      } while (++width != 0);
 800199e:	3401      	adds	r4, #1
 80019a0:	d1f8      	bne.n	8001994 <chprintf.constprop.0+0x264>
 80019a2:	4623      	mov	r3, r4
    while (--i >= 0) {
 80019a4:	9a00      	ldr	r2, [sp, #0]
 80019a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	44aa      	add	sl, r5
 80019ae:	f6ff aeda 	blt.w	8001766 <chprintf.constprop.0+0x36>
 80019b2:	461d      	mov	r5, r3
      width = -width;
 80019b4:	9b00      	ldr	r3, [sp, #0]
 80019b6:	9502      	str	r5, [sp, #8]
 80019b8:	4625      	mov	r5, r4
 80019ba:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 80019bc:	6832      	ldr	r2, [r6, #0]
 80019be:	f815 1b01 	ldrb.w	r1, [r5], #1
 80019c2:	68d2      	ldr	r2, [r2, #12]
    while (--i >= 0) {
 80019c4:	3c01      	subs	r4, #1
      streamPut(chp, (uint8_t)*s++);
 80019c6:	4630      	mov	r0, r6
 80019c8:	4790      	blx	r2
    while (--i >= 0) {
 80019ca:	1c60      	adds	r0, r4, #1
 80019cc:	d1f6      	bne.n	80019bc <chprintf.constprop.0+0x28c>
 80019ce:	9b00      	ldr	r3, [sp, #0]
 80019d0:	9d02      	ldr	r5, [sp, #8]
 80019d2:	f10a 0a01 	add.w	sl, sl, #1
 80019d6:	4453      	add	r3, sl
 80019d8:	469a      	mov	sl, r3
    while (width) {
 80019da:	2d00      	cmp	r5, #0
 80019dc:	f43f aec3 	beq.w	8001766 <chprintf.constprop.0+0x36>
 80019e0:	462c      	mov	r4, r5
 80019e2:	9500      	str	r5, [sp, #0]
 80019e4:	9d01      	ldr	r5, [sp, #4]
      streamPut(chp, (uint8_t)filler);
 80019e6:	6832      	ldr	r2, [r6, #0]
 80019e8:	4629      	mov	r1, r5
 80019ea:	68d2      	ldr	r2, [r2, #12]
 80019ec:	4630      	mov	r0, r6
 80019ee:	4790      	blx	r2
    while (width) {
 80019f0:	3c01      	subs	r4, #1
 80019f2:	d1f8      	bne.n	80019e6 <chprintf.constprop.0+0x2b6>
 80019f4:	9d00      	ldr	r5, [sp, #0]
 80019f6:	44aa      	add	sl, r5
 80019f8:	e6b5      	b.n	8001766 <chprintf.constprop.0+0x36>
      *p++ = va_arg(ap, int);
 80019fa:	ac12      	add	r4, sp, #72	; 0x48
 80019fc:	f8db 3000 	ldr.w	r3, [fp]
 8001a00:	f804 3d18 	strb.w	r3, [r4, #-24]!
      filler = ' ';
 8001a04:	f04f 0c00 	mov.w	ip, #0
 8001a08:	2320      	movs	r3, #32
 8001a0a:	3d01      	subs	r5, #1
      *p++ = va_arg(ap, int);
 8001a0c:	f10b 0b04 	add.w	fp, fp, #4
      filler = ' ';
 8001a10:	e9cd c300 	strd	ip, r3, [sp]
 8001a14:	e7a6      	b.n	8001964 <chprintf.constprop.0+0x234>
      if ((s = va_arg(ap, char *)) == 0)
 8001a16:	f8db 4000 	ldr.w	r4, [fp]
 8001a1a:	f10b 0b04 	add.w	fp, fp, #4
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	f000 8119 	beq.w	8001c56 <chprintf.constprop.0+0x526>
 8001a24:	7822      	ldrb	r2, [r4, #0]
 8001a26:	4620      	mov	r0, r4
      if (precision == 0)
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 8130 	bne.w	8001c8e <chprintf.constprop.0+0x55e>
      for (p = s; *p && (--precision >= 0); p++)
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	f000 8146 	beq.w	8001cc0 <chprintf.constprop.0+0x590>
 8001a34:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8001a38:	4622      	mov	r2, r4
 8001a3a:	e001      	b.n	8001a40 <chprintf.constprop.0+0x310>
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	d403      	bmi.n	8001a48 <chprintf.constprop.0+0x318>
 8001a40:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001a44:	2900      	cmp	r1, #0
 8001a46:	d1f9      	bne.n	8001a3c <chprintf.constprop.0+0x30c>
 8001a48:	1a12      	subs	r2, r2, r0
 8001a4a:	1e53      	subs	r3, r2, #1
 8001a4c:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8001a4e:	2320      	movs	r3, #32
 8001a50:	1aad      	subs	r5, r5, r2
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	e786      	b.n	8001964 <chprintf.constprop.0+0x234>
      f = (float) va_arg(ap, double);
 8001a56:	f10b 0b07 	add.w	fp, fp, #7
 8001a5a:	f02b 0b07 	bic.w	fp, fp, #7
 8001a5e:	e9db 0100 	ldrd	r0, r1, [fp]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	f7ff f836 	bl	8000ad4 <__aeabi_d2f>
      if (f < 0) {
 8001a68:	2100      	movs	r1, #0
      f = (float) va_arg(ap, double);
 8001a6a:	9008      	str	r0, [sp, #32]
      if (f < 0) {
 8001a6c:	f7ff f9de 	bl	8000e2c <__aeabi_fcmplt>
      f = (float) va_arg(ap, double);
 8001a70:	f10b 0b08 	add.w	fp, fp, #8
      if (f < 0) {
 8001a74:	9b00      	ldr	r3, [sp, #0]
 8001a76:	2800      	cmp	r0, #0
 8001a78:	f040 80e0 	bne.w	8001c3c <chprintf.constprop.0+0x50c>
    p = tmpbuf;
 8001a7c:	aa0c      	add	r2, sp, #48	; 0x30
 8001a7e:	9203      	str	r2, [sp, #12]
 8001a80:	9200      	str	r2, [sp, #0]
      p = ftoa(p, f, precision);
 8001a82:	9808      	ldr	r0, [sp, #32]
 8001a84:	9306      	str	r3, [sp, #24]
 8001a86:	f7fe fd93 	bl	80005b0 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8001a8a:	9b06      	ldr	r3, [sp, #24]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	2b08      	cmp	r3, #8
      p = ftoa(p, f, precision);
 8001a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8001a94:	f200 8103 	bhi.w	8001c9e <chprintf.constprop.0+0x56e>
 8001a98:	4a8f      	ldr	r2, [pc, #572]	; (8001cd8 <chprintf.constprop.0+0x5a8>)
 8001a9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7fe fd64 	bl	800056c <__aeabi_ui2d>
 8001aa4:	4b8d      	ldr	r3, [pc, #564]	; (8001cdc <chprintf.constprop.0+0x5ac>)
 8001aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001aaa:	fba3 3404 	umull	r3, r4, r3, r4
 8001aae:	08e3      	lsrs	r3, r4, #3
 8001ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ab2:	461c      	mov	r4, r3
  l = (long)num;
 8001ab4:	9808      	ldr	r0, [sp, #32]
 8001ab6:	f7ff f9e1 	bl	8000e7c <__aeabi_f2iz>
  q = p + MAX_FILLER;
 8001aba:	9b00      	ldr	r3, [sp, #0]
  l = (long)num;
 8001abc:	9008      	str	r0, [sp, #32]
  q = p + MAX_FILLER;
 8001abe:	f103 0e0b 	add.w	lr, r3, #11
  l = (long)num;
 8001ac2:	4601      	mov	r1, r0
  q = p + MAX_FILLER;
 8001ac4:	4672      	mov	r2, lr
    i = (int)(l % radix);
 8001ac6:	4b85      	ldr	r3, [pc, #532]	; (8001cdc <chprintf.constprop.0+0x5ac>)
 8001ac8:	fba3 0301 	umull	r0, r3, r3, r1
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	eba1 034c 	sub.w	r3, r1, ip, lsl #1
    i += '0';
 8001ad8:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f802 3d01 	strb.w	r3, [r2, #-1]!
  } while ((ll /= radix) != 0);
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d1ef      	bne.n	8001ac6 <chprintf.constprop.0+0x396>
 8001ae6:	9900      	ldr	r1, [sp, #0]
  i = (int)(p + MAX_FILLER - q);
 8001ae8:	ebae 0e02 	sub.w	lr, lr, r2
 8001aec:	4608      	mov	r0, r1
 8001aee:	4470      	add	r0, lr
 8001af0:	e001      	b.n	8001af6 <chprintf.constprop.0+0x3c6>
 8001af2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8001af6:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8001afa:	4281      	cmp	r1, r0
 8001afc:	d1f9      	bne.n	8001af2 <chprintf.constprop.0+0x3c2>
 8001afe:	9a00      	ldr	r2, [sp, #0]
  l = (long)((num - l) * precision);
 8001b00:	9808      	ldr	r0, [sp, #32]
 8001b02:	f10e 3eff 	add.w	lr, lr, #4294967295
  *p++ = '.';
 8001b06:	232e      	movs	r3, #46	; 0x2e
 8001b08:	4472      	add	r2, lr
 8001b0a:	700b      	strb	r3, [r1, #0]
 8001b0c:	9208      	str	r2, [sp, #32]
  l = (long)((num - l) * precision);
 8001b0e:	f7fe fd3d 	bl	800058c <__aeabi_i2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001b1a:	f7fe fbe9 	bl	80002f0 <__aeabi_dsub>
 8001b1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001b22:	f7fe fd9d 	bl	8000660 <__aeabi_dmul>
 8001b26:	f7fe ffad 	bl	8000a84 <__aeabi_d2iz>
  q = p + MAX_FILLER;
 8001b2a:	9b08      	ldr	r3, [sp, #32]
    ll = num;
 8001b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  q = p + MAX_FILLER;
 8001b2e:	f103 0c0d 	add.w	ip, r3, #13
  *p++ = '.';
 8001b32:	3302      	adds	r3, #2
    ll = num;
 8001b34:	2a00      	cmp	r2, #0
 8001b36:	bf08      	it	eq
 8001b38:	4604      	moveq	r4, r0
  *p++ = '.';
 8001b3a:	9300      	str	r3, [sp, #0]
  q = p + MAX_FILLER;
 8001b3c:	4662      	mov	r2, ip
    i = (int)(l % radix);
 8001b3e:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <chprintf.constprop.0+0x5ac>)
 8001b40:	fba3 1300 	umull	r1, r3, r3, r0
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	eba0 034e 	sub.w	r3, r0, lr, lsl #1
  } while ((ll /= radix) != 0);
 8001b50:	4862      	ldr	r0, [pc, #392]	; (8001cdc <chprintf.constprop.0+0x5ac>)
    i += '0';
 8001b52:	3330      	adds	r3, #48	; 0x30
  } while ((ll /= radix) != 0);
 8001b54:	fba0 0404 	umull	r0, r4, r0, r4
    *--q = i;
 8001b58:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8001b5a:	08e4      	lsrs	r4, r4, #3
    *--q = i;
 8001b5c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8001b60:	4608      	mov	r0, r1
  } while ((ll /= radix) != 0);
 8001b62:	d1ec      	bne.n	8001b3e <chprintf.constprop.0+0x40e>
  i = (int)(p + MAX_FILLER - q);
 8001b64:	ebac 0c02 	sub.w	ip, ip, r2
 8001b68:	9908      	ldr	r1, [sp, #32]
 8001b6a:	f10c 0002 	add.w	r0, ip, #2
 8001b6e:	4401      	add	r1, r0
 8001b70:	4608      	mov	r0, r1
 8001b72:	9900      	ldr	r1, [sp, #0]
 8001b74:	e001      	b.n	8001b7a <chprintf.constprop.0+0x44a>
 8001b76:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8001b7a:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8001b7e:	4281      	cmp	r1, r0
 8001b80:	d1f9      	bne.n	8001b76 <chprintf.constprop.0+0x446>
 8001b82:	9b00      	ldr	r3, [sp, #0]
 8001b84:	9c03      	ldr	r4, [sp, #12]
 8001b86:	4463      	add	r3, ip
 8001b88:	1b1b      	subs	r3, r3, r4
 8001b8a:	1aed      	subs	r5, r5, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	e6e8      	b.n	8001964 <chprintf.constprop.0+0x234>
    case 'U':
 8001b92:	f04f 0c0a 	mov.w	ip, #10
 8001b96:	e6bb      	b.n	8001910 <chprintf.constprop.0+0x1e0>
    case 'O':
 8001b98:	f04f 0c08 	mov.w	ip, #8
 8001b9c:	e6b8      	b.n	8001910 <chprintf.constprop.0+0x1e0>
      *p++ = c;
 8001b9e:	ac12      	add	r4, sp, #72	; 0x48
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	3d01      	subs	r5, #1
 8001ba4:	f804 2d18 	strb.w	r2, [r4, #-24]!
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	e6db      	b.n	8001964 <chprintf.constprop.0+0x234>
      width = -width;
 8001bac:	461d      	mov	r5, r3
    while (--i >= 0) {
 8001bae:	9b00      	ldr	r3, [sp, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f6bf aeff 	bge.w	80019b4 <chprintf.constprop.0+0x284>
 8001bb6:	e710      	b.n	80019da <chprintf.constprop.0+0x2aa>
 8001bb8:	9b00      	ldr	r3, [sp, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f6ff add3 	blt.w	8001766 <chprintf.constprop.0+0x36>
      width = 0;
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	e6f7      	b.n	80019b4 <chprintf.constprop.0+0x284>
      filler = '0';
 8001bc4:	2330      	movs	r3, #48	; 0x30
 8001bc6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8001bca:	9301      	str	r3, [sp, #4]
      fmt++;
 8001bcc:	f108 0801 	add.w	r8, r8, #1
 8001bd0:	e5e5      	b.n	800179e <chprintf.constprop.0+0x6e>
 8001bd2:	f10b 0304 	add.w	r3, fp, #4
        l = va_arg(ap, long);
 8001bd6:	f8db 2000 	ldr.w	r2, [fp]
 8001bda:	469b      	mov	fp, r3
      if (l < 0) {
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	db66      	blt.n	8001cae <chprintf.constprop.0+0x57e>
    p = tmpbuf;
 8001be0:	ab0c      	add	r3, sp, #48	; 0x30
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	4618      	mov	r0, r3
  q = p + MAX_FILLER;
 8001be6:	f100 0e0b 	add.w	lr, r0, #11
 8001bea:	4671      	mov	r1, lr
    i = (int)(l % radix);
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <chprintf.constprop.0+0x5ac>)
 8001bee:	fba3 4302 	umull	r4, r3, r3, r2
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8001bf8:	461c      	mov	r4, r3
 8001bfa:	eba2 034c 	sub.w	r3, r2, ip, lsl #1
    i += '0';
 8001bfe:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8001c06:	4622      	mov	r2, r4
 8001c08:	2c00      	cmp	r4, #0
 8001c0a:	d1ef      	bne.n	8001bec <chprintf.constprop.0+0x4bc>
  i = (int)(p + MAX_FILLER - q);
 8001c0c:	ebae 0201 	sub.w	r2, lr, r1
 8001c10:	4402      	add	r2, r0
 8001c12:	e001      	b.n	8001c18 <chprintf.constprop.0+0x4e8>
 8001c14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 8001c18:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8001c1c:	4290      	cmp	r0, r2
 8001c1e:	d1f9      	bne.n	8001c14 <chprintf.constprop.0+0x4e4>
 8001c20:	9c03      	ldr	r4, [sp, #12]
 8001c22:	1b00      	subs	r0, r0, r4
 8001c24:	1e43      	subs	r3, r0, #1
 8001c26:	1a2d      	subs	r5, r5, r0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	e69b      	b.n	8001964 <chprintf.constprop.0+0x234>
 8001c2c:	465b      	mov	r3, fp
      if (is_long)
 8001c2e:	2819      	cmp	r0, #25
 8001c30:	f853 2b04 	ldr.w	r2, [r3], #4
        l = va_arg(ap, int);
 8001c34:	bf88      	it	hi
 8001c36:	469b      	movhi	fp, r3
      if (is_long)
 8001c38:	d8d0      	bhi.n	8001bdc <chprintf.constprop.0+0x4ac>
 8001c3a:	e7cc      	b.n	8001bd6 <chprintf.constprop.0+0x4a6>
        f = -f;
 8001c3c:	9a08      	ldr	r2, [sp, #32]
 8001c3e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
        *p++ = '-';
 8001c42:	222d      	movs	r2, #45	; 0x2d
 8001c44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8001c48:	f10d 0231 	add.w	r2, sp, #49	; 0x31
 8001c4c:	9200      	str	r2, [sp, #0]
 8001c4e:	aa0c      	add	r2, sp, #48	; 0x30
        f = -f;
 8001c50:	9108      	str	r1, [sp, #32]
 8001c52:	9203      	str	r2, [sp, #12]
 8001c54:	e715      	b.n	8001a82 <chprintf.constprop.0+0x352>
 8001c56:	4822      	ldr	r0, [pc, #136]	; (8001ce0 <chprintf.constprop.0+0x5b0>)
      if (precision == 0)
 8001c58:	4604      	mov	r4, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f43f aeea 	beq.w	8001a34 <chprintf.constprop.0+0x304>
      for (p = s; *p && (--precision >= 0); p++)
 8001c60:	3b01      	subs	r3, #1
 8001c62:	e6e9      	b.n	8001a38 <chprintf.constprop.0+0x308>
      if (*s == '-' && filler == '0') {
 8001c64:	9801      	ldr	r0, [sp, #4]
 8001c66:	2830      	cmp	r0, #48	; 0x30
 8001c68:	f47f ae8d 	bne.w	8001986 <chprintf.constprop.0+0x256>
        streamPut(chp, (uint8_t)*s++);
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	9303      	str	r3, [sp, #12]
 8001c70:	4790      	blx	r2
 8001c72:	9b00      	ldr	r3, [sp, #0]
 8001c74:	6832      	ldr	r2, [r6, #0]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	9b03      	ldr	r3, [sp, #12]
 8001c7c:	68d2      	ldr	r2, [r2, #12]
 8001c7e:	9503      	str	r5, [sp, #12]
 8001c80:	3401      	adds	r4, #1
 8001c82:	9402      	str	r4, [sp, #8]
 8001c84:	f10a 0a01 	add.w	sl, sl, #1
 8001c88:	461c      	mov	r4, r3
 8001c8a:	9d01      	ldr	r5, [sp, #4]
 8001c8c:	e684      	b.n	8001998 <chprintf.constprop.0+0x268>
      for (p = s; *p && (--precision >= 0); p++)
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	d1e6      	bne.n	8001c60 <chprintf.constprop.0+0x530>
      filler = ' ';
 8001c92:	f04f 32ff 	mov.w	r2, #4294967295
 8001c96:	2320      	movs	r3, #32
 8001c98:	e9cd 2300 	strd	r2, r3, [sp]
 8001c9c:	e662      	b.n	8001964 <chprintf.constprop.0+0x234>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8001c9e:	a30c      	add	r3, pc, #48	; (adr r3, 8001cd0 <chprintf.constprop.0+0x5a0>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	4c0f      	ldr	r4, [pc, #60]	; (8001ce4 <chprintf.constprop.0+0x5b4>)
 8001ca6:	9409      	str	r4, [sp, #36]	; 0x24
 8001ca8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001cac:	e702      	b.n	8001ab4 <chprintf.constprop.0+0x384>
        *p++ = '-';
 8001cae:	232d      	movs	r3, #45	; 0x2d
 8001cb0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8001cb4:	ab0c      	add	r3, sp, #48	; 0x30
        l = -l;
 8001cb6:	4252      	negs	r2, r2
        *p++ = '-';
 8001cb8:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 8001cbc:	9303      	str	r3, [sp, #12]
 8001cbe:	e792      	b.n	8001be6 <chprintf.constprop.0+0x4b6>
      filler = ' ';
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e9cd 1300 	strd	r1, r3, [sp]
 8001cca:	e64e      	b.n	800196a <chprintf.constprop.0+0x23a>
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	41cdcd65 	.word	0x41cdcd65
 8001cd8:	080030bc 	.word	0x080030bc
 8001cdc:	cccccccd 	.word	0xcccccccd
 8001ce0:	08003080 	.word	0x08003080
 8001ce4:	05f5e100 	.word	0x05f5e100
	...

08001cf0 <Thd2>:
  }
}

static THD_WORKING_AREA(waThd2, 512);
static THD_FUNCTION(Thd2, arg) {
 8001cf0:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <Thd2+0x1b8>)
 8001cf6:	496d      	ldr	r1, [pc, #436]	; (8001eac <Thd2+0x1bc>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	6989      	ldr	r1, [r1, #24]
 8001cfc:	486c      	ldr	r0, [pc, #432]	; (8001eb0 <Thd2+0x1c0>)
 8001cfe:	6188      	str	r0, [r1, #24]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	f022 0203 	bic.w	r2, r2, #3
 8001d0c:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	f022 0203 	bic.w	r2, r2, #3
 8001d14:	60da      	str	r2, [r3, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f042 0203 	orr.w	r2, r2, #3
 8001d1c:	601a      	str	r2, [r3, #0]
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	f022 020f 	bic.w	r2, r2, #15
 8001d24:	621a      	str	r2, [r3, #32]
 8001d26:	2320      	movs	r3, #32
 8001d28:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8001d2c:	4d61      	ldr	r5, [pc, #388]	; (8001eb4 <Thd2+0x1c4>)
  if (adcp->state == ADC_STOP) {
 8001d2e:	782b      	ldrb	r3, [r5, #0]
 8001d30:	2200      	movs	r2, #0
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	606a      	str	r2, [r5, #4]
 8001d36:	d065      	beq.n	8001e04 <Thd2+0x114>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	702b      	strb	r3, [r5, #0]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f383 8811 	msr	BASEPRI, r3
 8001d42:	4e5d      	ldr	r6, [pc, #372]	; (8001eb8 <Thd2+0x1c8>)
 8001d44:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8001eec <Thd2+0x1fc>
 8001d48:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8001ef0 <Thd2+0x200>
 8001d4c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001ef4 <Thd2+0x204>
 8001d50:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8001ef8 <Thd2+0x208>
 8001d54:	f106 0414 	add.w	r4, r6, #20
 8001d58:	2320      	movs	r3, #32
 8001d5a:	f383 8811 	msr	BASEPRI, r3
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8001d5e:	2003      	movs	r0, #3
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8001d60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d62:	7028      	strb	r0, [r5, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
  mode = adcp->dmamode;
 8001d66:	6b29      	ldr	r1, [r5, #48]	; 0x30
  adcp->grpp     = grpp;
 8001d68:	f8c5 b010 	str.w	fp, [r5, #16]
  adcp->depth    = depth;
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	e9c5 6302 	strd	r6, r3, [r5, #8]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8001d72:	60d6      	str	r6, [r2, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8001d74:	6053      	str	r3, [r2, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 8001d76:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
 8001d78:	6811      	ldr	r1, [r2, #0]
  return ch.rlist.current;
 8001d7a:	4f4c      	ldr	r7, [pc, #304]	; (8001eac <Thd2+0x1bc>)
  adcp->adc->SR    = 0;
 8001d7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d7e:	f8d7 c018 	ldr.w	ip, [r7, #24]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8001d82:	f8df e178 	ldr.w	lr, [pc, #376]	; 8001efc <Thd2+0x20c>
  dmaStreamEnable(adcp->dmastp);
 8001d86:	f041 0101 	orr.w	r1, r1, #1
 8001d8a:	6011      	str	r1, [r2, #0]
  adcp->adc->SR    = 0;
 8001d8c:	2700      	movs	r7, #0
  adcp->adc->SMPR2 = grpp->smpr2;
 8001d8e:	2206      	movs	r2, #6
  adcp->adc->SR    = 0;
 8001d90:	601f      	str	r7, [r3, #0]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8001d92:	494a      	ldr	r1, [pc, #296]	; (8001ebc <Thd2+0x1cc>)
  adcp->adc->SMPR1 = grpp->smpr1;
 8001d94:	60df      	str	r7, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8001d96:	611a      	str	r2, [r3, #16]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8001d98:	f240 3203 	movw	r2, #771	; 0x303
  adcp->adc->HTR   = grpp->htr;
 8001d9c:	625f      	str	r7, [r3, #36]	; 0x24
  adcp->adc->LTR   = grpp->ltr;
 8001d9e:	629f      	str	r7, [r3, #40]	; 0x28
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8001da0:	62df      	str	r7, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 8001da2:	631f      	str	r7, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8001da4:	635f      	str	r7, [r3, #52]	; 0x34
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8001da6:	6059      	str	r1, [r3, #4]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8001da8:	609a      	str	r2, [r3, #8]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8001daa:	f8c3 e008 	str.w	lr, [r3, #8]
  tp->u.wttrp = trp;
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <Thd2+0x1d0>)
 8001db0:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  *trp = tp;
 8001db4:	f8c5 c014 	str.w	ip, [r5, #20]
    chSchGoSleepS(newstate);
 8001db8:	f7ff fb5a 	bl	8001470 <chSchGoSleepS>
 8001dbc:	f387 8811 	msr	BASEPRI, r7
 8001dc0:	4638      	mov	r0, r7
 8001dc2:	4633      	mov	r3, r6
    /* Making mean of sampled values. Note that samples refers to OTA and OTB
       but since they we are looking for Rcm (common mode) we can make a simple
       mean */
    mean = 0;
    for (ii = 0; ii < MY_NUM_CH * MY_SAMPLING_NUMBER; ii++) {
      mean += sample_buff[ii];
 8001dc4:	f833 2b02 	ldrh.w	r2, [r3], #2
    for (ii = 0; ii < MY_NUM_CH * MY_SAMPLING_NUMBER; ii++) {
 8001dc8:	429c      	cmp	r4, r3
      mean += sample_buff[ii];
 8001dca:	4410      	add	r0, r2
    for (ii = 0; ii < MY_NUM_CH * MY_SAMPLING_NUMBER; ii++) {
 8001dcc:	d1fa      	bne.n	8001dc4 <Thd2+0xd4>
    }
    mean /= MY_NUM_CH * MY_SAMPLING_NUMBER;
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <Thd2+0x1d4>)
 8001dd0:	fba3 3000 	umull	r3, r0, r3, r0
 8001dd4:	08c0      	lsrs	r0, r0, #3
 8001dd6:	f8c9 0000 	str.w	r0, [r9]
    lastvalue = ((float)mean) * 100.0 / 4095.0;
 8001dda:	f7fe ff85 	bl	8000ce8 <__aeabi_i2f>
 8001dde:	f7fe fbe7 	bl	80005b0 <__aeabi_f2d>
 8001de2:	2200      	movs	r2, #0
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <Thd2+0x1d8>)
 8001de6:	f7fe fc3b 	bl	8000660 <__aeabi_dmul>
 8001dea:	a32d      	add	r3, pc, #180	; (adr r3, 8001ea0 <Thd2+0x1b0>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fd60 	bl	80008b4 <__aeabi_ddiv>
 8001df4:	f7fe fe6e 	bl	8000ad4 <__aeabi_d2f>
    flag = TRUE;
 8001df8:	2301      	movs	r3, #1
    lastvalue = ((float)mean) * 100.0 / 4095.0;
 8001dfa:	f8c8 0000 	str.w	r0, [r8]
    flag = TRUE;
 8001dfe:	f88a 3000 	strb.w	r3, [sl]
 8001e02:	e7a9      	b.n	8001d58 <Thd2+0x68>
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8001e04:	4931      	ldr	r1, [pc, #196]	; (8001ecc <Thd2+0x1dc>)
 8001e06:	680b      	ldr	r3, [r1, #0]
 8001e08:	04d8      	lsls	r0, r3, #19
 8001e0a:	d502      	bpl.n	8001e12 <Thd2+0x122>
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
 8001e0c:	62ea      	str	r2, [r5, #44]	; 0x2c
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	deff      	udf	#255	; 0xff
      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
        rccEnableDMA1(true);
      }
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
        rccEnableDMA2(true);
 8001e12:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <Thd2+0x1e0>)
      dma.allocated_mask  |= mask;
 8001e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e18:	600b      	str	r3, [r1, #0]
        rccEnableDMA2(true);
 8001e1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
      dma.streams[i].param = param;
 8001e1c:	668d      	str	r5, [r1, #104]	; 0x68
        rccEnableDMA2(true);
 8001e1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e22:	6313      	str	r3, [r2, #48]	; 0x30
 8001e24:	6d10      	ldr	r0, [r2, #80]	; 0x50
        rccEnableDMAMUX(true);
      }
#endif

      /* Putting the stream in a safe state.*/
      dmaStreamDisable(dmastp);
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <Thd2+0x1e4>)
        rccEnableDMA2(true);
 8001e28:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8001e2c:	6510      	str	r0, [r2, #80]	; 0x50
 8001e2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8001e30:	681a      	ldr	r2, [r3, #0]
      dma.streams[i].func  = func;
 8001e32:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <Thd2+0x1e8>)
 8001e34:	6648      	str	r0, [r1, #100]	; 0x64
      dmaStreamDisable(dmastp);
 8001e36:	f022 021f 	bic.w	r2, r2, #31
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f012 0201 	ands.w	r2, r2, #1
 8001e42:	d1fb      	bne.n	8001e3c <Thd2+0x14c>
 8001e44:	4825      	ldr	r0, [pc, #148]	; (8001edc <Thd2+0x1ec>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e46:	4926      	ldr	r1, [pc, #152]	; (8001ee0 <Thd2+0x1f0>)
 8001e48:	4c26      	ldr	r4, [pc, #152]	; (8001ee4 <Thd2+0x1f4>)
 8001e4a:	263d      	movs	r6, #61	; 0x3d
 8001e4c:	6006      	str	r6, [r0, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001e4e:	2021      	movs	r0, #33	; 0x21
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001e50:	601a      	str	r2, [r3, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001e52:	6158      	str	r0, [r3, #20]
 8001e54:	2060      	movs	r0, #96	; 0x60
 8001e56:	f881 033c 	strb.w	r0, [r1, #828]	; 0x33c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e5a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001e5e:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e62:	6048      	str	r0, [r1, #4]
      rccEnableADC1(true);
 8001e64:	491a      	ldr	r1, [pc, #104]	; (8001ed0 <Thd2+0x1e0>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001e66:	609c      	str	r4, [r3, #8]
      rccEnableADC1(true);
 8001e68:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    adcp->adc->CR1 = 0;
 8001e6a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
      rccEnableADC1(true);
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	644b      	str	r3, [r1, #68]	; 0x44
 8001e72:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	664b      	str	r3, [r1, #100]	; 0x64
 8001e7a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001e7c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
 8001e80:	4919      	ldr	r1, [pc, #100]	; (8001ee8 <Thd2+0x1f8>)
 8001e82:	62e9      	str	r1, [r5, #44]	; 0x2c
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001e84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001e8c:	2101      	movs	r1, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001e8e:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
    adcp->adc->CR1 = 0;
 8001e92:	6042      	str	r2, [r0, #4]
    adcp->adc->CR2 = 0;
 8001e94:	6082      	str	r2, [r0, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001e96:	6081      	str	r1, [r0, #8]
 8001e98:	e74e      	b.n	8001d38 <Thd2+0x48>
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	40affe00 	.word	0x40affe00
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	200008b0 	.word	0x200008b0
 8001eb0:	08002f80 	.word	0x08002f80
 8001eb4:	20000800 	.word	0x20000800
 8001eb8:	20000afc 	.word	0x20000afc
 8001ebc:	04000100 	.word	0x04000100
 8001ec0:	20000814 	.word	0x20000814
 8001ec4:	cccccccd 	.word	0xcccccccd
 8001ec8:	40590000 	.word	0x40590000
 8001ecc:	20000a6c 	.word	0x20000a6c
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40026470 	.word	0x40026470
 8001ed8:	080012d1 	.word	0x080012d1
 8001edc:	4002640c 	.word	0x4002640c
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	4001204c 	.word	0x4001204c
 8001ee8:	0800301c 	.word	0x0800301c
 8001eec:	08003090 	.word	0x08003090
 8001ef0:	20000af8 	.word	0x20000af8
 8001ef4:	20000af4 	.word	0x20000af4
 8001ef8:	20000af0 	.word	0x20000af0
 8001efc:	40000303 	.word	0x40000303

08001f00 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f04:	b085      	sub	sp, #20
 8001f06:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8001f0a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8001f0e:	f04f 0a20 	mov.w	sl, #32
 8001f12:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8001f16:	b33a      	cbz	r2, 8001f68 <oqWriteTimeout+0x68>
 8001f18:	4604      	mov	r4, r0
 8001f1a:	460f      	mov	r7, r1
 8001f1c:	4616      	mov	r6, r2
 8001f1e:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 8001f22:	68a2      	ldr	r2, [r4, #8]
 8001f24:	4296      	cmp	r6, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001f26:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8001f2a:	bf8c      	ite	hi
 8001f2c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8001f2e:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001f30:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8001f34:	45a8      	cmp	r8, r5
 8001f36:	d840      	bhi.n	8001fba <oqWriteTimeout+0xba>
  else if (n > s1) {
 8001f38:	d32b      	bcc.n	8001f92 <oqWriteTimeout+0x92>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001f3a:	462a      	mov	r2, r5
 8001f3c:	4639      	mov	r1, r7
 8001f3e:	f7fe ffc3 	bl	8000ec8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8001f42:	68e2      	ldr	r2, [r4, #12]
 8001f44:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8001f46:	68a2      	ldr	r2, [r4, #8]
 8001f48:	1b52      	subs	r2, r2, r5
 8001f4a:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8001f4c:	b19d      	cbz	r5, 8001f76 <oqWriteTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001f4e:	f1b9 0f00 	cmp.w	r9, #0
 8001f52:	d001      	beq.n	8001f58 <oqWriteTimeout+0x58>
        nfy(oqp);
 8001f54:	4620      	mov	r0, r4
 8001f56:	47c8      	blx	r9
 8001f58:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8001f5c:	1b76      	subs	r6, r6, r5
      bp += done;
 8001f5e:	442f      	add	r7, r5
 8001f60:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8001f64:	2e00      	cmp	r6, #0
 8001f66:	d1dc      	bne.n	8001f22 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8001f68:	9803      	ldr	r0, [sp, #12]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001f70:	b005      	add	sp, #20
 8001f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f76:	9902      	ldr	r1, [sp, #8]
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff fb21 	bl	80015c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	d0cf      	beq.n	8001f22 <oqWriteTimeout+0x22>
 8001f82:	9b03      	ldr	r3, [sp, #12]
 8001f84:	1b98      	subs	r0, r3, r6
 8001f86:	2300      	movs	r3, #0
 8001f88:	f383 8811 	msr	BASEPRI, r3
}
 8001f8c:	b005      	add	sp, #20
 8001f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8001f92:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001f96:	4642      	mov	r2, r8
 8001f98:	4639      	mov	r1, r7
    s2 = n - s1;
 8001f9a:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001f9c:	f7fe ff94 	bl	8000ec8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001fa0:	eb07 0108 	add.w	r1, r7, r8
 8001fa4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001fa8:	68e0      	ldr	r0, [r4, #12]
 8001faa:	4642      	mov	r2, r8
 8001fac:	f7fe ff8c 	bl	8000ec8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8001fb0:	68e2      	ldr	r2, [r4, #12]
 8001fb2:	4643      	mov	r3, r8
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	6163      	str	r3, [r4, #20]
 8001fb8:	e7c5      	b.n	8001f46 <oqWriteTimeout+0x46>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001fba:	462a      	mov	r2, r5
 8001fbc:	4639      	mov	r1, r7
 8001fbe:	f7fe ff83 	bl	8000ec8 <memcpy>
    oqp->q_wrptr += n;
 8001fc2:	6962      	ldr	r2, [r4, #20]
 8001fc4:	442a      	add	r2, r5
 8001fc6:	6162      	str	r2, [r4, #20]
 8001fc8:	e7bd      	b.n	8001f46 <oqWriteTimeout+0x46>
 8001fca:	bf00      	nop
 8001fcc:	0000      	movs	r0, r0
	...

08001fd0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001fd0:	3030      	adds	r0, #48	; 0x30
 8001fd2:	f7ff bf95 	b.w	8001f00 <oqWriteTimeout>
 8001fd6:	bf00      	nop
	...

08001fe0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001fe0:	3030      	adds	r0, #48	; 0x30
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	f7ff bf8b 	b.w	8001f00 <oqWriteTimeout>
 8001fea:	bf00      	nop
 8001fec:	0000      	movs	r0, r0
	...

08001ff0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8001ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8001ffa:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8001ffe:	f04f 0a20 	mov.w	sl, #32
 8002002:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002006:	b33a      	cbz	r2, 8002058 <iqReadTimeout+0x68>
 8002008:	4604      	mov	r4, r0
 800200a:	460f      	mov	r7, r1
 800200c:	4616      	mov	r6, r2
 800200e:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 8002012:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002014:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002016:	4296      	cmp	r6, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002018:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 800201a:	bf8c      	ite	hi
 800201c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 800201e:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002020:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002024:	45a8      	cmp	r8, r5
 8002026:	d840      	bhi.n	80020aa <iqReadTimeout+0xba>
  else if (n > s1) {
 8002028:	d32b      	bcc.n	8002082 <iqReadTimeout+0x92>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800202a:	462a      	mov	r2, r5
 800202c:	4638      	mov	r0, r7
 800202e:	f7fe ff4b 	bl	8000ec8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002032:	68e2      	ldr	r2, [r4, #12]
 8002034:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8002036:	68a2      	ldr	r2, [r4, #8]
 8002038:	1b52      	subs	r2, r2, r5
 800203a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 800203c:	b19d      	cbz	r5, 8002066 <iqReadTimeout+0x76>
      if (nfy != NULL) {
 800203e:	f1b9 0f00 	cmp.w	r9, #0
 8002042:	d001      	beq.n	8002048 <iqReadTimeout+0x58>
        nfy(iqp);
 8002044:	4620      	mov	r0, r4
 8002046:	47c8      	blx	r9
 8002048:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 800204c:	1b76      	subs	r6, r6, r5
      bp += done;
 800204e:	442f      	add	r7, r5
 8002050:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002054:	2e00      	cmp	r6, #0
 8002056:	d1dc      	bne.n	8002012 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 8002058:	9803      	ldr	r0, [sp, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	f383 8811 	msr	BASEPRI, r3
}
 8002060:	b005      	add	sp, #20
 8002062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002066:	9902      	ldr	r1, [sp, #8]
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff faa9 	bl	80015c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800206e:	2800      	cmp	r0, #0
 8002070:	d0cf      	beq.n	8002012 <iqReadTimeout+0x22>
 8002072:	9b03      	ldr	r3, [sp, #12]
 8002074:	1b98      	subs	r0, r3, r6
 8002076:	2300      	movs	r3, #0
 8002078:	f383 8811 	msr	BASEPRI, r3
}
 800207c:	b005      	add	sp, #20
 800207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8002082:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002086:	4642      	mov	r2, r8
 8002088:	4638      	mov	r0, r7
    s2 = n - s1;
 800208a:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800208c:	f7fe ff1c 	bl	8000ec8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002090:	eb07 0008 	add.w	r0, r7, r8
 8002094:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002098:	68e1      	ldr	r1, [r4, #12]
 800209a:	4642      	mov	r2, r8
 800209c:	f7fe ff14 	bl	8000ec8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80020a0:	68e2      	ldr	r2, [r4, #12]
 80020a2:	4643      	mov	r3, r8
 80020a4:	18d3      	adds	r3, r2, r3
 80020a6:	61a3      	str	r3, [r4, #24]
 80020a8:	e7c5      	b.n	8002036 <iqReadTimeout+0x46>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80020aa:	462a      	mov	r2, r5
 80020ac:	4638      	mov	r0, r7
 80020ae:	f7fe ff0b 	bl	8000ec8 <memcpy>
    iqp->q_rdptr += n;
 80020b2:	69a2      	ldr	r2, [r4, #24]
 80020b4:	442a      	add	r2, r5
 80020b6:	61a2      	str	r2, [r4, #24]
 80020b8:	e7bd      	b.n	8002036 <iqReadTimeout+0x46>
 80020ba:	bf00      	nop
 80020bc:	0000      	movs	r0, r0
	...

080020c0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80020c0:	300c      	adds	r0, #12
 80020c2:	f7ff bf95 	b.w	8001ff0 <iqReadTimeout>
 80020c6:	bf00      	nop
	...

080020d0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80020d0:	300c      	adds	r0, #12
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	f7ff bf8b 	b.w	8001ff0 <iqReadTimeout>
 80020da:	bf00      	nop
 80020dc:	0000      	movs	r0, r0
	...

080020e0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <main+0x94>)
  PWR->CR |= PWR_CR_DBP;
 80020e2:	4825      	ldr	r0, [pc, #148]	; (8002178 <main+0x98>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	f062 021f 	orn	r2, r2, #31


/*
 * Application entry point.
 */
int main(void) {
 80020ea:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80020f8:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80020fc:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	615c      	str	r4, [r3, #20]
 8002102:	2200      	movs	r2, #0
 8002104:	6959      	ldr	r1, [r3, #20]
 8002106:	615a      	str	r2, [r3, #20]
 8002108:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800210a:	6a19      	ldr	r1, [r3, #32]
 800210c:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8002110:	6219      	str	r1, [r3, #32]
 8002112:	6a19      	ldr	r1, [r3, #32]
 8002114:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002118:	6219      	str	r1, [r3, #32]
 800211a:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 800211c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800211e:	625c      	str	r4, [r3, #36]	; 0x24
 8002120:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
 8002124:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8002126:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002128:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800212c:	6419      	str	r1, [r3, #64]	; 0x40
 800212e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002130:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002134:	6619      	str	r1, [r3, #96]	; 0x60
 8002136:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8002138:	6801      	ldr	r1, [r0, #0]
 800213a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800213e:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002140:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002142:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002146:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	d003      	beq.n	8002156 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 800214e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002152:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002154:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8002156:	4808      	ldr	r0, [pc, #32]	; (8002178 <main+0x98>)
  dma.allocated_mask = 0U;
 8002158:	4908      	ldr	r1, [pc, #32]	; (800217c <main+0x9c>)
 800215a:	6842      	ldr	r2, [r0, #4]
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <main+0xa0>)
 800215e:	4c09      	ldr	r4, [pc, #36]	; (8002184 <main+0xa4>)
 8002160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002164:	2500      	movs	r5, #0
 8002166:	6042      	str	r2, [r0, #4]
 8002168:	460a      	mov	r2, r1
 800216a:	600d      	str	r5, [r1, #0]
 800216c:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8002170:	e00c      	b.n	800218c <main+0xac>
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000
 800217c:	20000a6c 	.word	0x20000a6c
 8002180:	08002f98 	.word	0x08002f98
 8002184:	40026010 	.word	0x40026010
 8002188:	f853 4c0c 	ldr.w	r4, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 800218c:	6025      	str	r5, [r4, #0]
 800218e:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002190:	4299      	cmp	r1, r3
    dma.streams[i].func = NULL;
 8002192:	6055      	str	r5, [r2, #4]
 8002194:	f102 0208 	add.w	r2, r2, #8
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002198:	d1f6      	bne.n	8002188 <main+0xa8>
  adcp->state    = ADC_STOP;
 800219a:	4bd3      	ldr	r3, [pc, #844]	; (80024e8 <main+0x408>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 800219c:	49d3      	ldr	r1, [pc, #844]	; (80024ec <main+0x40c>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 800219e:	f8df e388 	ldr.w	lr, [pc, #904]	; 8002528 <main+0x448>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80021a2:	4fd3      	ldr	r7, [pc, #844]	; (80024f0 <main+0x410>)
  adcp->config   = NULL;
 80021a4:	605d      	str	r5, [r3, #4]
  DMA1->LIFCR = 0xFFFFFFFFU;
 80021a6:	f04f 3cff 	mov.w	ip, #4294967295
 80021aa:	f8c1 c008 	str.w	ip, [r1, #8]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 80021ae:	4ed1      	ldr	r6, [pc, #836]	; (80024f4 <main+0x414>)
  adcp->samples  = NULL;
 80021b0:	609d      	str	r5, [r3, #8]
 80021b2:	2260      	movs	r2, #96	; 0x60
  DMA1->HIFCR = 0xFFFFFFFFU;
 80021b4:	f8c1 c00c 	str.w	ip, [r1, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021b8:	f04f 0b80 	mov.w	fp, #128	; 0x80
  DMA2->LIFCR = 0xFFFFFFFFU;
 80021bc:	f8ce c008 	str.w	ip, [lr, #8]
 80021c0:	f44f 7080 	mov.w	r0, #256	; 0x100
  adcp->depth    = 0;
 80021c4:	60dd      	str	r5, [r3, #12]
 80021c6:	f04f 0a40 	mov.w	sl, #64	; 0x40
  DMA2->HIFCR = 0xFFFFFFFFU;
 80021ca:	f8ce c00c 	str.w	ip, [lr, #12]
 80021ce:	f44f 7900 	mov.w	r9, #512	; 0x200
  tqp->next = (thread_t *)tqp;
 80021d2:	f103 0e18 	add.w	lr, r3, #24
 80021d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80021da:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80021de:	f887 2306 	strb.w	r2, [r7, #774]	; 0x306

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80021e2:	f8df 8348 	ldr.w	r8, [pc, #840]	; 800252c <main+0x44c>
  adcp->grpp     = NULL;
 80021e6:	611d      	str	r5, [r3, #16]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021e8:	f8c7 a180 	str.w	sl, [r7, #384]	; 0x180
  adcp->thread   = NULL;
 80021ec:	615d      	str	r5, [r3, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80021ee:	f8c7 a000 	str.w	sl, [r7]
 80021f2:	f8c3 e018 	str.w	lr, [r3, #24]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80021f6:	f887 2307 	strb.w	r2, [r7, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021fa:	f8c7 b180 	str.w	fp, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80021fe:	f8c7 b000 	str.w	fp, [r7]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002202:	f887 2308 	strb.w	r2, [r7, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002206:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800220a:	6038      	str	r0, [r7, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800220c:	f887 2309 	strb.w	r2, [r7, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002210:	f8c7 9180 	str.w	r9, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002214:	f8c7 9000 	str.w	r9, [r7]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002218:	f887 230a 	strb.w	r2, [r7, #778]	; 0x30a
  adcp->state    = ADC_STOP;
 800221c:	f04f 0901 	mov.w	r9, #1
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002220:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002224:	603c      	str	r4, [r7, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002226:	f887 2317 	strb.w	r2, [r7, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800222a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800222e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002232:	6039      	str	r1, [r7, #0]
  oqp->q_counter = size;
 8002234:	2110      	movs	r1, #16
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002236:	f887 2328 	strb.w	r2, [r7, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800223a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	f883 9000 	strb.w	r9, [r3]
  tqp->prev = (thread_t *)tqp;
 8002244:	f8c3 e01c 	str.w	lr, [r3, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002248:	f887 2312 	strb.w	r2, [r7, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800224c:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002250:	603c      	str	r4, [r7, #0]
  iqp->q_counter = 0;
 8002252:	6175      	str	r5, [r6, #20]
  oqp->q_counter = size;
 8002254:	63b1      	str	r1, [r6, #56]	; 0x38
 8002256:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800225a:	48a7      	ldr	r0, [pc, #668]	; (80024f8 <main+0x418>)
 800225c:	9101      	str	r1, [sp, #4]
 800225e:	4634      	mov	r4, r6
 8002260:	ea42 0209 	orr.w	r2, r2, r9
 8002264:	f844 0b04 	str.w	r0, [r4], #4
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8002268:	621d      	str	r5, [r3, #32]
  ADCD1.adc     = ADC1;
 800226a:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 8002530 <main+0x450>
 800226e:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
 8002272:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
 8002276:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 800227a:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 8002534 <main+0x454>
  ADCD1.dmastp  = NULL;
 800227e:	62dd      	str	r5, [r3, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8002280:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  oqp->q_top     = bp + size;
 8002284:	f106 0374 	add.w	r3, r6, #116	; 0x74
  oqp->q_notify  = onfy;
 8002288:	f8df e2ac 	ldr.w	lr, [pc, #684]	; 8002538 <main+0x458>
  oqp->q_top     = bp + size;
 800228c:	6433      	str	r3, [r6, #64]	; 0x40
  oqp->q_notify  = onfy;
 800228e:	f8c6 e04c 	str.w	lr, [r6, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8002292:	4b9a      	ldr	r3, [pc, #616]	; (80024fc <main+0x41c>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002294:	489a      	ldr	r0, [pc, #616]	; (8002500 <main+0x420>)
 8002296:	6773      	str	r3, [r6, #116]	; 0x74
  tqp->next = (thread_t *)tqp;
 8002298:	f106 0e0c 	add.w	lr, r6, #12
  iqp->q_buffer  = bp;
 800229c:	f106 0354 	add.w	r3, r6, #84	; 0x54
  ST_ENABLE_CLOCK();
 80022a0:	ea42 0209 	orr.w	r2, r2, r9
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80022a4:	6074      	str	r4, [r6, #4]
  tqp->prev = (thread_t *)tqp;
 80022a6:	e9c6 ee03 	strd	lr, lr, [r6, #12]
  iqp->q_top     = bp + size;
 80022aa:	f106 0464 	add.w	r4, r6, #100	; 0x64
  tqp->next = (thread_t *)tqp;
 80022ae:	f106 0e30 	add.w	lr, r6, #48	; 0x30
  iqp->q_buffer  = bp;
 80022b2:	61b3      	str	r3, [r6, #24]
  iqp->q_wrptr   = bp;
 80022b4:	e9c6 3308 	strd	r3, r3, [r6, #32]
  iqp->q_top     = bp + size;
 80022b8:	61f4      	str	r4, [r6, #28]
  oqp->q_buffer  = bp;
 80022ba:	63f4      	str	r4, [r6, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 80022bc:	e9c6 4411 	strd	r4, r4, [r6, #68]	; 0x44
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80022c0:	f886 9008 	strb.w	r9, [r6, #8]
  iqp->q_link    = link;
 80022c4:	e9c6 560a 	strd	r5, r6, [r6, #40]	; 0x28
  oqp->q_link    = link;
 80022c8:	6536      	str	r6, [r6, #80]	; 0x50
  tqp->prev = (thread_t *)tqp;
 80022ca:	e9c6 ee0c 	strd	lr, lr, [r6, #48]	; 0x30
 80022ce:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
 80022d2:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  ST_ENABLE_STOP();
 80022d6:	6882      	ldr	r2, [r0, #8]
  tqp->next = (thread_t *)tqp;
 80022d8:	4c8a      	ldr	r4, [pc, #552]	; (8002504 <main+0x424>)

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80022da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 80022de:	ea42 0209 	orr.w	r2, r2, r9
 80022e2:	6082      	str	r2, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80022e4:	f242 0ecf 	movw	lr, #8399	; 0x20cf
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80022e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ec:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  chTMStartMeasurementX(&tm);
 80022f0:	a802      	add	r0, sp, #8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80022f2:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80022f6:	f104 0e1c 	add.w	lr, r4, #28
  STM32_ST_TIM->CCMR1  = 0;
 80022fa:	619d      	str	r5, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80022fc:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80022fe:	60dd      	str	r5, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8002300:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002302:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002306:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800230a:	f887 b31c 	strb.w	fp, [r7, #796]	; 0x31c
  tmp->cumulative = (rttime_t)0;
 800230e:	2300      	movs	r3, #0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002310:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002314:	603a      	str	r2, [r7, #0]
 8002316:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8002318:	e9c4 4400 	strd	r4, r4, [r4]
 800231c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tmp->worst      = (rtcnt_t)0;
 8002320:	e9cd c502 	strd	ip, r5, [sp, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002324:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002328:	e9c4 ee07 	strd	lr, lr, [r4, #28]
  tmp->n          = (ucnt_t)0;
 800232c:	e9cd 5504 	strd	r5, r5, [sp, #16]
  ch.rlist.prio = NOPRIO;
 8002330:	60a5      	str	r5, [r4, #8]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8002332:	e9c4 4404 	strd	r4, r4, [r4, #16]
  ch.vtlist.lasttime = (systime_t)0;
 8002336:	62a5      	str	r5, [r4, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
 8002338:	6765      	str	r5, [r4, #116]	; 0x74
  chTMStartMeasurementX(&tm);
 800233a:	f7fe fe61 	bl	8001000 <chTMStartMeasurementX.constprop.5>
  chTMStopMeasurementX(&tm);
 800233e:	a802      	add	r0, sp, #8
 8002340:	f7fe fee6 	bl	8001110 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002344:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800253c <main+0x45c>
  tqp->next = (thread_t *)tqp;
 8002348:	486f      	ldr	r0, [pc, #444]	; (8002508 <main+0x428>)
  ch.tm.offset = tm.last;
 800234a:	9a04      	ldr	r2, [sp, #16]
  tp->prio      = prio;
 800234c:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
  tp->realprio  = prio;
 8002350:	f8c4 b06c 	str.w	fp, [r4, #108]	; 0x6c
 8002354:	6762      	str	r2, [r4, #116]	; 0x74
 8002356:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8002540 <main+0x460>
 800235a:	f8cc 5014 	str.w	r5, [ip, #20]
 800235e:	f10c 020c 	add.w	r2, ip, #12
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 8002362:	e9cc 5501 	strd	r5, r5, [ip, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002366:	f8cc b000 	str.w	fp, [ip]
  tqp->prev = (thread_t *)tqp;
 800236a:	e9cc 2203 	strd	r2, r2, [ip, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 800236e:	f100 0224 	add.w	r2, r0, #36	; 0x24
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 8002372:	f04f 0c14 	mov.w	ip, #20
 8002376:	f100 0b10 	add.w	fp, r0, #16
 800237a:	f8c0 c018 	str.w	ip, [r0, #24]
 800237e:	6242      	str	r2, [r0, #36]	; 0x24
 8002380:	f04f 0c1c 	mov.w	ip, #28
 8002384:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 8002388:	f8c0 b010 	str.w	fp, [r0, #16]
 800238c:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 8002390:	f100 0b28 	add.w	fp, r0, #40	; 0x28
 8002394:	f100 0c44 	add.w	ip, r0, #68	; 0x44
 8002398:	63c2      	str	r2, [r0, #60]	; 0x3c
  mp->align = align;
 800239a:	2204      	movs	r2, #4
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b5b      	ldr	r3, [pc, #364]	; (800250c <main+0x42c>)
 800239e:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
 80023a2:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
 80023a6:	eb00 0b0a 	add.w	fp, r0, sl
 80023aa:	61c2      	str	r2, [r0, #28]
 80023ac:	6342      	str	r2, [r0, #52]	; 0x34
  ch_memcore.nextmem = __heap_base__;
 80023ae:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002544 <main+0x464>
 80023b2:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002548 <main+0x468>
  ch_memcore.endmem  = __heap_end__;
 80023b6:	4a56      	ldr	r2, [pc, #344]	; (8002510 <main+0x430>)
 80023b8:	f8c0 b040 	str.w	fp, [r0, #64]	; 0x40
  mp->provider = provider;
 80023bc:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800254c <main+0x46c>
 80023c0:	6085      	str	r5, [r0, #8]
 80023c2:	e9ce c200 	strd	ip, r2, [lr]
  mp->next = NULL;
 80023c6:	6145      	str	r5, [r0, #20]
 80023c8:	62c5      	str	r5, [r0, #44]	; 0x2c
  mp->provider = provider;
 80023ca:	f8c0 b020 	str.w	fp, [r0, #32]
 80023ce:	f8c0 b038 	str.w	fp, [r0, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 80023d2:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  tp->epending  = (eventmask_t)0;
 80023d6:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
 80023da:	e9c0 0000 	strd	r0, r0, [r0]
  tp->refs      = (trefs_t)1;
 80023de:	f884 9052 	strb.w	r9, [r4, #82]	; 0x52
 80023e2:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80023e4:	4a4b      	ldr	r2, [pc, #300]	; (8002514 <main+0x434>)
  REG_INSERT(tp);
 80023e6:	6961      	ldr	r1, [r4, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80023e8:	f8df c164 	ldr.w	ip, [pc, #356]	; 8002550 <main+0x470>
  tp->name      = name;
 80023ec:	f8df e164 	ldr.w	lr, [pc, #356]	; 8002554 <main+0x474>
 80023f0:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f4:	f64f 0bff 	movw	fp, #63743	; 0xf8ff
 80023f8:	ea00 000b 	and.w	r0, r0, fp
  reg_value  =  (reg_value                                   |
 80023fc:	4302      	orrs	r2, r0
  REG_INSERT(tp);
 80023fe:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002402:	6461      	str	r1, [r4, #68]	; 0x44
 8002404:	6424      	str	r4, [r4, #64]	; 0x40
 8002406:	6108      	str	r0, [r1, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	f8dc 200c 	ldr.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800240e:	f8df e148 	ldr.w	lr, [pc, #328]	; 8002558 <main+0x478>
 8002412:	6160      	str	r0, [r4, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002414:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002418:	f8cc 200c 	str.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800241c:	f8de 2000 	ldr.w	r2, [lr]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	9901      	ldr	r1, [sp, #4]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002422:	61a0      	str	r0, [r4, #24]
 8002424:	ea42 0209 	orr.w	r2, r2, r9
  tqp->next = (thread_t *)tqp;
 8002428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  tlp->next = (thread_t *)tlp;
 800242c:	f104 0c58 	add.w	ip, r4, #88	; 0x58
 8002430:	f04f 0b20 	mov.w	fp, #32
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8002434:	64e5      	str	r5, [r4, #76]	; 0x4c
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8002436:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
 800243a:	f8ce 2000 	str.w	r2, [lr]
 800243e:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
 8002442:	77d9      	strb	r1, [r3, #31]
  tqp->next = (thread_t *)tqp;
 8002444:	65e0      	str	r0, [r4, #92]	; 0x5c
 8002446:	f883 b022 	strb.w	fp, [r3, #34]	; 0x22
  tqp->prev = (thread_t *)tqp;
 800244a:	6620      	str	r0, [r4, #96]	; 0x60
 800244c:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8002450:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002452:	f38b 8811 	msr	BASEPRI, fp
  tp->wabase = tdp->wbase;
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <main+0x438>)
  REG_INSERT(tp);
 8002458:	6962      	ldr	r2, [r4, #20]
  tp->name      = name;
 800245a:	4930      	ldr	r1, [pc, #192]	; (800251c <main+0x43c>)
  REG_INSERT(tp);
 800245c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  tp->name      = name;
 8002460:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002464:	f103 026c 	add.w	r2, r3, #108	; 0x6c
  REG_INSERT(tp);
 8002468:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800246a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800246e:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 800255c <main+0x47c>
 8002472:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8002560 <main+0x480>
 8002476:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
  REG_INSERT(tp);
 800247a:	f103 0290 	add.w	r2, r3, #144	; 0x90
  tp->state     = CH_STATE_WTSTART;
 800247e:	2002      	movs	r0, #2
 8002480:	f8a3 00b0 	strh.w	r0, [r3, #176]	; 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002484:	671d      	str	r5, [r3, #112]	; 0x70
  tp->prio      = prio;
 8002486:	f8c3 9098 	str.w	r9, [r3, #152]	; 0x98
  tp->mtxlist   = NULL;
 800248a:	e9c3 5932 	strd	r5, r9, [r3, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
 800248e:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002492:	f883 90b2 	strb.w	r9, [r3, #178]	; 0xb2
  REG_INSERT(tp);
 8002496:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 800249a:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800249e:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  tlp->next = (thread_t *)tlp;
 80024a2:	f103 0cb8 	add.w	ip, r3, #184	; 0xb8
  REG_INSERT(tp);
 80024a6:	610a      	str	r2, [r1, #16]
  tqp->next = (thread_t *)tqp;
 80024a8:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
  chSchWakeupS(tp, MSG_OK);
 80024ac:	4610      	mov	r0, r2
 80024ae:	e9c3 c12e 	strd	ip, r1, [r3, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 80024b2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  REG_INSERT(tp);
 80024b6:	6162      	str	r2, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 80024b8:	f7fe ff72 	bl	80013a0 <chSchWakeupS.constprop.10>
 80024bc:	f385 8811 	msr	BASEPRI, r5
 80024c0:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80024c4:	7a33      	ldrb	r3, [r6, #8]
 80024c6:	454b      	cmp	r3, r9
 80024c8:	f000 808a 	beq.w	80025e0 <main+0x500>
  USART_TypeDef *u = sdp->usart;
 80024cc:	6f73      	ldr	r3, [r6, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80024ce:	4a14      	ldr	r2, [pc, #80]	; (8002520 <main+0x440>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	f000 8082 	beq.w	80025da <main+0x4fa>
 80024d6:	4813      	ldr	r0, [pc, #76]	; (8002524 <main+0x444>)
    fck = STM32_PCLK2 / config->speed;
 80024d8:	f240 4245 	movw	r2, #1093	; 0x445
 80024dc:	f640 018b 	movw	r1, #2187	; 0x88b
 80024e0:	4283      	cmp	r3, r0
 80024e2:	bf08      	it	eq
 80024e4:	460a      	moveq	r2, r1
 80024e6:	e03d      	b.n	8002564 <main+0x484>
 80024e8:	20000800 	.word	0x20000800
 80024ec:	40026000 	.word	0x40026000
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	20000834 	.word	0x20000834
 80024f8:	08003160 	.word	0x08003160
 80024fc:	40004400 	.word	0x40004400
 8002500:	e0042000 	.word	0xe0042000
 8002504:	200008b0 	.word	0x200008b0
 8002508:	20000928 	.word	0x20000928
 800250c:	e000ed00 	.word	0xe000ed00
 8002510:	20018000 	.word	0x20018000
 8002514:	05fa0300 	.word	0x05fa0300
 8002518:	20000970 	.word	0x20000970
 800251c:	08003088 	.word	0x08003088
 8002520:	40011000 	.word	0x40011000
 8002524:	40011400 	.word	0x40011400
 8002528:	40026400 	.word	0x40026400
 800252c:	40023800 	.word	0x40023800
 8002530:	40012000 	.word	0x40012000
 8002534:	00022c16 	.word	0x00022c16
 8002538:	08001061 	.word	0x08001061
 800253c:	20000a50 	.word	0x20000a50
 8002540:	08001011 	.word	0x08001011
 8002544:	20000a48 	.word	0x20000a48
 8002548:	20000fa0 	.word	0x20000fa0
 800254c:	080010d1 	.word	0x080010d1
 8002550:	e000edf0 	.word	0xe000edf0
 8002554:	08003054 	.word	0x08003054
 8002558:	e0001000 	.word	0xe0001000
 800255c:	08001281 	.word	0x08001281
 8002560:	080002d1 	.word	0x080002d1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002564:	2440      	movs	r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002566:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002568:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 800256c:	2500      	movs	r5, #0
  u->BRR = fck;
 800256e:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002570:	611c      	str	r4, [r3, #16]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8002572:	2202      	movs	r2, #2
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002574:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002576:	60d8      	str	r0, [r3, #12]
    sdp->rxmask = 0xFF;
 8002578:	21ff      	movs	r1, #255	; 0xff
  u->SR = 0;
 800257a:	601d      	str	r5, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800257c:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800257e:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8002580:	f886 1078 	strb.w	r1, [r6, #120]	; 0x78
 8002584:	7232      	strb	r2, [r6, #8]
 8002586:	f385 8811 	msr	BASEPRI, r5
  /*
   * Activates the serial driver 2 using the driver default configuration.
   */
  sdStart(&SD2, NULL);

  chThdCreateStatic(waThd1, sizeof(waThd1), NORMALPRIO + 1, Thd1, NULL);
 800258a:	4a20      	ldr	r2, [pc, #128]	; (800260c <main+0x52c>)
 800258c:	4820      	ldr	r0, [pc, #128]	; (8002610 <main+0x530>)
 800258e:	4c21      	ldr	r4, [pc, #132]	; (8002614 <main+0x534>)
 8002590:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8002628 <main+0x548>
   * an error message is printed.
   */
  while (TRUE) {

    if (flag) {
      chprintf(chp, "Last value: %.2f\r\n", lastvalue);
 8002594:	4f20      	ldr	r7, [pc, #128]	; (8002618 <main+0x538>)
 8002596:	4e21      	ldr	r6, [pc, #132]	; (800261c <main+0x53c>)
  chThdCreateStatic(waThd1, sizeof(waThd1), NORMALPRIO + 1, Thd1, NULL);
 8002598:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800259c:	f7fe ff30 	bl	8001400 <chThdCreateStatic.constprop.4>
  chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1, Thd2, NULL);
 80025a0:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <main+0x540>)
 80025a2:	4820      	ldr	r0, [pc, #128]	; (8002624 <main+0x544>)
 80025a4:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80025a8:	f7fe ff2a 	bl	8001400 <chThdCreateStatic.constprop.4>
 80025ac:	e002      	b.n	80025b4 <main+0x4d4>
      flag = FALSE;
      chThdSleepMilliseconds(150);
    }
    chThdSleepMilliseconds(1);
 80025ae:	200a      	movs	r0, #10
 80025b0:	f7ff f896 	bl	80016e0 <chThdSleep>
    if (flag) {
 80025b4:	7823      	ldrb	r3, [r4, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f9      	beq.n	80025ae <main+0x4ce>
      chprintf(chp, "Last value: %.2f\r\n", lastvalue);
 80025ba:	f8d8 0000 	ldr.w	r0, [r8]
 80025be:	f7fd fff7 	bl	80005b0 <__aeabi_f2d>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4630      	mov	r0, r6
 80025c8:	4639      	mov	r1, r7
 80025ca:	f7ff f8b1 	bl	8001730 <chprintf.constprop.0>
      chThdSleepMilliseconds(150);
 80025ce:	f240 50dc 	movw	r0, #1500	; 0x5dc
      flag = FALSE;
 80025d2:	7025      	strb	r5, [r4, #0]
      chThdSleepMilliseconds(150);
 80025d4:	f7ff f884 	bl	80016e0 <chThdSleep>
 80025d8:	e7e9      	b.n	80025ae <main+0x4ce>
    fck = STM32_PCLK2 / config->speed;
 80025da:	f640 028b 	movw	r2, #2187	; 0x88b
 80025de:	e7c1      	b.n	8002564 <main+0x484>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 80025e0:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 80025ec:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80025f8:	23c0      	movs	r3, #192	; 0xc0
 80025fa:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
 80025fe:	f887 3326 	strb.w	r3, [r7, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002602:	f8c7 a184 	str.w	sl, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002606:	f8c7 a004 	str.w	sl, [r7, #4]
 800260a:	e75f      	b.n	80024cc <main+0x3ec>
 800260c:	08001701 	.word	0x08001701
 8002610:	20000b10 	.word	0x20000b10
 8002614:	20000af0 	.word	0x20000af0
 8002618:	0800306c 	.word	0x0800306c
 800261c:	20000834 	.word	0x20000834
 8002620:	08001cf1 	.word	0x08001cf1
 8002624:	20000cd8 	.word	0x20000cd8
 8002628:	20000af4 	.word	0x20000af4
 800262c:	00000000 	.word	0x00000000

08002630 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002630:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8002634:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002636:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800263a:	2300      	movs	r3, #0
 800263c:	f383 8811 	msr	BASEPRI, r3
}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
	...

08002650 <chThdExit>:
void chThdExit(msg_t msg) {
 8002650:	b538      	push	{r3, r4, r5, lr}
 8002652:	2220      	movs	r2, #32
 8002654:	4603      	mov	r3, r0
 8002656:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <chThdExit+0x4c>)
 800265c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800265e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8002660:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8002662:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002666:	42a8      	cmp	r0, r5
 8002668:	d006      	beq.n	8002678 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800266a:	6803      	ldr	r3, [r0, #0]
 800266c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800266e:	f7fe fdaf 	bl	80011d0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8002672:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8002674:	42a8      	cmp	r0, r5
 8002676:	d1f8      	bne.n	800266a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8002678:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800267c:	b943      	cbnz	r3, 8002690 <chThdExit+0x40>
 800267e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002682:	079b      	lsls	r3, r3, #30
 8002684:	d104      	bne.n	8002690 <chThdExit+0x40>
    REG_REMOVE(tp);
 8002686:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800268a:	611a      	str	r2, [r3, #16]
 800268c:	6922      	ldr	r2, [r4, #16]
 800268e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8002690:	200f      	movs	r0, #15
}
 8002692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8002696:	f7fe beeb 	b.w	8001470 <chSchGoSleepS>
 800269a:	bf00      	nop
 800269c:	200008b0 	.word	0x200008b0

080026a0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 80026a0:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 80026a2:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 80026a4:	6803      	ldr	r3, [r0, #0]
void chSchDoReschedule(void) {
 80026a6:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80026a8:	2101      	movs	r1, #1
  thread_t *otp = currp;
 80026aa:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 80026ac:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80026ae:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80026b0:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80026b4:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 80026b6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80026b8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80026ba:	f884 5020 	strb.w	r5, [r4, #32]
 80026be:	e000      	b.n	80026c2 <chSchDoReschedule+0x22>
 80026c0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	4291      	cmp	r1, r2
 80026c6:	d3fb      	bcc.n	80026c0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80026c8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80026ca:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 80026cc:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80026d0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80026d2:	605c      	str	r4, [r3, #4]
}
 80026d4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 80026d6:	f7fd bdf3 	b.w	80002c0 <_port_switch>
 80026da:	bf00      	nop
 80026dc:	200008b0 	.word	0x200008b0

080026e0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80026e0:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <__early_init+0x180>)
  gpiop->OTYPER  = config->otyper;
 80026e2:	4860      	ldr	r0, [pc, #384]	; (8002864 <__early_init+0x184>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80026e4:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 80026e6:	4960      	ldr	r1, [pc, #384]	; (8002868 <__early_init+0x188>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80026e8:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80026ee:	611a      	str	r2, [r3, #16]
 80026f0:	691a      	ldr	r2, [r3, #16]
  gpiop->PUPDR   = config->pupdr;
 80026f2:	4f5e      	ldr	r7, [pc, #376]	; (800286c <__early_init+0x18c>)
  gpiop->MODER   = config->moder;
 80026f4:	4e5e      	ldr	r6, [pc, #376]	; (8002870 <__early_init+0x190>)
  gpiop->OTYPER  = config->otyper;
 80026f6:	4d5f      	ldr	r5, [pc, #380]	; (8002874 <__early_init+0x194>)
 80026f8:	4c5f      	ldr	r4, [pc, #380]	; (8002878 <__early_init+0x198>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80026fa:	f022 021f 	bic.w	r2, r2, #31
 80026fe:	611a      	str	r2, [r3, #16]
 8002700:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002704:	f042 021f 	orr.w	r2, r2, #31
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
 800270a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800270c:	f042 021f 	orr.w	r2, r2, #31
 8002710:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8002712:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8002716:	2200      	movs	r2, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002718:	f8d3 e050 	ldr.w	lr, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 800271c:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800271e:	f8c0 c008 	str.w	ip, [r0, #8]
  gpiop->ODR     = config->odr;
 8002722:	f64f 7cdf 	movw	ip, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 8002726:	60c7      	str	r7, [r0, #12]
  gpiop->ODR     = config->odr;
 8002728:	f8c0 c014 	str.w	ip, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800272c:	f44f 47ee 	mov.w	r7, #30464	; 0x7700
  gpiop->AFRH    = config->afrh;
 8002730:	f44f 2c2a 	mov.w	ip, #696320	; 0xaa000
  gpiop->AFRL    = config->afrl;
 8002734:	6207      	str	r7, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8002736:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  gpiop->OSPEEDR = config->ospeedr;
 800273a:	f04f 37ff 	mov.w	r7, #4294967295
  gpiop->MODER   = config->moder;
 800273e:	6006      	str	r6, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8002740:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8002744:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->MODER   = config->moder;
 8002748:	2080      	movs	r0, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 800274a:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800274c:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800274e:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8002752:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8002754:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8002756:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002758:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 800275a:	4848      	ldr	r0, [pc, #288]	; (800287c <__early_init+0x19c>)
  gpiop->PUPDR   = config->pupdr;
 800275c:	4948      	ldr	r1, [pc, #288]	; (8002880 <__early_init+0x1a0>)
  gpiop->OTYPER  = config->otyper;
 800275e:	606a      	str	r2, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002760:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002762:	60e9      	str	r1, [r5, #12]
  gpiop->OTYPER  = config->otyper;
 8002764:	4947      	ldr	r1, [pc, #284]	; (8002884 <__early_init+0x1a4>)
  gpiop->ODR     = config->odr;
 8002766:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8002768:	622a      	str	r2, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800276a:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800276c:	602a      	str	r2, [r5, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800276e:	f5a5 35cc 	sub.w	r5, r5, #104448	; 0x19800
  gpiop->OTYPER  = config->otyper;
 8002772:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002774:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8002776:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->ODR     = config->odr;
 800277a:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800277c:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800277e:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002780:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8002782:	6042      	str	r2, [r0, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002784:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8002788:	6087      	str	r7, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 800278a:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
 800278e:	6146      	str	r6, [r0, #20]
  gpiop->PUPDR   = config->pupdr;
 8002790:	f1ac 0c05 	sub.w	ip, ip, #5
  gpiop->AFRL    = config->afrl;
 8002794:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8002796:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002798:	6002      	str	r2, [r0, #0]
  PWR->CR = STM32_VOS;
 800279a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->OTYPER  = config->otyper;
 800279e:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80027a0:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80027a2:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 80027a6:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80027a8:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80027aa:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80027ac:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80027ae:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80027b0:	6028      	str	r0, [r5, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	0794      	lsls	r4, r2, #30
 80027be:	d5fc      	bpl.n	80027ba <__early_init+0xda>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80027c0:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80027c2:	4a27      	ldr	r2, [pc, #156]	; (8002860 <__early_init+0x180>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80027c4:	f021 0103 	bic.w	r1, r1, #3
 80027c8:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80027ca:	6893      	ldr	r3, [r2, #8]
 80027cc:	f013 030c 	ands.w	r3, r3, #12
 80027d0:	d1fb      	bne.n	80027ca <__early_init+0xea>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80027d2:	6810      	ldr	r0, [r2, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80027d4:	4922      	ldr	r1, [pc, #136]	; (8002860 <__early_init+0x180>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80027d6:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80027da:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80027dc:	6093      	str	r3, [r2, #8]
  RCC->CSR |= RCC_CSR_LSION;
 80027de:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80027e6:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 80027e8:	0798      	lsls	r0, r3, #30
 80027ea:	d5fc      	bpl.n	80027e6 <__early_init+0x106>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80027ec:	4b26      	ldr	r3, [pc, #152]	; (8002888 <__early_init+0x1a8>)
 80027ee:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80027f0:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80027f2:	4a26      	ldr	r2, [pc, #152]	; (800288c <__early_init+0x1ac>)
  RCC->CR |= RCC_CR_PLLON;
 80027f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f8:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80027fa:	6853      	ldr	r3, [r2, #4]
 80027fc:	0459      	lsls	r1, r3, #17
 80027fe:	d5fc      	bpl.n	80027fa <__early_init+0x11a>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002800:	4a17      	ldr	r2, [pc, #92]	; (8002860 <__early_init+0x180>)
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	d5fc      	bpl.n	8002802 <__early_init+0x122>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002808:	4921      	ldr	r1, [pc, #132]	; (8002890 <__early_init+0x1b0>)
 800280a:	6091      	str	r1, [r2, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <__early_init+0x1b4>)
    RCC->DCKCFGR = dckcfgr |
 800280e:	2103      	movs	r1, #3
 8002810:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <__early_init+0x1b8>)
 8002818:	429a      	cmp	r2, r3
 800281a:	d017      	beq.n	800284c <__early_init+0x16c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <__early_init+0x1bc>)
 800281e:	f240 7202 	movw	r2, #1794	; 0x702
 8002822:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002824:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <__early_init+0x180>)
 8002826:	6893      	ldr	r3, [r2, #8]
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800282e:	6893      	ldr	r3, [r2, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d1fa      	bne.n	800282e <__early_init+0x14e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8002838:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800283a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283e:	6453      	str	r3, [r2, #68]	; 0x44
 8002840:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8002842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002846:	6653      	str	r3, [r2, #100]	; 0x64
 8002848:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 800284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <__early_init+0x1c0>)
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <__early_init+0x1c4>)
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d1e2      	bne.n	800281c <__early_init+0x13c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <__early_init+0x1bc>)
 8002858:	f44f 7281 	mov.w	r2, #258	; 0x102
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e7e1      	b.n	8002824 <__early_init+0x144>
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	64155105 	.word	0x64155105
 8002870:	2a8004a0 	.word	0x2a8004a0
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	01555555 	.word	0x01555555
 8002884:	40021c00 	.word	0x40021c00
 8002888:	07015410 	.word	0x07015410
 800288c:	40007000 	.word	0x40007000
 8002890:	38881000 	.word	0x38881000
 8002894:	e0042000 	.word	0xe0042000
 8002898:	20006411 	.word	0x20006411
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	e000ed00 	.word	0xe000ed00
 80028a4:	410fc241 	.word	0x410fc241
	...

080028b0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80028b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80028b4:	4d68      	ldr	r5, [pc, #416]	; (8002a58 <VectorD8+0x1a8>)
 80028b6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80028b8:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 80028bc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80028be:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80028c0:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80028c2:	d47d      	bmi.n	80029c0 <VectorD8+0x110>
 80028c4:	2320      	movs	r3, #32
 80028c6:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80028ca:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80028ce:	d04d      	beq.n	800296c <VectorD8+0xbc>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80028d0:	4f62      	ldr	r7, [pc, #392]	; (8002a5c <VectorD8+0x1ac>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80028d2:	f04f 0900 	mov.w	r9, #0
 80028d6:	e008      	b.n	80028ea <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 80028d8:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80028da:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80028de:	d41d      	bmi.n	800291c <VectorD8+0x6c>
    sr = u->SR;
 80028e0:	6834      	ldr	r4, [r6, #0]
 80028e2:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80028e4:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80028e8:	d040      	beq.n	800296c <VectorD8+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80028ea:	0723      	lsls	r3, r4, #28
 80028ec:	d0f4      	beq.n	80028d8 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 80028ee:	f014 0f08 	tst.w	r4, #8
 80028f2:	bf0c      	ite	eq
 80028f4:	2000      	moveq	r0, #0
 80028f6:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 80028f8:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 80028fa:	bf48      	it	mi
 80028fc:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8002900:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8002902:	bf48      	it	mi
 8002904:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8002908:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800290a:	bf48      	it	mi
 800290c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002910:	f7fe fc76 	bl	8001200 <chEvtBroadcastFlagsI.constprop.15>
    if (sr & USART_SR_RXNE)
 8002914:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002916:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800291a:	d5e1      	bpl.n	80028e0 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800291c:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800291e:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8002922:	2b00      	cmp	r3, #0
 8002924:	d03d      	beq.n	80029a2 <VectorD8+0xf2>
  if (!iqIsFullI(iqp)) {
 8002926:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800292a:	4293      	cmp	r3, r2
 800292c:	d040      	beq.n	80029b0 <VectorD8+0x100>
    iqp->q_counter++;
 800292e:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8002930:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8002932:	3201      	adds	r2, #1
 8002934:	ea04 0a0a 	and.w	sl, r4, sl
 8002938:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 800293a:	6229      	str	r1, [r5, #32]
 800293c:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002940:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8002944:	429a      	cmp	r2, r3
 8002946:	d301      	bcc.n	800294c <VectorD8+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 8002948:	69ab      	ldr	r3, [r5, #24]
 800294a:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800294c:	68eb      	ldr	r3, [r5, #12]
 800294e:	42bb      	cmp	r3, r7
 8002950:	d0c6      	beq.n	80028e0 <VectorD8+0x30>
  tqp->next             = tp->queue.next;
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 8002956:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8002958:	6057      	str	r7, [r2, #4]
  tp->u.rdymsg = msg;
 800295a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800295e:	f7fe fc37 	bl	80011d0 <chSchReadyI>
    sr = u->SR;
 8002962:	6834      	ldr	r4, [r6, #0]
 8002964:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002966:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800296a:	d1be      	bne.n	80028ea <VectorD8+0x3a>
 800296c:	2300      	movs	r3, #0
 800296e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002972:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002976:	d001      	beq.n	800297c <VectorD8+0xcc>
 8002978:	0622      	lsls	r2, r4, #24
 800297a:	d42f      	bmi.n	80029dc <VectorD8+0x12c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800297c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8002980:	d00b      	beq.n	800299a <VectorD8+0xea>
 8002982:	0663      	lsls	r3, r4, #25
 8002984:	d509      	bpl.n	800299a <VectorD8+0xea>
 8002986:	2320      	movs	r3, #32
 8002988:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800298c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8002990:	429a      	cmp	r2, r3
 8002992:	d048      	beq.n	8002a26 <VectorD8+0x176>
 8002994:	2300      	movs	r3, #0
 8002996:	f383 8811 	msr	BASEPRI, r3
}
 800299a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800299e:	f7fe bb67 	b.w	8001070 <_port_irq_epilogue>
 80029a2:	2004      	movs	r0, #4
 80029a4:	f7fe fc2c 	bl	8001200 <chEvtBroadcastFlagsI.constprop.15>
  if (!iqIsFullI(iqp)) {
 80029a8:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d1be      	bne.n	800292e <VectorD8+0x7e>
 80029b0:	696a      	ldr	r2, [r5, #20]
 80029b2:	2a00      	cmp	r2, #0
 80029b4:	d0bb      	beq.n	800292e <VectorD8+0x7e>
 80029b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029ba:	f7fe fc21 	bl	8001200 <chEvtBroadcastFlagsI.constprop.15>
 80029be:	e78f      	b.n	80028e0 <VectorD8+0x30>
 80029c0:	2320      	movs	r3, #32
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029ca:	f7fe fc19 	bl	8001200 <chEvtBroadcastFlagsI.constprop.15>
    u->SR = ~USART_SR_LBD;
 80029ce:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80029d2:	6033      	str	r3, [r6, #0]
 80029d4:	2300      	movs	r3, #0
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	e773      	b.n	80028c4 <VectorD8+0x14>
 80029dc:	2320      	movs	r3, #32
 80029de:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 80029e2:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d029      	beq.n	8002a3e <VectorD8+0x18e>
    oqp->q_counter++;
 80029ea:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 80029ec:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 80029ee:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 80029f0:	3201      	adds	r2, #1
 80029f2:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 80029f4:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 80029f6:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 80029f8:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 80029fa:	d301      	bcc.n	8002a00 <VectorD8+0x150>
      oqp->q_rdptr = oqp->q_buffer;
 80029fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80029fe:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002a00:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a02:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <VectorD8+0x1b0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d009      	beq.n	8002a1c <VectorD8+0x16c>
  tqp->next             = tp->queue.next;
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	6329      	str	r1, [r5, #48]	; 0x30
  tp->u.rdymsg = msg;
 8002a0c:	f04f 0c00 	mov.w	ip, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002a10:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8002a12:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 8002a14:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002a18:	f7fe fbda 	bl	80011d0 <chSchReadyI>
      u->DR = b;
 8002a1c:	6077      	str	r7, [r6, #4]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	e7aa      	b.n	800297c <VectorD8+0xcc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002a26:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0b3      	beq.n	8002994 <VectorD8+0xe4>
 8002a2c:	2010      	movs	r0, #16
 8002a2e:	f7fe fbe7 	bl	8001200 <chEvtBroadcastFlagsI.constprop.15>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002a32:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8002a36:	ea08 0303 	and.w	r3, r8, r3
 8002a3a:	60f3      	str	r3, [r6, #12]
 8002a3c:	e7aa      	b.n	8002994 <VectorD8+0xe4>
  if (!oqIsEmptyI(oqp)) {
 8002a3e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002a40:	2a00      	cmp	r2, #0
 8002a42:	d0d2      	beq.n	80029ea <VectorD8+0x13a>
 8002a44:	2008      	movs	r0, #8
 8002a46:	f7fe fbdb 	bl	8001200 <chEvtBroadcastFlagsI.constprop.15>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8002a4a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8002a4e:	ea08 0303 	and.w	r3, r8, r3
 8002a52:	60f3      	str	r3, [r6, #12]
 8002a54:	e7e3      	b.n	8002a1e <VectorD8+0x16e>
 8002a56:	bf00      	nop
 8002a58:	20000834 	.word	0x20000834
 8002a5c:	20000840 	.word	0x20000840
 8002a60:	20000864 	.word	0x20000864
	...

08002a70 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8002a74:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	079b      	lsls	r3, r3, #30
 8002a7c:	d403      	bmi.n	8002a86 <VectorB0+0x16>
}
 8002a7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8002a82:	f7fe baf5 	b.w	8001070 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8002a86:	2100      	movs	r1, #0
 8002a88:	6139      	str	r1, [r7, #16]
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8002a90:	4c1d      	ldr	r4, [pc, #116]	; (8002b08 <VectorB0+0x98>)
 8002a92:	46a1      	mov	r9, r4
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8002a94:	4688      	mov	r8, r1
  vtp = ch.vtlist.next;
 8002a96:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 8002a9a:	689a      	ldr	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 8002a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8002a9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8002aa0:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8002aa2:	4295      	cmp	r5, r2
 8002aa4:	d31c      	bcc.n	8002ae0 <VectorB0+0x70>
 8002aa6:	2620      	movs	r6, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002aa8:	6818      	ldr	r0, [r3, #0]
      fn = vtp->func;
 8002aaa:	f8d3 a00c 	ldr.w	sl, [r3, #12]
      ch.vtlist.lasttime += vtp->delta;
 8002aae:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002ab0:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8002ab2:	62a1      	str	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8002ab4:	eba5 0502 	sub.w	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002ab8:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8002abc:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 8002abe:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 8002ac2:	bf08      	it	eq
 8002ac4:	f8c7 800c 	streq.w	r8, [r7, #12]
 8002ac8:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8002acc:	6918      	ldr	r0, [r3, #16]
 8002ace:	47d0      	blx	sl
 8002ad0:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8002ad4:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4295      	cmp	r5, r2
 8002ada:	d3df      	bcc.n	8002a9c <VectorB0+0x2c>
 8002adc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ade:	e7e3      	b.n	8002aa8 <VectorB0+0x38>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002ae0:	69e2      	ldr	r2, [r4, #28]
 8002ae2:	454a      	cmp	r2, r9
 8002ae4:	d009      	beq.n	8002afa <VectorB0+0x8a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8002ae6:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8002ae8:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8002aea:	1b4d      	subs	r5, r1, r5
 8002aec:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	bf2c      	ite	cs
 8002af4:	18c0      	addcs	r0, r0, r3
 8002af6:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002af8:	6378      	str	r0, [r7, #52]	; 0x34
 8002afa:	2300      	movs	r3, #0
 8002afc:	f383 8811 	msr	BASEPRI, r3
}
 8002b00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8002b04:	f7fe bab4 	b.w	8001070 <_port_irq_epilogue>
 8002b08:	200008b0 	.word	0x200008b0
 8002b0c:	00000000 	.word	0x00000000

08002b10 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <Vector158+0x24>)
  if (dma.streams[15].func)
 8002b12:	4809      	ldr	r0, [pc, #36]	; (8002b38 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002b14:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8002b16:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002b18:	0d89      	lsrs	r1, r1, #22
 8002b1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002b1e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8002b20:	058c      	lsls	r4, r1, #22
 8002b22:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8002b24:	b112      	cbz	r2, 8002b2c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8002b26:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002b2a:	4790      	blx	r2
}
 8002b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002b30:	f7fe ba9e 	b.w	8001070 <_port_irq_epilogue>
 8002b34:	40026400 	.word	0x40026400
 8002b38:	20000a6c 	.word	0x20000a6c
 8002b3c:	00000000 	.word	0x00000000

08002b40 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <Vector154+0x24>)
  if (dma.streams[14].func)
 8002b42:	4809      	ldr	r0, [pc, #36]	; (8002b68 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002b44:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8002b46:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002b48:	0c09      	lsrs	r1, r1, #16
 8002b4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002b4e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8002b50:	040c      	lsls	r4, r1, #16
 8002b52:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8002b54:	b10a      	cbz	r2, 8002b5a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8002b56:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8002b58:	4790      	blx	r2
}
 8002b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002b5e:	f7fe ba87 	b.w	8001070 <_port_irq_epilogue>
 8002b62:	bf00      	nop
 8002b64:	40026400 	.word	0x40026400
 8002b68:	20000a6c 	.word	0x20000a6c
 8002b6c:	00000000 	.word	0x00000000

08002b70 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <Vector150+0x24>)
  if (dma.streams[13].func)
 8002b72:	4809      	ldr	r0, [pc, #36]	; (8002b98 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b74:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8002b76:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b78:	0989      	lsrs	r1, r1, #6
 8002b7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002b7e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8002b80:	018c      	lsls	r4, r1, #6
 8002b82:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 8002b84:	b10a      	cbz	r2, 8002b8a <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8002b86:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8002b88:	4790      	blx	r2
}
 8002b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002b8e:	f7fe ba6f 	b.w	8001070 <_port_irq_epilogue>
 8002b92:	bf00      	nop
 8002b94:	40026400 	.word	0x40026400
 8002b98:	20000a6c 	.word	0x20000a6c
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002ba0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <Vector130+0x20>)
  if (dma.streams[12].func)
 8002ba4:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002ba6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8002ba8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002baa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002bae:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8002bb0:	b10a      	cbz	r2, 8002bb6 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 8002bb2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8002bb4:	4790      	blx	r2
}
 8002bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002bba:	f7fe ba59 	b.w	8001070 <_port_irq_epilogue>
 8002bbe:	bf00      	nop
 8002bc0:	40026400 	.word	0x40026400
 8002bc4:	20000a6c 	.word	0x20000a6c
	...

08002bd0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <Vector12C+0x24>)
  if (dma.streams[11].func)
 8002bd2:	4809      	ldr	r0, [pc, #36]	; (8002bf8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002bd4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 8002bd6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002bd8:	0d89      	lsrs	r1, r1, #22
 8002bda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002bde:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8002be0:	058c      	lsls	r4, r1, #22
 8002be2:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8002be4:	b10a      	cbz	r2, 8002bea <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8002be6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8002be8:	4790      	blx	r2
}
 8002bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002bee:	f7fe ba3f 	b.w	8001070 <_port_irq_epilogue>
 8002bf2:	bf00      	nop
 8002bf4:	40026400 	.word	0x40026400
 8002bf8:	20000a6c 	.word	0x20000a6c
 8002bfc:	00000000 	.word	0x00000000

08002c00 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <Vector128+0x24>)
  if (dma.streams[10].func)
 8002c02:	4809      	ldr	r0, [pc, #36]	; (8002c28 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002c04:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8002c06:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002c08:	0c09      	lsrs	r1, r1, #16
 8002c0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002c0e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8002c10:	040c      	lsls	r4, r1, #16
 8002c12:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8002c14:	b10a      	cbz	r2, 8002c1a <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8002c16:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002c18:	4790      	blx	r2
}
 8002c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002c1e:	f7fe ba27 	b.w	8001070 <_port_irq_epilogue>
 8002c22:	bf00      	nop
 8002c24:	40026400 	.word	0x40026400
 8002c28:	20000a6c 	.word	0x20000a6c
 8002c2c:	00000000 	.word	0x00000000

08002c30 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <Vector124+0x24>)
  if (dma.streams[9].func)
 8002c32:	4809      	ldr	r0, [pc, #36]	; (8002c58 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002c34:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8002c36:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002c38:	0989      	lsrs	r1, r1, #6
 8002c3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002c3e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8002c40:	018c      	lsls	r4, r1, #6
 8002c42:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8002c44:	b10a      	cbz	r2, 8002c4a <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8002c46:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002c48:	4790      	blx	r2
}
 8002c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002c4e:	f7fe ba0f 	b.w	8001070 <_port_irq_epilogue>
 8002c52:	bf00      	nop
 8002c54:	40026400 	.word	0x40026400
 8002c58:	20000a6c 	.word	0x20000a6c
 8002c5c:	00000000 	.word	0x00000000

08002c60 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002c60:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <Vector120+0x20>)
  if (dma.streams[8].func)
 8002c64:	4807      	ldr	r0, [pc, #28]	; (8002c84 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002c66:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8002c68:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002c6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002c6e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8002c70:	b10a      	cbz	r2, 8002c76 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8002c72:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002c74:	4790      	blx	r2
}
 8002c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002c7a:	f7fe b9f9 	b.w	8001070 <_port_irq_epilogue>
 8002c7e:	bf00      	nop
 8002c80:	40026400 	.word	0x40026400
 8002c84:	20000a6c 	.word	0x20000a6c
	...

08002c90 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <VectorFC+0x24>)
  if (dma.streams[7].func)
 8002c92:	4809      	ldr	r0, [pc, #36]	; (8002cb8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c94:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 8002c96:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c98:	0d89      	lsrs	r1, r1, #22
 8002c9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002c9e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8002ca0:	058c      	lsls	r4, r1, #22
 8002ca2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8002ca4:	b10a      	cbz	r2, 8002caa <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8002ca6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002ca8:	4790      	blx	r2
}
 8002caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002cae:	f7fe b9df 	b.w	8001070 <_port_irq_epilogue>
 8002cb2:	bf00      	nop
 8002cb4:	40026000 	.word	0x40026000
 8002cb8:	20000a6c 	.word	0x20000a6c
 8002cbc:	00000000 	.word	0x00000000

08002cc0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <Vector84+0x24>)
  if (dma.streams[6].func)
 8002cc2:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002cc4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8002cc6:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002cc8:	0c09      	lsrs	r1, r1, #16
 8002cca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002cce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8002cd0:	040c      	lsls	r4, r1, #16
 8002cd2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8002cd4:	b10a      	cbz	r2, 8002cda <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8002cd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002cd8:	4790      	blx	r2
}
 8002cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002cde:	f7fe b9c7 	b.w	8001070 <_port_irq_epilogue>
 8002ce2:	bf00      	nop
 8002ce4:	40026000 	.word	0x40026000
 8002ce8:	20000a6c 	.word	0x20000a6c
 8002cec:	00000000 	.word	0x00000000

08002cf0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <Vector80+0x24>)
  if (dma.streams[5].func)
 8002cf2:	4809      	ldr	r0, [pc, #36]	; (8002d18 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002cf4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8002cf6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002cf8:	0989      	lsrs	r1, r1, #6
 8002cfa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002cfe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8002d00:	018c      	lsls	r4, r1, #6
 8002d02:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8002d04:	b10a      	cbz	r2, 8002d0a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8002d06:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002d08:	4790      	blx	r2
}
 8002d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002d0e:	f7fe b9af 	b.w	8001070 <_port_irq_epilogue>
 8002d12:	bf00      	nop
 8002d14:	40026000 	.word	0x40026000
 8002d18:	20000a6c 	.word	0x20000a6c
 8002d1c:	00000000 	.word	0x00000000

08002d20 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002d20:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <Vector7C+0x20>)
  if (dma.streams[4].func)
 8002d24:	4807      	ldr	r0, [pc, #28]	; (8002d44 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d26:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8002d28:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8002d2e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8002d30:	b10a      	cbz	r2, 8002d36 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8002d32:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002d34:	4790      	blx	r2
}
 8002d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002d3a:	f7fe b999 	b.w	8001070 <_port_irq_epilogue>
 8002d3e:	bf00      	nop
 8002d40:	40026000 	.word	0x40026000
 8002d44:	20000a6c 	.word	0x20000a6c
	...

08002d50 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <Vector78+0x24>)
  if (dma.streams[3].func)
 8002d52:	4809      	ldr	r0, [pc, #36]	; (8002d78 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d54:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8002d56:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d58:	0d89      	lsrs	r1, r1, #22
 8002d5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002d5e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8002d60:	058c      	lsls	r4, r1, #22
 8002d62:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8002d64:	b10a      	cbz	r2, 8002d6a <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8002d66:	6a00      	ldr	r0, [r0, #32]
 8002d68:	4790      	blx	r2
}
 8002d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002d6e:	f7fe b97f 	b.w	8001070 <_port_irq_epilogue>
 8002d72:	bf00      	nop
 8002d74:	40026000 	.word	0x40026000
 8002d78:	20000a6c 	.word	0x20000a6c
 8002d7c:	00000000 	.word	0x00000000

08002d80 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <Vector74+0x24>)
  if (dma.streams[2].func)
 8002d82:	4809      	ldr	r0, [pc, #36]	; (8002da8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d84:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 8002d86:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d88:	0c09      	lsrs	r1, r1, #16
 8002d8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002d8e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8002d90:	040c      	lsls	r4, r1, #16
 8002d92:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8002d94:	b10a      	cbz	r2, 8002d9a <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8002d96:	6980      	ldr	r0, [r0, #24]
 8002d98:	4790      	blx	r2
}
 8002d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002d9e:	f7fe b967 	b.w	8001070 <_port_irq_epilogue>
 8002da2:	bf00      	nop
 8002da4:	40026000 	.word	0x40026000
 8002da8:	20000a6c 	.word	0x20000a6c
 8002dac:	00000000 	.word	0x00000000

08002db0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <Vector70+0x24>)
  if (dma.streams[1].func)
 8002db2:	4809      	ldr	r0, [pc, #36]	; (8002dd8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002db4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 8002db6:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002db8:	0989      	lsrs	r1, r1, #6
 8002dba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002dbe:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8002dc0:	018c      	lsls	r4, r1, #6
 8002dc2:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8002dc4:	b10a      	cbz	r2, 8002dca <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8002dc6:	6900      	ldr	r0, [r0, #16]
 8002dc8:	4790      	blx	r2
}
 8002dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002dce:	f7fe b94f 	b.w	8001070 <_port_irq_epilogue>
 8002dd2:	bf00      	nop
 8002dd4:	40026000 	.word	0x40026000
 8002dd8:	20000a6c 	.word	0x20000a6c
 8002ddc:	00000000 	.word	0x00000000

08002de0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002de0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <Vector6C+0x20>)
  if (dma.streams[0].func)
 8002de4:	4807      	ldr	r0, [pc, #28]	; (8002e04 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002de6:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8002de8:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002dea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002dee:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8002df0:	b10a      	cbz	r2, 8002df6 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8002df2:	6880      	ldr	r0, [r0, #8]
 8002df4:	4790      	blx	r2
}
 8002df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002dfa:	f7fe b939 	b.w	8001070 <_port_irq_epilogue>
 8002dfe:	bf00      	nop
 8002e00:	40026000 	.word	0x40026000
 8002e04:	20000a6c 	.word	0x20000a6c
	...

08002e10 <Vector88>:
  sr = ADC1->SR;
 8002e10:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <Vector88+0xc4>)
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8002e12:	b538      	push	{r3, r4, r5, lr}
  sr = ADC1->SR;
 8002e14:	6815      	ldr	r5, [r2, #0]
  ADC1->SR = 0;
 8002e16:	2100      	movs	r1, #0
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8002e18:	06ab      	lsls	r3, r5, #26
  ADC1->SR = 0;
 8002e1a:	6011      	str	r1, [r2, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8002e1c:	d427      	bmi.n	8002e6e <Vector88+0x5e>
 8002e1e:	f005 0501 	and.w	r5, r5, #1
  if (sr & ADC_SR_AWD) {
 8002e22:	b305      	cbz	r5, 8002e66 <Vector88+0x56>
    if (ADCD1.grpp != NULL) {
 8002e24:	4c2c      	ldr	r4, [pc, #176]	; (8002ed8 <Vector88+0xc8>)
 8002e26:	6923      	ldr	r3, [r4, #16]
 8002e28:	b1eb      	cbz	r3, 8002e66 <Vector88+0x56>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f7fe fa30 	bl	8001290 <adc_lld_stop_conversion>
 8002e30:	6923      	ldr	r3, [r4, #16]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d045      	beq.n	8002ec4 <Vector88+0xb4>
 8002e38:	2205      	movs	r2, #5
 8002e3a:	7022      	strb	r2, [r4, #0]
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4798      	blx	r3
 8002e42:	7823      	ldrb	r3, [r4, #0]
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	bf04      	itt	eq
 8002e48:	2302      	moveq	r3, #2
 8002e4a:	7023      	strbeq	r3, [r4, #0]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6123      	str	r3, [r4, #16]
 8002e50:	2320      	movs	r3, #32
 8002e52:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8002e56:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5a:	4820      	ldr	r0, [pc, #128]	; (8002edc <Vector88+0xcc>)
 8002e5c:	f7fe fa00 	bl	8001260 <chThdResumeI>
 8002e60:	2300      	movs	r3, #0
 8002e62:	f383 8811 	msr	BASEPRI, r3
}
 8002e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8002e6a:	f7fe b901 	b.w	8001070 <_port_irq_epilogue>
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8002e6e:	4c1a      	ldr	r4, [pc, #104]	; (8002ed8 <Vector88+0xc8>)
 8002e70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	6852      	ldr	r2, [r2, #4]
 8002e76:	f005 0501 	and.w	r5, r5, #1
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	d0d1      	beq.n	8002e22 <Vector88+0x12>
    if (ADCD1.grpp != NULL)
 8002e7e:	6923      	ldr	r3, [r4, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <Vector88+0x56>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7fe fa03 	bl	8001290 <adc_lld_stop_conversion>
 8002e8a:	6923      	ldr	r3, [r4, #16]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	b1eb      	cbz	r3, 8002ecc <Vector88+0xbc>
 8002e90:	2205      	movs	r2, #5
 8002e92:	7022      	strb	r2, [r4, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	4620      	mov	r0, r4
 8002e98:	4798      	blx	r3
 8002e9a:	7823      	ldrb	r3, [r4, #0]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	bf04      	itt	eq
 8002ea0:	2302      	moveq	r3, #2
 8002ea2:	7023      	strbeq	r3, [r4, #0]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6123      	str	r3, [r4, #16]
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb2:	480a      	ldr	r0, [pc, #40]	; (8002edc <Vector88+0xcc>)
 8002eb4:	f7fe f9d4 	bl	8001260 <chThdResumeI>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f383 8811 	msr	BASEPRI, r3
  if (sr & ADC_SR_AWD) {
 8002ebe:	2d00      	cmp	r5, #0
 8002ec0:	d1b0      	bne.n	8002e24 <Vector88+0x14>
 8002ec2:	e7d0      	b.n	8002e66 <Vector88+0x56>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	6123      	str	r3, [r4, #16]
 8002ec8:	7022      	strb	r2, [r4, #0]
 8002eca:	e7c1      	b.n	8002e50 <Vector88+0x40>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8002ecc:	2202      	movs	r2, #2
 8002ece:	6123      	str	r3, [r4, #16]
 8002ed0:	7022      	strb	r2, [r4, #0]
 8002ed2:	e7e9      	b.n	8002ea8 <Vector88+0x98>
 8002ed4:	40012000 	.word	0x40012000
 8002ed8:	20000800 	.word	0x20000800
 8002edc:	20000814 	.word	0x20000814

08002ee0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002ee0:	b4f0      	push	{r4, r5, r6, r7}
 8002ee2:	4e14      	ldr	r6, [pc, #80]	; (8002f34 <__init_ram_areas+0x54>)
 8002ee4:	4d14      	ldr	r5, [pc, #80]	; (8002f38 <__init_ram_areas+0x58>)
 8002ee6:	4c15      	ldr	r4, [pc, #84]	; (8002f3c <__init_ram_areas+0x5c>)
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <__init_ram_areas+0x60>)
 8002eea:	4916      	ldr	r1, [pc, #88]	; (8002f44 <__init_ram_areas+0x64>)
 8002eec:	f106 0c70 	add.w	ip, r6, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002ef0:	2700      	movs	r7, #0
    while (p < rap->clear_area) {
 8002ef2:	429c      	cmp	r4, r3
 8002ef4:	d911      	bls.n	8002f1a <__init_ram_areas+0x3a>
 8002ef6:	3904      	subs	r1, #4
 8002ef8:	461a      	mov	r2, r3
      *p = *tp;
 8002efa:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8002efe:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8002f02:	4294      	cmp	r4, r2
 8002f04:	d8f9      	bhi.n	8002efa <__init_ram_areas+0x1a>
 8002f06:	43da      	mvns	r2, r3
 8002f08:	4414      	add	r4, r2
 8002f0a:	f024 0403 	bic.w	r4, r4, #3
 8002f0e:	3404      	adds	r4, #4
 8002f10:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8002f12:	429d      	cmp	r5, r3
 8002f14:	d903      	bls.n	8002f1e <__init_ram_areas+0x3e>
      *p = 0;
 8002f16:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 8002f1a:	429d      	cmp	r5, r3
 8002f1c:	d8fb      	bhi.n	8002f16 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8002f1e:	4566      	cmp	r6, ip
 8002f20:	d005      	beq.n	8002f2e <__init_ram_areas+0x4e>
 8002f22:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 8002f26:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 8002f2a:	3610      	adds	r6, #16
 8002f2c:	e7e1      	b.n	8002ef2 <__init_ram_areas+0x12>
#endif
}
 8002f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	080030e0 	.word	0x080030e0
 8002f38:	20000fa0 	.word	0x20000fa0
 8002f3c:	20000fa0 	.word	0x20000fa0
 8002f40:	20000fa0 	.word	0x20000fa0
 8002f44:	08003188 	.word	0x08003188
	...

08002f50 <__default_exit>:
void __default_exit(void) {
 8002f50:	e7fe      	b.n	8002f50 <__default_exit>
 8002f52:	bf00      	nop
	...

08002f60 <__late_init>:
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
	...

08002f70 <__core_init>:
}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
