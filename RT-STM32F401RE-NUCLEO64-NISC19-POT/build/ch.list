
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08004a11 	.word	0x08004a11
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	0800a511 	.word	0x0800a511
 8000070:	0800a4e1 	.word	0x0800a4e1
 8000074:	0800a4b1 	.word	0x0800a4b1
 8000078:	0800a481 	.word	0x0800a481
 800007c:	0800a451 	.word	0x0800a451
 8000080:	0800a421 	.word	0x0800a421
 8000084:	0800a3f1 	.word	0x0800a3f1
 8000088:	0800a541 	.word	0x0800a541
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	0800a1a1 	.word	0x0800a1a1
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	0800a001 	.word	0x0800a001
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	0800a3c1 	.word	0x0800a3c1
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	0800a391 	.word	0x0800a391
 8000124:	0800a361 	.word	0x0800a361
 8000128:	0800a331 	.word	0x0800a331
 800012c:	0800a301 	.word	0x0800a301
 8000130:	0800a2d1 	.word	0x0800a2d1
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	0800a2a1 	.word	0x0800a2a1
 8000154:	0800a271 	.word	0x0800a271
 8000158:	0800a241 	.word	0x0800a241
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f00a fa4c 	bl	800a6a0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f009 fe12 	bl	8009e30 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f00a f9de 	bl	800a610 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f00a fa1c 	bl	800a690 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f007 fc9a 	bl	8007ba0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f00a ba00 	b.w	800a680 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000294:	0800d2a4 	.word	0x0800d2a4
                ldr     r2, =_data_start
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800029c:	20000ce0 	.word	0x20000ce0
                ldr     r1, =_bss_start
 80002a0:	20000ce0 	.word	0x20000ce0
                ldr     r2, =_bss_end
 80002a4:	20001e40 	.word	0x20001e40
                ldr     r4, =__init_array_start
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f004 fba8 	bl	8004a30 <chThdExit>

080002e0 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e0:	f004 fcfe 	bl	8004ce0 <chSchDoReschedule>

080002e4 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e4:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e6:	e7fe      	b.n	80002e6 <_port_exit_from_isr+0x2>

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000426:	f1a4 0401 	sub.w	r4, r4, #1
 800042a:	d1e9      	bne.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_dmul>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066e:	bf1d      	ittte	ne
 8000670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000674:	ea94 0f0c 	teqne	r4, ip
 8000678:	ea95 0f0c 	teqne	r5, ip
 800067c:	f000 f8de 	bleq	800083c <__aeabi_dmul+0x1dc>
 8000680:	442c      	add	r4, r5
 8000682:	ea81 0603 	eor.w	r6, r1, r3
 8000686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000692:	bf18      	it	ne
 8000694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a0:	d038      	beq.n	8000714 <__aeabi_dmul+0xb4>
 80006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b6:	f04f 0600 	mov.w	r6, #0
 80006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006be:	f09c 0f00 	teq	ip, #0
 80006c2:	bf18      	it	ne
 80006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d4:	d204      	bcs.n	80006e0 <__aeabi_dmul+0x80>
 80006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006da:	416d      	adcs	r5, r5
 80006dc:	eb46 0606 	adc.w	r6, r6, r6
 80006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f8:	bf88      	it	hi
 80006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fe:	d81e      	bhi.n	800073e <__aeabi_dmul+0xde>
 8000700:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000704:	bf08      	it	eq
 8000706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800070a:	f150 0000 	adcs.w	r0, r0, #0
 800070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000718:	ea46 0101 	orr.w	r1, r6, r1
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000728:	bfc2      	ittt	gt
 800072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000732:	bd70      	popgt	{r4, r5, r6, pc}
 8000734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000738:	f04f 0e00 	mov.w	lr, #0
 800073c:	3c01      	subs	r4, #1
 800073e:	f300 80ab 	bgt.w	8000898 <__aeabi_dmul+0x238>
 8000742:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000746:	bfde      	ittt	le
 8000748:	2000      	movle	r0, #0
 800074a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd70      	pople	{r4, r5, r6, pc}
 8000750:	f1c4 0400 	rsb	r4, r4, #0
 8000754:	3c20      	subs	r4, #32
 8000756:	da35      	bge.n	80007c4 <__aeabi_dmul+0x164>
 8000758:	340c      	adds	r4, #12
 800075a:	dc1b      	bgt.n	8000794 <__aeabi_dmul+0x134>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f305 	lsl.w	r3, r0, r5
 8000768:	fa20 f004 	lsr.w	r0, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	fa21 f604 	lsr.w	r6, r1, r4
 8000784:	eb42 0106 	adc.w	r1, r2, r6
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 040c 	rsb	r4, r4, #12
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f304 	lsl.w	r3, r0, r4
 80007a0:	fa20 f005 	lsr.w	r0, r0, r5
 80007a4:	fa01 f204 	lsl.w	r2, r1, r4
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b4:	f141 0100 	adc.w	r1, r1, #0
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f205 	lsl.w	r2, r0, r5
 80007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d0:	fa20 f304 	lsr.w	r3, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea43 0302 	orr.w	r3, r3, r2
 80007dc:	fa21 f004 	lsr.w	r0, r1, r4
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	fa21 f204 	lsr.w	r2, r1, r4
 80007e8:	ea20 0002 	bic.w	r0, r0, r2
 80007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f094 0f00 	teq	r4, #0
 8000800:	d10f      	bne.n	8000822 <__aeabi_dmul+0x1c2>
 8000802:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	eb41 0101 	adc.w	r1, r1, r1
 800080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3c01      	subeq	r4, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1a6>
 8000816:	ea41 0106 	orr.w	r1, r1, r6
 800081a:	f095 0f00 	teq	r5, #0
 800081e:	bf18      	it	ne
 8000820:	4770      	bxne	lr
 8000822:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	eb43 0303 	adc.w	r3, r3, r3
 800082c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000830:	bf08      	it	eq
 8000832:	3d01      	subeq	r5, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1c6>
 8000836:	ea43 0306 	orr.w	r3, r3, r6
 800083a:	4770      	bx	lr
 800083c:	ea94 0f0c 	teq	r4, ip
 8000840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000844:	bf18      	it	ne
 8000846:	ea95 0f0c 	teqne	r5, ip
 800084a:	d00c      	beq.n	8000866 <__aeabi_dmul+0x206>
 800084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000850:	bf18      	it	ne
 8000852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000856:	d1d1      	bne.n	80007fc <__aeabi_dmul+0x19c>
 8000858:	ea81 0103 	eor.w	r1, r1, r3
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086a:	bf06      	itte	eq
 800086c:	4610      	moveq	r0, r2
 800086e:	4619      	moveq	r1, r3
 8000870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000874:	d019      	beq.n	80008aa <__aeabi_dmul+0x24a>
 8000876:	ea94 0f0c 	teq	r4, ip
 800087a:	d102      	bne.n	8000882 <__aeabi_dmul+0x222>
 800087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000880:	d113      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	d105      	bne.n	8000894 <__aeabi_dmul+0x234>
 8000888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800088c:	bf1c      	itt	ne
 800088e:	4610      	movne	r0, r2
 8000890:	4619      	movne	r1, r3
 8000892:	d10a      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__aeabi_ddiv>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c2:	bf1d      	ittte	ne
 80008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c8:	ea94 0f0c 	teqne	r4, ip
 80008cc:	ea95 0f0c 	teqne	r5, ip
 80008d0:	f000 f8a7 	bleq	8000a22 <__aeabi_ddiv+0x16e>
 80008d4:	eba4 0405 	sub.w	r4, r4, r5
 80008d8:	ea81 0e03 	eor.w	lr, r1, r3
 80008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e4:	f000 8088 	beq.w	80009f8 <__aeabi_ddiv+0x144>
 80008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000908:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800090c:	429d      	cmp	r5, r3
 800090e:	bf08      	it	eq
 8000910:	4296      	cmpeq	r6, r2
 8000912:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000916:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800091a:	d202      	bcs.n	8000922 <__aeabi_ddiv+0x6e>
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	eb65 0503 	sbc.w	r5, r5, r3
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000932:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000990:	ea55 0e06 	orrs.w	lr, r5, r6
 8000994:	d018      	beq.n	80009c8 <__aeabi_ddiv+0x114>
 8000996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009b2:	d1c0      	bne.n	8000936 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	d10b      	bne.n	80009d2 <__aeabi_ddiv+0x11e>
 80009ba:	ea41 0100 	orr.w	r1, r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c6:	e7b6      	b.n	8000936 <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009cc:	bf04      	itt	eq
 80009ce:	4301      	orreq	r1, r0
 80009d0:	2000      	moveq	r0, #0
 80009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d6:	bf88      	it	hi
 80009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009dc:	f63f aeaf 	bhi.w	800073e <__aeabi_dmul+0xde>
 80009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e4:	bf04      	itt	eq
 80009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ee:	f150 0000 	adcs.w	r0, r0, #0
 80009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a04:	bfc2      	ittt	gt
 8000a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a14:	f04f 0e00 	mov.w	lr, #0
 8000a18:	3c01      	subs	r4, #1
 8000a1a:	e690      	b.n	800073e <__aeabi_dmul+0xde>
 8000a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a20:	e68d      	b.n	800073e <__aeabi_dmul+0xde>
 8000a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a26:	ea94 0f0c 	teq	r4, ip
 8000a2a:	bf08      	it	eq
 8000a2c:	ea95 0f0c 	teqeq	r5, ip
 8000a30:	f43f af3b 	beq.w	80008aa <__aeabi_dmul+0x24a>
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	d10a      	bne.n	8000a50 <__aeabi_ddiv+0x19c>
 8000a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3e:	f47f af34 	bne.w	80008aa <__aeabi_dmul+0x24a>
 8000a42:	ea95 0f0c 	teq	r5, ip
 8000a46:	f47f af25 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e72c      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a50:	ea95 0f0c 	teq	r5, ip
 8000a54:	d106      	bne.n	8000a64 <__aeabi_ddiv+0x1b0>
 8000a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a5a:	f43f aefd 	beq.w	8000858 <__aeabi_dmul+0x1f8>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e722      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	f47f aec5 	bne.w	80007fc <__aeabi_dmul+0x19c>
 8000a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a76:	f47f af0d 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7e:	f47f aeeb 	bne.w	8000858 <__aeabi_dmul+0x1f8>
 8000a82:	e712      	b.n	80008aa <__aeabi_dmul+0x24a>

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c30:	f1a2 0201 	sub.w	r2, r2, #1
 8000c34:	d1ed      	bne.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__gesf2>:
 8000d90:	f04f 3cff 	mov.w	ip, #4294967295
 8000d94:	e006      	b.n	8000da4 <__cmpsf2+0x4>
 8000d96:	bf00      	nop

08000d98 <__lesf2>:
 8000d98:	f04f 0c01 	mov.w	ip, #1
 8000d9c:	e002      	b.n	8000da4 <__cmpsf2+0x4>
 8000d9e:	bf00      	nop

08000da0 <__cmpsf2>:
 8000da0:	f04f 0c01 	mov.w	ip, #1
 8000da4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000da8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db4:	bf18      	it	ne
 8000db6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dba:	d011      	beq.n	8000de0 <__cmpsf2+0x40>
 8000dbc:	b001      	add	sp, #4
 8000dbe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dc2:	bf18      	it	ne
 8000dc4:	ea90 0f01 	teqne	r0, r1
 8000dc8:	bf58      	it	pl
 8000dca:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dce:	bf88      	it	hi
 8000dd0:	17c8      	asrhi	r0, r1, #31
 8000dd2:	bf38      	it	cc
 8000dd4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dd8:	bf18      	it	ne
 8000dda:	f040 0001 	orrne.w	r0, r0, #1
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de4:	d102      	bne.n	8000dec <__cmpsf2+0x4c>
 8000de6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dea:	d105      	bne.n	8000df8 <__cmpsf2+0x58>
 8000dec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df0:	d1e4      	bne.n	8000dbc <__cmpsf2+0x1c>
 8000df2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000df6:	d0e1      	beq.n	8000dbc <__cmpsf2+0x1c>
 8000df8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <__aeabi_cfrcmple>:
 8000e00:	4684      	mov	ip, r0
 8000e02:	4608      	mov	r0, r1
 8000e04:	4661      	mov	r1, ip
 8000e06:	e7ff      	b.n	8000e08 <__aeabi_cfcmpeq>

08000e08 <__aeabi_cfcmpeq>:
 8000e08:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e0a:	f7ff ffc9 	bl	8000da0 <__cmpsf2>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	bf48      	it	mi
 8000e12:	f110 0f00 	cmnmi.w	r0, #0
 8000e16:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e18 <__aeabi_fcmpeq>:
 8000e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e1c:	f7ff fff4 	bl	8000e08 <__aeabi_cfcmpeq>
 8000e20:	bf0c      	ite	eq
 8000e22:	2001      	moveq	r0, #1
 8000e24:	2000      	movne	r0, #0
 8000e26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2a:	bf00      	nop

08000e2c <__aeabi_fcmplt>:
 8000e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e30:	f7ff ffea 	bl	8000e08 <__aeabi_cfcmpeq>
 8000e34:	bf34      	ite	cc
 8000e36:	2001      	movcc	r0, #1
 8000e38:	2000      	movcs	r0, #0
 8000e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3e:	bf00      	nop

08000e40 <__aeabi_fcmple>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff ffe0 	bl	8000e08 <__aeabi_cfcmpeq>
 8000e48:	bf94      	ite	ls
 8000e4a:	2001      	movls	r0, #1
 8000e4c:	2000      	movhi	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_fcmpge>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff ffd2 	bl	8000e00 <__aeabi_cfrcmple>
 8000e5c:	bf94      	ite	ls
 8000e5e:	2001      	movls	r0, #1
 8000e60:	2000      	movhi	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_fcmpgt>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffc8 	bl	8000e00 <__aeabi_cfrcmple>
 8000e70:	bf34      	ite	cc
 8000e72:	2001      	movcc	r0, #1
 8000e74:	2000      	movcs	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_f2iz>:
 8000e7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e84:	d30f      	bcc.n	8000ea6 <__aeabi_f2iz+0x2a>
 8000e86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e8e:	d90d      	bls.n	8000eac <__aeabi_f2iz+0x30>
 8000e90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea0:	bf18      	it	ne
 8000ea2:	4240      	negne	r0, r0
 8000ea4:	4770      	bx	lr
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	4770      	bx	lr
 8000eac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000eb0:	d101      	bne.n	8000eb6 <__aeabi_f2iz+0x3a>
 8000eb2:	0242      	lsls	r2, r0, #9
 8000eb4:	d105      	bne.n	8000ec2 <__aeabi_f2iz+0x46>
 8000eb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	bf08      	it	eq
 8000ebc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f04f 0000 	mov.w	r0, #0
 8000ec6:	4770      	bx	lr

08000ec8 <memcpy>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	ea41 0300 	orr.w	r3, r1, r0
 8000ece:	f013 0303 	ands.w	r3, r3, #3
 8000ed2:	d16d      	bne.n	8000fb0 <memcpy+0xe8>
 8000ed4:	3a40      	subs	r2, #64	; 0x40
 8000ed6:	d341      	bcc.n	8000f5c <memcpy+0x94>
 8000ed8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000edc:	f840 3b04 	str.w	r3, [r0], #4
 8000ee0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ee4:	f840 3b04 	str.w	r3, [r0], #4
 8000ee8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000eec:	f840 3b04 	str.w	r3, [r0], #4
 8000ef0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ef4:	f840 3b04 	str.w	r3, [r0], #4
 8000ef8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000efc:	f840 3b04 	str.w	r3, [r0], #4
 8000f00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f04:	f840 3b04 	str.w	r3, [r0], #4
 8000f08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f0c:	f840 3b04 	str.w	r3, [r0], #4
 8000f10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f14:	f840 3b04 	str.w	r3, [r0], #4
 8000f18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f1c:	f840 3b04 	str.w	r3, [r0], #4
 8000f20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f24:	f840 3b04 	str.w	r3, [r0], #4
 8000f28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f2c:	f840 3b04 	str.w	r3, [r0], #4
 8000f30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f34:	f840 3b04 	str.w	r3, [r0], #4
 8000f38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f3c:	f840 3b04 	str.w	r3, [r0], #4
 8000f40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f44:	f840 3b04 	str.w	r3, [r0], #4
 8000f48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f4c:	f840 3b04 	str.w	r3, [r0], #4
 8000f50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f54:	f840 3b04 	str.w	r3, [r0], #4
 8000f58:	3a40      	subs	r2, #64	; 0x40
 8000f5a:	d2bd      	bcs.n	8000ed8 <memcpy+0x10>
 8000f5c:	3230      	adds	r2, #48	; 0x30
 8000f5e:	d311      	bcc.n	8000f84 <memcpy+0xbc>
 8000f60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f64:	f840 3b04 	str.w	r3, [r0], #4
 8000f68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f6c:	f840 3b04 	str.w	r3, [r0], #4
 8000f70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f74:	f840 3b04 	str.w	r3, [r0], #4
 8000f78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f7c:	f840 3b04 	str.w	r3, [r0], #4
 8000f80:	3a10      	subs	r2, #16
 8000f82:	d2ed      	bcs.n	8000f60 <memcpy+0x98>
 8000f84:	320c      	adds	r2, #12
 8000f86:	d305      	bcc.n	8000f94 <memcpy+0xcc>
 8000f88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f8c:	f840 3b04 	str.w	r3, [r0], #4
 8000f90:	3a04      	subs	r2, #4
 8000f92:	d2f9      	bcs.n	8000f88 <memcpy+0xc0>
 8000f94:	3204      	adds	r2, #4
 8000f96:	d008      	beq.n	8000faa <memcpy+0xe2>
 8000f98:	07d2      	lsls	r2, r2, #31
 8000f9a:	bf1c      	itt	ne
 8000f9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000fa0:	f800 3b01 	strbne.w	r3, [r0], #1
 8000fa4:	d301      	bcc.n	8000faa <memcpy+0xe2>
 8000fa6:	880b      	ldrh	r3, [r1, #0]
 8000fa8:	8003      	strh	r3, [r0, #0]
 8000faa:	4660      	mov	r0, ip
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2a08      	cmp	r2, #8
 8000fb2:	d313      	bcc.n	8000fdc <memcpy+0x114>
 8000fb4:	078b      	lsls	r3, r1, #30
 8000fb6:	d08d      	beq.n	8000ed4 <memcpy+0xc>
 8000fb8:	f010 0303 	ands.w	r3, r0, #3
 8000fbc:	d08a      	beq.n	8000ed4 <memcpy+0xc>
 8000fbe:	f1c3 0304 	rsb	r3, r3, #4
 8000fc2:	1ad2      	subs	r2, r2, r3
 8000fc4:	07db      	lsls	r3, r3, #31
 8000fc6:	bf1c      	itt	ne
 8000fc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000fcc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000fd0:	d380      	bcc.n	8000ed4 <memcpy+0xc>
 8000fd2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000fd6:	f820 3b02 	strh.w	r3, [r0], #2
 8000fda:	e77b      	b.n	8000ed4 <memcpy+0xc>
 8000fdc:	3a04      	subs	r2, #4
 8000fde:	d3d9      	bcc.n	8000f94 <memcpy+0xcc>
 8000fe0:	3a01      	subs	r2, #1
 8000fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fe6:	f800 3b01 	strb.w	r3, [r0], #1
 8000fea:	d2f9      	bcs.n	8000fe0 <memcpy+0x118>
 8000fec:	780b      	ldrb	r3, [r1, #0]
 8000fee:	7003      	strb	r3, [r0, #0]
 8000ff0:	784b      	ldrb	r3, [r1, #1]
 8000ff2:	7043      	strb	r3, [r0, #1]
 8000ff4:	788b      	ldrb	r3, [r1, #2]
 8000ff6:	7083      	strb	r3, [r0, #2]
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	4770      	bx	lr
 8000ffc:	0000      	movs	r0, r0
 8000ffe:	0000      	movs	r0, r0
 8001000:	eba2 0003 	sub.w	r0, r2, r3
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <strcmp>:
 8001008:	7802      	ldrb	r2, [r0, #0]
 800100a:	780b      	ldrb	r3, [r1, #0]
 800100c:	2a01      	cmp	r2, #1
 800100e:	bf28      	it	cs
 8001010:	429a      	cmpcs	r2, r3
 8001012:	d1f5      	bne.n	8001000 <memcpy+0x138>
 8001014:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8001018:	ea40 0401 	orr.w	r4, r0, r1
 800101c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001020:	f06f 0c00 	mvn.w	ip, #0
 8001024:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8001028:	b312      	cbz	r2, 8001070 <strcmp+0x68>
 800102a:	ea80 0401 	eor.w	r4, r0, r1
 800102e:	f014 0f07 	tst.w	r4, #7
 8001032:	d16a      	bne.n	800110a <strcmp+0x102>
 8001034:	f000 0407 	and.w	r4, r0, #7
 8001038:	f020 0007 	bic.w	r0, r0, #7
 800103c:	f004 0503 	and.w	r5, r4, #3
 8001040:	f021 0107 	bic.w	r1, r1, #7
 8001044:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8001048:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800104c:	f014 0f04 	tst.w	r4, #4
 8001050:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8001054:	fa0c f405 	lsl.w	r4, ip, r5
 8001058:	ea62 0204 	orn	r2, r2, r4
 800105c:	ea66 0604 	orn	r6, r6, r4
 8001060:	d00a      	beq.n	8001078 <strcmp+0x70>
 8001062:	ea63 0304 	orn	r3, r3, r4
 8001066:	4662      	mov	r2, ip
 8001068:	ea67 0704 	orn	r7, r7, r4
 800106c:	4666      	mov	r6, ip
 800106e:	e003      	b.n	8001078 <strcmp+0x70>
 8001070:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8001074:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8001078:	fa82 f54c 	uadd8	r5, r2, ip
 800107c:	ea82 0406 	eor.w	r4, r2, r6
 8001080:	faa4 f48c 	sel	r4, r4, ip
 8001084:	bb6c      	cbnz	r4, 80010e2 <strcmp+0xda>
 8001086:	fa83 f54c 	uadd8	r5, r3, ip
 800108a:	ea83 0507 	eor.w	r5, r3, r7
 800108e:	faa5 f58c 	sel	r5, r5, ip
 8001092:	b995      	cbnz	r5, 80010ba <strcmp+0xb2>
 8001094:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8001098:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800109c:	fa82 f54c 	uadd8	r5, r2, ip
 80010a0:	ea82 0406 	eor.w	r4, r2, r6
 80010a4:	faa4 f48c 	sel	r4, r4, ip
 80010a8:	fa83 f54c 	uadd8	r5, r3, ip
 80010ac:	ea83 0507 	eor.w	r5, r3, r7
 80010b0:	faa5 f58c 	sel	r5, r5, ip
 80010b4:	4325      	orrs	r5, r4
 80010b6:	d0db      	beq.n	8001070 <strcmp+0x68>
 80010b8:	b99c      	cbnz	r4, 80010e2 <strcmp+0xda>
 80010ba:	ba2d      	rev	r5, r5
 80010bc:	fab5 f485 	clz	r4, r5
 80010c0:	f024 0407 	bic.w	r4, r4, #7
 80010c4:	fa27 f104 	lsr.w	r1, r7, r4
 80010c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80010cc:	fa23 f304 	lsr.w	r3, r3, r4
 80010d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80010d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80010d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80010dc:	eba0 0001 	sub.w	r0, r0, r1
 80010e0:	4770      	bx	lr
 80010e2:	ba24      	rev	r4, r4
 80010e4:	fab4 f484 	clz	r4, r4
 80010e8:	f024 0407 	bic.w	r4, r4, #7
 80010ec:	fa26 f104 	lsr.w	r1, r6, r4
 80010f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80010f4:	fa22 f204 	lsr.w	r2, r2, r4
 80010f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80010fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001100:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001104:	eba0 0001 	sub.w	r0, r0, r1
 8001108:	4770      	bx	lr
 800110a:	f014 0f03 	tst.w	r4, #3
 800110e:	d13c      	bne.n	800118a <strcmp+0x182>
 8001110:	f010 0403 	ands.w	r4, r0, #3
 8001114:	d128      	bne.n	8001168 <strcmp+0x160>
 8001116:	f850 2b08 	ldr.w	r2, [r0], #8
 800111a:	f851 3b08 	ldr.w	r3, [r1], #8
 800111e:	fa82 f54c 	uadd8	r5, r2, ip
 8001122:	ea82 0503 	eor.w	r5, r2, r3
 8001126:	faa5 f58c 	sel	r5, r5, ip
 800112a:	b95d      	cbnz	r5, 8001144 <strcmp+0x13c>
 800112c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001134:	fa82 f54c 	uadd8	r5, r2, ip
 8001138:	ea82 0503 	eor.w	r5, r2, r3
 800113c:	faa5 f58c 	sel	r5, r5, ip
 8001140:	2d00      	cmp	r5, #0
 8001142:	d0e8      	beq.n	8001116 <strcmp+0x10e>
 8001144:	ba2d      	rev	r5, r5
 8001146:	fab5 f485 	clz	r4, r5
 800114a:	f024 0407 	bic.w	r4, r4, #7
 800114e:	fa23 f104 	lsr.w	r1, r3, r4
 8001152:	fa22 f204 	lsr.w	r2, r2, r4
 8001156:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800115a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800115e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001162:	eba0 0001 	sub.w	r0, r0, r1
 8001166:	4770      	bx	lr
 8001168:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800116c:	f020 0003 	bic.w	r0, r0, #3
 8001170:	f850 2b08 	ldr.w	r2, [r0], #8
 8001174:	f021 0103 	bic.w	r1, r1, #3
 8001178:	f851 3b08 	ldr.w	r3, [r1], #8
 800117c:	fa0c f404 	lsl.w	r4, ip, r4
 8001180:	ea62 0204 	orn	r2, r2, r4
 8001184:	ea63 0304 	orn	r3, r3, r4
 8001188:	e7c9      	b.n	800111e <strcmp+0x116>
 800118a:	f010 0403 	ands.w	r4, r0, #3
 800118e:	d01a      	beq.n	80011c6 <strcmp+0x1be>
 8001190:	eba1 0104 	sub.w	r1, r1, r4
 8001194:	f020 0003 	bic.w	r0, r0, #3
 8001198:	07e4      	lsls	r4, r4, #31
 800119a:	f850 2b04 	ldr.w	r2, [r0], #4
 800119e:	d006      	beq.n	80011ae <strcmp+0x1a6>
 80011a0:	d20f      	bcs.n	80011c2 <strcmp+0x1ba>
 80011a2:	788b      	ldrb	r3, [r1, #2]
 80011a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80011a8:	1ae4      	subs	r4, r4, r3
 80011aa:	d106      	bne.n	80011ba <strcmp+0x1b2>
 80011ac:	b12b      	cbz	r3, 80011ba <strcmp+0x1b2>
 80011ae:	78cb      	ldrb	r3, [r1, #3]
 80011b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80011b4:	1ae4      	subs	r4, r4, r3
 80011b6:	d100      	bne.n	80011ba <strcmp+0x1b2>
 80011b8:	b91b      	cbnz	r3, 80011c2 <strcmp+0x1ba>
 80011ba:	4620      	mov	r0, r4
 80011bc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80011c0:	4770      	bx	lr
 80011c2:	f101 0104 	add.w	r1, r1, #4
 80011c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80011ca:	07cc      	lsls	r4, r1, #31
 80011cc:	f021 0103 	bic.w	r1, r1, #3
 80011d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80011d4:	d848      	bhi.n	8001268 <strcmp+0x260>
 80011d6:	d224      	bcs.n	8001222 <strcmp+0x21a>
 80011d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80011dc:	fa82 f54c 	uadd8	r5, r2, ip
 80011e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 80011e4:	faa5 f58c 	sel	r5, r5, ip
 80011e8:	d10a      	bne.n	8001200 <strcmp+0x1f8>
 80011ea:	b965      	cbnz	r5, 8001206 <strcmp+0x1fe>
 80011ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80011f0:	ea84 0402 	eor.w	r4, r4, r2
 80011f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 80011f8:	d10e      	bne.n	8001218 <strcmp+0x210>
 80011fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80011fe:	e7eb      	b.n	80011d8 <strcmp+0x1d0>
 8001200:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001204:	e055      	b.n	80012b2 <strcmp+0x2aa>
 8001206:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800120a:	d14d      	bne.n	80012a8 <strcmp+0x2a0>
 800120c:	7808      	ldrb	r0, [r1, #0]
 800120e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001212:	f1c0 0000 	rsb	r0, r0, #0
 8001216:	4770      	bx	lr
 8001218:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800121c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001220:	e047      	b.n	80012b2 <strcmp+0x2aa>
 8001222:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8001226:	fa82 f54c 	uadd8	r5, r2, ip
 800122a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800122e:	faa5 f58c 	sel	r5, r5, ip
 8001232:	d10a      	bne.n	800124a <strcmp+0x242>
 8001234:	b965      	cbnz	r5, 8001250 <strcmp+0x248>
 8001236:	f851 3b04 	ldr.w	r3, [r1], #4
 800123a:	ea84 0402 	eor.w	r4, r4, r2
 800123e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8001242:	d10c      	bne.n	800125e <strcmp+0x256>
 8001244:	f850 2b04 	ldr.w	r2, [r0], #4
 8001248:	e7eb      	b.n	8001222 <strcmp+0x21a>
 800124a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800124e:	e030      	b.n	80012b2 <strcmp+0x2aa>
 8001250:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8001254:	d128      	bne.n	80012a8 <strcmp+0x2a0>
 8001256:	880b      	ldrh	r3, [r1, #0]
 8001258:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800125c:	e029      	b.n	80012b2 <strcmp+0x2aa>
 800125e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8001262:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8001266:	e024      	b.n	80012b2 <strcmp+0x2aa>
 8001268:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800126c:	fa82 f54c 	uadd8	r5, r2, ip
 8001270:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8001274:	faa5 f58c 	sel	r5, r5, ip
 8001278:	d10a      	bne.n	8001290 <strcmp+0x288>
 800127a:	b965      	cbnz	r5, 8001296 <strcmp+0x28e>
 800127c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001280:	ea84 0402 	eor.w	r4, r4, r2
 8001284:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8001288:	d109      	bne.n	800129e <strcmp+0x296>
 800128a:	f850 2b04 	ldr.w	r2, [r0], #4
 800128e:	e7eb      	b.n	8001268 <strcmp+0x260>
 8001290:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8001294:	e00d      	b.n	80012b2 <strcmp+0x2aa>
 8001296:	f015 0fff 	tst.w	r5, #255	; 0xff
 800129a:	d105      	bne.n	80012a8 <strcmp+0x2a0>
 800129c:	680b      	ldr	r3, [r1, #0]
 800129e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80012a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012a6:	e004      	b.n	80012b2 <strcmp+0x2aa>
 80012a8:	f04f 0000 	mov.w	r0, #0
 80012ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80012b0:	4770      	bx	lr
 80012b2:	ba12      	rev	r2, r2
 80012b4:	ba1b      	rev	r3, r3
 80012b6:	fa82 f44c 	uadd8	r4, r2, ip
 80012ba:	ea82 0403 	eor.w	r4, r2, r3
 80012be:	faa4 f58c 	sel	r5, r4, ip
 80012c2:	fab5 f485 	clz	r4, r5
 80012c6:	fa02 f204 	lsl.w	r2, r2, r4
 80012ca:	fa03 f304 	lsl.w	r3, r3, r4
 80012ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80012d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80012d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80012da:	4770      	bx	lr
 80012dc:	0000      	movs	r0, r0
	...

080012e0 <chTMStartMeasurementX.constprop.71>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <chTMStartMeasurementX.constprop.71+0x8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80012e4:	6083      	str	r3, [r0, #8]
}
 80012e6:	4770      	bx	lr
 80012e8:	e0001000 	.word	0xe0001000
 80012ec:	00000000 	.word	0x00000000

080012f0 <chMtxTryLock.constprop.63>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80012f0:	2320      	movs	r3, #32
 80012f2:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <chMtxTryLock.constprop.63+0x2c>)
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	b122      	cbz	r2, 8001306 <chMtxTryLock.constprop.63+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 80012fc:	2000      	movs	r0, #0
 80012fe:	2300      	movs	r3, #0
 8001300:	f383 8811 	msr	BASEPRI, r3
}
 8001304:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8001306:	4a06      	ldr	r2, [pc, #24]	; (8001320 <chMtxTryLock.constprop.63+0x30>)
 8001308:	6992      	ldr	r2, [r2, #24]
 800130a:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 800130c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800130e:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 8001310:	6393      	str	r3, [r2, #56]	; 0x38
 8001312:	2001      	movs	r0, #1
 8001314:	2300      	movs	r3, #0
 8001316:	f383 8811 	msr	BASEPRI, r3
}
 800131a:	4770      	bx	lr
 800131c:	20000c30 	.word	0x20000c30
 8001320:	20000da0 	.word	0x20000da0
	...

08001330 <chEvtGetAndClearEvents.constprop.53>:
 8001330:	2320      	movs	r3, #32
 8001332:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <chEvtGetAndClearEvents.constprop.53+0x18>)
 8001338:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 800133a:	2300      	movs	r3, #0
  m = currp->epending & events;
 800133c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800133e:	6353      	str	r3, [r2, #52]	; 0x34
 8001340:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000da0 	.word	0x20000da0
 800134c:	00000000 	.word	0x00000000

08001350 <_test_assert_time_window.constprop.1>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	1a1b      	subs	r3, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800135a:	428b      	cmp	r3, r1
 800135c:	d308      	bcc.n	8001370 <_test_assert_time_window.constprop.1+0x20>
  test_failure_message = msg;
 800135e:	4905      	ldr	r1, [pc, #20]	; (8001374 <_test_assert_time_window.constprop.1+0x24>)
  test_local_fail      = true;
 8001360:	4a05      	ldr	r2, [pc, #20]	; (8001378 <_test_assert_time_window.constprop.1+0x28>)
  test_global_fail     = true;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <_test_assert_time_window.constprop.1+0x2c>)
  test_failure_message = msg;
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <_test_assert_time_window.constprop.1+0x30>)
 8001366:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 8001368:	2001      	movs	r0, #1
 800136a:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 800136c:	7018      	strb	r0, [r3, #0]
 800136e:	4770      	bx	lr
    return _test_fail(msg);
  return false;
 8001370:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8001372:	4770      	bx	lr
 8001374:	200016e4 	.word	0x200016e4
 8001378:	20001788 	.word	0x20001788
 800137c:	200016e8 	.word	0x200016e8
 8001380:	0800aae0 	.word	0x0800aae0
	...

08001390 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8001390:	b4f0      	push	{r4, r5, r6, r7}
 8001392:	2320      	movs	r3, #32
 8001394:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001398:	4d0d      	ldr	r5, [pc, #52]	; (80013d0 <chCoreAllocAlignedWithOffset+0x40>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800139a:	e9d5 7400 	ldrd	r7, r4, [r5]
 800139e:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80013a0:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 80013a2:	1983      	adds	r3, r0, r6
 80013a4:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80013a6:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 80013a8:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80013aa:	4008      	ands	r0, r1
  next = p + size;
 80013ac:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80013ae:	42a3      	cmp	r3, r4
 80013b0:	d807      	bhi.n	80013c2 <chCoreAllocAlignedWithOffset+0x32>
 80013b2:	429f      	cmp	r7, r3
 80013b4:	d805      	bhi.n	80013c2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 80013b6:	602b      	str	r3, [r5, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80013be:	bcf0      	pop	{r4, r5, r6, r7}
 80013c0:	4770      	bx	lr
    return NULL;
 80013c2:	2000      	movs	r0, #0
 80013c4:	2300      	movs	r3, #0
 80013c6:	f383 8811 	msr	BASEPRI, r3
}
 80013ca:	bcf0      	pop	{r4, r5, r6, r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000f38 	.word	0x20000f38
	...

080013e0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80013e0:	4a02      	ldr	r2, [pc, #8]	; (80013ec <notify2+0xc>)
 80013e2:	68d3      	ldr	r3, [r2, #12]
 80013e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013e8:	60d3      	str	r3, [r2, #12]
}
 80013ea:	4770      	bx	lr
 80013ec:	40004400 	.word	0x40004400

080013f0 <oslib_test_004_001_setup>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <oslib_test_004_001_setup+0x30>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 80013f2:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <oslib_test_004_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80013f4:	1dd9      	adds	r1, r3, #7
 80013f6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80013fa:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80013fc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [4.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_004_001_setup(void) {
 8001400:	b410      	push	{r4}
  heapp->provider = NULL;
 8001402:	2000      	movs	r0, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001404:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800140c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800140e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8001410:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8001414:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8001416:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 8001418:	6150      	str	r0, [r2, #20]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 800141a:	bc10      	pop	{r4}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20001708 	.word	0x20001708
 8001424:	200016ec 	.word	0x200016ec
	...

08001430 <oslib_test_003_003_setup>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <oslib_test_003_003_setup+0x18>)
 8001432:	2200      	movs	r2, #0
  mp->object_size = size;
 8001434:	2104      	movs	r1, #4
 8001436:	e9c3 3300 	strd	r3, r3, [r3]
  mp->next = NULL;
 800143a:	60da      	str	r2, [r3, #12]
  mp->align = align;
  mp->provider = provider;
 800143c:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 800143e:	609a      	str	r2, [r3, #8]
  mp->align = align;
 8001440:	e9c3 1104 	strd	r1, r1, [r3, #16]
 * .
 */

static void oslib_test_003_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000c14 	.word	0x20000c14
 800144c:	00000000 	.word	0x00000000

08001450 <oslib_test_003_002_setup>:
 8001450:	f7ff bfee 	b.w	8001430 <oslib_test_003_003_setup>
	...

08001460 <null_provider>:
}
 8001460:	2000      	movs	r0, #0
 8001462:	4770      	bx	lr
	...

08001470 <oslib_test_003_001_setup>:
  mp->next = NULL;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <oslib_test_003_001_setup+0x10>)
 8001472:	2100      	movs	r1, #0
  mp->object_size = size;
 8001474:	2204      	movs	r2, #4
  mp->next = NULL;
 8001476:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 8001478:	60d9      	str	r1, [r3, #12]
  mp->align = align;
 800147a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
 800147e:	4770      	bx	lr
 8001480:	20000c78 	.word	0x20000c78
	...

08001490 <oslib_test_002_002_setup>:
 * - [2.2.1] Reading while pipe is empty.
 * - [2.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_002_002_setup(void) {
 8001490:	b430      	push	{r4, r5}
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <oslib_test_002_002_setup+0x40>)
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <oslib_test_002_002_setup+0x44>)
 8001496:	601a      	str	r2, [r3, #0]
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
 8001498:	f102 0508 	add.w	r5, r2, #8
  tqp->next = (thread_t *)tqp;
 800149c:	f103 0420 	add.w	r4, r3, #32
 80014a0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80014a4:	f103 0140 	add.w	r1, r3, #64	; 0x40
  pp->wrptr  = buf;
 80014a8:	e9c3 2202 	strd	r2, r2, [r3, #8]
  pp->cnt    = (size_t)0;
 80014ac:	2200      	movs	r2, #0
  pp->top    = &buf[n];
 80014ae:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 80014b0:	e9c3 4408 	strd	r4, r4, [r3, #32]
 80014b4:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 80014b8:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->cnt    = (size_t)0;
 80014bc:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 80014be:	751a      	strb	r2, [r3, #20]
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 80014c0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
 80014c8:	649a      	str	r2, [r3, #72]	; 0x48
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 80014ca:	bc30      	pop	{r4, r5}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000c90 	.word	0x20000c90
 80014d4:	20000d90 	.word	0x20000d90
	...

080014e0 <oslib_test_002_001_setup>:
static void oslib_test_002_001_setup(void) {
 80014e0:	b430      	push	{r4, r5}
  pp->buffer = buf;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <oslib_test_002_001_setup+0x40>)
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <oslib_test_002_001_setup+0x44>)
 80014e6:	601a      	str	r2, [r3, #0]
  pp->top    = &buf[n];
 80014e8:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 80014ec:	f103 0420 	add.w	r4, r3, #32
 80014f0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80014f4:	f103 0140 	add.w	r1, r3, #64	; 0x40
  pp->wrptr  = buf;
 80014f8:	e9c3 2202 	strd	r2, r2, [r3, #8]
  pp->cnt    = (size_t)0;
 80014fc:	2200      	movs	r2, #0
  pp->top    = &buf[n];
 80014fe:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 8001500:	e9c3 4408 	strd	r4, r4, [r3, #32]
 8001504:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 8001508:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->cnt    = (size_t)0;
 800150c:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 800150e:	751a      	strb	r2, [r3, #20]
  pp->rtr    = NULL;
 8001510:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
 8001516:	639a      	str	r2, [r3, #56]	; 0x38
 8001518:	649a      	str	r2, [r3, #72]	; 0x48
}
 800151a:	bc30      	pop	{r4, r5}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000c90 	.word	0x20000c90
 8001524:	20000d90 	.word	0x20000d90
	...

08001530 <oslib_test_001_003_setup>:
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
 8001530:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <oslib_test_001_003_setup+0x2c>)
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <oslib_test_001_003_setup+0x30>)
 8001536:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 8001538:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 800153c:	f103 0418 	add.w	r4, r3, #24
  mbp->cnt    = (size_t)0;
 8001540:	2100      	movs	r1, #0
 8001542:	f103 0020 	add.w	r0, r3, #32
  mbp->top    = &buf[n];
 8001546:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 8001548:	e9c3 4406 	strd	r4, r4, [r3, #24]
  mbp->wrptr  = buf;
 800154c:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8001550:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8001554:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8001556:	7519      	strb	r1, [r3, #20]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8001558:	bc30      	pop	{r4, r5}
 800155a:	4770      	bx	lr
 800155c:	20000c50 	.word	0x20000c50
 8001560:	20001004 	.word	0x20001004
	...

08001570 <oslib_test_001_002_setup>:
 8001570:	f7ff bfde 	b.w	8001530 <oslib_test_001_003_setup>
	...

08001580 <oslib_test_001_001_setup>:
 8001580:	f7ff bfd6 	b.w	8001530 <oslib_test_001_003_setup>
	...

08001590 <rt_test_010_011_setup>:
  tqp->next = (thread_t *)tqp;
 8001590:	4b02      	ldr	r3, [pc, #8]	; (800159c <rt_test_010_011_setup+0xc>)
 8001592:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8001594:	e9c3 3300 	strd	r3, r3, [r3]
 8001598:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_010_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 800159a:	4770      	bx	lr
 800159c:	20001028 	.word	0x20001028

080015a0 <rt_test_010_010_setup>:
  tqp->next = (thread_t *)tqp;
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <rt_test_010_010_setup+0xc>)
 80015a2:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 80015a4:	e9c3 3300 	strd	r3, r3, [r3]
 80015a8:	609a      	str	r2, [r3, #8]
}
 80015aa:	4770      	bx	lr
 80015ac:	20001068 	.word	0x20001068

080015b0 <tmo>:
static void tmo(void *param) {(void)param;}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
	...

080015c0 <rt_test_010_007_setup>:
  tqp->next = (thread_t *)tqp;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <rt_test_010_007_setup+0xc>)
 80015c2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 80015c4:	e9c3 3300 	strd	r3, r3, [r3]
 80015c8:	609a      	str	r2, [r3, #8]
}
 80015ca:	4770      	bx	lr
 80015cc:	20001068 	.word	0x20001068

080015d0 <rt_test_009_002_setup>:
  mp->next = NULL;
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <rt_test_009_002_setup+0x14>)
 80015d2:	2200      	movs	r2, #0
  mp->object_size = size;
 80015d4:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 80015d8:	2104      	movs	r1, #4
 80015da:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 80015de:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 80015e0:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 80015e2:	4770      	bx	lr
 80015e4:	20001018 	.word	0x20001018
	...

080015f0 <rt_test_009_001_setup>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <rt_test_009_001_setup+0x30>)
  heapp->provider = NULL;
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <rt_test_009_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80015f4:	1dd9      	adds	r1, r3, #7
 80015f6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80015fa:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80015fc:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_009_001_setup(void) {
 8001600:	b410      	push	{r4}
  heapp->provider = NULL;
 8001602:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8001604:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800160c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800160e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8001610:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8001614:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8001616:	6090      	str	r0, [r2, #8]
 8001618:	6150      	str	r0, [r2, #20]
}
 800161a:	bc10      	pop	{r4}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20001078 	.word	0x20001078
 8001624:	20000fe4 	.word	0x20000fe4
	...

08001630 <rt_test_008_007_setup>:
 *   has been emptied.
 * - [8.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_008_007_setup(void) {
 8001630:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001632:	f7ff fe7d 	bl	8001330 <chEvtGetAndClearEvents.constprop.53>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001636:	4a02      	ldr	r2, [pc, #8]	; (8001640 <rt_test_008_007_setup+0x10>)
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <rt_test_008_007_setup+0x14>)
 800163a:	6012      	str	r2, [r2, #0]
 800163c:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 800163e:	bd08      	pop	{r3, pc}
 8001640:	20000c0c 	.word	0x20000c0c
 8001644:	20000c10 	.word	0x20000c10
	...

08001650 <rt_test_008_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001650:	f7ff be6e 	b.w	8001330 <chEvtGetAndClearEvents.constprop.53>
	...

08001660 <rt_test_008_005_setup>:
 8001660:	f7ff bff6 	b.w	8001650 <rt_test_008_006_setup>
	...

08001670 <rt_test_008_004_setup>:
 8001670:	f7ff bfee 	b.w	8001650 <rt_test_008_006_setup>
	...

08001680 <rt_test_008_003_setup>:
 8001680:	f7ff bfe6 	b.w	8001650 <rt_test_008_006_setup>
	...

08001690 <rt_test_008_002_setup>:
 8001690:	f7ff bfde 	b.w	8001650 <rt_test_008_006_setup>
	...

080016a0 <rt_test_006_009_setup>:
  tqp->next = (thread_t *)tqp;
 80016a0:	4906      	ldr	r1, [pc, #24]	; (80016bc <rt_test_006_009_setup+0x1c>)
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <rt_test_006_009_setup+0x20>)
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <rt_test_006_009_setup+0x24>)
 80016a6:	6009      	str	r1, [r1, #0]
 80016a8:	2000      	movs	r0, #0
  tqp->prev = (thread_t *)tqp;
 80016aa:	6049      	str	r1, [r1, #4]
 80016ac:	e9c2 2200 	strd	r2, r2, [r2]
 80016b0:	6090      	str	r0, [r2, #8]
 80016b2:	6098      	str	r0, [r3, #8]
 80016b4:	e9c3 3300 	strd	r3, r3, [r3]

static void rt_test_006_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000c04 	.word	0x20000c04
 80016c0:	20000c30 	.word	0x20000c30
 80016c4:	20000c40 	.word	0x20000c40
	...

080016d0 <rt_test_006_008_setup>:
  tqp->next = (thread_t *)tqp;
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <rt_test_006_008_setup+0x14>)
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <rt_test_006_008_setup+0x18>)
 80016d4:	6012      	str	r2, [r2, #0]
 80016d6:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 80016d8:	6052      	str	r2, [r2, #4]
 80016da:	e9c3 3300 	strd	r3, r3, [r3]
 80016de:	6099      	str	r1, [r3, #8]
}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000c04 	.word	0x20000c04
 80016e8:	20000c30 	.word	0x20000c30
 80016ec:	00000000 	.word	0x00000000

080016f0 <rt_test_006_007_setup>:
 80016f0:	f7ff bfee 	b.w	80016d0 <rt_test_006_008_setup>
	...

08001700 <rt_test_006_005_setup>:
  tqp->next = (thread_t *)tqp;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <rt_test_006_005_setup+0xc>)
 8001702:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8001704:	e9c3 3300 	strd	r3, r3, [r3]
 8001708:	609a      	str	r2, [r3, #8]
}
 800170a:	4770      	bx	lr
 800170c:	20000c30 	.word	0x20000c30

08001710 <rt_test_006_004_setup>:
  tqp->next = (thread_t *)tqp;
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <rt_test_006_004_setup+0x14>)
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <rt_test_006_004_setup+0x18>)
 8001714:	6012      	str	r2, [r2, #0]
 8001716:	2100      	movs	r1, #0
 8001718:	e9c2 2101 	strd	r2, r1, [r2, #4]
 800171c:	6099      	str	r1, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 800171e:	e9c3 3300 	strd	r3, r3, [r3]
}
 8001722:	4770      	bx	lr
 8001724:	20000c30 	.word	0x20000c30
 8001728:	20000c40 	.word	0x20000c40
 800172c:	00000000 	.word	0x00000000

08001730 <rt_test_006_001_setup>:
 8001730:	f7ff bfe6 	b.w	8001700 <rt_test_006_005_setup>
	...

08001740 <rt_test_005_005_setup>:
  tqp->next = (thread_t *)tqp;
 8001740:	4b02      	ldr	r3, [pc, #8]	; (800174c <rt_test_005_005_setup+0xc>)
 8001742:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8001744:	e9c3 3300 	strd	r3, r3, [r3]
 8001748:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_005_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 800174a:	4770      	bx	lr
 800174c:	2000105c 	.word	0x2000105c

08001750 <rt_test_005_004_setup>:
 8001750:	f7ff bff6 	b.w	8001740 <rt_test_005_005_setup>
	...

08001760 <rt_test_005_003_setup>:
 8001760:	f7ff bfee 	b.w	8001740 <rt_test_005_005_setup>
	...

08001770 <rt_test_005_002_setup>:
 8001770:	f7ff bfe6 	b.w	8001740 <rt_test_005_005_setup>
	...

08001780 <rt_test_005_001_setup>:
  tqp->next = (thread_t *)tqp;
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <rt_test_005_001_setup+0xc>)
 8001782:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8001784:	e9c3 3300 	strd	r3, r3, [r3]
 8001788:	609a      	str	r2, [r3, #8]
}
 800178a:	4770      	bx	lr
 800178c:	2000105c 	.word	0x2000105c

08001790 <rt_test_004_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
 8001790:	4b01      	ldr	r3, [pc, #4]	; (8001798 <rt_test_004_001_setup+0x8>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
}
 8001796:	4770      	bx	lr
 8001798:	200017b8 	.word	0x200017b8
 800179c:	00000000 	.word	0x00000000

080017a0 <_test_assert>:
  if (!condition)
 80017a0:	b948      	cbnz	r0, 80017b6 <_test_assert+0x16>
bool _test_assert(bool condition, const char *msg) {
 80017a2:	b410      	push	{r4}
  test_global_fail     = true;
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_test_assert+0x1c>)
  test_local_fail      = true;
 80017a6:	4c06      	ldr	r4, [pc, #24]	; (80017c0 <_test_assert+0x20>)
  test_failure_message = msg;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <_test_assert+0x24>)
  test_local_fail      = true;
 80017aa:	2001      	movs	r0, #1
 80017ac:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 80017ae:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 80017b0:	6019      	str	r1, [r3, #0]
}
 80017b2:	bc10      	pop	{r4}
 80017b4:	4770      	bx	lr
  return false;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200016e8 	.word	0x200016e8
 80017c0:	20001788 	.word	0x20001788
 80017c4:	200016e4 	.word	0x200016e4
	...

080017d0 <rt_test_002_004_execute>:

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <rt_test_002_004_execute+0x14>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d8:	6019      	str	r1, [r3, #0]
 80017da:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80017dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 80017de:	4299      	cmp	r1, r3
 80017e0:	d0fc      	beq.n	80017dc <rt_test_002_004_execute+0xc>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 80017e2:	4770      	bx	lr
 80017e4:	2000178c 	.word	0x2000178c
	...

080017f0 <rt_test_002_003_execute>:
  test_set_step(1);
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <rt_test_002_003_execute+0x20>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	2320      	movs	r3, #32
 80017f8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80017fc:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 80017fe:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001800:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8001804:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001806:	2300      	movs	r3, #0
 8001808:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800180c:	b662      	cpsie	i
}
 800180e:	4770      	bx	lr
 8001810:	2000178c 	.word	0x2000178c
	...

08001820 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <test_terminate_threads+0x30>)
 8001822:	b430      	push	{r4, r5}
 8001824:	f103 0014 	add.w	r0, r3, #20
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001828:	2520      	movs	r5, #32
 800182a:	2400      	movs	r4, #0
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800182c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001830:	b14a      	cbz	r2, 8001846 <test_terminate_threads+0x26>
 8001832:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8001836:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 800183a:	f041 0104 	orr.w	r1, r1, #4
 800183e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8001842:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 8001846:	4283      	cmp	r3, r0
 8001848:	d1f0      	bne.n	800182c <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 800184a:	bc30      	pop	{r4, r5}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200017a4 	.word	0x200017a4
	...

08001860 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8001860:	b320      	cbz	r0, 80018ac <test_printn.part.0+0x4c>
void test_printn(uint32_t n) {
 8001862:	b570      	push	{r4, r5, r6, lr}
 8001864:	b084      	sub	sp, #16
    p = buf;
 8001866:	466d      	mov	r5, sp
 8001868:	462c      	mov	r4, r5
      *p++ = (n % 10) + '0', n /= 10;
 800186a:	4e11      	ldr	r6, [pc, #68]	; (80018b0 <test_printn.part.0+0x50>)
 800186c:	e000      	b.n	8001870 <test_printn.part.0+0x10>
    while (n)
 800186e:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 8001870:	fba6 2300 	umull	r2, r3, r6, r0
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800187a:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800187e:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001882:	4622      	mov	r2, r4
 8001884:	b2c9      	uxtb	r1, r1
 8001886:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 800188a:	4618      	mov	r0, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ee      	bne.n	800186e <test_printn.part.0+0xe>
    while (p > buf)
 8001890:	42aa      	cmp	r2, r5
 8001892:	d909      	bls.n	80018a8 <test_printn.part.0+0x48>
 8001894:	4e07      	ldr	r6, [pc, #28]	; (80018b4 <test_printn.part.0+0x54>)
 8001896:	e001      	b.n	800189c <test_printn.part.0+0x3c>
 8001898:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 800189c:	6830      	ldr	r0, [r6, #0]
 800189e:	6803      	ldr	r3, [r0, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4798      	blx	r3
    while (p > buf)
 80018a4:	42a5      	cmp	r5, r4
 80018a6:	d1f7      	bne.n	8001898 <test_printn.part.0+0x38>
  }
}
 80018a8:	b004      	add	sp, #16
 80018aa:	bd70      	pop	{r4, r5, r6, pc}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	200016e0 	.word	0x200016e0
	...

080018c0 <test_printn>:
  if (!n)
 80018c0:	b928      	cbnz	r0, 80018ce <test_printn+0xe>
    streamPut(test_chp, '0');
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <test_printn+0x14>)
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	6803      	ldr	r3, [r0, #0]
 80018c8:	2130      	movs	r1, #48	; 0x30
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4718      	bx	r3
 80018ce:	f7ff bfc7 	b.w	8001860 <test_printn.part.0>
 80018d2:	bf00      	nop
 80018d4:	200016e0 	.word	0x200016e0
	...

080018e0 <test_emit_token>:
 80018e0:	2320      	movs	r3, #32
 80018e2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <test_emit_token+0x20>)
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <test_emit_token+0x24>)
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d202      	bcs.n	80018f6 <test_emit_token+0x16>
    *test_tokp++ = token;
 80018f0:	1c59      	adds	r1, r3, #1
 80018f2:	7018      	strb	r0, [r3, #0]
 80018f4:	6011      	str	r1, [r2, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200017a0 	.word	0x200017a0
 8001904:	200017a0 	.word	0x200017a0
	...

08001910 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8001910:	2043      	movs	r0, #67	; 0x43
 8001912:	f7ff bfe5 	b.w	80018e0 <test_emit_token>
 8001916:	bf00      	nop
	...

08001920 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8001920:	2042      	movs	r0, #66	; 0x42
 8001922:	f7ff bfdd 	b.w	80018e0 <test_emit_token>
 8001926:	bf00      	nop
	...

08001930 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8001930:	2041      	movs	r0, #65	; 0x41
 8001932:	f7ff bfd5 	b.w	80018e0 <test_emit_token>
 8001936:	bf00      	nop
	...

08001940 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8001940:	7800      	ldrb	r0, [r0, #0]
 8001942:	f7ff bfcd 	b.w	80018e0 <test_emit_token>
 8001946:	bf00      	nop
	...

08001950 <dyn_thread1>:
 8001950:	f7ff bff6 	b.w	8001940 <thread>
	...

08001960 <test_println>:
void test_println(const char *msgp) {
 8001960:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8001962:	7801      	ldrb	r1, [r0, #0]
 8001964:	b189      	cbz	r1, 800198a <test_println+0x2a>
 8001966:	4d0a      	ldr	r5, [pc, #40]	; (8001990 <test_println+0x30>)
 8001968:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 800196a:	6828      	ldr	r0, [r5, #0]
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4798      	blx	r3
  while (*msgp)
 8001972:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001976:	2900      	cmp	r1, #0
 8001978:	d1f7      	bne.n	800196a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800197a:	6828      	ldr	r0, [r5, #0]
 800197c:	4905      	ldr	r1, [pc, #20]	; (8001994 <test_println+0x34>)
 800197e:	6803      	ldr	r3, [r0, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	685b      	ldr	r3, [r3, #4]
}
 8001984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8001988:	4718      	bx	r3
 800198a:	4d01      	ldr	r5, [pc, #4]	; (8001990 <test_println+0x30>)
 800198c:	e7f5      	b.n	800197a <test_println+0x1a>
 800198e:	bf00      	nop
 8001990:	200016e0 	.word	0x200016e0
 8001994:	0800ae58 	.word	0x0800ae58
	...

080019a0 <test_print>:
  while (*msgp)
 80019a0:	7801      	ldrb	r1, [r0, #0]
 80019a2:	b159      	cbz	r1, 80019bc <test_print+0x1c>
void test_print(const char *msgp) {
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	4d06      	ldr	r5, [pc, #24]	; (80019c0 <test_print+0x20>)
 80019a8:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 80019aa:	6828      	ldr	r0, [r5, #0]
 80019ac:	6803      	ldr	r3, [r0, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4798      	blx	r3
  while (*msgp)
 80019b2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80019b6:	2900      	cmp	r1, #0
 80019b8:	d1f7      	bne.n	80019aa <test_print+0xa>
}
 80019ba:	bd38      	pop	{r3, r4, r5, pc}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	200016e0 	.word	0x200016e0
	...

080019d0 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 80019d0:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 80019d2:	4e0d      	ldr	r6, [pc, #52]	; (8001a08 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 80019d4:	4f0d      	ldr	r7, [pc, #52]	; (8001a0c <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 80019d6:	6835      	ldr	r5, [r6, #0]
 80019d8:	1e42      	subs	r2, r0, #1
  char *cp = test_tokens_buffer;
 80019da:	463b      	mov	r3, r7
 80019dc:	e003      	b.n	80019e6 <_test_assert_sequence+0x16>
    if (*cp++ != *expected++)
 80019de:	f813 4b01 	ldrb.w	r4, [r3], #1
 80019e2:	4284      	cmp	r4, r0
 80019e4:	d107      	bne.n	80019f6 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 80019e6:	429d      	cmp	r5, r3
 80019e8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80019ec:	d8f7      	bhi.n	80019de <_test_assert_sequence+0xe>
  if (*expected)
 80019ee:	b910      	cbnz	r0, 80019f6 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 80019f0:	6037      	str	r7, [r6, #0]
}
 80019f2:	bcf0      	pop	{r4, r5, r6, r7}
 80019f4:	4770      	bx	lr
  test_local_fail      = true;
 80019f6:	4c06      	ldr	r4, [pc, #24]	; (8001a10 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 80019fc:	2001      	movs	r0, #1
 80019fe:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8001a00:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8001a02:	6019      	str	r1, [r3, #0]
}
 8001a04:	bcf0      	pop	{r4, r5, r6, r7}
 8001a06:	4770      	bx	lr
 8001a08:	200017a0 	.word	0x200017a0
 8001a0c:	20001790 	.word	0x20001790
 8001a10:	20001788 	.word	0x20001788
 8001a14:	200016e8 	.word	0x200016e8
 8001a18:	200016e4 	.word	0x200016e4
 8001a1c:	00000000 	.word	0x00000000

08001a20 <rt_test_008_002_execute>:
static void rt_test_008_002_execute(void) {
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <rt_test_008_002_execute+0x40>)
 8001a24:	4f0f      	ldr	r7, [pc, #60]	; (8001a64 <rt_test_008_002_execute+0x44>)
 8001a26:	2601      	movs	r6, #1
 8001a28:	601e      	str	r6, [r3, #0]
 8001a2a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8001a2c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001a2e:	fa25 f304 	lsr.w	r3, r5, r4
 8001a32:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001a36:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8001a3a:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001a3c:	d00d      	beq.n	8001a5a <rt_test_008_002_execute+0x3a>
      handlers[eid](eid);
 8001a3e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8001a42:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8001a46:	3401      	adds	r4, #1
      handlers[eid](eid);
 8001a48:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8001a4a:	2d00      	cmp	r5, #0
 8001a4c:	d1ef      	bne.n	8001a2e <rt_test_008_002_execute+0xe>
    test_assert_sequence("ABC", "invalid sequence");
 8001a4e:	4906      	ldr	r1, [pc, #24]	; (8001a68 <rt_test_008_002_execute+0x48>)
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <rt_test_008_002_execute+0x4c>)
}
 8001a52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8001a56:	f7ff bfbb 	b.w	80019d0 <_test_assert_sequence>
    eid++;
 8001a5a:	3401      	adds	r4, #1
 8001a5c:	e7e7      	b.n	8001a2e <rt_test_008_002_execute+0xe>
 8001a5e:	bf00      	nop
 8001a60:	2000178c 	.word	0x2000178c
 8001a64:	0800ae7c 	.word	0x0800ae7c
 8001a68:	0800c1b4 	.word	0x0800c1b4
 8001a6c:	0800c1c8 	.word	0x0800c1c8

08001a70 <print_line>:
static void print_line(void) {
 8001a70:	b570      	push	{r4, r5, r6, lr}
 8001a72:	4d08      	ldr	r5, [pc, #32]	; (8001a94 <print_line+0x24>)
 8001a74:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 8001a76:	6828      	ldr	r0, [r5, #0]
 8001a78:	6803      	ldr	r3, [r0, #0]
 8001a7a:	212d      	movs	r1, #45	; 0x2d
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8001a80:	3c01      	subs	r4, #1
 8001a82:	d1f8      	bne.n	8001a76 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8001a84:	6828      	ldr	r0, [r5, #0]
 8001a86:	4904      	ldr	r1, [pc, #16]	; (8001a98 <print_line+0x28>)
 8001a88:	6803      	ldr	r3, [r0, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	685b      	ldr	r3, [r3, #4]
}
 8001a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8001a92:	4718      	bx	r3
 8001a94:	200016e0 	.word	0x200016e0
 8001a98:	0800ae58 	.word	0x0800ae58
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <_port_irq_epilogue>:
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <_port_irq_epilogue+0x44>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001aae:	d102      	bne.n	8001ab6 <_port_irq_epilogue+0x16>
 8001ab0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001ab4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001ab6:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 8001aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001abe:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8001ac2:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001ac6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <_port_irq_epilogue+0x48>)
 8001acc:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8001ace:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001ad0:	6889      	ldr	r1, [r1, #8]
 8001ad2:	6892      	ldr	r2, [r2, #8]
 8001ad4:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001ad6:	bf8c      	ite	hi
 8001ad8:	4a04      	ldrhi	r2, [pc, #16]	; (8001aec <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001ada:	4a05      	ldrls	r2, [pc, #20]	; (8001af0 <_port_irq_epilogue+0x50>)
 8001adc:	f843 2c08 	str.w	r2, [r3, #-8]
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	20000da0 	.word	0x20000da0
 8001aec:	080002e1 	.word	0x080002e1
 8001af0:	080002e4 	.word	0x080002e4
	...

08001b00 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8001b00:	b470      	push	{r4, r5, r6}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001b02:	4c0b      	ldr	r4, [pc, #44]	; (8001b30 <chCoreAllocAlignedI+0x30>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8001b04:	e9d4 6300 	ldrd	r6, r3, [r4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001b08:	1e72      	subs	r2, r6, #1
  size = MEM_ALIGN_NEXT(size, align);
 8001b0a:	424d      	negs	r5, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001b0c:	440a      	add	r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 8001b0e:	3901      	subs	r1, #1
 8001b10:	4401      	add	r1, r0
 8001b12:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001b14:	ea02 0005 	and.w	r0, r2, r5
  next = p + size;
 8001b18:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8001b1a:	4299      	cmp	r1, r3
 8001b1c:	d804      	bhi.n	8001b28 <chCoreAllocAlignedI+0x28>
 8001b1e:	428e      	cmp	r6, r1
 8001b20:	d802      	bhi.n	8001b28 <chCoreAllocAlignedI+0x28>
  ch_memcore.nextmem = next;
 8001b22:	6021      	str	r1, [r4, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001b24:	bc70      	pop	{r4, r5, r6}
 8001b26:	4770      	bx	lr
    return NULL;
 8001b28:	2000      	movs	r0, #0
 8001b2a:	bc70      	pop	{r4, r5, r6}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000f38 	.word	0x20000f38
	...

08001b40 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001b40:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001b42:	2220      	movs	r2, #32
 8001b44:	4603      	mov	r3, r0
 8001b46:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 8001b4a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 8001b4c:	b128      	cbz	r0, 8001b5a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 8001b4e:	6802      	ldr	r2, [r0, #0]
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001b58:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	d0f8      	beq.n	8001b52 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8001b60:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8001b64:	4790      	blx	r2
 8001b66:	2300      	movs	r3, #0
 8001b68:	f383 8811 	msr	BASEPRI, r3
}
 8001b6c:	bd08      	pop	{r3, pc}
 8001b6e:	bf00      	nop

08001b70 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 8001b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8001b74:	4e3a      	ldr	r6, [pc, #232]	; (8001c60 <oslib_test_003_001_execute+0xf0>)
 8001b76:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <oslib_test_003_001_execute+0xf4>)
 8001b78:	4c3b      	ldr	r4, [pc, #236]	; (8001c68 <oslib_test_003_001_execute+0xf8>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	6032      	str	r2, [r6, #0]
 8001b7e:	2520      	movs	r5, #32
 8001b80:	2204      	movs	r2, #4
 8001b82:	2000      	movs	r0, #0
 8001b84:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8001b88:	6821      	ldr	r1, [r4, #0]
 8001b8a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001b92:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8001b94:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001b96:	440b      	add	r3, r1
  while (n != 0U) {
 8001b98:	d1f4      	bne.n	8001b84 <oslib_test_003_001_execute+0x14>
  test_set_step(2);
 8001b9a:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001b9c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001c68 <oslib_test_003_001_execute+0xf8>
 8001ba0:	4f32      	ldr	r7, [pc, #200]	; (8001c6c <oslib_test_003_001_execute+0xfc>)
  test_set_step(2);
 8001ba2:	6033      	str	r3, [r6, #0]
 8001ba4:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001ba6:	4640      	mov	r0, r8
 8001ba8:	f7ff ffca 	bl	8001b40 <chPoolAlloc>
 8001bac:	3000      	adds	r0, #0
 8001bae:	bf18      	it	ne
 8001bb0:	2001      	movne	r0, #1
 8001bb2:	4639      	mov	r1, r7
 8001bb4:	f7ff fdf4 	bl	80017a0 <_test_assert>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d13c      	bne.n	8001c36 <oslib_test_003_001_execute+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001bbc:	3d01      	subs	r5, #1
 8001bbe:	d1f2      	bne.n	8001ba6 <oslib_test_003_001_execute+0x36>
  test_set_step(3);
 8001bc0:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001bc2:	4829      	ldr	r0, [pc, #164]	; (8001c68 <oslib_test_003_001_execute+0xf8>)
  test_set_step(3);
 8001bc4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001bc6:	f7ff ffbb 	bl	8001b40 <chPoolAlloc>
 8001bca:	fab0 f080 	clz	r0, r0
 8001bce:	0940      	lsrs	r0, r0, #5
 8001bd0:	4927      	ldr	r1, [pc, #156]	; (8001c70 <oslib_test_003_001_execute+0x100>)
 8001bd2:	f7ff fde5 	bl	80017a0 <_test_assert>
 8001bd6:	bb70      	cbnz	r0, 8001c36 <oslib_test_003_001_execute+0xc6>
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <oslib_test_003_001_execute+0xf4>)
  test_set_step(4);
 8001bda:	2204      	movs	r2, #4
 8001bdc:	f103 0710 	add.w	r7, r3, #16
 8001be0:	6032      	str	r2, [r6, #0]
 8001be2:	2020      	movs	r0, #32
      chPoolFree(&mp1, &objects[i]);
 8001be4:	461a      	mov	r2, r3
 8001be6:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 8001bea:	6821      	ldr	r1, [r4, #0]
 8001bec:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 8001bf0:	6022      	str	r2, [r4, #0]
 8001bf2:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001bf6:	429f      	cmp	r7, r3
 8001bf8:	d1f4      	bne.n	8001be4 <oslib_test_003_001_execute+0x74>
  test_set_step(5);
 8001bfa:	2305      	movs	r3, #5
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001bfc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001c68 <oslib_test_003_001_execute+0xf8>
 8001c00:	4f1a      	ldr	r7, [pc, #104]	; (8001c6c <oslib_test_003_001_execute+0xfc>)
  test_set_step(5);
 8001c02:	6033      	str	r3, [r6, #0]
 8001c04:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001c06:	4640      	mov	r0, r8
 8001c08:	f7ff ff9a 	bl	8001b40 <chPoolAlloc>
 8001c0c:	3000      	adds	r0, #0
 8001c0e:	bf18      	it	ne
 8001c10:	2001      	movne	r0, #1
 8001c12:	4639      	mov	r1, r7
 8001c14:	f7ff fdc4 	bl	80017a0 <_test_assert>
 8001c18:	b968      	cbnz	r0, 8001c36 <oslib_test_003_001_execute+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001c1a:	3d01      	subs	r5, #1
 8001c1c:	d1f3      	bne.n	8001c06 <oslib_test_003_001_execute+0x96>
  test_set_step(6);
 8001c1e:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <oslib_test_003_001_execute+0xf8>)
  test_set_step(6);
 8001c22:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001c24:	f7ff ff8c 	bl	8001b40 <chPoolAlloc>
 8001c28:	fab0 f080 	clz	r0, r0
 8001c2c:	0940      	lsrs	r0, r0, #5
 8001c2e:	4910      	ldr	r1, [pc, #64]	; (8001c70 <oslib_test_003_001_execute+0x100>)
 8001c30:	f7ff fdb6 	bl	80017a0 <_test_assert>
 8001c34:	b108      	cbz	r0, 8001c3a <oslib_test_003_001_execute+0xca>
}
 8001c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(7);
 8001c3a:	2107      	movs	r1, #7
  mp->object_size = size;
 8001c3c:	2304      	movs	r3, #4
  mp->provider = provider;
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <oslib_test_003_001_execute+0x104>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <oslib_test_003_001_execute+0xf8>)
  test_set_step(7);
 8001c42:	6031      	str	r1, [r6, #0]
  mp->next = NULL;
 8001c44:	6025      	str	r5, [r4, #0]
  mp->align = align;
 8001c46:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->provider = provider;
 8001c4a:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001c4c:	f7ff ff78 	bl	8001b40 <chPoolAlloc>
 8001c50:	fab0 f080 	clz	r0, r0
 8001c54:	0940      	lsrs	r0, r0, #5
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <oslib_test_003_001_execute+0x108>)
}
 8001c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001c5c:	f7ff bda0 	b.w	80017a0 <_test_assert>
 8001c60:	2000178c 	.word	0x2000178c
 8001c64:	20001038 	.word	0x20001038
 8001c68:	20000c78 	.word	0x20000c78
 8001c6c:	0800b04c 	.word	0x0800b04c
 8001c70:	0800b058 	.word	0x0800b058
 8001c74:	08001461 	.word	0x08001461
 8001c78:	0800b068 	.word	0x0800b068
 8001c7c:	00000000 	.word	0x00000000

08001c80 <chEvtAddEvents>:
 8001c80:	2320      	movs	r3, #32
 8001c82:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <chEvtAddEvents+0x18>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8c:	4310      	orrs	r0, r2
 8001c8e:	6358      	str	r0, [r3, #52]	; 0x34
 8001c90:	2300      	movs	r3, #0
 8001c92:	f383 8811 	msr	BASEPRI, r3
}
 8001c96:	4770      	bx	lr
 8001c98:	20000da0 	.word	0x20000da0
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <chEvtUnregister>:
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	e002      	b.n	8001cb0 <chEvtUnregister+0x10>
    if (p->next == elp) {
 8001caa:	428b      	cmp	r3, r1
 8001cac:	d007      	beq.n	8001cbe <chEvtUnregister+0x1e>
 8001cae:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8001cb0:	6813      	ldr	r3, [r2, #0]
 8001cb2:	4283      	cmp	r3, r0
 8001cb4:	d1f9      	bne.n	8001caa <chEvtUnregister+0xa>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f383 8811 	msr	BASEPRI, r3
}
 8001cbc:	4770      	bx	lr
      p->next = elp->next;
 8001cbe:	680b      	ldr	r3, [r1, #0]
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f383 8811 	msr	BASEPRI, r3
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	0000      	movs	r0, r0
	...

08001cd0 <rt_test_008_001_execute>:
static void rt_test_008_001_execute(void) {
 8001cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  esp->next = (event_listener_t *)esp;
 8001cd4:	4c36      	ldr	r4, [pc, #216]	; (8001db0 <rt_test_008_001_execute+0xe0>)
  test_set_step(2);
 8001cd6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8001dc0 <rt_test_008_001_execute+0xf0>
 8001cda:	6024      	str	r4, [r4, #0]
 8001cdc:	2102      	movs	r1, #2
static void rt_test_008_001_execute(void) {
 8001cde:	b08a      	sub	sp, #40	; 0x28
  test_set_step(2);
 8001ce0:	f8c9 1000 	str.w	r1, [r9]
 8001ce4:	2620      	movs	r6, #32
 8001ce6:	f386 8811 	msr	BASEPRI, r6
  elp->listener = currp;
 8001cea:	4832      	ldr	r0, [pc, #200]	; (8001db4 <rt_test_008_001_execute+0xe4>)
  elp->next     = esp->next;
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	af0a      	add	r7, sp, #40	; 0x28
  elp->events   = events;
 8001cf0:	2201      	movs	r2, #1
  elp->next     = esp->next;
 8001cf2:	f847 3d14 	str.w	r3, [r7, #-20]!
  elp->listener = currp;
 8001cf6:	6983      	ldr	r3, [r0, #24]
 8001cf8:	9306      	str	r3, [sp, #24]
  elp->flags    = (eventflags_t)0;
 8001cfa:	2500      	movs	r5, #0
  elp->wflags   = wflags;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
  elp->events   = events;
 8001d00:	9207      	str	r2, [sp, #28]
  esp->next     = elp;
 8001d02:	6027      	str	r7, [r4, #0]
  elp->wflags   = wflags;
 8001d04:	e9cd 5308 	strd	r5, r3, [sp, #32]
 8001d08:	f385 8811 	msr	BASEPRI, r5
 8001d0c:	f386 8811 	msr	BASEPRI, r6
  elp->next     = esp->next;
 8001d10:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	f848 2d28 	str.w	r2, [r8, #-40]!
  elp->listener = currp;
 8001d1a:	6982      	ldr	r2, [r0, #24]
  esp->next     = elp;
 8001d1c:	f8c4 8000 	str.w	r8, [r4]
  elp->events   = events;
 8001d20:	e9cd 2101 	strd	r2, r1, [sp, #4]
  elp->wflags   = wflags;
 8001d24:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8001d28:	f385 8811 	msr	BASEPRI, r5
 8001d2c:	f386 8811 	msr	BASEPRI, r6
  return (bool)(esp != (event_source_t *)esp->next);
 8001d30:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001d32:	4921      	ldr	r1, [pc, #132]	; (8001db8 <rt_test_008_001_execute+0xe8>)
 8001d34:	1b00      	subs	r0, r0, r4
 8001d36:	bf18      	it	ne
 8001d38:	2001      	movne	r0, #1
 8001d3a:	f7ff fd31 	bl	80017a0 <_test_assert>
 8001d3e:	b120      	cbz	r0, 8001d4a <rt_test_008_001_execute+0x7a>
 8001d40:	f385 8811 	msr	BASEPRI, r5
}
 8001d44:	b00a      	add	sp, #40	; 0x28
 8001d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d4a:	4682      	mov	sl, r0
 8001d4c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8001d50:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 8001d52:	4639      	mov	r1, r7
 8001d54:	4620      	mov	r0, r4
  test_set_step(3);
 8001d56:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el1);
 8001d5a:	f7ff ffa1 	bl	8001ca0 <chEvtUnregister>
 8001d5e:	f386 8811 	msr	BASEPRI, r6
 8001d62:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001d64:	4914      	ldr	r1, [pc, #80]	; (8001db8 <rt_test_008_001_execute+0xe8>)
 8001d66:	1b00      	subs	r0, r0, r4
 8001d68:	bf18      	it	ne
 8001d6a:	2001      	movne	r0, #1
 8001d6c:	f7ff fd18 	bl	80017a0 <_test_assert>
 8001d70:	4605      	mov	r5, r0
 8001d72:	b120      	cbz	r0, 8001d7e <rt_test_008_001_execute+0xae>
 8001d74:	f38a 8811 	msr	BASEPRI, sl
}
 8001d78:	b00a      	add	sp, #40	; 0x28
 8001d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d7e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 8001d82:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8001d84:	4641      	mov	r1, r8
 8001d86:	4620      	mov	r0, r4
  test_set_step(4);
 8001d88:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el2);
 8001d8c:	f7ff ff88 	bl	8001ca0 <chEvtUnregister>
 8001d90:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	4909      	ldr	r1, [pc, #36]	; (8001dbc <rt_test_008_001_execute+0xec>)
 8001d98:	1b00      	subs	r0, r0, r4
 8001d9a:	fab0 f080 	clz	r0, r0
 8001d9e:	0940      	lsrs	r0, r0, #5
 8001da0:	f7ff fcfe 	bl	80017a0 <_test_assert>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	d1cb      	bne.n	8001d40 <rt_test_008_001_execute+0x70>
 8001da8:	f380 8811 	msr	BASEPRI, r0
 8001dac:	e7ca      	b.n	8001d44 <rt_test_008_001_execute+0x74>
 8001dae:	bf00      	nop
 8001db0:	20000c0c 	.word	0x20000c0c
 8001db4:	20000da0 	.word	0x20000da0
 8001db8:	0800c188 	.word	0x0800c188
 8001dbc:	0800c194 	.word	0x0800c194
 8001dc0:	2000178c 	.word	0x2000178c
	...

08001dd0 <chTMStopMeasurementX>:
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <chTMStopMeasurementX+0x40>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8001dd6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001dd8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 8001dda:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001ddc:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 8001dde:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 8001de0:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 8001de2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8001de6:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8001de8:	18e6      	adds	r6, r4, r3
 8001dea:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 8001dee:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8001df0:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8001df2:	bf88      	it	hi
 8001df4:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8001df6:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8001df8:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8001dfa:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8001dfe:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 8001e02:	bf38      	it	cc
 8001e04:	6003      	strcc	r3, [r0, #0]
}
 8001e06:	bcf0      	pop	{r4, r5, r6, r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e0001000 	.word	0xe0001000
 8001e10:	20000da0 	.word	0x20000da0
	...

08001e20 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001e20:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 8001e22:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8001e26:	b4f0      	push	{r4, r5, r6, r7}
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001e28:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 8001e2c:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 8001e2e:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8001e32:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001e34:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001e36:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c
  return _thread_init(tp, tdp->name, tdp->prio);
 8001e3a:	6805      	ldr	r5, [r0, #0]
 8001e3c:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001e3e:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8001e42:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8001e46:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 8001e4a:	f843 2c38 	str.w	r2, [r3, #-56]
 8001e4e:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 8001e50:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8001e54:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8001e58:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001e5c:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8001e60:	4d0c      	ldr	r5, [pc, #48]	; (8001e94 <chThdCreateSuspendedI+0x74>)
 8001e62:	f843 0c3c 	str.w	r0, [r3, #-60]
 8001e66:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001e6a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  tp->epending  = (eventmask_t)0;
 8001e6e:	e943 1105 	strd	r1, r1, [r3, #-20]
  list_init(&tp->waiting);
 8001e72:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 8001e76:	f1a3 011c 	sub.w	r1, r3, #28
  REG_INSERT(tp);
 8001e7a:	f843 4c34 	str.w	r4, [r3, #-52]
 8001e7e:	6120      	str	r0, [r4, #16]
 8001e80:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8001e82:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8001e86:	f843 1c18 	str.w	r1, [r3, #-24]
}
 8001e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000da0 	.word	0x20000da0
 8001e94:	080002d1 	.word	0x080002d1
	...

08001ea0 <wakeup>:
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001ea6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001eaa:	2b07      	cmp	r3, #7
 8001eac:	d80e      	bhi.n	8001ecc <wakeup+0x2c>
 8001eae:	e8df f003 	tbb	[pc, r3]
 8001eb2:	0d28      	.short	0x0d28
 8001eb4:	0408240d 	.word	0x0408240d
 8001eb8:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 8001eba:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001ebc:	6893      	ldr	r3, [r2, #8]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001ec2:	e9d0 2300 	ldrd	r2, r3, [r0]
 8001ec6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001ec8:	6802      	ldr	r2, [r0, #0]
 8001eca:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 8001ecc:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8001ece:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8001ed0:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 8001ed4:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8001ed8:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8001eda:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8001ede:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	d2fb      	bcs.n	8001ede <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	2100      	movs	r1, #0
 8001eea:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001eee:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001ef0:	6058      	str	r0, [r3, #4]
 8001ef2:	f381 8811 	msr	BASEPRI, r1
}
 8001ef6:	bc10      	pop	{r4}
 8001ef8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001efa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e7e4      	b.n	8001ecc <wakeup+0x2c>
 8001f02:	2300      	movs	r3, #0
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000da0 	.word	0x20000da0

08001f10 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8001f10:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8001f12:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8001f16:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8001f18:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8001f1c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4282      	cmp	r2, r0
 8001f22:	d2fb      	bcs.n	8001f1c <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8001f24:	685a      	ldr	r2, [r3, #4]
}
 8001f26:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8001f28:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8001f2c:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8001f2e:	6059      	str	r1, [r3, #4]
}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000da0 	.word	0x20000da0
	...

08001f40 <chThdDequeueNextI.constprop.90>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001f40:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001f42:	4298      	cmp	r0, r3
 8001f44:	d007      	beq.n	8001f56 <chThdDequeueNextI.constprop.90+0x16>
  tqp->next             = tp->queue.next;
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001f4a:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001f4c:	6050      	str	r0, [r2, #4]
  (void) chSchReadyI(tp);
 8001f4e:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 8001f50:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001f52:	f7ff bfdd 	b.w	8001f10 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001f56:	4770      	bx	lr
	...

08001f60 <chMBPostI.constprop.37>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <chMBPostI.constprop.37+0x40>)
 8001f62:	7d1a      	ldrb	r2, [r3, #20]
 8001f64:	b9b2      	cbnz	r2, 8001f94 <chMBPostI.constprop.37+0x34>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001f66:	b570      	push	{r4, r5, r6, lr}
 8001f68:	e9d3 6100 	ldrd	r6, r1, [r3]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 8001f6e:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001f70:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8001f74:	d011      	beq.n	8001f9a <chMBPostI.constprop.37+0x3a>
    *mbp->wrptr++ = msg;
 8001f76:	689d      	ldr	r5, [r3, #8]
 8001f78:	1d2c      	adds	r4, r5, #4
 8001f7a:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 8001f7c:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 8001f7e:	6028      	str	r0, [r5, #0]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8001f80:	f102 0201 	add.w	r2, r2, #1

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <chMBPostI.constprop.37+0x44>)
      mbp->wrptr = mbp->buffer;
 8001f86:	bf98      	it	ls
 8001f88:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 8001f8a:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001f8c:	f7ff ffd8 	bl	8001f40 <chThdDequeueNextI.constprop.90>

    return MSG_OK;
 8001f90:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 8001f94:	f06f 0001 	mvn.w	r0, #1
}
 8001f98:	4770      	bx	lr
  return MSG_TIMEOUT;
 8001f9a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
 8001fa0:	20000c50 	.word	0x20000c50
 8001fa4:	20000c70 	.word	0x20000c70
	...

08001fb0 <chMBPostAheadI.constprop.34>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001fb0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <chMBPostAheadI.constprop.34+0x40>)
 8001fb4:	7d1a      	ldrb	r2, [r3, #20]
 8001fb6:	b9a2      	cbnz	r2, 8001fe2 <chMBPostAheadI.constprop.34+0x32>
 8001fb8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001fbc:	6919      	ldr	r1, [r3, #16]
 8001fbe:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001fc0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8001fc4:	d010      	beq.n	8001fe8 <chMBPostAheadI.constprop.34+0x38>
    if (--mbp->rdptr < mbp->buffer) {
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	3a04      	subs	r2, #4
 8001fca:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 8001fcc:	bf88      	it	hi
 8001fce:	1f2a      	subhi	r2, r5, #4
 8001fd0:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 8001fd2:	3101      	adds	r1, #1
    *mbp->rdptr = msg;
 8001fd4:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <chMBPostAheadI.constprop.34+0x44>)
    mbp->cnt++;
 8001fd8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001fda:	f7ff ffb1 	bl	8001f40 <chThdDequeueNextI.constprop.90>

    return MSG_OK;
 8001fde:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001fe0:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001fe2:	f06f 0001 	mvn.w	r0, #1
}
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001fec:	bd38      	pop	{r3, r4, r5, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000c50 	.word	0x20000c50
 8001ff4:	20000c70 	.word	0x20000c70
	...

08002000 <chMBFetchI.constprop.31>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8002000:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <chMBFetchI.constprop.31+0x40>)
 8002004:	7d1a      	ldrb	r2, [r3, #20]
 8002006:	b9a2      	cbnz	r2, 8002032 <chMBFetchI.constprop.31+0x32>
 8002008:	6919      	ldr	r1, [r3, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800200a:	b1a9      	cbz	r1, 8002038 <chMBFetchI.constprop.31+0x38>
    *msgp = *mbp->rdptr++;
 800200c:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 800200e:	685c      	ldr	r4, [r3, #4]
    *msgp = *mbp->rdptr++;
 8002010:	6815      	ldr	r5, [r2, #0]
 8002012:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 8002014:	42a2      	cmp	r2, r4
    *msgp = *mbp->rdptr++;
 8002016:	60da      	str	r2, [r3, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 8002018:	f101 31ff 	add.w	r1, r1, #4294967295
    *msgp = *mbp->rdptr++;
 800201c:	6005      	str	r5, [r0, #0]
      mbp->rdptr = mbp->buffer;
 800201e:	bf28      	it	cs
 8002020:	681a      	ldrcs	r2, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <chMBFetchI.constprop.31+0x44>)
      mbp->rdptr = mbp->buffer;
 8002024:	bf28      	it	cs
 8002026:	60da      	strcs	r2, [r3, #12]
    mbp->cnt--;
 8002028:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800202a:	f7ff ff89 	bl	8001f40 <chThdDequeueNextI.constprop.90>

    return MSG_OK;
 800202e:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8002030:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8002032:	f06f 0001 	mvn.w	r0, #1
}
 8002036:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
}
 800203c:	bd38      	pop	{r3, r4, r5, pc}
 800203e:	bf00      	nop
 8002040:	20000c50 	.word	0x20000c50
 8002044:	20000c68 	.word	0x20000c68
	...

08002050 <chThdDequeueAllI.constprop.69>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002050:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002052:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8002054:	4298      	cmp	r0, r3
 8002056:	d00c      	beq.n	8002072 <chThdDequeueAllI.constprop.69+0x22>
 8002058:	4604      	mov	r4, r0
  tp->u.rdymsg = msg;
 800205a:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	6022      	str	r2, [r4, #0]
  (void) chSchReadyI(tp);
 8002062:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8002064:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 8002066:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002068:	f7ff ff52 	bl	8001f10 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	42a3      	cmp	r3, r4
 8002070:	d1f5      	bne.n	800205e <chThdDequeueAllI.constprop.69+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8002072:	bd38      	pop	{r3, r4, r5, pc}
	...

08002080 <chCondSignalI.constprop.60>:
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <chCondSignalI.constprop.60+0x20>)
 8002082:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8002084:	429a      	cmp	r2, r3
 8002086:	d009      	beq.n	800209c <chCondSignalI.constprop.60+0x1c>
  tqp->next             = tp->queue.next;
 8002088:	6811      	ldr	r1, [r2, #0]
void chCondSignalI(condition_variable_t *cp) {
 800208a:	b410      	push	{r4}
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 800208c:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800208e:	604b      	str	r3, [r1, #4]
  tqp->next             = tp->queue.next;
 8002090:	6019      	str	r1, [r3, #0]
 8002092:	6254      	str	r4, [r2, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002094:	4610      	mov	r0, r2
  }
}
 8002096:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8002098:	f7ff bf3a 	b.w	8001f10 <chSchReadyI>
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000c04 	.word	0x20000c04
	...

080020b0 <chEvtSignalI>:
  tp->epending |= events;
 80020b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80020b2:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80020b6:	4319      	orrs	r1, r3
  if (((tp->state == CH_STATE_WTOREVT) &&
 80020b8:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80020ba:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80020bc:	d009      	beq.n	80020d2 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80020be:	2a0b      	cmp	r2, #11
 80020c0:	d000      	beq.n	80020c4 <chEvtSignalI+0x14>
}
 80020c2:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80020c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80020c6:	438b      	bics	r3, r1
 80020c8:	d1fb      	bne.n	80020c2 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80020ce:	f7ff bf1f 	b.w	8001f10 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80020d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80020d4:	4219      	tst	r1, r3
 80020d6:	d1f8      	bne.n	80020ca <chEvtSignalI+0x1a>
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	0000      	movs	r0, r0
	...

080020e0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80020e0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 80020e2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 80020e4:	42a0      	cmp	r0, r4
 80020e6:	d00f      	beq.n	8002108 <chEvtBroadcastFlagsI+0x28>
 80020e8:	4606      	mov	r6, r0
 80020ea:	460d      	mov	r5, r1
    elp->flags |= flags;
 80020ec:	68e3      	ldr	r3, [r4, #12]
 80020ee:	432b      	orrs	r3, r5
 80020f0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80020f2:	b115      	cbz	r5, 80020fa <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80020f4:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80020f6:	421d      	tst	r5, r3
 80020f8:	d003      	beq.n	8002102 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 80020fa:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80020fe:	f7ff ffd7 	bl	80020b0 <chEvtSignalI>
    elp = elp->next;
 8002102:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8002104:	42a6      	cmp	r6, r4
 8002106:	d1f1      	bne.n	80020ec <chEvtBroadcastFlagsI+0xc>
}
 8002108:	bd70      	pop	{r4, r5, r6, pc}
 800210a:	bf00      	nop
 800210c:	0000      	movs	r0, r0
	...

08002110 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <chMtxUnlockS+0x4c>)
void chMtxUnlockS(mutex_t *mp) {
 8002112:	b430      	push	{r4, r5}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002114:	6804      	ldr	r4, [r0, #0]
  thread_t *ctp = currp;
 8002116:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8002118:	68c3      	ldr	r3, [r0, #12]
 800211a:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800211c:	4284      	cmp	r4, r0
 800211e:	d018      	beq.n	8002152 <chMtxUnlockS+0x42>
 8002120:	4601      	mov	r1, r0
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8002122:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8002124:	b14b      	cbz	r3, 800213a <chMtxUnlockS+0x2a>
 8002126:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <chMtxUnlockS+0x24>
 800212c:	6892      	ldr	r2, [r2, #8]
 800212e:	4290      	cmp	r0, r2
 8002130:	bf38      	it	cc
 8002132:	4610      	movcc	r0, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8002134:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f5      	bne.n	8002126 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800213a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800213c:	6823      	ldr	r3, [r4, #0]
      ctp->prio = newprio;
 800213e:	60a8      	str	r0, [r5, #8]
 8002140:	600b      	str	r3, [r1, #0]
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8002142:	4620      	mov	r0, r4
  tqp->next->queue.prev = (thread_t *)tqp;
 8002144:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8002146:	e9c1 4202 	strd	r4, r2, [r1, #8]
      tp->mtxlist = mp;
 800214a:	63a1      	str	r1, [r4, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 800214c:	bc30      	pop	{r4, r5}
      (void) chSchReadyI(tp);
 800214e:	f7ff bedf 	b.w	8001f10 <chSchReadyI>
      mp->owner = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	60a3      	str	r3, [r4, #8]
}
 8002156:	bc30      	pop	{r4, r5}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000da0 	.word	0x20000da0

08002160 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8002160:	6883      	ldr	r3, [r0, #8]
 8002162:	3301      	adds	r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	6083      	str	r3, [r0, #8]
 8002168:	dd00      	ble.n	800216c <chSemSignalI+0xc>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 800216a:	4770      	bx	lr
  thread_t *tp = tqp->next;
 800216c:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = MSG_OK;
 8002172:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002174:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8002176:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8002178:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800217a:	f7ff bec9 	b.w	8001f10 <chSchReadyI>
 800217e:	bf00      	nop

08002180 <chThdResumeI>:
  if (*trp != NULL) {
 8002180:	6803      	ldr	r3, [r0, #0]
 8002182:	b12b      	cbz	r3, 8002190 <chThdResumeI+0x10>
    *trp = NULL;
 8002184:	2200      	movs	r2, #0
 8002186:	6002      	str	r2, [r0, #0]
    (void) chSchReadyI(tp);
 8002188:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 800218a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800218c:	f7ff bec0 	b.w	8001f10 <chSchReadyI>
}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
	...

080021a0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <chVTDoResetI+0x70>)
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 80021a6:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 80021a8:	d00f      	beq.n	80021ca <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80021aa:	e9d0 2100 	ldrd	r2, r1, [r0]
 80021ae:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 80021b0:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80021b2:	331c      	adds	r3, #28
    vtp->func = NULL;
 80021b4:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80021b6:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 80021b8:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 80021ba:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80021bc:	d003      	beq.n	80021c6 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 80021be:	6881      	ldr	r1, [r0, #8]
 80021c0:	6893      	ldr	r3, [r2, #8]
 80021c2:	440b      	add	r3, r1
 80021c4:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80021c6:	bc10      	pop	{r4}
 80021c8:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 80021ca:	4618      	mov	r0, r3
 80021cc:	6811      	ldr	r1, [r2, #0]
 80021ce:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 80021d2:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80021d4:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80021d6:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 80021d8:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80021da:	d014      	beq.n	8002206 <chVTDoResetI+0x66>
  ch.vtlist.next->delta += vtp->delta;
 80021dc:	6894      	ldr	r4, [r2, #8]
 80021de:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80021e2:	4414      	add	r4, r2
 80021e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e8:	608c      	str	r4, [r1, #8]
 80021ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80021ec:	1ad2      	subs	r2, r2, r3
  if (nowdelta >= ch.vtlist.next->delta) {
 80021ee:	4294      	cmp	r4, r2
 80021f0:	d9e9      	bls.n	80021c6 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 80021f2:	1aa1      	subs	r1, r4, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80021f4:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80021f6:	bf98      	it	ls
 80021f8:	1c94      	addls	r4, r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80021fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 80021fe:	4423      	add	r3, r4
 8002200:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002202:	bc10      	pop	{r4}
 8002204:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0;
 8002206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800220a:	60dc      	str	r4, [r3, #12]
 800220c:	e7db      	b.n	80021c6 <chVTDoResetI+0x26>
 800220e:	bf00      	nop
 8002210:	20000da0 	.word	0x20000da0
	...

08002220 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8002220:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002222:	4d1f      	ldr	r5, [pc, #124]	; (80022a0 <chVTDoSetI+0x80>)
 8002224:	462e      	mov	r6, r5
 8002226:	2902      	cmp	r1, #2
 8002228:	f856 4f1c 	ldr.w	r4, [r6, #28]!
  vtp->func = vtfunc;
 800222c:	60c2      	str	r2, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800222e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8002232:	bf38      	it	cc
 8002234:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002236:	42b4      	cmp	r4, r6
  vtp->par = par;
 8002238:	6103      	str	r3, [r0, #16]
 800223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800223c:	d01f      	beq.n	800227e <chVTDoSetI+0x5e>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800223e:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8002240:	68a3      	ldr	r3, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8002242:	1b92      	subs	r2, r2, r6
 8002244:	1889      	adds	r1, r1, r2
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8002246:	d216      	bcs.n	8002276 <chVTDoSetI+0x56>
    else if (delta < p->delta) {
 8002248:	428b      	cmp	r3, r1
 800224a:	d826      	bhi.n	800229a <chVTDoSetI+0x7a>
  while (p->delta < delta) {
 800224c:	4299      	cmp	r1, r3
 800224e:	d904      	bls.n	800225a <chVTDoSetI+0x3a>
    p = p->next;
 8002250:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 8002252:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 8002254:	68a3      	ldr	r3, [r4, #8]
 8002256:	428b      	cmp	r3, r1
 8002258:	d3fa      	bcc.n	8002250 <chVTDoSetI+0x30>
  vtp->prev = vtp->next->prev;
 800225a:	6863      	ldr	r3, [r4, #4]
 800225c:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 8002260:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 8002262:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 8002264:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 8002266:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 800226c:	1a59      	subs	r1, r3, r1
 800226e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002270:	626a      	str	r2, [r5, #36]	; 0x24
}
 8002272:	bcf0      	pop	{r4, r5, r6, r7}
 8002274:	4770      	bx	lr
      p = p->next;
 8002276:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 8002278:	1ac9      	subs	r1, r1, r3
 800227a:	68a3      	ldr	r3, [r4, #8]
 800227c:	e7e6      	b.n	800224c <chVTDoSetI+0x2c>
      ch.vtlist.lasttime = now;
 800227e:	62aa      	str	r2, [r5, #40]	; 0x28
  return systime + (systime_t)interval;
 8002280:	188e      	adds	r6, r1, r2
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002282:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8002284:	2200      	movs	r2, #0
      ch.vtlist.prev = vtp;
 8002286:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800228a:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 800228e:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002290:	637e      	str	r6, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8002292:	613a      	str	r2, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002294:	60fb      	str	r3, [r7, #12]
}
 8002296:	bcf0      	pop	{r4, r5, r6, r7}
 8002298:	4770      	bx	lr
 800229a:	440e      	add	r6, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800229c:	637e      	str	r6, [r7, #52]	; 0x34
 800229e:	e7d5      	b.n	800224c <chVTDoSetI+0x2c>
 80022a0:	20000da0 	.word	0x20000da0
	...

080022b0 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022b0:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80022b4:	2320      	movs	r3, #32
 80022b6:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 80022ba:	4770      	bx	lr
 80022bc:	0000      	movs	r0, r0
	...

080022c0 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80022c0:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 80022c2:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80022c4:	d512      	bpl.n	80022ec <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <chSysIntegrityCheckI+0xac>)
 80022c8:	e9d3 1400 	ldrd	r1, r4, [r3]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80022cc:	4299      	cmp	r1, r3
 80022ce:	d041      	beq.n	8002354 <chSysIntegrityCheckI+0x94>
    n = (cnt_t)0;
 80022d0:	2200      	movs	r2, #0
      tp = tp->queue.next;
 80022d2:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80022d4:	4299      	cmp	r1, r3
      n++;
 80022d6:	f102 0201 	add.w	r2, r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 80022da:	d1fa      	bne.n	80022d2 <chSysIntegrityCheckI+0x12>
    while (tp != (thread_t *)&ch.rlist.queue) {
 80022dc:	428c      	cmp	r4, r1
 80022de:	d036      	beq.n	800234e <chSysIntegrityCheckI+0x8e>
      tp = tp->queue.prev;
 80022e0:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80022e2:	429c      	cmp	r4, r3
      n--;
 80022e4:	f102 32ff 	add.w	r2, r2, #4294967295
    while (tp != (thread_t *)&ch.rlist.queue) {
 80022e8:	d1fa      	bne.n	80022e0 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 80022ea:	bb82      	cbnz	r2, 800234e <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 80022ec:	0783      	lsls	r3, r0, #30
 80022ee:	d513      	bpl.n	8002318 <chSysIntegrityCheckI+0x58>
    vtp = ch.vtlist.next;
 80022f0:	4c1e      	ldr	r4, [pc, #120]	; (800236c <chSysIntegrityCheckI+0xac>)
 80022f2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80022f6:	341c      	adds	r4, #28
 80022f8:	42a2      	cmp	r2, r4
 80022fa:	d02f      	beq.n	800235c <chSysIntegrityCheckI+0x9c>
    n = (cnt_t)0;
 80022fc:	2300      	movs	r3, #0
      vtp = vtp->next;
 80022fe:	6812      	ldr	r2, [r2, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8002300:	42a2      	cmp	r2, r4
      n++;
 8002302:	f103 0301 	add.w	r3, r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8002306:	d1fa      	bne.n	80022fe <chSysIntegrityCheckI+0x3e>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8002308:	4291      	cmp	r1, r2
 800230a:	d020      	beq.n	800234e <chSysIntegrityCheckI+0x8e>
      vtp = vtp->prev;
 800230c:	6849      	ldr	r1, [r1, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800230e:	42a1      	cmp	r1, r4
      n--;
 8002310:	f103 33ff 	add.w	r3, r3, #4294967295
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8002314:	d1fa      	bne.n	800230c <chSysIntegrityCheckI+0x4c>
    if (n != (cnt_t)0) {
 8002316:	b9d3      	cbnz	r3, 800234e <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8002318:	f010 0004 	ands.w	r0, r0, #4
 800231c:	d015      	beq.n	800234a <chSysIntegrityCheckI+0x8a>
    tp = ch.rlist.newer;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <chSysIntegrityCheckI+0xac>)
 8002320:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8002324:	429a      	cmp	r2, r3
    n = (cnt_t)0;
 8002326:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 800232a:	d01b      	beq.n	8002364 <chSysIntegrityCheckI+0xa4>
      tp = tp->newer;
 800232c:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800232e:	429a      	cmp	r2, r3
      n++;
 8002330:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8002334:	d1fa      	bne.n	800232c <chSysIntegrityCheckI+0x6c>
    while (tp != (thread_t *)&ch.rlist) {
 8002336:	4291      	cmp	r1, r2
 8002338:	d009      	beq.n	800234e <chSysIntegrityCheckI+0x8e>
      tp = tp->older;
 800233a:	6949      	ldr	r1, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800233c:	4299      	cmp	r1, r3
      n--;
 800233e:	f100 30ff 	add.w	r0, r0, #4294967295
    while (tp != (thread_t *)&ch.rlist) {
 8002342:	d1fa      	bne.n	800233a <chSysIntegrityCheckI+0x7a>
    if (n != (cnt_t)0) {
 8002344:	3000      	adds	r0, #0
 8002346:	bf18      	it	ne
 8002348:	2001      	movne	r0, #1
}
 800234a:	bc10      	pop	{r4}
 800234c:	4770      	bx	lr
      return true;
 800234e:	2001      	movs	r0, #1
}
 8002350:	bc10      	pop	{r4}
 8002352:	4770      	bx	lr
    while (tp != (thread_t *)&ch.rlist.queue) {
 8002354:	429c      	cmp	r4, r3
 8002356:	d0c9      	beq.n	80022ec <chSysIntegrityCheckI+0x2c>
    n = (cnt_t)0;
 8002358:	2200      	movs	r2, #0
 800235a:	e7c1      	b.n	80022e0 <chSysIntegrityCheckI+0x20>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800235c:	42a1      	cmp	r1, r4
 800235e:	d0db      	beq.n	8002318 <chSysIntegrityCheckI+0x58>
    n = (cnt_t)0;
 8002360:	2300      	movs	r3, #0
 8002362:	e7d3      	b.n	800230c <chSysIntegrityCheckI+0x4c>
    while (tp != (thread_t *)&ch.rlist) {
 8002364:	4291      	cmp	r1, r2
 8002366:	d1e8      	bne.n	800233a <chSysIntegrityCheckI+0x7a>
 8002368:	e7ef      	b.n	800234a <chSysIntegrityCheckI+0x8a>
 800236a:	bf00      	nop
 800236c:	20000da0 	.word	0x20000da0

08002370 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 8002370:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8002372:	4d24      	ldr	r5, [pc, #144]	; (8002404 <rt_test_002_001_execute+0x94>)
 8002374:	2001      	movs	r0, #1
 8002376:	6028      	str	r0, [r5, #0]
 8002378:	2420      	movs	r4, #32
 800237a:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 800237e:	f7ff ff9f 	bl	80022c0 <chSysIntegrityCheckI>
 8002382:	2300      	movs	r3, #0
 8002384:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8002388:	f080 0001 	eor.w	r0, r0, #1
 800238c:	b2c0      	uxtb	r0, r0
 800238e:	491e      	ldr	r1, [pc, #120]	; (8002408 <rt_test_002_001_execute+0x98>)
 8002390:	f7ff fa06 	bl	80017a0 <_test_assert>
 8002394:	b100      	cbz	r0, 8002398 <rt_test_002_001_execute+0x28>
}
 8002396:	bd70      	pop	{r4, r5, r6, pc}
 8002398:	4606      	mov	r6, r0
  test_set_step(2);
 800239a:	2002      	movs	r0, #2
 800239c:	6028      	str	r0, [r5, #0]
 800239e:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80023a2:	f7ff ff8d 	bl	80022c0 <chSysIntegrityCheckI>
 80023a6:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "virtual timers list check failed");
 80023aa:	f080 0001 	eor.w	r0, r0, #1
 80023ae:	b2c0      	uxtb	r0, r0
 80023b0:	4916      	ldr	r1, [pc, #88]	; (800240c <rt_test_002_001_execute+0x9c>)
 80023b2:	f7ff f9f5 	bl	80017a0 <_test_assert>
 80023b6:	4606      	mov	r6, r0
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d1ec      	bne.n	8002396 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 80023bc:	2303      	movs	r3, #3
 80023be:	602b      	str	r3, [r5, #0]
 80023c0:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80023c4:	2004      	movs	r0, #4
 80023c6:	f7ff ff7b 	bl	80022c0 <chSysIntegrityCheckI>
 80023ca:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "registry list check failed");
 80023ce:	f080 0001 	eor.w	r0, r0, #1
 80023d2:	b2c0      	uxtb	r0, r0
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <rt_test_002_001_execute+0xa0>)
 80023d6:	f7ff f9e3 	bl	80017a0 <_test_assert>
 80023da:	4606      	mov	r6, r0
 80023dc:	2800      	cmp	r0, #0
 80023de:	d1da      	bne.n	8002396 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 80023e0:	2304      	movs	r3, #4
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80023e8:	2008      	movs	r0, #8
 80023ea:	f7ff ff69 	bl	80022c0 <chSysIntegrityCheckI>
 80023ee:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "port layer check failed");
 80023f2:	f080 0001 	eor.w	r0, r0, #1
 80023f6:	b2c0      	uxtb	r0, r0
 80023f8:	4906      	ldr	r1, [pc, #24]	; (8002414 <rt_test_002_001_execute+0xa4>)
}
 80023fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 80023fe:	f7ff b9cf 	b.w	80017a0 <_test_assert>
 8002402:	bf00      	nop
 8002404:	2000178c 	.word	0x2000178c
 8002408:	0800be20 	.word	0x0800be20
 800240c:	0800be38 	.word	0x0800be38
 8002410:	0800be5c 	.word	0x0800be5c
 8002414:	0800be78 	.word	0x0800be78
	...

08002420 <_idle_thread>:
static void _idle_thread(void *p) {
 8002420:	e7fe      	b.n	8002420 <_idle_thread>
 8002422:	bf00      	nop
	...

08002430 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8002434:	f04f 0c03 	mov.w	ip, #3
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002438:	4616      	mov	r6, r2
  uint32_t bit     = 0;
 800243a:	2500      	movs	r5, #0
      m1 = 1 << bit;
 800243c:	f04f 0e01 	mov.w	lr, #1
      m4 = 15 << ((bit & 7) * 4);
 8002440:	270f      	movs	r7, #15
 8002442:	e00e      	b.n	8002462 <_pal_lld_setgroupmode+0x32>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8002444:	f8d0 8000 	ldr.w	r8, [r0]
 8002448:	ea03 0308 	and.w	r3, r3, r8
 800244c:	4333      	orrs	r3, r6
        if (bit < 8)
 800244e:	2d07      	cmp	r5, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8002450:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8002452:	d833      	bhi.n	80024bc <_pal_lld_setgroupmode+0x8c>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002454:	6a03      	ldr	r3, [r0, #32]
 8002456:	401c      	ands	r4, r3
 8002458:	6204      	str	r4, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800245a:	0849      	lsrs	r1, r1, #1
 800245c:	d02c      	beq.n	80024b8 <_pal_lld_setgroupmode+0x88>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 800245e:	00b6      	lsls	r6, r6, #2
    bit++;
 8002460:	3501      	adds	r5, #1
    if ((mask & 1) != 0) {
 8002462:	07cb      	lsls	r3, r1, #31
 8002464:	d5f9      	bpl.n	800245a <_pal_lld_setgroupmode+0x2a>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002466:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8002468:	fa0e f405 	lsl.w	r4, lr, r5
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800246c:	ea23 0304 	bic.w	r3, r3, r4
 8002470:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 8002472:	006b      	lsls	r3, r5, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002474:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 8002476:	fa0c f303 	lsl.w	r3, ip, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800247a:	43db      	mvns	r3, r3
 800247c:	401c      	ands	r4, r3
 800247e:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002480:	f8d0 800c 	ldr.w	r8, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8002484:	f005 0407 	and.w	r4, r5, #7
 8002488:	00a4      	lsls	r4, r4, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800248a:	ea03 0808 	and.w	r8, r3, r8
      m4 = 15 << ((bit & 7) * 4);
 800248e:	fa07 f404 	lsl.w	r4, r7, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8002492:	2a02      	cmp	r2, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002494:	f8c0 800c 	str.w	r8, [r0, #12]
 8002498:	ea6f 0404 	mvn.w	r4, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 800249c:	d1d2      	bne.n	8002444 <_pal_lld_setgroupmode+0x14>
        if (bit < 8)
 800249e:	2d07      	cmp	r5, #7
 80024a0:	d810      	bhi.n	80024c4 <_pal_lld_setgroupmode+0x94>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80024a2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80024a6:	ea04 0408 	and.w	r4, r4, r8
 80024aa:	6204      	str	r4, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80024ac:	6804      	ldr	r4, [r0, #0]
 80024ae:	4023      	ands	r3, r4
 80024b0:	4333      	orrs	r3, r6
    if (!mask)
 80024b2:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 80024b4:	6003      	str	r3, [r0, #0]
    if (!mask)
 80024b6:	d1d2      	bne.n	800245e <_pal_lld_setgroupmode+0x2e>
  }
}
 80024b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80024bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024be:	401c      	ands	r4, r3
 80024c0:	6244      	str	r4, [r0, #36]	; 0x24
 80024c2:	e7ca      	b.n	800245a <_pal_lld_setgroupmode+0x2a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80024c4:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 80024c8:	ea04 0408 	and.w	r4, r4, r8
 80024cc:	6244      	str	r4, [r0, #36]	; 0x24
 80024ce:	e7ed      	b.n	80024ac <_pal_lld_setgroupmode+0x7c>

080024d0 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 80024d0:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 80024d2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	f023 031f 	bic.w	r3, r3, #31
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	f013 0301 	ands.w	r3, r3, #1
 80024e4:	d1fb      	bne.n	80024de <adc_lld_stop_conversion+0xe>
 80024e6:	7a65      	ldrb	r5, [r4, #9]
  adcp->adc->CR1 = 0;
 80024e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 80024ea:	6860      	ldr	r0, [r4, #4]
 80024ec:	213d      	movs	r1, #61	; 0x3d
 80024ee:	40a9      	lsls	r1, r5
 80024f0:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
 80024f2:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80024f4:	6893      	ldr	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80024f6:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80024f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024fc:	6093      	str	r3, [r2, #8]
}
 80024fe:	bc30      	pop	{r4, r5}
  adcp->adc->CR2 = ADC_CR2_ADON;
 8002500:	6091      	str	r1, [r2, #8]
}
 8002502:	4770      	bx	lr
	...

08002510 <adc_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002510:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8002514:	b510      	push	{r4, lr}
 8002516:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002518:	d111      	bne.n	800253e <adc_lld_serve_rx_interrupt+0x2e>
    if (adcp->grpp != NULL) {
 800251a:	6903      	ldr	r3, [r0, #16]
 800251c:	b173      	cbz	r3, 800253c <adc_lld_serve_rx_interrupt+0x2c>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 800251e:	068a      	lsls	r2, r1, #26
 8002520:	d52c      	bpl.n	800257c <adc_lld_serve_rx_interrupt+0x6c>
        _adc_isr_full_code(adcp);
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	2a00      	cmp	r2, #0
 8002526:	d031      	beq.n	800258c <adc_lld_serve_rx_interrupt+0x7c>
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	b13b      	cbz	r3, 800253c <adc_lld_serve_rx_interrupt+0x2c>
 800252c:	2204      	movs	r2, #4
 800252e:	7002      	strb	r2, [r0, #0]
 8002530:	4798      	blx	r3
 8002532:	7823      	ldrb	r3, [r4, #0]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d101      	bne.n	800253c <adc_lld_serve_rx_interrupt+0x2c>
 8002538:	2303      	movs	r3, #3
 800253a:	7023      	strb	r3, [r4, #0]
}
 800253c:	bd10      	pop	{r4, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 800253e:	f7ff ffc7 	bl	80024d0 <adc_lld_stop_conversion>
 8002542:	6923      	ldr	r3, [r4, #16]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03d      	beq.n	80025c6 <adc_lld_serve_rx_interrupt+0xb6>
 800254a:	2205      	movs	r2, #5
 800254c:	7022      	strb	r2, [r4, #0]
 800254e:	2100      	movs	r1, #0
 8002550:	4620      	mov	r0, r4
 8002552:	4798      	blx	r3
 8002554:	7823      	ldrb	r3, [r4, #0]
 8002556:	2b05      	cmp	r3, #5
 8002558:	bf04      	itt	eq
 800255a:	2302      	moveq	r3, #2
 800255c:	7023      	strbeq	r3, [r4, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	6123      	str	r3, [r4, #16]
 8002562:	2320      	movs	r3, #32
 8002564:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	f104 0014 	add.w	r0, r4, #20
 8002570:	f7ff fe06 	bl	8002180 <chThdResumeI>
 8002574:	2300      	movs	r3, #0
 8002576:	f383 8811 	msr	BASEPRI, r3
}
 800257a:	bd10      	pop	{r4, pc}
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 800257c:	06ca      	lsls	r2, r1, #27
 800257e:	d5dd      	bpl.n	800253c <adc_lld_serve_rx_interrupt+0x2c>
        _adc_isr_half_code(adcp);
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0da      	beq.n	800253c <adc_lld_serve_rx_interrupt+0x2c>
}
 8002586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _adc_isr_half_code(adcp);
 800258a:	4718      	bx	r3
        _adc_isr_full_code(adcp);
 800258c:	f7ff ffa0 	bl	80024d0 <adc_lld_stop_conversion>
 8002590:	6923      	ldr	r3, [r4, #16]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	b193      	cbz	r3, 80025bc <adc_lld_serve_rx_interrupt+0xac>
 8002596:	2204      	movs	r2, #4
 8002598:	7022      	strb	r2, [r4, #0]
 800259a:	4620      	mov	r0, r4
 800259c:	4798      	blx	r3
 800259e:	7823      	ldrb	r3, [r4, #0]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d00b      	beq.n	80025bc <adc_lld_serve_rx_interrupt+0xac>
 80025a4:	2320      	movs	r3, #32
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	2100      	movs	r1, #0
 80025ac:	f104 0014 	add.w	r0, r4, #20
 80025b0:	f7ff fde6 	bl	8002180 <chThdResumeI>
 80025b4:	2300      	movs	r3, #0
 80025b6:	f383 8811 	msr	BASEPRI, r3
}
 80025ba:	bd10      	pop	{r4, pc}
        _adc_isr_full_code(adcp);
 80025bc:	2202      	movs	r2, #2
 80025be:	2300      	movs	r3, #0
 80025c0:	7022      	strb	r2, [r4, #0]
 80025c2:	6123      	str	r3, [r4, #16]
 80025c4:	e7ee      	b.n	80025a4 <adc_lld_serve_rx_interrupt+0x94>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80025c6:	2202      	movs	r2, #2
 80025c8:	6123      	str	r3, [r4, #16]
 80025ca:	7022      	strb	r2, [r4, #0]
 80025cc:	e7c9      	b.n	8002562 <adc_lld_serve_rx_interrupt+0x52>
 80025ce:	bf00      	nop

080025d0 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 80025d0:	2000      	movs	r0, #0
 80025d2:	4770      	bx	lr
	...

080025e0 <rt_test_010_012_execute>:
 * - [10.12.8] The size of an event listener is printed.
 * - [10.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_010_012_execute(void) {
 80025e0:	b570      	push	{r4, r5, r6, lr}

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
 80025e2:	4d33      	ldr	r5, [pc, #204]	; (80026b0 <rt_test_010_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 80025e4:	4c33      	ldr	r4, [pc, #204]	; (80026b4 <rt_test_010_012_execute+0xd4>)
    test_print("--- System: ");
 80025e6:	4834      	ldr	r0, [pc, #208]	; (80026b8 <rt_test_010_012_execute+0xd8>)
  test_set_step(1);
 80025e8:	2301      	movs	r3, #1
 80025ea:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 80025ec:	f7ff f9d8 	bl	80019a0 <test_print>
 80025f0:	2078      	movs	r0, #120	; 0x78
 80025f2:	f7ff f935 	bl	8001860 <test_printn.part.0>
    test_println(" bytes");
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff f9b2 	bl	8001960 <test_println>
  }

  /* [10.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 80025fc:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 80025fe:	482f      	ldr	r0, [pc, #188]	; (80026bc <rt_test_010_012_execute+0xdc>)
  test_set_step(2);
 8002600:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 8002602:	f7ff f9cd 	bl	80019a0 <test_print>
 8002606:	2044      	movs	r0, #68	; 0x44
 8002608:	f7ff f92a 	bl	8001860 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff f9a7 	bl	8001960 <test_println>
  }

  /* [10.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8002612:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 8002614:	482a      	ldr	r0, [pc, #168]	; (80026c0 <rt_test_010_012_execute+0xe0>)
  test_set_step(3);
 8002616:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 8002618:	f7ff f9c2 	bl	80019a0 <test_print>
 800261c:	2014      	movs	r0, #20
 800261e:	f7ff f91f 	bl	8001860 <test_printn.part.0>
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff f99c 	bl	8001960 <test_println>
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8002628:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 800262a:	4826      	ldr	r0, [pc, #152]	; (80026c4 <rt_test_010_012_execute+0xe4>)
  test_set_step(4);
 800262c:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 800262e:	f7ff f9b7 	bl	80019a0 <test_print>
 8002632:	200c      	movs	r0, #12
 8002634:	f7ff f914 	bl	8001860 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff f991 	bl	8001960 <test_println>
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 800263e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8002640:	4821      	ldr	r0, [pc, #132]	; (80026c8 <rt_test_010_012_execute+0xe8>)
  test_set_step(5);
 8002642:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8002644:	f7ff f9ac 	bl	80019a0 <test_print>
 8002648:	2010      	movs	r0, #16
 800264a:	f7ff f909 	bl	8001860 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff f986 	bl	8001960 <test_println>
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8002654:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8002656:	481d      	ldr	r0, [pc, #116]	; (80026cc <rt_test_010_012_execute+0xec>)
  test_set_step(6);
 8002658:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 800265a:	f7ff f9a1 	bl	80019a0 <test_print>
 800265e:	2008      	movs	r0, #8
 8002660:	f7ff f8fe 	bl	8001860 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff f97b 	bl	8001960 <test_println>
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800266a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800266c:	4818      	ldr	r0, [pc, #96]	; (80026d0 <rt_test_010_012_execute+0xf0>)
  test_set_step(7);
 800266e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8002670:	f7ff f996 	bl	80019a0 <test_print>
 8002674:	4630      	mov	r0, r6
 8002676:	f7ff f8f3 	bl	8001860 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 800267a:	4620      	mov	r0, r4
 800267c:	f7ff f970 	bl	8001960 <test_println>
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8002680:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8002682:	4814      	ldr	r0, [pc, #80]	; (80026d4 <rt_test_010_012_execute+0xf4>)
  test_set_step(8);
 8002684:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8002686:	f7ff f98b 	bl	80019a0 <test_print>
 800268a:	2014      	movs	r0, #20
 800268c:	f7ff f8e8 	bl	8001860 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff f965 	bl	8001960 <test_println>
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8002696:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8002698:	480f      	ldr	r0, [pc, #60]	; (80026d8 <rt_test_010_012_execute+0xf8>)
  test_set_step(9);
 800269a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 800269c:	f7ff f980 	bl	80019a0 <test_print>
 80026a0:	2028      	movs	r0, #40	; 0x28
 80026a2:	f7ff f8dd 	bl	8001860 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 80026a6:	4620      	mov	r0, r4
#endif
  }
}
 80026a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 80026ac:	f7ff b958 	b.w	8001960 <test_println>
 80026b0:	2000178c 	.word	0x2000178c
 80026b4:	0800c4cc 	.word	0x0800c4cc
 80026b8:	0800c4bc 	.word	0x0800c4bc
 80026bc:	0800c4d4 	.word	0x0800c4d4
 80026c0:	0800c4e4 	.word	0x0800c4e4
 80026c4:	0800c4f4 	.word	0x0800c4f4
 80026c8:	0800c504 	.word	0x0800c504
 80026cc:	0800c514 	.word	0x0800c514
 80026d0:	0800c524 	.word	0x0800c524
 80026d4:	0800c534 	.word	0x0800c534
 80026d8:	0800c544 	.word	0x0800c544
 80026dc:	00000000 	.word	0x00000000

080026e0 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 80026e0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80026e2:	4bc9      	ldr	r3, [pc, #804]	; (8002a08 <rt_test_001_003_execute+0x328>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 80026e4:	4cc9      	ldr	r4, [pc, #804]	; (8002a0c <rt_test_001_003_execute+0x32c>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 80026e6:	48ca      	ldr	r0, [pc, #808]	; (8002a10 <rt_test_001_003_execute+0x330>)
  test_set_step(1);
 80026e8:	2501      	movs	r5, #1
 80026ea:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 80026ec:	f7ff f958 	bl	80019a0 <test_print>
 80026f0:	2020      	movs	r0, #32
 80026f2:	f7ff f8b5 	bl	8001860 <test_printn.part.0>
    test_println("");
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff f932 	bl	8001960 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 80026fc:	48c5      	ldr	r0, [pc, #788]	; (8002a14 <rt_test_001_003_execute+0x334>)
 80026fe:	f7ff f94f 	bl	80019a0 <test_print>
 8002702:	f242 7010 	movw	r0, #10000	; 0x2710
 8002706:	f7ff f8ab 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 800270a:	4620      	mov	r0, r4
 800270c:	f7ff f928 	bl	8001960 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8002710:	48c1      	ldr	r0, [pc, #772]	; (8002a18 <rt_test_001_003_execute+0x338>)
 8002712:	f7ff f945 	bl	80019a0 <test_print>
 8002716:	2020      	movs	r0, #32
 8002718:	f7ff f8a2 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff f91f 	bl	8001960 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8002722:	48be      	ldr	r0, [pc, #760]	; (8002a1c <rt_test_001_003_execute+0x33c>)
 8002724:	f7ff f93c 	bl	80019a0 <test_print>
 8002728:	2020      	movs	r0, #32
 800272a:	f7ff f899 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff f916 	bl	8001960 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8002734:	48ba      	ldr	r0, [pc, #744]	; (8002a20 <rt_test_001_003_execute+0x340>)
 8002736:	f7ff f933 	bl	80019a0 <test_print>
 800273a:	2002      	movs	r0, #2
 800273c:	f7ff f890 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff f90d 	bl	8001960 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8002746:	48b7      	ldr	r0, [pc, #732]	; (8002a24 <rt_test_001_003_execute+0x344>)
 8002748:	f7ff f92a 	bl	80019a0 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 800274c:	2000      	movs	r0, #0
 800274e:	f7ff f8b7 	bl	80018c0 <test_printn>
    test_println("");
 8002752:	4620      	mov	r0, r4
 8002754:	f7ff f904 	bl	8001960 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8002758:	48b3      	ldr	r0, [pc, #716]	; (8002a28 <rt_test_001_003_execute+0x348>)
 800275a:	f7ff f921 	bl	80019a0 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 800275e:	2000      	movs	r0, #0
 8002760:	f7ff f8ae 	bl	80018c0 <test_printn>
    test_println("");
 8002764:	4620      	mov	r0, r4
 8002766:	f7ff f8fb 	bl	8001960 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 800276a:	48b0      	ldr	r0, [pc, #704]	; (8002a2c <rt_test_001_003_execute+0x34c>)
 800276c:	f7ff f918 	bl	80019a0 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff f8a5 	bl	80018c0 <test_printn>
    test_println("");
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff f8f2 	bl	8001960 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 800277c:	48ac      	ldr	r0, [pc, #688]	; (8002a30 <rt_test_001_003_execute+0x350>)
 800277e:	f7ff f90f 	bl	80019a0 <test_print>
 8002782:	4628      	mov	r0, r5
 8002784:	f7ff f86c 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff f8e9 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 800278e:	48a9      	ldr	r0, [pc, #676]	; (8002a34 <rt_test_001_003_execute+0x354>)
 8002790:	f7ff f906 	bl	80019a0 <test_print>
 8002794:	4628      	mov	r0, r5
 8002796:	f7ff f863 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff f8e0 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 80027a0:	48a5      	ldr	r0, [pc, #660]	; (8002a38 <rt_test_001_003_execute+0x358>)
 80027a2:	f7ff f8fd 	bl	80019a0 <test_print>
 80027a6:	4628      	mov	r0, r5
 80027a8:	f7ff f85a 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff f8d7 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 80027b2:	48a2      	ldr	r0, [pc, #648]	; (8002a3c <rt_test_001_003_execute+0x35c>)
 80027b4:	f7ff f8f4 	bl	80019a0 <test_print>
 80027b8:	4628      	mov	r0, r5
 80027ba:	f7ff f851 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff f8ce 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 80027c4:	489e      	ldr	r0, [pc, #632]	; (8002a40 <rt_test_001_003_execute+0x360>)
 80027c6:	f7ff f8eb 	bl	80019a0 <test_print>
 80027ca:	4628      	mov	r0, r5
 80027cc:	f7ff f848 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7ff f8c5 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 80027d6:	489b      	ldr	r0, [pc, #620]	; (8002a44 <rt_test_001_003_execute+0x364>)
 80027d8:	f7ff f8e2 	bl	80019a0 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7ff f86f 	bl	80018c0 <test_printn>
    test_println("");
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff f8bc 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 80027e8:	4897      	ldr	r0, [pc, #604]	; (8002a48 <rt_test_001_003_execute+0x368>)
 80027ea:	f7ff f8d9 	bl	80019a0 <test_print>
 80027ee:	4628      	mov	r0, r5
 80027f0:	f7ff f836 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff f8b3 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 80027fa:	4894      	ldr	r0, [pc, #592]	; (8002a4c <rt_test_001_003_execute+0x36c>)
 80027fc:	f7ff f8d0 	bl	80019a0 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff f85d 	bl	80018c0 <test_printn>
    test_println("");   
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff f8aa 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 800280c:	4890      	ldr	r0, [pc, #576]	; (8002a50 <rt_test_001_003_execute+0x370>)
 800280e:	f7ff f8c7 	bl	80019a0 <test_print>
 8002812:	4628      	mov	r0, r5
 8002814:	f7ff f824 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff f8a1 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 800281e:	488d      	ldr	r0, [pc, #564]	; (8002a54 <rt_test_001_003_execute+0x374>)
 8002820:	f7ff f8be 	bl	80019a0 <test_print>
 8002824:	4628      	mov	r0, r5
 8002826:	f7ff f81b 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff f898 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8002830:	4889      	ldr	r0, [pc, #548]	; (8002a58 <rt_test_001_003_execute+0x378>)
 8002832:	f7ff f8b5 	bl	80019a0 <test_print>
 8002836:	4628      	mov	r0, r5
 8002838:	f7ff f812 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 800283c:	4620      	mov	r0, r4
 800283e:	f7ff f88f 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8002842:	4886      	ldr	r0, [pc, #536]	; (8002a5c <rt_test_001_003_execute+0x37c>)
 8002844:	f7ff f8ac 	bl	80019a0 <test_print>
 8002848:	4628      	mov	r0, r5
 800284a:	f7ff f809 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff f886 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8002854:	4882      	ldr	r0, [pc, #520]	; (8002a60 <rt_test_001_003_execute+0x380>)
 8002856:	f7ff f8a3 	bl	80019a0 <test_print>
 800285a:	4628      	mov	r0, r5
 800285c:	f7ff f800 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff f87d 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8002866:	487f      	ldr	r0, [pc, #508]	; (8002a64 <rt_test_001_003_execute+0x384>)
 8002868:	f7ff f89a 	bl	80019a0 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff f827 	bl	80018c0 <test_printn>
    test_println("");
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff f874 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8002878:	487b      	ldr	r0, [pc, #492]	; (8002a68 <rt_test_001_003_execute+0x388>)
 800287a:	f7ff f891 	bl	80019a0 <test_print>
 800287e:	4628      	mov	r0, r5
 8002880:	f7fe ffee 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8002884:	4620      	mov	r0, r4
 8002886:	f7ff f86b 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 800288a:	4878      	ldr	r0, [pc, #480]	; (8002a6c <rt_test_001_003_execute+0x38c>)
 800288c:	f7ff f888 	bl	80019a0 <test_print>
 8002890:	4628      	mov	r0, r5
 8002892:	f7fe ffe5 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff f862 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 800289c:	4874      	ldr	r0, [pc, #464]	; (8002a70 <rt_test_001_003_execute+0x390>)
 800289e:	f7ff f87f 	bl	80019a0 <test_print>
 80028a2:	4628      	mov	r0, r5
 80028a4:	f7fe ffdc 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7ff f859 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 80028ae:	4871      	ldr	r0, [pc, #452]	; (8002a74 <rt_test_001_003_execute+0x394>)
 80028b0:	f7ff f876 	bl	80019a0 <test_print>
 80028b4:	4628      	mov	r0, r5
 80028b6:	f7fe ffd3 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff f850 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 80028c0:	486d      	ldr	r0, [pc, #436]	; (8002a78 <rt_test_001_003_execute+0x398>)
 80028c2:	f7ff f86d 	bl	80019a0 <test_print>
 80028c6:	4628      	mov	r0, r5
 80028c8:	f7fe ffca 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff f847 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 80028d2:	486a      	ldr	r0, [pc, #424]	; (8002a7c <rt_test_001_003_execute+0x39c>)
 80028d4:	f7ff f864 	bl	80019a0 <test_print>
 80028d8:	4628      	mov	r0, r5
 80028da:	f7fe ffc1 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff f83e 	bl	8001960 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 80028e4:	4866      	ldr	r0, [pc, #408]	; (8002a80 <rt_test_001_003_execute+0x3a0>)
 80028e6:	f7ff f85b 	bl	80019a0 <test_print>
 80028ea:	4628      	mov	r0, r5
 80028ec:	f7fe ffb8 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff f835 	bl	8001960 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 80028f6:	4863      	ldr	r0, [pc, #396]	; (8002a84 <rt_test_001_003_execute+0x3a4>)
 80028f8:	f7ff f852 	bl	80019a0 <test_print>
 80028fc:	2008      	movs	r0, #8
 80028fe:	f7fe ffaf 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff f82c 	bl	8001960 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8002908:	485f      	ldr	r0, [pc, #380]	; (8002a88 <rt_test_001_003_execute+0x3a8>)
 800290a:	f7ff f849 	bl	80019a0 <test_print>
 800290e:	4628      	mov	r0, r5
 8002910:	f7fe ffa6 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff f823 	bl	8001960 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 800291a:	485c      	ldr	r0, [pc, #368]	; (8002a8c <rt_test_001_003_execute+0x3ac>)
 800291c:	f7ff f840 	bl	80019a0 <test_print>
 8002920:	4628      	mov	r0, r5
 8002922:	f7fe ff9d 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff f81a 	bl	8001960 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 800292c:	4858      	ldr	r0, [pc, #352]	; (8002a90 <rt_test_001_003_execute+0x3b0>)
 800292e:	f7ff f837 	bl	80019a0 <test_print>
 8002932:	4628      	mov	r0, r5
 8002934:	f7fe ff94 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff f811 	bl	8001960 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 800293e:	4855      	ldr	r0, [pc, #340]	; (8002a94 <rt_test_001_003_execute+0x3b4>)
 8002940:	f7ff f82e 	bl	80019a0 <test_print>
 8002944:	4628      	mov	r0, r5
 8002946:	f7fe ff8b 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 800294a:	4620      	mov	r0, r4
 800294c:	f7ff f808 	bl	8001960 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8002950:	4851      	ldr	r0, [pc, #324]	; (8002a98 <rt_test_001_003_execute+0x3b8>)
 8002952:	f7ff f825 	bl	80019a0 <test_print>
 8002956:	4628      	mov	r0, r5
 8002958:	f7fe ff82 	bl	8001860 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 800295c:	4620      	mov	r0, r4
 800295e:	f7fe ffff 	bl	8001960 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8002962:	484e      	ldr	r0, [pc, #312]	; (8002a9c <rt_test_001_003_execute+0x3bc>)
 8002964:	f7ff f81c 	bl	80019a0 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8002968:	2000      	movs	r0, #0
 800296a:	f7fe ffa9 	bl	80018c0 <test_printn>
    test_println("");
 800296e:	4620      	mov	r0, r4
 8002970:	f7fe fff6 	bl	8001960 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8002974:	484a      	ldr	r0, [pc, #296]	; (8002aa0 <rt_test_001_003_execute+0x3c0>)
 8002976:	f7ff f813 	bl	80019a0 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe ffa0 	bl	80018c0 <test_printn>
    test_println("");
 8002980:	4620      	mov	r0, r4
 8002982:	f7fe ffed 	bl	8001960 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8002986:	4847      	ldr	r0, [pc, #284]	; (8002aa4 <rt_test_001_003_execute+0x3c4>)
 8002988:	f7ff f80a 	bl	80019a0 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe ff97 	bl	80018c0 <test_printn>
    test_println("");
 8002992:	4620      	mov	r0, r4
 8002994:	f7fe ffe4 	bl	8001960 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8002998:	4843      	ldr	r0, [pc, #268]	; (8002aa8 <rt_test_001_003_execute+0x3c8>)
 800299a:	f7ff f801 	bl	80019a0 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 800299e:	2000      	movs	r0, #0
 80029a0:	f7fe ff8e 	bl	80018c0 <test_printn>
    test_println("");
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7fe ffdb 	bl	8001960 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 80029aa:	4840      	ldr	r0, [pc, #256]	; (8002aac <rt_test_001_003_execute+0x3cc>)
 80029ac:	f7fe fff8 	bl	80019a0 <test_print>
 80029b0:	20ff      	movs	r0, #255	; 0xff
 80029b2:	f7fe ff55 	bl	8001860 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7fe ffd2 	bl	8001960 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 80029bc:	483c      	ldr	r0, [pc, #240]	; (8002ab0 <rt_test_001_003_execute+0x3d0>)
 80029be:	f7fe ffef 	bl	80019a0 <test_print>
 80029c2:	2080      	movs	r0, #128	; 0x80
 80029c4:	f7fe ff4c 	bl	8001860 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7fe ffc9 	bl	8001960 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 80029ce:	4839      	ldr	r0, [pc, #228]	; (8002ab4 <rt_test_001_003_execute+0x3d4>)
 80029d0:	f7fe ffe6 	bl	80019a0 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe ff73 	bl	80018c0 <test_printn>
    test_println("");
 80029da:	4620      	mov	r0, r4
 80029dc:	f7fe ffc0 	bl	8001960 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 80029e0:	4835      	ldr	r0, [pc, #212]	; (8002ab8 <rt_test_001_003_execute+0x3d8>)
 80029e2:	f7fe ffdd 	bl	80019a0 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe ff6a 	bl	80018c0 <test_printn>
    test_println("");
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7fe ffb7 	bl	8001960 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 80029f2:	4832      	ldr	r0, [pc, #200]	; (8002abc <rt_test_001_003_execute+0x3dc>)
 80029f4:	f7fe ffd4 	bl	80019a0 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe ff61 	bl	80018c0 <test_printn>
    test_println("");
 80029fe:	4620      	mov	r0, r4
  }
}
 8002a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8002a04:	f7fe bfac 	b.w	8001960 <test_println>
 8002a08:	2000178c 	.word	0x2000178c
 8002a0c:	0800ad4c 	.word	0x0800ad4c
 8002a10:	0800b680 	.word	0x0800b680
 8002a14:	0800b6ac 	.word	0x0800b6ac
 8002a18:	0800b6d8 	.word	0x0800b6d8
 8002a1c:	0800b704 	.word	0x0800b704
 8002a20:	0800b730 	.word	0x0800b730
 8002a24:	0800b75c 	.word	0x0800b75c
 8002a28:	0800b788 	.word	0x0800b788
 8002a2c:	0800b7b4 	.word	0x0800b7b4
 8002a30:	0800b7e0 	.word	0x0800b7e0
 8002a34:	0800b80c 	.word	0x0800b80c
 8002a38:	0800b838 	.word	0x0800b838
 8002a3c:	0800b864 	.word	0x0800b864
 8002a40:	0800b890 	.word	0x0800b890
 8002a44:	0800b8bc 	.word	0x0800b8bc
 8002a48:	0800b8e8 	.word	0x0800b8e8
 8002a4c:	0800b914 	.word	0x0800b914
 8002a50:	0800b940 	.word	0x0800b940
 8002a54:	0800b96c 	.word	0x0800b96c
 8002a58:	0800b998 	.word	0x0800b998
 8002a5c:	0800b9c4 	.word	0x0800b9c4
 8002a60:	0800b9f0 	.word	0x0800b9f0
 8002a64:	0800ba1c 	.word	0x0800ba1c
 8002a68:	0800ba48 	.word	0x0800ba48
 8002a6c:	0800ba74 	.word	0x0800ba74
 8002a70:	0800baa0 	.word	0x0800baa0
 8002a74:	0800bacc 	.word	0x0800bacc
 8002a78:	0800baf8 	.word	0x0800baf8
 8002a7c:	0800bb24 	.word	0x0800bb24
 8002a80:	0800bb50 	.word	0x0800bb50
 8002a84:	0800bb7c 	.word	0x0800bb7c
 8002a88:	0800bba8 	.word	0x0800bba8
 8002a8c:	0800bbd4 	.word	0x0800bbd4
 8002a90:	0800bc00 	.word	0x0800bc00
 8002a94:	0800bc2c 	.word	0x0800bc2c
 8002a98:	0800bc58 	.word	0x0800bc58
 8002a9c:	0800bc84 	.word	0x0800bc84
 8002aa0:	0800bcb0 	.word	0x0800bcb0
 8002aa4:	0800bcdc 	.word	0x0800bcdc
 8002aa8:	0800bd08 	.word	0x0800bd08
 8002aac:	0800bd34 	.word	0x0800bd34
 8002ab0:	0800bd60 	.word	0x0800bd60
 8002ab4:	0800bd8c 	.word	0x0800bd8c
 8002ab8:	0800bdb8 	.word	0x0800bdb8
 8002abc:	0800bde4 	.word	0x0800bde4

08002ac0 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8002ac0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8002ac4:	4819      	ldr	r0, [pc, #100]	; (8002b2c <rt_test_001_002_execute+0x6c>)
    test_println("");
 8002ac6:	4c1a      	ldr	r4, [pc, #104]	; (8002b30 <rt_test_001_002_execute+0x70>)
  test_set_step(1);
 8002ac8:	2501      	movs	r5, #1
 8002aca:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 8002acc:	f7fe ff48 	bl	8001960 <test_println>
    test_print("--- Stable Flag:                        ");
 8002ad0:	4818      	ldr	r0, [pc, #96]	; (8002b34 <rt_test_001_002_execute+0x74>)
 8002ad2:	f7fe ff65 	bl	80019a0 <test_print>
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f7fe fec2 	bl	8001860 <test_printn.part.0>
    test_println("");
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7fe ff3f 	bl	8001960 <test_println>
    test_print("--- Version String:                     ");
 8002ae2:	4815      	ldr	r0, [pc, #84]	; (8002b38 <rt_test_001_002_execute+0x78>)
 8002ae4:	f7fe ff5c 	bl	80019a0 <test_print>
    test_println(CH_KERNEL_VERSION);
 8002ae8:	4814      	ldr	r0, [pc, #80]	; (8002b3c <rt_test_001_002_execute+0x7c>)
 8002aea:	f7fe ff39 	bl	8001960 <test_println>
    test_print("--- Major Number:                       ");
 8002aee:	4814      	ldr	r0, [pc, #80]	; (8002b40 <rt_test_001_002_execute+0x80>)
 8002af0:	f7fe ff56 	bl	80019a0 <test_print>
 8002af4:	2006      	movs	r0, #6
 8002af6:	f7fe feb3 	bl	8001860 <test_printn.part.0>
    test_println("");
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7fe ff30 	bl	8001960 <test_println>
    test_print("--- Minor Number:                       ");
 8002b00:	4810      	ldr	r0, [pc, #64]	; (8002b44 <rt_test_001_002_execute+0x84>)
 8002b02:	f7fe ff4d 	bl	80019a0 <test_print>
    test_printn(CH_KERNEL_MINOR);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe feda 	bl	80018c0 <test_printn>
    test_println("");
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7fe ff27 	bl	8001960 <test_println>
    test_print("--- Patch Number:                       ");
 8002b12:	480d      	ldr	r0, [pc, #52]	; (8002b48 <rt_test_001_002_execute+0x88>)
 8002b14:	f7fe ff44 	bl	80019a0 <test_print>
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f7fe fea1 	bl	8001860 <test_printn.part.0>
    test_println("");
 8002b1e:	4620      	mov	r0, r4
}
 8002b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8002b24:	f7fe bf1c 	b.w	8001960 <test_println>
 8002b28:	2000178c 	.word	0x2000178c
 8002b2c:	0800b558 	.word	0x0800b558
 8002b30:	0800ad4c 	.word	0x0800ad4c
 8002b34:	0800b58c 	.word	0x0800b58c
 8002b38:	0800b5b8 	.word	0x0800b5b8
 8002b3c:	0800b5e4 	.word	0x0800b5e4
 8002b40:	0800b5ec 	.word	0x0800b5ec
 8002b44:	0800b618 	.word	0x0800b618
 8002b48:	0800b644 	.word	0x0800b644
 8002b4c:	00000000 	.word	0x00000000

08002b50 <rt_test_001_001_execute>:
  test_set_step(1);
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <rt_test_001_001_execute+0x74>)
    test_print("--- Architecture:                       ");
 8002b52:	481d      	ldr	r0, [pc, #116]	; (8002bc8 <rt_test_001_001_execute+0x78>)
static void rt_test_001_001_execute(void) {
 8002b54:	b510      	push	{r4, lr}
  test_set_step(1);
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8002b5a:	f7fe ff21 	bl	80019a0 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8002b5e:	481b      	ldr	r0, [pc, #108]	; (8002bcc <rt_test_001_001_execute+0x7c>)
    test_println("");
 8002b60:	4c1b      	ldr	r4, [pc, #108]	; (8002bd0 <rt_test_001_001_execute+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 8002b62:	f7fe fefd 	bl	8001960 <test_println>
    test_print("--- Core Variant:                       ");
 8002b66:	481b      	ldr	r0, [pc, #108]	; (8002bd4 <rt_test_001_001_execute+0x84>)
 8002b68:	f7fe ff1a 	bl	80019a0 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8002b6c:	481a      	ldr	r0, [pc, #104]	; (8002bd8 <rt_test_001_001_execute+0x88>)
 8002b6e:	f7fe fef7 	bl	8001960 <test_println>
    test_print("--- Compiler:                           ");
 8002b72:	481a      	ldr	r0, [pc, #104]	; (8002bdc <rt_test_001_001_execute+0x8c>)
 8002b74:	f7fe ff14 	bl	80019a0 <test_print>
    test_println(PORT_COMPILER_NAME);
 8002b78:	4819      	ldr	r0, [pc, #100]	; (8002be0 <rt_test_001_001_execute+0x90>)
 8002b7a:	f7fe fef1 	bl	8001960 <test_println>
    test_print("--- Port Info:                          ");
 8002b7e:	4819      	ldr	r0, [pc, #100]	; (8002be4 <rt_test_001_001_execute+0x94>)
 8002b80:	f7fe ff0e 	bl	80019a0 <test_print>
    test_println(PORT_INFO);
 8002b84:	4818      	ldr	r0, [pc, #96]	; (8002be8 <rt_test_001_001_execute+0x98>)
 8002b86:	f7fe feeb 	bl	8001960 <test_println>
    test_print("--- Natural alignment:                  ");
 8002b8a:	4818      	ldr	r0, [pc, #96]	; (8002bec <rt_test_001_001_execute+0x9c>)
 8002b8c:	f7fe ff08 	bl	80019a0 <test_print>
 8002b90:	2004      	movs	r0, #4
 8002b92:	f7fe fe65 	bl	8001860 <test_printn.part.0>
    test_println("");
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7fe fee2 	bl	8001960 <test_println>
    test_print("--- Stack alignment:                    ");
 8002b9c:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <rt_test_001_001_execute+0xa0>)
 8002b9e:	f7fe feff 	bl	80019a0 <test_print>
 8002ba2:	2008      	movs	r0, #8
 8002ba4:	f7fe fe5c 	bl	8001860 <test_printn.part.0>
    test_println("");
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7fe fed9 	bl	8001960 <test_println>
    test_print("--- Working area alignment:             ");
 8002bae:	4811      	ldr	r0, [pc, #68]	; (8002bf4 <rt_test_001_001_execute+0xa4>)
 8002bb0:	f7fe fef6 	bl	80019a0 <test_print>
 8002bb4:	2008      	movs	r0, #8
 8002bb6:	f7fe fe53 	bl	8001860 <test_printn.part.0>
    test_println("");
 8002bba:	4620      	mov	r0, r4
}
 8002bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8002bc0:	f7fe bece 	b.w	8001960 <test_println>
 8002bc4:	2000178c 	.word	0x2000178c
 8002bc8:	0800b39c 	.word	0x0800b39c
 8002bcc:	0800b3c8 	.word	0x0800b3c8
 8002bd0:	0800ad4c 	.word	0x0800ad4c
 8002bd4:	0800b3d4 	.word	0x0800b3d4
 8002bd8:	0800b400 	.word	0x0800b400
 8002bdc:	0800b40c 	.word	0x0800b40c
 8002be0:	0800b438 	.word	0x0800b438
 8002be4:	0800b480 	.word	0x0800b480
 8002be8:	0800b4ac 	.word	0x0800b4ac
 8002bec:	0800b4c4 	.word	0x0800b4c4
 8002bf0:	0800b4f0 	.word	0x0800b4f0
 8002bf4:	0800b51c 	.word	0x0800b51c
	...

08002c00 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	460e      	mov	r6, r1
  char *p;

  if (str != NULL)
 8002c04:	b1f0      	cbz	r0, 8002c44 <parse_arguments+0x44>
 8002c06:	4604      	mov	r4, r0
    *saveptr = str;
 8002c08:	6030      	str	r0, [r6, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 8002c0a:	4911      	ldr	r1, [pc, #68]	; (8002c50 <parse_arguments+0x50>)
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f007 fed9 	bl	800a9c4 <strspn>

  if (*p == '"') {
 8002c12:	5c21      	ldrb	r1, [r4, r0]
 8002c14:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 8002c16:	eb04 0500 	add.w	r5, r4, r0
  if (*p == '"') {
 8002c1a:	d00d      	beq.n	8002c38 <parse_arguments+0x38>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <parse_arguments+0x50>)
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f007 feae 	bl	800a980 <strpbrk>
 8002c24:	6030      	str	r0, [r6, #0]
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 8002c26:	b118      	cbz	r0, 8002c30 <parse_arguments+0x30>
    *(*saveptr)++ = '\0';
 8002c28:	1c42      	adds	r2, r0, #1
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	6032      	str	r2, [r6, #0]
 8002c2e:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 8002c30:	782b      	ldrb	r3, [r5, #0]
 8002c32:	b153      	cbz	r3, 8002c4a <parse_arguments+0x4a>
}
 8002c34:	4628      	mov	r0, r5
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8002c38:	3501      	adds	r5, #1
    *saveptr = strpbrk(p, "\"");
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f007 fdae 	bl	800a79c <strchr>
 8002c40:	6030      	str	r0, [r6, #0]
 8002c42:	e7f0      	b.n	8002c26 <parse_arguments+0x26>
  p = *saveptr;
 8002c44:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8002c46:	2c00      	cmp	r4, #0
 8002c48:	d1df      	bne.n	8002c0a <parse_arguments+0xa>
  return *p != '\0' ? p : NULL;
 8002c4a:	2500      	movs	r5, #0
}
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	0800b2d0 	.word	0x0800b2d0
	...

08002c60 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002c60:	b40e      	push	{r1, r2, r3}
 8002c62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c66:	b090      	sub	sp, #64	; 0x40
 8002c68:	ab19      	add	r3, sp, #100	; 0x64
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	f853 9b04 	ldr.w	r9, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002c70:	9309      	str	r3, [sp, #36]	; 0x24
 8002c72:	469a      	mov	sl, r3
  int n = 0;
 8002c74:	f04f 0b00 	mov.w	fp, #0
    c = *fmt++;
 8002c78:	f899 1000 	ldrb.w	r1, [r9]
 8002c7c:	f109 0201 	add.w	r2, r9, #1
    if (c == 0)
 8002c80:	b171      	cbz	r1, 8002ca0 <chprintf+0x40>
    if (c != '%') {
 8002c82:	2925      	cmp	r1, #37	; 0x25
 8002c84:	d012      	beq.n	8002cac <chprintf+0x4c>
      streamPut(chp, (uint8_t)c);
 8002c86:	6833      	ldr	r3, [r6, #0]
    c = *fmt++;
 8002c88:	4691      	mov	r9, r2
      streamPut(chp, (uint8_t)c);
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	4798      	blx	r3
    c = *fmt++;
 8002c90:	f899 1000 	ldrb.w	r1, [r9]
      n++;
 8002c94:	f10b 0b01 	add.w	fp, fp, #1
    c = *fmt++;
 8002c98:	f109 0201 	add.w	r2, r9, #1
    if (c == 0)
 8002c9c:	2900      	cmp	r1, #0
 8002c9e:	d1f0      	bne.n	8002c82 <chprintf+0x22>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002ca0:	4658      	mov	r0, fp
 8002ca2:	b010      	add	sp, #64	; 0x40
 8002ca4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca8:	b003      	add	sp, #12
 8002caa:	4770      	bx	lr
    if (*fmt == '-') {
 8002cac:	f899 1001 	ldrb.w	r1, [r9, #1]
 8002cb0:	292d      	cmp	r1, #45	; 0x2d
 8002cb2:	bf03      	ittte	eq
 8002cb4:	f899 1002 	ldrbeq.w	r1, [r9, #2]
      fmt++;
 8002cb8:	f109 0202 	addeq.w	r2, r9, #2
      left_align = TRUE;
 8002cbc:	2301      	moveq	r3, #1
    left_align = FALSE;
 8002cbe:	2300      	movne	r3, #0
    if (*fmt == '0') {
 8002cc0:	2930      	cmp	r1, #48	; 0x30
 8002cc2:	bf08      	it	eq
 8002cc4:	7851      	ldrbeq	r1, [r2, #1]
    left_align = FALSE;
 8002cc6:	9301      	str	r3, [sp, #4]
      fmt++;
 8002cc8:	bf06      	itte	eq
 8002cca:	3201      	addeq	r2, #1
      filler = '0';
 8002ccc:	2530      	moveq	r5, #48	; 0x30
    filler = ' ';
 8002cce:	2520      	movne	r5, #32
 8002cd0:	3201      	adds	r2, #1
    width = 0;
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	e007      	b.n	8002ce6 <chprintf+0x86>
        c = va_arg(ap, int);
 8002cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cda:	f10a 0a04 	add.w	sl, sl, #4
 8002cde:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
 8002ce2:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8002ce6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b09      	cmp	r3, #9
      c = *fmt++;
 8002cee:	4694      	mov	ip, r2
      width = width * 10 + c;
 8002cf0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8002cf4:	d9f3      	bls.n	8002cde <chprintf+0x7e>
      else if (c == '*')
 8002cf6:	292a      	cmp	r1, #42	; 0x2a
 8002cf8:	d0ed      	beq.n	8002cd6 <chprintf+0x76>
    if (c == '.') {
 8002cfa:	292e      	cmp	r1, #46	; 0x2e
    precision = 0;
 8002cfc:	f04f 0700 	mov.w	r7, #0
    if (c == '.') {
 8002d00:	d04a      	beq.n	8002d98 <chprintf+0x138>
    if (c == 'l' || c == 'L') {
 8002d02:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8002d06:	2b4c      	cmp	r3, #76	; 0x4c
 8002d08:	f10c 0901 	add.w	r9, ip, #1
 8002d0c:	d050      	beq.n	8002db0 <chprintf+0x150>
      is_long = (c >= 'A') && (c <= 'Z');
 8002d0e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
 8002d12:	f1a1 0244 	sub.w	r2, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 8002d16:	b2db      	uxtb	r3, r3
    switch (c) {
 8002d18:	2a34      	cmp	r2, #52	; 0x34
 8002d1a:	f200 81c5 	bhi.w	80030a8 <chprintf+0x448>
 8002d1e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002d22:	0213      	.short	0x0213
 8002d24:	01c301c3 	.word	0x01c301c3
 8002d28:	01c301c3 	.word	0x01c301c3
 8002d2c:	01c30213 	.word	0x01c30213
 8002d30:	01c301c3 	.word	0x01c301c3
 8002d34:	01c301c3 	.word	0x01c301c3
 8002d38:	01c301bf 	.word	0x01c301bf
 8002d3c:	01c301c3 	.word	0x01c301c3
 8002d40:	01c301c3 	.word	0x01c301c3
 8002d44:	01c3018c 	.word	0x01c3018c
 8002d48:	021c01c3 	.word	0x021c01c3
 8002d4c:	01c301c3 	.word	0x01c301c3
 8002d50:	01c301c3 	.word	0x01c301c3
 8002d54:	01c301c3 	.word	0x01c301c3
 8002d58:	01c301c3 	.word	0x01c301c3
 8002d5c:	01c301c3 	.word	0x01c301c3
 8002d60:	02130145 	.word	0x02130145
 8002d64:	00ab01c3 	.word	0x00ab01c3
 8002d68:	01c301c3 	.word	0x01c301c3
 8002d6c:	01c30213 	.word	0x01c30213
 8002d70:	01c301c3 	.word	0x01c301c3
 8002d74:	01c301c3 	.word	0x01c301c3
 8002d78:	01c301bf 	.word	0x01c301bf
 8002d7c:	01c301c3 	.word	0x01c301c3
 8002d80:	01c30089 	.word	0x01c30089
 8002d84:	01c3018c 	.word	0x01c3018c
 8002d88:	021c01c3 	.word	0x021c01c3
          c = va_arg(ap, int);
 8002d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d90:	f10a 0a04 	add.w	sl, sl, #4
        precision += c;
 8002d94:	eb03 0742 	add.w	r7, r3, r2, lsl #1
        c = *fmt++;
 8002d98:	f81c 1b01 	ldrb.w	r1, [ip], #1
        if (c >= '0' && c <= '9')
 8002d9c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b09      	cmp	r3, #9
        precision *= 10;
 8002da4:	eb07 0287 	add.w	r2, r7, r7, lsl #2
        if (c >= '0' && c <= '9')
 8002da8:	d9f4      	bls.n	8002d94 <chprintf+0x134>
        else if (c == '*')
 8002daa:	292a      	cmp	r1, #42	; 0x2a
 8002dac:	d0ee      	beq.n	8002d8c <chprintf+0x12c>
 8002dae:	e7a8      	b.n	8002d02 <chprintf+0xa2>
      if (*fmt)
 8002db0:	f89c 3000 	ldrb.w	r3, [ip]
 8002db4:	b3db      	cbz	r3, 8002e2e <chprintf+0x1ce>
    switch (c) {
 8002db6:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8002dba:	2a34      	cmp	r2, #52	; 0x34
 8002dbc:	f200 8176 	bhi.w	80030ac <chprintf+0x44c>
 8002dc0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002dc4:	01740195 	.word	0x01740195
 8002dc8:	01740174 	.word	0x01740174
 8002dcc:	01950174 	.word	0x01950174
 8002dd0:	01740174 	.word	0x01740174
 8002dd4:	01740174 	.word	0x01740174
 8002dd8:	016f0174 	.word	0x016f0174
 8002ddc:	01740174 	.word	0x01740174
 8002de0:	01740174 	.word	0x01740174
 8002de4:	013c0174 	.word	0x013c0174
 8002de8:	01740174 	.word	0x01740174
 8002dec:	01740192 	.word	0x01740192
 8002df0:	01740174 	.word	0x01740174
 8002df4:	01740174 	.word	0x01740174
 8002df8:	01740174 	.word	0x01740174
 8002dfc:	01740174 	.word	0x01740174
 8002e00:	00f50174 	.word	0x00f50174
 8002e04:	01740195 	.word	0x01740195
 8002e08:	0174005b 	.word	0x0174005b
 8002e0c:	01950174 	.word	0x01950174
 8002e10:	01740174 	.word	0x01740174
 8002e14:	01740174 	.word	0x01740174
 8002e18:	016f0174 	.word	0x016f0174
 8002e1c:	01740174 	.word	0x01740174
 8002e20:	00390174 	.word	0x00390174
 8002e24:	013c0174 	.word	0x013c0174
 8002e28:	01740174 	.word	0x01740174
 8002e2c:	0192      	.short	0x0192
      if (*fmt)
 8002e2e:	460b      	mov	r3, r1
 8002e30:	46e1      	mov	r9, ip
 8002e32:	e7c0      	b.n	8002db6 <chprintf+0x156>
    switch (c) {
 8002e34:	46e1      	mov	r9, ip
      if ((s = va_arg(ap, char *)) == 0)
 8002e36:	f8da 8000 	ldr.w	r8, [sl]
 8002e3a:	f10a 0a04 	add.w	sl, sl, #4
 8002e3e:	f1b8 0f00 	cmp.w	r8, #0
 8002e42:	f000 8199 	beq.w	8003178 <chprintf+0x518>
 8002e46:	f898 3000 	ldrb.w	r3, [r8]
 8002e4a:	4641      	mov	r1, r8
      if (precision == 0)
 8002e4c:	2f00      	cmp	r7, #0
 8002e4e:	f040 81a2 	bne.w	8003196 <chprintf+0x536>
      for (p = s; *p && (--precision >= 0); p++)
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 81bd 	beq.w	80031d2 <chprintf+0x572>
 8002e58:	f647 77fe 	movw	r7, #32766	; 0x7ffe
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	e001      	b.n	8002e64 <chprintf+0x204>
 8002e60:	3f01      	subs	r7, #1
 8002e62:	d403      	bmi.n	8002e6c <chprintf+0x20c>
 8002e64:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002e68:	2a00      	cmp	r2, #0
 8002e6a:	d1f9      	bne.n	8002e60 <chprintf+0x200>
 8002e6c:	1a5b      	subs	r3, r3, r1
 8002e6e:	1ae4      	subs	r4, r4, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8002e74:	2520      	movs	r5, #32
 8002e76:	e0a6      	b.n	8002fc6 <chprintf+0x366>
    switch (c) {
 8002e78:	46e1      	mov	r9, ip
      f = (float) va_arg(ap, double);
 8002e7a:	f10a 0a07 	add.w	sl, sl, #7
 8002e7e:	f02a 0a07 	bic.w	sl, sl, #7
 8002e82:	e9da 0100 	ldrd	r0, r1, [sl]
 8002e86:	f7fd fe25 	bl	8000ad4 <__aeabi_d2f>
      if (f < 0) {
 8002e8a:	2100      	movs	r1, #0
      f = (float) va_arg(ap, double);
 8002e8c:	f10a 0a08 	add.w	sl, sl, #8
 8002e90:	4680      	mov	r8, r0
      if (f < 0) {
 8002e92:	f7fd ffcb 	bl	8000e2c <__aeabi_fcmplt>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	f040 8163 	bne.w	8003162 <chprintf+0x502>
    p = tmpbuf;
 8002e9c:	ab0a      	add	r3, sp, #40	; 0x28
 8002e9e:	9306      	str	r3, [sp, #24]
 8002ea0:	9300      	str	r3, [sp, #0]
      p = ftoa(p, f, precision);
 8002ea2:	4640      	mov	r0, r8
 8002ea4:	f7fd fb84 	bl	80005b0 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002ea8:	3f01      	subs	r7, #1
 8002eaa:	2f08      	cmp	r7, #8
      p = ftoa(p, f, precision);
 8002eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002eb0:	f200 8169 	bhi.w	8003186 <chprintf+0x526>
 8002eb4:	4bbe      	ldr	r3, [pc, #760]	; (80031b0 <chprintf+0x550>)
 8002eb6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8002eba:	4638      	mov	r0, r7
 8002ebc:	f7fd fb56 	bl	800056c <__aeabi_ui2d>
 8002ec0:	4bbc      	ldr	r3, [pc, #752]	; (80031b4 <chprintf+0x554>)
 8002ec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ec6:	fba3 3707 	umull	r3, r7, r3, r7
 8002eca:	08fb      	lsrs	r3, r7, #3
 8002ecc:	9307      	str	r3, [sp, #28]
 8002ece:	461f      	mov	r7, r3
  l = (long)num;
 8002ed0:	4640      	mov	r0, r8
 8002ed2:	f7fd ffd3 	bl	8000e7c <__aeabi_f2iz>
  q = p + MAX_FILLER;
 8002ed6:	9b00      	ldr	r3, [sp, #0]
 8002ed8:	f103 0e0b 	add.w	lr, r3, #11
  l = (long)num;
 8002edc:	4680      	mov	r8, r0
  l = num;
 8002ede:	4601      	mov	r1, r0
  q = p + MAX_FILLER;
 8002ee0:	4672      	mov	r2, lr
    i = (int)(l % radix);
 8002ee2:	4bb4      	ldr	r3, [pc, #720]	; (80031b4 <chprintf+0x554>)
 8002ee4:	fba3 0301 	umull	r0, r3, r3, r1
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	eba1 034c 	sub.w	r3, r1, ip, lsl #1
    i += '0';
 8002ef4:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f802 3d01 	strb.w	r3, [r2, #-1]!
  } while ((ll /= radix) != 0);
 8002efc:	4601      	mov	r1, r0
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d1ef      	bne.n	8002ee2 <chprintf+0x282>
 8002f02:	9900      	ldr	r1, [sp, #0]
  i = (int)(p + MAX_FILLER - q);
 8002f04:	ebae 0e02 	sub.w	lr, lr, r2
 8002f08:	4608      	mov	r0, r1
 8002f0a:	4470      	add	r0, lr
 8002f0c:	e001      	b.n	8002f12 <chprintf+0x2b2>
 8002f0e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8002f12:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8002f16:	4281      	cmp	r1, r0
 8002f18:	d1f9      	bne.n	8002f0e <chprintf+0x2ae>
 8002f1a:	9a00      	ldr	r2, [sp, #0]
 8002f1c:	f10e 3eff 	add.w	lr, lr, #4294967295
  *p++ = '.';
 8002f20:	232e      	movs	r3, #46	; 0x2e
 8002f22:	4472      	add	r2, lr
  l = (long)((num - l) * precision);
 8002f24:	4640      	mov	r0, r8
  *p++ = '.';
 8002f26:	700b      	strb	r3, [r1, #0]
 8002f28:	4690      	mov	r8, r2
  l = (long)((num - l) * precision);
 8002f2a:	f7fd fb2f 	bl	800058c <__aeabi_i2d>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f36:	f7fd f9db 	bl	80002f0 <__aeabi_dsub>
 8002f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f3e:	f7fd fb8f 	bl	8000660 <__aeabi_dmul>
 8002f42:	f7fd fd9f 	bl	8000a84 <__aeabi_d2iz>
    ll = num;
 8002f46:	9b07      	ldr	r3, [sp, #28]
  q = p + MAX_FILLER;
 8002f48:	f108 0c0d 	add.w	ip, r8, #13
    ll = num;
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf08      	it	eq
 8002f50:	4607      	moveq	r7, r0
  *p++ = '.';
 8002f52:	f108 0302 	add.w	r3, r8, #2
  q = p + MAX_FILLER;
 8002f56:	4662      	mov	r2, ip
  *p++ = '.';
 8002f58:	9300      	str	r3, [sp, #0]
    i = (int)(l % radix);
 8002f5a:	4b96      	ldr	r3, [pc, #600]	; (80031b4 <chprintf+0x554>)
 8002f5c:	fba3 1300 	umull	r1, r3, r3, r0
 8002f60:	08db      	lsrs	r3, r3, #3
 8002f62:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8002f66:	4619      	mov	r1, r3
 8002f68:	eba0 034e 	sub.w	r3, r0, lr, lsl #1
  } while ((ll /= radix) != 0);
 8002f6c:	4891      	ldr	r0, [pc, #580]	; (80031b4 <chprintf+0x554>)
    i += '0';
 8002f6e:	3330      	adds	r3, #48	; 0x30
  } while ((ll /= radix) != 0);
 8002f70:	fba0 0707 	umull	r0, r7, r0, r7
    *--q = i;
 8002f74:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002f76:	08ff      	lsrs	r7, r7, #3
    *--q = i;
 8002f78:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8002f7c:	4608      	mov	r0, r1
  } while ((ll /= radix) != 0);
 8002f7e:	d1ec      	bne.n	8002f5a <chprintf+0x2fa>
  i = (int)(p + MAX_FILLER - q);
 8002f80:	ebac 0702 	sub.w	r7, ip, r2
 8002f84:	1cb9      	adds	r1, r7, #2
 8002f86:	4488      	add	r8, r1
 8002f88:	9900      	ldr	r1, [sp, #0]
 8002f8a:	e001      	b.n	8002f90 <chprintf+0x330>
 8002f8c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8002f90:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8002f94:	4541      	cmp	r1, r8
 8002f96:	d1f9      	bne.n	8002f8c <chprintf+0x32c>
 8002f98:	9b00      	ldr	r3, [sp, #0]
 8002f9a:	443b      	add	r3, r7
 8002f9c:	461f      	mov	r7, r3
 8002f9e:	9b06      	ldr	r3, [sp, #24]
 8002fa0:	1aff      	subs	r7, r7, r3
 8002fa2:	1e7a      	subs	r2, r7, #1
 8002fa4:	1be4      	subs	r4, r4, r7
 8002fa6:	9200      	str	r2, [sp, #0]
    s = tmpbuf;
 8002fa8:	4698      	mov	r8, r3
 8002faa:	e00c      	b.n	8002fc6 <chprintf+0x366>
    switch (c) {
 8002fac:	46e1      	mov	r9, ip
      *p++ = va_arg(ap, int);
 8002fae:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8002fb2:	f8da 3000 	ldr.w	r3, [sl]
 8002fb6:	f808 3d18 	strb.w	r3, [r8, #-24]!
 8002fba:	2300      	movs	r3, #0
 8002fbc:	3c01      	subs	r4, #1
 8002fbe:	f10a 0a04 	add.w	sl, sl, #4
 8002fc2:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8002fc4:	2520      	movs	r5, #32
    if ((width -= i) < 0)
 8002fc6:	2c00      	cmp	r4, #0
 8002fc8:	db64      	blt.n	8003094 <chprintf+0x434>
    if (left_align == FALSE)
 8002fca:	9b01      	ldr	r3, [sp, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d176      	bne.n	80030be <chprintf+0x45e>
      width = -width;
 8002fd0:	4263      	negs	r3, r4
    if (width < 0) {
 8002fd2:	2c00      	cmp	r4, #0
 8002fd4:	d072      	beq.n	80030bc <chprintf+0x45c>
      if (*s == '-' && filler == '0') {
 8002fd6:	f898 1000 	ldrb.w	r1, [r8]
 8002fda:	6832      	ldr	r2, [r6, #0]
 8002fdc:	292d      	cmp	r1, #45	; 0x2d
 8002fde:	68d2      	ldr	r2, [r2, #12]
 8002fe0:	d071      	beq.n	80030c6 <chprintf+0x466>
 8002fe2:	461f      	mov	r7, r3
 8002fe4:	e001      	b.n	8002fea <chprintf+0x38a>
 8002fe6:	6833      	ldr	r3, [r6, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
        streamPut(chp, (uint8_t)filler);
 8002fea:	4629      	mov	r1, r5
 8002fec:	4630      	mov	r0, r6
 8002fee:	4790      	blx	r2
      } while (++width != 0);
 8002ff0:	3701      	adds	r7, #1
 8002ff2:	d1f8      	bne.n	8002fe6 <chprintf+0x386>
    while (--i >= 0) {
 8002ff4:	9a00      	ldr	r2, [sp, #0]
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	44a3      	add	fp, r4
 8002ffc:	f6ff ae3c 	blt.w	8002c78 <chprintf+0x18>
 8003000:	461c      	mov	r4, r3
      width = -width;
 8003002:	9f00      	ldr	r7, [sp, #0]
      streamPut(chp, (uint8_t)*s++);
 8003004:	6833      	ldr	r3, [r6, #0]
 8003006:	f818 1b01 	ldrb.w	r1, [r8], #1
 800300a:	68db      	ldr	r3, [r3, #12]
    while (--i >= 0) {
 800300c:	3f01      	subs	r7, #1
      streamPut(chp, (uint8_t)*s++);
 800300e:	4630      	mov	r0, r6
 8003010:	4798      	blx	r3
    while (--i >= 0) {
 8003012:	1c7b      	adds	r3, r7, #1
 8003014:	d1f6      	bne.n	8003004 <chprintf+0x3a4>
 8003016:	9b00      	ldr	r3, [sp, #0]
 8003018:	f10b 0b01 	add.w	fp, fp, #1
 800301c:	445b      	add	r3, fp
 800301e:	469b      	mov	fp, r3
    while (width) {
 8003020:	2c00      	cmp	r4, #0
 8003022:	f43f ae29 	beq.w	8002c78 <chprintf+0x18>
 8003026:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
 8003028:	6833      	ldr	r3, [r6, #0]
 800302a:	4629      	mov	r1, r5
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4630      	mov	r0, r6
 8003030:	4798      	blx	r3
    while (width) {
 8003032:	3f01      	subs	r7, #1
 8003034:	d1f8      	bne.n	8003028 <chprintf+0x3c8>
 8003036:	44a3      	add	fp, r4
 8003038:	e61e      	b.n	8002c78 <chprintf+0x18>
    switch (c) {
 800303a:	46e1      	mov	r9, ip
    case 'U':
 800303c:	f04f 0e0a 	mov.w	lr, #10
  q = p + MAX_FILLER;
 8003040:	f10d 0733 	add.w	r7, sp, #51	; 0x33
 8003044:	4639      	mov	r1, r7
 8003046:	f85a 2b04 	ldr.w	r2, [sl], #4
 800304a:	e000      	b.n	800304e <chprintf+0x3ee>
  } while ((ll /= radix) != 0);
 800304c:	4601      	mov	r1, r0
    i = (int)(l % radix);
 800304e:	fbb2 fcfe 	udiv	ip, r2, lr
 8003052:	fb0e 221c 	mls	r2, lr, ip, r2
    i += '0';
 8003056:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 800305a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800305c:	bfc8      	it	gt
 800305e:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 8003062:	b2db      	uxtb	r3, r3
    l /= radix;
 8003064:	4662      	mov	r2, ip
    *--q = i;
 8003066:	f801 3c01 	strb.w	r3, [r1, #-1]
 800306a:	1e48      	subs	r0, r1, #1
  } while ((ll /= radix) != 0);
 800306c:	2a00      	cmp	r2, #0
 800306e:	d1ed      	bne.n	800304c <chprintf+0x3ec>
  i = (int)(p + MAX_FILLER - q);
 8003070:	1a3f      	subs	r7, r7, r0
 8003072:	aa0a      	add	r2, sp, #40	; 0x28
 8003074:	9206      	str	r2, [sp, #24]
 8003076:	4438      	add	r0, r7
 8003078:	e001      	b.n	800307e <chprintf+0x41e>
 800307a:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 800307e:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8003082:	4281      	cmp	r1, r0
 8003084:	d1f9      	bne.n	800307a <chprintf+0x41a>
 8003086:	1be4      	subs	r4, r4, r7
 8003088:	1e7b      	subs	r3, r7, #1
    if ((width -= i) < 0)
 800308a:	2c00      	cmp	r4, #0
 800308c:	9300      	str	r3, [sp, #0]
    s = tmpbuf;
 800308e:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if ((width -= i) < 0)
 8003092:	da9a      	bge.n	8002fca <chprintf+0x36a>
    while (--i >= 0) {
 8003094:	9b00      	ldr	r3, [sp, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f6ff adee 	blt.w	8002c78 <chprintf+0x18>
      width = 0;
 800309c:	2400      	movs	r4, #0
 800309e:	e7b0      	b.n	8003002 <chprintf+0x3a2>
    switch (c) {
 80030a0:	46e1      	mov	r9, ip
    case 'O':
 80030a2:	f04f 0e08 	mov.w	lr, #8
 80030a6:	e7cb      	b.n	8003040 <chprintf+0x3e0>
    switch (c) {
 80030a8:	46e1      	mov	r9, ip
 80030aa:	460b      	mov	r3, r1
      *p++ = c;
 80030ac:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80030b0:	3c01      	subs	r4, #1
 80030b2:	f808 3d18 	strb.w	r3, [r8, #-24]!
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	e784      	b.n	8002fc6 <chprintf+0x366>
      width = -width;
 80030bc:	461c      	mov	r4, r3
    while (--i >= 0) {
 80030be:	9b00      	ldr	r3, [sp, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da9e      	bge.n	8003002 <chprintf+0x3a2>
 80030c4:	e7ac      	b.n	8003020 <chprintf+0x3c0>
      if (*s == '-' && filler == '0') {
 80030c6:	2d30      	cmp	r5, #48	; 0x30
 80030c8:	d18b      	bne.n	8002fe2 <chprintf+0x382>
        streamPut(chp, (uint8_t)*s++);
 80030ca:	4630      	mov	r0, r6
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	4790      	blx	r2
 80030d0:	9b00      	ldr	r3, [sp, #0]
 80030d2:	6832      	ldr	r2, [r6, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	9b01      	ldr	r3, [sp, #4]
 80030da:	68d2      	ldr	r2, [r2, #12]
 80030dc:	f10b 0b01 	add.w	fp, fp, #1
 80030e0:	f108 0801 	add.w	r8, r8, #1
 80030e4:	461f      	mov	r7, r3
 80030e6:	e780      	b.n	8002fea <chprintf+0x38a>
    switch (c) {
 80030e8:	f04f 0e10 	mov.w	lr, #16
 80030ec:	e7a8      	b.n	8003040 <chprintf+0x3e0>
 80030ee:	f10a 0104 	add.w	r1, sl, #4
        l = va_arg(ap, long);
 80030f2:	f8da 2000 	ldr.w	r2, [sl]
 80030f6:	468a      	mov	sl, r1
      if (l < 0) {
 80030f8:	2a00      	cmp	r2, #0
 80030fa:	db61      	blt.n	80031c0 <chprintf+0x560>
    p = tmpbuf;
 80030fc:	ab0a      	add	r3, sp, #40	; 0x28
 80030fe:	9306      	str	r3, [sp, #24]
 8003100:	4618      	mov	r0, r3
  q = p + MAX_FILLER;
 8003102:	f100 070b 	add.w	r7, r0, #11
 8003106:	4639      	mov	r1, r7
    i = (int)(l % radix);
 8003108:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <chprintf+0x554>)
 800310a:	fba3 c302 	umull	ip, r3, r3, r2
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8003114:	469c      	mov	ip, r3
 8003116:	eba2 034e 	sub.w	r3, r2, lr, lsl #1
    i += '0';
 800311a:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 800311c:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 800311e:	4662      	mov	r2, ip
    *--q = i;
 8003120:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8003124:	2a00      	cmp	r2, #0
 8003126:	d1ef      	bne.n	8003108 <chprintf+0x4a8>
  i = (int)(p + MAX_FILLER - q);
 8003128:	1a7a      	subs	r2, r7, r1
 800312a:	4402      	add	r2, r0
 800312c:	e001      	b.n	8003132 <chprintf+0x4d2>
 800312e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 8003132:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8003136:	4282      	cmp	r2, r0
 8003138:	d1f9      	bne.n	800312e <chprintf+0x4ce>
 800313a:	9b06      	ldr	r3, [sp, #24]
 800313c:	1ad2      	subs	r2, r2, r3
 800313e:	1aa4      	subs	r4, r4, r2
 8003140:	3a01      	subs	r2, #1
 8003142:	9200      	str	r2, [sp, #0]
    s = tmpbuf;
 8003144:	4698      	mov	r8, r3
 8003146:	e73e      	b.n	8002fc6 <chprintf+0x366>
 8003148:	4651      	mov	r1, sl
      if (is_long)
 800314a:	2b19      	cmp	r3, #25
 800314c:	f851 2b04 	ldr.w	r2, [r1], #4
 8003150:	46e1      	mov	r9, ip
        l = va_arg(ap, int);
 8003152:	bf88      	it	hi
 8003154:	468a      	movhi	sl, r1
      if (is_long)
 8003156:	d8cf      	bhi.n	80030f8 <chprintf+0x498>
 8003158:	e7cb      	b.n	80030f2 <chprintf+0x492>
    switch (c) {
 800315a:	46e1      	mov	r9, ip
 800315c:	f04f 0e10 	mov.w	lr, #16
 8003160:	e76e      	b.n	8003040 <chprintf+0x3e0>
        *p++ = '-';
 8003162:	232d      	movs	r3, #45	; 0x2d
 8003164:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003168:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	ab0a      	add	r3, sp, #40	; 0x28
        f = -f;
 8003170:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 8003174:	9306      	str	r3, [sp, #24]
 8003176:	e694      	b.n	8002ea2 <chprintf+0x242>
 8003178:	490f      	ldr	r1, [pc, #60]	; (80031b8 <chprintf+0x558>)
      if (precision == 0)
 800317a:	4688      	mov	r8, r1
 800317c:	2f00      	cmp	r7, #0
 800317e:	f43f ae6b 	beq.w	8002e58 <chprintf+0x1f8>
      for (p = s; *p && (--precision >= 0); p++)
 8003182:	3f01      	subs	r7, #1
 8003184:	e66a      	b.n	8002e5c <chprintf+0x1fc>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8003186:	a308      	add	r3, pc, #32	; (adr r3, 80031a8 <chprintf+0x548>)
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	4f0b      	ldr	r7, [pc, #44]	; (80031bc <chprintf+0x55c>)
 800318e:	9707      	str	r7, [sp, #28]
 8003190:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003194:	e69c      	b.n	8002ed0 <chprintf+0x270>
      for (p = s; *p && (--precision >= 0); p++)
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f3      	bne.n	8003182 <chprintf+0x522>
 800319a:	f04f 33ff 	mov.w	r3, #4294967295
 800319e:	9300      	str	r3, [sp, #0]
      filler = ' ';
 80031a0:	2520      	movs	r5, #32
 80031a2:	e710      	b.n	8002fc6 <chprintf+0x366>
 80031a4:	f3af 8000 	nop.w
 80031a8:	00000000 	.word	0x00000000
 80031ac:	41cdcd65 	.word	0x41cdcd65
 80031b0:	0800b2e8 	.word	0x0800b2e8
 80031b4:	cccccccd 	.word	0xcccccccd
 80031b8:	0800ab44 	.word	0x0800ab44
 80031bc:	05f5e100 	.word	0x05f5e100
        *p++ = '-';
 80031c0:	232d      	movs	r3, #45	; 0x2d
 80031c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80031c6:	ab0a      	add	r3, sp, #40	; 0x28
        l = -l;
 80031c8:	4252      	negs	r2, r2
        *p++ = '-';
 80031ca:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 80031ce:	9306      	str	r3, [sp, #24]
 80031d0:	e797      	b.n	8003102 <chprintf+0x4a2>
      for (p = s; *p && (--precision >= 0); p++)
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	9300      	str	r3, [sp, #0]
      filler = ' ';
 80031d8:	2520      	movs	r5, #32
 80031da:	e6f6      	b.n	8002fca <chprintf+0x36a>
 80031dc:	0000      	movs	r0, r0
	...

080031e0 <cmd_test.lto_priv.100>:

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 char *testvar = argv[0];
 char *testvar1 = argv[1];
 char *testvar2 = argv[2];
           if (flag2 == false){
 80031e0:	4b42      	ldr	r3, [pc, #264]	; (80032ec <cmd_test.lto_priv.100+0x10c>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d153      	bne.n	8003290 <cmd_test.lto_priv.100+0xb0>
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80031e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 char *testvar = argv[0];
 80031ec:	6816      	ldr	r6, [r2, #0]
 char *testvar1 = argv[1];
 80031ee:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80031f2:	4607      	mov	r7, r0
 80031f4:	460d      	mov	r5, r1
                       if(!strcmp("LED",testvar)&& argc<=3){
 80031f6:	483e      	ldr	r0, [pc, #248]	; (80032f0 <cmd_test.lto_priv.100+0x110>)
 80031f8:	4631      	mov	r1, r6
 80031fa:	4614      	mov	r4, r2
 80031fc:	f7fd ff04 	bl	8001008 <strcmp>
 8003200:	b998      	cbnz	r0, 800322a <cmd_test.lto_priv.100+0x4a>
 8003202:	2d03      	cmp	r5, #3
 8003204:	dc11      	bgt.n	800322a <cmd_test.lto_priv.100+0x4a>
                                   if(!strcmp("BLUE",testvar1)  ){
 8003206:	4641      	mov	r1, r8
 8003208:	483a      	ldr	r0, [pc, #232]	; (80032f4 <cmd_test.lto_priv.100+0x114>)
 char *testvar2 = argv[2];
 800320a:	68a4      	ldr	r4, [r4, #8]
                                   if(!strcmp("BLUE",testvar1)  ){
 800320c:	f7fd fefc 	bl	8001008 <strcmp>
 8003210:	2800      	cmp	r0, #0
 8003212:	d14c      	bne.n	80032ae <cmd_test.lto_priv.100+0xce>
                                          if(!strcmp("ON",testvar2)){
 8003214:	4621      	mov	r1, r4
 8003216:	4838      	ldr	r0, [pc, #224]	; (80032f8 <cmd_test.lto_priv.100+0x118>)
 8003218:	f7fd fef6 	bl	8001008 <strcmp>
                                            palClearLine(LINE_LED_RGB_BLUE);
 800321c:	4b37      	ldr	r3, [pc, #220]	; (80032fc <cmd_test.lto_priv.100+0x11c>)
 800321e:	2204      	movs	r2, #4
                                          if(!strcmp("ON",testvar2)){
 8003220:	2800      	cmp	r0, #0
 8003222:	d057      	beq.n	80032d4 <cmd_test.lto_priv.100+0xf4>
                                   else if (!strcmp("GREEN",testvar1) ) {
                                            if(!strcmp("ON",testvar2)){
                                              palClearLine(LINE_LED_RGB_GREEN);
                                             }
                                            else {
                                              palSetLine(LINE_LED_RGB_GREEN);
 8003224:	831a      	strh	r2, [r3, #24]
              chprintf(chp, "TEST doesn't work when SEMAFORO is active" );
         }



}
 8003226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      else if (!strcmp("POT",testvar) ){
 800322a:	4631      	mov	r1, r6
 800322c:	4834      	ldr	r0, [pc, #208]	; (8003300 <cmd_test.lto_priv.100+0x120>)
 800322e:	f7fd feeb 	bl	8001008 <strcmp>
 8003232:	b980      	cbnz	r0, 8003256 <cmd_test.lto_priv.100+0x76>
                               if(!strcmp("ON",testvar1)){
 8003234:	4641      	mov	r1, r8
 8003236:	4830      	ldr	r0, [pc, #192]	; (80032f8 <cmd_test.lto_priv.100+0x118>)
 8003238:	f7fd fee6 	bl	8001008 <strcmp>
 800323c:	bb58      	cbnz	r0, 8003296 <cmd_test.lto_priv.100+0xb6>
                                           chprintf(chp, "Last value: %.2f\r\n", lastvalue);
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <cmd_test.lto_priv.100+0x124>)
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f7fd f9b5 	bl	80005b0 <__aeabi_f2d>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4638      	mov	r0, r7
 800324c:	492e      	ldr	r1, [pc, #184]	; (8003308 <cmd_test.lto_priv.100+0x128>)
}
 800324e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                                           chprintf(chp, "Last value: %.2f\r\n", lastvalue);
 8003252:	f7ff bd05 	b.w	8002c60 <chprintf>
                      else if (!strcmp("PWM",testvar)  ){
 8003256:	4631      	mov	r1, r6
 8003258:	482c      	ldr	r0, [pc, #176]	; (800330c <cmd_test.lto_priv.100+0x12c>)
 800325a:	f7fd fed5 	bl	8001008 <strcmp>
 800325e:	bb00      	cbnz	r0, 80032a2 <cmd_test.lto_priv.100+0xc2>
                                  if(!strcmp("BLUE",testvar1)  ){
 8003260:	4641      	mov	r1, r8
 8003262:	4824      	ldr	r0, [pc, #144]	; (80032f4 <cmd_test.lto_priv.100+0x114>)
 8003264:	f7fd fed0 	bl	8001008 <strcmp>
 8003268:	2800      	cmp	r0, #0
 800326a:	d0e8      	beq.n	800323e <cmd_test.lto_priv.100+0x5e>
                                  else if (!strcmp("RED",testvar1) ){
 800326c:	4641      	mov	r1, r8
 800326e:	4828      	ldr	r0, [pc, #160]	; (8003310 <cmd_test.lto_priv.100+0x130>)
 8003270:	f7fd feca 	bl	8001008 <strcmp>
 8003274:	2800      	cmp	r0, #0
 8003276:	d0e2      	beq.n	800323e <cmd_test.lto_priv.100+0x5e>
                                  else if (!strcmp("GREEN",testvar1) ) {
 8003278:	4641      	mov	r1, r8
 800327a:	4826      	ldr	r0, [pc, #152]	; (8003314 <cmd_test.lto_priv.100+0x134>)
 800327c:	f7fd fec4 	bl	8001008 <strcmp>
 8003280:	2800      	cmp	r0, #0
 8003282:	d0dc      	beq.n	800323e <cmd_test.lto_priv.100+0x5e>
                                     {chprintf(chp, "wrong command \r\n" );}
 8003284:	4638      	mov	r0, r7
 8003286:	4924      	ldr	r1, [pc, #144]	; (8003318 <cmd_test.lto_priv.100+0x138>)
}
 8003288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                                     {chprintf(chp, "wrong command \r\n" );}
 800328c:	f7ff bce8 	b.w	8002c60 <chprintf>
              chprintf(chp, "TEST doesn't work when SEMAFORO is active" );
 8003290:	4922      	ldr	r1, [pc, #136]	; (800331c <cmd_test.lto_priv.100+0x13c>)
 8003292:	f7ff bce5 	b.w	8002c60 <chprintf>
                                       chprintf(chp, "pot sampling off\r\n" );
 8003296:	4638      	mov	r0, r7
 8003298:	4921      	ldr	r1, [pc, #132]	; (8003320 <cmd_test.lto_priv.100+0x140>)
}
 800329a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                                       chprintf(chp, "pot sampling off\r\n" );
 800329e:	f7ff bcdf 	b.w	8002c60 <chprintf>
                        chprintf(chp, "boh" );
 80032a2:	4638      	mov	r0, r7
 80032a4:	491f      	ldr	r1, [pc, #124]	; (8003324 <cmd_test.lto_priv.100+0x144>)
}
 80032a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        chprintf(chp, "boh" );
 80032aa:	f7ff bcd9 	b.w	8002c60 <chprintf>
                                   else if (!strcmp("RED",testvar1) ){
 80032ae:	4641      	mov	r1, r8
 80032b0:	4817      	ldr	r0, [pc, #92]	; (8003310 <cmd_test.lto_priv.100+0x130>)
 80032b2:	f7fd fea9 	bl	8001008 <strcmp>
 80032b6:	b178      	cbz	r0, 80032d8 <cmd_test.lto_priv.100+0xf8>
                                   else if (!strcmp("GREEN",testvar1) ) {
 80032b8:	4641      	mov	r1, r8
 80032ba:	4816      	ldr	r0, [pc, #88]	; (8003314 <cmd_test.lto_priv.100+0x134>)
 80032bc:	f7fd fea4 	bl	8001008 <strcmp>
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d1df      	bne.n	8003284 <cmd_test.lto_priv.100+0xa4>
                                            if(!strcmp("ON",testvar2)){
 80032c4:	4621      	mov	r1, r4
 80032c6:	480c      	ldr	r0, [pc, #48]	; (80032f8 <cmd_test.lto_priv.100+0x118>)
 80032c8:	f7fd fe9e 	bl	8001008 <strcmp>
                                              palClearLine(LINE_LED_RGB_GREEN);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <cmd_test.lto_priv.100+0x11c>)
 80032ce:	2202      	movs	r2, #2
                                            if(!strcmp("ON",testvar2)){
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d1a7      	bne.n	8003224 <cmd_test.lto_priv.100+0x44>
                                              palClearLine(LINE_LED_RGB_GREEN);
 80032d4:	835a      	strh	r2, [r3, #26]
 80032d6:	e7a6      	b.n	8003226 <cmd_test.lto_priv.100+0x46>
                                           if(!strcmp("ON",testvar2)){
 80032d8:	4621      	mov	r1, r4
 80032da:	4807      	ldr	r0, [pc, #28]	; (80032f8 <cmd_test.lto_priv.100+0x118>)
 80032dc:	f7fd fe94 	bl	8001008 <strcmp>
                                              palClearLine(LINE_LED_RGB_RED);
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <cmd_test.lto_priv.100+0x11c>)
 80032e2:	2201      	movs	r2, #1
                                           if(!strcmp("ON",testvar2)){
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d19d      	bne.n	8003224 <cmd_test.lto_priv.100+0x44>
 80032e8:	e7f4      	b.n	80032d4 <cmd_test.lto_priv.100+0xf4>
 80032ea:	bf00      	nop
 80032ec:	20000fe0 	.word	0x20000fe0
 80032f0:	0800ad20 	.word	0x0800ad20
 80032f4:	0800ad24 	.word	0x0800ad24
 80032f8:	0800ad2c 	.word	0x0800ad2c
 80032fc:	40020800 	.word	0x40020800
 8003300:	0800ad50 	.word	0x0800ad50
 8003304:	20001000 	.word	0x20001000
 8003308:	0800ad54 	.word	0x0800ad54
 800330c:	0800ad7c 	.word	0x0800ad7c
 8003310:	0800ad30 	.word	0x0800ad30
 8003314:	0800ad34 	.word	0x0800ad34
 8003318:	0800ad3c 	.word	0x0800ad3c
 800331c:	0800ad84 	.word	0x0800ad84
 8003320:	0800ad68 	.word	0x0800ad68
 8003324:	0800ad80 	.word	0x0800ad80
	...

08003330 <cmd_write>:
  if (argc > 0) {
 8003330:	2900      	cmp	r1, #0
 8003332:	dc18      	bgt.n	8003366 <cmd_write+0x36>
static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4604      	mov	r4, r0
    chnWrite(&SD2, buf, sizeof buf - 1);
 8003338:	4e0c      	ldr	r6, [pc, #48]	; (800336c <cmd_write+0x3c>)
 800333a:	4d0d      	ldr	r5, [pc, #52]	; (8003370 <cmd_write+0x40>)
 800333c:	e002      	b.n	8003344 <cmd_write+0x14>
 800333e:	6833      	ldr	r3, [r6, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4798      	blx	r3
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	2100      	movs	r1, #0
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	4620      	mov	r0, r4
 800334c:	4798      	blx	r3
 800334e:	3001      	adds	r0, #1
    chnWrite(&SD2, buf, sizeof buf - 1);
 8003350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003354:	4629      	mov	r1, r5
 8003356:	4805      	ldr	r0, [pc, #20]	; (800336c <cmd_write+0x3c>)
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8003358:	d0f1      	beq.n	800333e <cmd_write+0xe>
  chprintf(chp, "\r\n\n stopped\r\n");
 800335a:	4620      	mov	r0, r4
 800335c:	4905      	ldr	r1, [pc, #20]	; (8003374 <cmd_write+0x44>)
}
 800335e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "\r\n\n stopped\r\n");
 8003362:	f7ff bc7d 	b.w	8002c60 <chprintf>
    chprintf(chp, "Usage: write\r\n");
 8003366:	4904      	ldr	r1, [pc, #16]	; (8003378 <cmd_write+0x48>)
 8003368:	f7ff bc7a 	b.w	8002c60 <chprintf>
 800336c:	20000d14 	.word	0x20000d14
 8003370:	20000800 	.word	0x20000800
 8003374:	0800ae3c 	.word	0x0800ae3c
 8003378:	0800ae4c 	.word	0x0800ae4c
 800337c:	00000000 	.word	0x00000000

08003380 <cmd_systime>:

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8003380:	2900      	cmp	r1, #0
 8003382:	dd03      	ble.n	800338c <cmd_systime+0xc>
    shellUsage(chp, "systime");
 8003384:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <cmd_systime+0x24>)
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <cmd_systime+0x28>)
 8003388:	f7ff bc6a 	b.w	8002c60 <chprintf>
 800338c:	2320      	movs	r3, #32
 800338e:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8003392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003396:	2300      	movs	r3, #0
 8003398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800339a:	f383 8811 	msr	BASEPRI, r3
    return;
  }
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 800339e:	4903      	ldr	r1, [pc, #12]	; (80033ac <cmd_systime+0x2c>)
 80033a0:	f7ff bc5e 	b.w	8002c60 <chprintf>
 80033a4:	0800ad04 	.word	0x0800ad04
 80033a8:	0800ad0c 	.word	0x0800ad0c
 80033ac:	0800ad18 	.word	0x0800ad18

080033b0 <cmd_echo>:
  if (argc != 1) {
 80033b0:	2901      	cmp	r1, #1
 80033b2:	d003      	beq.n	80033bc <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 80033b4:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <cmd_echo+0x14>)
 80033b6:	4904      	ldr	r1, [pc, #16]	; (80033c8 <cmd_echo+0x18>)
 80033b8:	f7ff bc52 	b.w	8002c60 <chprintf>
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	4903      	ldr	r1, [pc, #12]	; (80033cc <cmd_echo+0x1c>)
 80033c0:	f7ff bc4e 	b.w	8002c60 <chprintf>
 80033c4:	0800ab4c 	.word	0x0800ab4c
 80033c8:	0800ad0c 	.word	0x0800ad0c
 80033cc:	0800ab5c 	.word	0x0800ab5c

080033d0 <cmd_info>:
  if (argc > 0) {
 80033d0:	2900      	cmp	r1, #0
 80033d2:	dd03      	ble.n	80033dc <cmd_info+0xc>
    shellUsage(chp, "info");
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <cmd_info+0x6c>)
 80033d6:	491a      	ldr	r1, [pc, #104]	; (8003440 <cmd_info+0x70>)
 80033d8:	f7ff bc42 	b.w	8002c60 <chprintf>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80033dc:	b510      	push	{r4, lr}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 80033de:	4a19      	ldr	r2, [pc, #100]	; (8003444 <cmd_info+0x74>)
 80033e0:	4919      	ldr	r1, [pc, #100]	; (8003448 <cmd_info+0x78>)
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80033e2:	b082      	sub	sp, #8
 80033e4:	4604      	mov	r4, r0
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 80033e6:	f7ff fc3b 	bl	8002c60 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <cmd_info+0x7c>)
 80033ec:	4918      	ldr	r1, [pc, #96]	; (8003450 <cmd_info+0x80>)
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff fc36 	bl	8002c60 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 80033f4:	4a17      	ldr	r2, [pc, #92]	; (8003454 <cmd_info+0x84>)
 80033f6:	4918      	ldr	r1, [pc, #96]	; (8003458 <cmd_info+0x88>)
 80033f8:	4620      	mov	r0, r4
 80033fa:	f7ff fc31 	bl	8002c60 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 80033fe:	4a17      	ldr	r2, [pc, #92]	; (800345c <cmd_info+0x8c>)
 8003400:	4917      	ldr	r1, [pc, #92]	; (8003460 <cmd_info+0x90>)
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff fc2c 	bl	8002c60 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8003408:	4a16      	ldr	r2, [pc, #88]	; (8003464 <cmd_info+0x94>)
 800340a:	4917      	ldr	r1, [pc, #92]	; (8003468 <cmd_info+0x98>)
 800340c:	4620      	mov	r0, r4
 800340e:	f7ff fc27 	bl	8002c60 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <cmd_info+0x9c>)
 8003414:	4916      	ldr	r1, [pc, #88]	; (8003470 <cmd_info+0xa0>)
 8003416:	4620      	mov	r0, r4
 8003418:	f7ff fc22 	bl	8002c60 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <cmd_info+0xa4>)
 800341e:	4916      	ldr	r1, [pc, #88]	; (8003478 <cmd_info+0xa8>)
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff fc1d 	bl	8002c60 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <cmd_info+0xac>)
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	4620      	mov	r0, r4
 800342c:	4b14      	ldr	r3, [pc, #80]	; (8003480 <cmd_info+0xb0>)
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <cmd_info+0xb4>)
 8003430:	4915      	ldr	r1, [pc, #84]	; (8003488 <cmd_info+0xb8>)
 8003432:	f7ff fc15 	bl	8002c60 <chprintf>
}
 8003436:	b002      	add	sp, #8
 8003438:	bd10      	pop	{r4, pc}
 800343a:	bf00      	nop
 800343c:	0800ab64 	.word	0x0800ab64
 8003440:	0800ad0c 	.word	0x0800ad0c
 8003444:	0800b5e4 	.word	0x0800b5e4
 8003448:	0800ab6c 	.word	0x0800ab6c
 800344c:	0800b438 	.word	0x0800b438
 8003450:	0800ab80 	.word	0x0800ab80
 8003454:	0800b3c8 	.word	0x0800b3c8
 8003458:	0800ab94 	.word	0x0800ab94
 800345c:	0800b400 	.word	0x0800b400
 8003460:	0800aba8 	.word	0x0800aba8
 8003464:	0800b4ac 	.word	0x0800b4ac
 8003468:	0800abbc 	.word	0x0800abbc
 800346c:	0800abd0 	.word	0x0800abd0
 8003470:	0800abfc 	.word	0x0800abfc
 8003474:	0800ac10 	.word	0x0800ac10
 8003478:	0800ac3c 	.word	0x0800ac3c
 800347c:	0800ac78 	.word	0x0800ac78
 8003480:	0800ac50 	.word	0x0800ac50
 8003484:	0800ac54 	.word	0x0800ac54
 8003488:	0800ac60 	.word	0x0800ac60
 800348c:	00000000 	.word	0x00000000

08003490 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8003490:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8003492:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8003494:	42a1      	cmp	r1, r4
 8003496:	d012      	beq.n	80034be <dyn_find_object+0x2e>
 8003498:	460d      	mov	r5, r1
 800349a:	4606      	mov	r6, r0
 800349c:	e002      	b.n	80034a4 <dyn_find_object+0x14>
    p = p->next;
 800349e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80034a0:	42a5      	cmp	r5, r4
 80034a2:	d00c      	beq.n	80034be <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80034a4:	2208      	movs	r2, #8
 80034a6:	4631      	mov	r1, r6
 80034a8:	18a0      	adds	r0, r4, r2
 80034aa:	f007 f9eb 	bl	800a884 <strncmp>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d1f5      	bne.n	800349e <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 80034b2:	b12c      	cbz	r4, 80034c0 <dyn_find_object+0x30>
    /* Increasing references counter.*/
    dep->refs++;
 80034b4:	6863      	ldr	r3, [r4, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	6063      	str	r3, [r4, #4]
  }

  return dep;
}
 80034ba:	4620      	mov	r0, r4
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 80034be:	2400      	movs	r4, #0
}
 80034c0:	4620      	mov	r0, r4
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
	...

080034d0 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 80034d2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 80034d4:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 80034d6:	460d      	mov	r5, r1
 80034d8:	4606      	mov	r6, r0
 80034da:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 80034dc:	d103      	bne.n	80034e6 <dyn_create_object_pool+0x16>
 80034de:	e00d      	b.n	80034fc <dyn_create_object_pool+0x2c>
    p = p->next;
 80034e0:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80034e2:	42a5      	cmp	r5, r4
 80034e4:	d00a      	beq.n	80034fc <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80034e6:	2208      	movs	r2, #8
 80034e8:	4631      	mov	r1, r6
 80034ea:	18a0      	adds	r0, r4, r2
 80034ec:	f007 f9ca 	bl	800a884 <strncmp>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d1f5      	bne.n	80034e0 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 80034f4:	b114      	cbz	r4, 80034fc <dyn_create_object_pool+0x2c>
    return NULL;
 80034f6:	4604      	mov	r4, r0
}
 80034f8:	4620      	mov	r0, r4
 80034fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 80034fc:	4638      	mov	r0, r7
 80034fe:	f7fe fb1f 	bl	8001b40 <chPoolAlloc>
  if (dep == NULL) {
 8003502:	4604      	mov	r4, r0
 8003504:	b148      	cbz	r0, 800351a <dyn_create_object_pool+0x4a>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8003506:	2208      	movs	r2, #8
 8003508:	4410      	add	r0, r2
 800350a:	4631      	mov	r1, r6
 800350c:	f007 fa06 	bl	800a91c <strncpy>
  dep->next = dlp->next;
 8003510:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8003512:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8003514:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 8003518:	602c      	str	r4, [r5, #0]
}
 800351a:	4620      	mov	r0, r4
 800351c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800351e:	bf00      	nop

08003520 <chThdYield>:
void chThdYield(void) {
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	2320      	movs	r3, #32
 8003524:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8003528:	4a12      	ldr	r2, [pc, #72]	; (8003574 <chThdYield+0x54>)
 800352a:	6810      	ldr	r0, [r2, #0]
 800352c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800352e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8003530:	68a1      	ldr	r1, [r4, #8]
  if (chSchCanYieldS()) {
 8003532:	428b      	cmp	r3, r1
 8003534:	d203      	bcs.n	800353e <chThdYield+0x1e>
 8003536:	2300      	movs	r3, #0
 8003538:	f383 8811 	msr	BASEPRI, r3
}
 800353c:	bd38      	pop	{r3, r4, r5, pc}
  tqp->next             = tp->queue.next;
 800353e:	6803      	ldr	r3, [r0, #0]
 8003540:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003542:	605a      	str	r2, [r3, #4]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8003544:	2501      	movs	r5, #1
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003546:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8003548:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 800354a:	f880 5020 	strb.w	r5, [r0, #32]
  tp->state = CH_STATE_READY;
 800354e:	f884 2020 	strb.w	r2, [r4, #32]
 8003552:	e000      	b.n	8003556 <chThdYield+0x36>
 8003554:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4291      	cmp	r1, r2
 800355a:	d9fb      	bls.n	8003554 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 800355c:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800355e:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8003560:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8003564:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8003566:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8003568:	f7fc feaa 	bl	80002c0 <_port_switch>
 800356c:	2300      	movs	r3, #0
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000da0 	.word	0x20000da0
	...

08003580 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	4d09      	ldr	r5, [pc, #36]	; (80035a8 <bmk_thread8+0x28>)
 8003584:	4604      	mov	r4, r0
    chThdYield();
 8003586:	f7ff ffcb 	bl	8003520 <chThdYield>
    chThdYield();
 800358a:	f7ff ffc9 	bl	8003520 <chThdYield>
    chThdYield();
 800358e:	f7ff ffc7 	bl	8003520 <chThdYield>
    chThdYield();
 8003592:	f7ff ffc5 	bl	8003520 <chThdYield>
    (*(uint32_t *)p) += 4;
 8003596:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8003598:	69aa      	ldr	r2, [r5, #24]
 800359a:	3304      	adds	r3, #4
 800359c:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 800359e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80035a2:	075b      	lsls	r3, r3, #29
 80035a4:	d5ef      	bpl.n	8003586 <bmk_thread8+0x6>
}
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	20000da0 	.word	0x20000da0
 80035ac:	00000000 	.word	0x00000000

080035b0 <chSchWakeupS>:
  thread_t *otp = currp;
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80035b2:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 80035b4:	699e      	ldr	r6, [r3, #24]
  if (ntp->prio <= otp->prio) {
 80035b6:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80035b8:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 80035ba:	68b0      	ldr	r0, [r6, #8]
  ntp->u.rdymsg = msg;
 80035bc:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80035be:	4285      	cmp	r5, r0
  tp->state = CH_STATE_READY;
 80035c0:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 80035c4:	d80c      	bhi.n	80035e0 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 80035c6:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80035ca:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	4295      	cmp	r5, r2
 80035d0:	d9fb      	bls.n	80035ca <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80035d8:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80035da:	605c      	str	r4, [r3, #4]
}
 80035dc:	bc70      	pop	{r4, r5, r6}
 80035de:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80035e0:	f886 2020 	strb.w	r2, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80035e4:	461a      	mov	r2, r3
    cp = cp->queue.next;
 80035e6:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80035e8:	6891      	ldr	r1, [r2, #8]
 80035ea:	4288      	cmp	r0, r1
 80035ec:	d9fb      	bls.n	80035e6 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 80035ee:	6851      	ldr	r1, [r2, #4]
 80035f0:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 80035f2:	2001      	movs	r0, #1
  tp->queue.next             = cp;
 80035f4:	6032      	str	r2, [r6, #0]
  tp->queue.prev->queue.next = tp;
 80035f6:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 80035f8:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80035fa:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 80035fe:	4631      	mov	r1, r6
 8003600:	4620      	mov	r0, r4
    currp = ntp;
 8003602:	619c      	str	r4, [r3, #24]
}
 8003604:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8003606:	f7fc be5b 	b.w	80002c0 <_port_switch>
 800360a:	bf00      	nop
 800360c:	20000da0 	.word	0x20000da0

08003610 <chCondSignal.constprop.61>:
void chCondSignal(condition_variable_t *cp) {
 8003610:	b508      	push	{r3, lr}
 8003612:	2320      	movs	r3, #32
 8003614:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <chCondSignal.constprop.61+0x24>)
 800361a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 800361c:	4298      	cmp	r0, r3
 800361e:	d005      	beq.n	800362c <chCondSignal.constprop.61+0x1c>
  tqp->next             = tp->queue.next;
 8003620:	6802      	ldr	r2, [r0, #0]
 8003622:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003624:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8003626:	2100      	movs	r1, #0
 8003628:	f7ff ffc2 	bl	80035b0 <chSchWakeupS>
 800362c:	2300      	movs	r3, #0
 800362e:	f383 8811 	msr	BASEPRI, r3
}
 8003632:	bd08      	pop	{r3, pc}
 8003634:	20000c04 	.word	0x20000c04
	...

08003640 <chThdCreateFromMemoryPool.constprop.42>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8003640:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8003642:	4d14      	ldr	r5, [pc, #80]	; (8003694 <chThdCreateFromMemoryPool.constprop.42+0x54>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8003644:	b087      	sub	sp, #28
 8003646:	4607      	mov	r7, r0
  wsp = chPoolAlloc(mp);
 8003648:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800364a:	460e      	mov	r6, r1
 800364c:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
 800364e:	f7fe fa77 	bl	8001b40 <chPoolAlloc>
  if (wsp == NULL) {
 8003652:	b1e0      	cbz	r0, 800368e <chThdCreateFromMemoryPool.constprop.42+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8003654:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 8003656:	4a10      	ldr	r2, [pc, #64]	; (8003698 <chThdCreateFromMemoryPool.constprop.42+0x58>)
 8003658:	9700      	str	r7, [sp, #0]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800365a:	4403      	add	r3, r0
  thread_descriptor_t td = {
 800365c:	9302      	str	r3, [sp, #8]
 800365e:	9001      	str	r0, [sp, #4]
 8003660:	9603      	str	r6, [sp, #12]
 8003662:	9405      	str	r4, [sp, #20]
 8003664:	9204      	str	r2, [sp, #16]
 8003666:	2320      	movs	r3, #32
 8003668:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800366c:	4668      	mov	r0, sp
 800366e:	f7fe fbd7 	bl	8001e20 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 8003672:	2302      	movs	r3, #2
 8003674:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 8003678:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 800367a:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 800367c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800367e:	f7ff ff97 	bl	80035b0 <chSchWakeupS>
 8003682:	2300      	movs	r3, #0
 8003684:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8003688:	4620      	mov	r0, r4
 800368a:	b007      	add	sp, #28
 800368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800368e:	4604      	mov	r4, r0
 8003690:	e7fa      	b.n	8003688 <chThdCreateFromMemoryPool.constprop.42+0x48>
 8003692:	bf00      	nop
 8003694:	20001018 	.word	0x20001018
 8003698:	08001951 	.word	0x08001951
 800369c:	00000000 	.word	0x00000000

080036a0 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 80036a0:	b508      	push	{r3, lr}
 80036a2:	2320      	movs	r3, #32
 80036a4:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 80036a8:	6883      	ldr	r3, [r0, #8]
 80036aa:	3301      	adds	r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	6083      	str	r3, [r0, #8]
 80036b0:	dd03      	ble.n	80036ba <chSemSignal+0x1a>
 80036b2:	2300      	movs	r3, #0
 80036b4:	f383 8811 	msr	BASEPRI, r3
}
 80036b8:	bd08      	pop	{r3, pc}
 80036ba:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 80036bc:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 80036be:	6802      	ldr	r2, [r0, #0]
 80036c0:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 80036c2:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80036c4:	6053      	str	r3, [r2, #4]
 80036c6:	f7ff ff73 	bl	80035b0 <chSchWakeupS>
 80036ca:	2300      	movs	r3, #0
 80036cc:	f383 8811 	msr	BASEPRI, r3
}
 80036d0:	bd08      	pop	{r3, pc}
 80036d2:	bf00      	nop
	...

080036e0 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t pf, void *arg) {
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	9d06      	ldr	r5, [sp, #24]
 80036e4:	2420      	movs	r4, #32
 80036e6:	f384 8811 	msr	BASEPRI, r4
  tp = (thread_t *)((uint8_t *)wsp + size -
 80036ea:	3948      	subs	r1, #72	; 0x48
 80036ec:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 80036ee:	4e16      	ldr	r6, [pc, #88]	; (8003748 <chThdCreateStatic+0x68>)
 80036f0:	6126      	str	r6, [r4, #16]
  tp->wabase = (stkalign_t *)wsp;
 80036f2:	61e0      	str	r0, [r4, #28]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80036f4:	f1a4 0024 	sub.w	r0, r4, #36	; 0x24
  REG_INSERT(tp);
 80036f8:	6971      	ldr	r1, [r6, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80036fa:	f844 3c24 	str.w	r3, [r4, #-36]
 80036fe:	f844 5c20 	str.w	r5, [r4, #-32]
 8003702:	60e0      	str	r0, [r4, #12]
  tp->state     = CH_STATE_WTSTART;
 8003704:	2502      	movs	r5, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003706:	2301      	movs	r3, #1
  tp->name      = name;
 8003708:	4810      	ldr	r0, [pc, #64]	; (800374c <chThdCreateStatic+0x6c>)
  tp->prio      = prio;
 800370a:	60a2      	str	r2, [r4, #8]
  tp->realprio  = prio;
 800370c:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->state     = CH_STATE_WTSTART;
 800370e:	8425      	strh	r5, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003710:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  list_init(&tp->waiting);
 8003714:	f104 0228 	add.w	r2, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 8003718:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->mtxlist   = NULL;
 800371c:	2500      	movs	r5, #0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800371e:	4f0c      	ldr	r7, [pc, #48]	; (8003750 <chThdCreateStatic+0x70>)
 8003720:	f844 7c04 	str.w	r7, [r4, #-4]
  REG_INSERT(tp);
 8003724:	e9c4 1005 	strd	r1, r0, [r4, #20]
  tp->epending  = (eventmask_t)0;
 8003728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  chSchWakeupS(tp, MSG_OK);
 800372c:	4620      	mov	r0, r4
  REG_INSERT(tp);
 800372e:	610c      	str	r4, [r1, #16]
  tqp->next = (thread_t *)tqp;
 8003730:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8003734:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 8003736:	4629      	mov	r1, r5
  REG_INSERT(tp);
 8003738:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 800373a:	f7ff ff39 	bl	80035b0 <chSchWakeupS>
 800373e:	f385 8811 	msr	BASEPRI, r5
}
 8003742:	4620      	mov	r0, r4
 8003744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003746:	bf00      	nop
 8003748:	20000da0 	.word	0x20000da0
 800374c:	0800ab24 	.word	0x0800ab24
 8003750:	080002d1 	.word	0x080002d1
	...

08003760 <cmd_semaforo>:
static void cmd_semaforo(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003762:	b083      	sub	sp, #12
  char *testvar = argv[0];
 8003764:	6814      	ldr	r4, [r2, #0]
  flag2=true;
 8003766:	4e16      	ldr	r6, [pc, #88]	; (80037c0 <cmd_semaforo+0x60>)
    thread_t *tp = chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1,Thd2,NULL);
 8003768:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <cmd_semaforo+0x64>)
 800376a:	4817      	ldr	r0, [pc, #92]	; (80037c8 <cmd_semaforo+0x68>)
 800376c:	2200      	movs	r2, #0
 800376e:	9200      	str	r2, [sp, #0]
 8003770:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  flag2=true;
 8003774:	2501      	movs	r5, #1
    thread_t *tp = chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1,Thd2,NULL);
 8003776:	2281      	movs	r2, #129	; 0x81
  flag2=true;
 8003778:	7035      	strb	r5, [r6, #0]
    thread_t *tp = chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1,Thd2,NULL);
 800377a:	f7ff ffb1 	bl	80036e0 <chThdCreateStatic>
        if(!strcmp("ON",testvar) ){
 800377e:	4621      	mov	r1, r4
    thread_t *tp = chThdCreateStatic(waThd2, sizeof(waThd2), NORMALPRIO + 1,Thd2,NULL);
 8003780:	4607      	mov	r7, r0
        if(!strcmp("ON",testvar) ){
 8003782:	4812      	ldr	r0, [pc, #72]	; (80037cc <cmd_semaforo+0x6c>)
 8003784:	f7fd fc40 	bl	8001008 <strcmp>
 8003788:	b120      	cbz	r0, 8003794 <cmd_semaforo+0x34>
        else if (!strcmp("OFF",testvar)) {
 800378a:	4621      	mov	r1, r4
 800378c:	4810      	ldr	r0, [pc, #64]	; (80037d0 <cmd_semaforo+0x70>)
 800378e:	f7fd fc3b 	bl	8001008 <strcmp>
 8003792:	b108      	cbz	r0, 8003798 <cmd_semaforo+0x38>
  }
 8003794:	b003      	add	sp, #12
 8003796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003798:	2320      	movs	r3, #32
 800379a:	f383 8811 	msr	BASEPRI, r3
  tp->flags |= CH_FLAG_TERMINATE;
 800379e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80037aa:	f380 8811 	msr	BASEPRI, r0
          palSetLine(LINE_LED_RGB_GREEN);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <cmd_semaforo+0x74>)
          flag2=false;
 80037b0:	7030      	strb	r0, [r6, #0]
          palSetLine(LINE_LED_RGB_GREEN);
 80037b2:	2102      	movs	r1, #2
          palSetLine(LINE_LED_RGB_BLUE);
 80037b4:	2204      	movs	r2, #4
          palSetLine(LINE_LED_RGB_GREEN);
 80037b6:	8319      	strh	r1, [r3, #24]
          palSetLine(LINE_LED_RGB_RED);
 80037b8:	831d      	strh	r5, [r3, #24]
          palSetLine(LINE_LED_RGB_BLUE);
 80037ba:	831a      	strh	r2, [r3, #24]
  }
 80037bc:	b003      	add	sp, #12
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c0:	20000fe0 	.word	0x20000fe0
 80037c4:	08004c61 	.word	0x08004c61
 80037c8:	200019b0 	.word	0x200019b0
 80037cc:	0800ad2c 	.word	0x0800ad2c
 80037d0:	0800ad00 	.word	0x0800ad00
 80037d4:	40020800 	.word	0x40020800
	...

080037e0 <chSchGoSleepS>:
  thread_t *otp = currp;
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <chSchGoSleepS+0x24>)
 80037e2:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 80037e4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 80037e6:	b410      	push	{r4}
  otp->state = newstate;
 80037e8:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 80037ec:	6810      	ldr	r0, [r2, #0]
 80037ee:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 80037f0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80037f2:	6043      	str	r3, [r0, #4]
 80037f4:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 80037f8:	4610      	mov	r0, r2
}
 80037fa:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 80037fc:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 80037fe:	f7fc bd5f 	b.w	80002c0 <_port_switch>
 8003802:	bf00      	nop
 8003804:	20000da0 	.word	0x20000da0
	...

08003810 <chEvtWaitOne.constprop.49>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8003810:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <chEvtWaitOne.constprop.49+0x30>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8003812:	b510      	push	{r4, lr}
 8003814:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8003816:	6994      	ldr	r4, [r2, #24]
 8003818:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800381c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800381e:	b933      	cbnz	r3, 800382e <chEvtWaitOne.constprop.49+0x1e>
    ctp->u.ewmask = events;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003826:	200a      	movs	r0, #10
 8003828:	f7ff ffda 	bl	80037e0 <chSchGoSleepS>
    m = ctp->epending & events;
 800382c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 800382e:	4258      	negs	r0, r3
 8003830:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8003832:	ea23 0300 	bic.w	r3, r3, r0
 8003836:	6363      	str	r3, [r4, #52]	; 0x34
 8003838:	2300      	movs	r3, #0
 800383a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800383e:	bd10      	pop	{r4, pc}
 8003840:	20000da0 	.word	0x20000da0
	...

08003850 <chEvtWaitAny.constprop.48>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8003850:	4a09      	ldr	r2, [pc, #36]	; (8003878 <chEvtWaitAny.constprop.48+0x28>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8003852:	b510      	push	{r4, lr}
 8003854:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8003856:	6994      	ldr	r4, [r2, #24]
 8003858:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800385c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800385e:	b930      	cbnz	r0, 800386e <chEvtWaitAny.constprop.48+0x1e>
    ctp->u.ewmask = events;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003864:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8003866:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003868:	f7ff ffba 	bl	80037e0 <chSchGoSleepS>
    m = ctp->epending & events;
 800386c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~m;
 800386e:	2300      	movs	r3, #0
 8003870:	6363      	str	r3, [r4, #52]	; 0x34
 8003872:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8003876:	bd10      	pop	{r4, pc}
 8003878:	20000da0 	.word	0x20000da0
 800387c:	00000000 	.word	0x00000000

08003880 <chEvtWaitAll.constprop.47>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8003880:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <chEvtWaitAll.constprop.47+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8003882:	b510      	push	{r4, lr}
 8003884:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8003886:	6994      	ldr	r4, [r2, #24]
 8003888:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 800388c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800388e:	f003 0205 	and.w	r2, r3, #5
 8003892:	2a05      	cmp	r2, #5
 8003894:	d005      	beq.n	80038a2 <chEvtWaitAll.constprop.47+0x22>
    ctp->u.ewmask = events;
 8003896:	2305      	movs	r3, #5
 8003898:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800389a:	200b      	movs	r0, #11
 800389c:	f7ff ffa0 	bl	80037e0 <chSchGoSleepS>
 80038a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 80038a2:	f023 0305 	bic.w	r3, r3, #5
 80038a6:	6363      	str	r3, [r4, #52]	; 0x34
 80038a8:	2300      	movs	r3, #0
 80038aa:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 80038ae:	2005      	movs	r0, #5
 80038b0:	bd10      	pop	{r4, pc}
 80038b2:	bf00      	nop
 80038b4:	20000da0 	.word	0x20000da0
	...

080038c0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80038c0:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 80038c2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80038c4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80038c6:	d012      	beq.n	80038ee <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80038c8:	4c0c      	ldr	r4, [pc, #48]	; (80038fc <chSchGoSleepTimeoutS+0x3c>)
 80038ca:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <chSchGoSleepTimeoutS+0x40>)
 80038cc:	69a3      	ldr	r3, [r4, #24]
 80038ce:	4605      	mov	r5, r0
 80038d0:	a801      	add	r0, sp, #4
 80038d2:	f7fe fca5 	bl	8002220 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80038d6:	4628      	mov	r0, r5
 80038d8:	f7ff ff82 	bl	80037e0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80038dc:	9b04      	ldr	r3, [sp, #16]
 80038de:	b113      	cbz	r3, 80038e6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80038e0:	a801      	add	r0, sp, #4
 80038e2:	f7fe fc5d 	bl	80021a0 <chVTDoResetI>
  return currp->u.rdymsg;
 80038e6:	69a3      	ldr	r3, [r4, #24]
}
 80038e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038ea:	b007      	add	sp, #28
 80038ec:	bd30      	pop	{r4, r5, pc}
 80038ee:	4c03      	ldr	r4, [pc, #12]	; (80038fc <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
 80038f0:	f7ff ff76 	bl	80037e0 <chSchGoSleepS>
  return currp->u.rdymsg;
 80038f4:	69a3      	ldr	r3, [r4, #24]
}
 80038f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038f8:	b007      	add	sp, #28
 80038fa:	bd30      	pop	{r4, r5, pc}
 80038fc:	20000da0 	.word	0x20000da0
 8003900:	08001ea1 	.word	0x08001ea1
	...

08003910 <chSemWaitTimeout.constprop.68>:
 8003910:	2320      	movs	r3, #32
 8003912:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <chSemWaitTimeout.constprop.68+0x48>)
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	1e4a      	subs	r2, r1, #1
 800391c:	2a00      	cmp	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	db04      	blt.n	800392c <chSemWaitTimeout.constprop.68+0x1c>
  return MSG_OK;
 8003922:	2000      	movs	r0, #0
 8003924:	2300      	movs	r3, #0
 8003926:	f383 8811 	msr	BASEPRI, r3
}
 800392a:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 800392c:	b180      	cbz	r0, 8003950 <chSemWaitTimeout.constprop.68+0x40>
    currp->u.wtsemp = sp;
 800392e:	4a0b      	ldr	r2, [pc, #44]	; (800395c <chSemWaitTimeout.constprop.68+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8003930:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8003932:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8003934:	685c      	ldr	r4, [r3, #4]
 8003936:	6253      	str	r3, [r2, #36]	; 0x24
 8003938:	e9c2 3400 	strd	r3, r4, [r2]
 800393c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 800393e:	6022      	str	r2, [r4, #0]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8003940:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	f7ff ffbc 	bl	80038c0 <chSchGoSleepTimeoutS>
 8003948:	2300      	movs	r3, #0
 800394a:	f383 8811 	msr	BASEPRI, r3
}
 800394e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8003950:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8003952:	f04f 30ff 	mov.w	r0, #4294967295
 8003956:	e7e5      	b.n	8003924 <chSemWaitTimeout.constprop.68+0x14>
 8003958:	2000105c 	.word	0x2000105c
 800395c:	20000da0 	.word	0x20000da0

08003960 <chGuardedPoolAllocTimeout.constprop.26>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8003960:	b510      	push	{r4, lr}
 8003962:	2320      	movs	r3, #32
 8003964:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003968:	4c15      	ldr	r4, [pc, #84]	; (80039c0 <chGuardedPoolAllocTimeout.constprop.26+0x60>)
 800396a:	68a2      	ldr	r2, [r4, #8]
 800396c:	1e53      	subs	r3, r2, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	60a3      	str	r3, [r4, #8]
 8003972:	db07      	blt.n	8003984 <chGuardedPoolAllocTimeout.constprop.26+0x24>
  objp = mp->next;
 8003974:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8003976:	b1b0      	cbz	r0, 80039a6 <chGuardedPoolAllocTimeout.constprop.26+0x46>
    mp->next = mp->next->next;
 8003978:	6803      	ldr	r3, [r0, #0]
 800397a:	60e3      	str	r3, [r4, #12]
 800397c:	2300      	movs	r3, #0
 800397e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8003982:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 8003984:	b1c8      	cbz	r0, 80039ba <chGuardedPoolAllocTimeout.constprop.26+0x5a>
    currp->u.wtsemp = sp;
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <chGuardedPoolAllocTimeout.constprop.26+0x64>)
  tp->queue.prev             = tqp->prev;
 8003988:	6862      	ldr	r2, [r4, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800398c:	4601      	mov	r1, r0
 800398e:	e9c3 4200 	strd	r4, r2, [r3]
    currp->u.wtsemp = sp;
 8003992:	625c      	str	r4, [r3, #36]	; 0x24
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8003994:	2005      	movs	r0, #5
  tp->queue.prev->queue.next = tp;
 8003996:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	f7ff ff91 	bl	80038c0 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800399e:	2800      	cmp	r0, #0
 80039a0:	d0e8      	beq.n	8003974 <chGuardedPoolAllocTimeout.constprop.26+0x14>
    return NULL;
 80039a2:	2000      	movs	r0, #0
 80039a4:	e7ea      	b.n	800397c <chGuardedPoolAllocTimeout.constprop.26+0x1c>
  else if (mp->provider != NULL) {
 80039a6:	69a3      	ldr	r3, [r4, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0fa      	beq.n	80039a2 <chGuardedPoolAllocTimeout.constprop.26+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 80039ac:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80039b0:	4798      	blx	r3
 80039b2:	2300      	movs	r3, #0
 80039b4:	f383 8811 	msr	BASEPRI, r3
}
 80039b8:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80039ba:	60a2      	str	r2, [r4, #8]
 80039bc:	e7de      	b.n	800397c <chGuardedPoolAllocTimeout.constprop.26+0x1c>
 80039be:	bf00      	nop
 80039c0:	20000c14 	.word	0x20000c14
 80039c4:	20000da0 	.word	0x20000da0
	...

080039d0 <oslib_test_003_003_execute>:

static void oslib_test_003_003_execute(void) {
 80039d0:	b508      	push	{r3, lr}

  /* [3.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <oslib_test_003_003_execute+0x20>)
 80039d4:	2201      	movs	r2, #1
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80039d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(1);
 80039da:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80039dc:	f7ff ffc0 	bl	8003960 <chGuardedPoolAllocTimeout.constprop.26>
 80039e0:	fab0 f080 	clz	r0, r0
 80039e4:	0940      	lsrs	r0, r0, #5
 80039e6:	4903      	ldr	r1, [pc, #12]	; (80039f4 <oslib_test_003_003_execute+0x24>)
  }
}
 80039e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80039ec:	f7fd bed8 	b.w	80017a0 <_test_assert>
 80039f0:	2000178c 	.word	0x2000178c
 80039f4:	0800b058 	.word	0x0800b058
	...

08003a00 <rt_test_008_006_execute>:
static void rt_test_008_006_execute(void) {
 8003a00:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003a02:	4d57      	ldr	r5, [pc, #348]	; (8003b60 <rt_test_008_006_execute+0x160>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003a04:	4c57      	ldr	r4, [pc, #348]	; (8003b64 <rt_test_008_006_execute+0x164>)
 8003a06:	2001      	movs	r0, #1
 8003a08:	6028      	str	r0, [r5, #0]
 8003a0a:	69a2      	ldr	r2, [r4, #24]
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003a12:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003a14:	b933      	cbnz	r3, 8003a24 <rt_test_008_006_execute+0x24>
 8003a16:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8003a1a:	4953      	ldr	r1, [pc, #332]	; (8003b68 <rt_test_008_006_execute+0x168>)
 8003a1c:	f7fd fec0 	bl	80017a0 <_test_assert>
 8003a20:	b180      	cbz	r0, 8003a44 <rt_test_008_006_execute+0x44>
}
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8003a24:	4258      	negs	r0, r3
 8003a26:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8003a28:	ea23 0300 	bic.w	r3, r3, r0
 8003a2c:	6353      	str	r3, [r2, #52]	; 0x34
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	fab0 f080 	clz	r0, r0
 8003a38:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8003a3a:	494b      	ldr	r1, [pc, #300]	; (8003b68 <rt_test_008_006_execute+0x168>)
 8003a3c:	f7fd feb0 	bl	80017a0 <_test_assert>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d1ee      	bne.n	8003a22 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003a44:	69a3      	ldr	r3, [r4, #24]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	2a00      	cmp	r2, #0
 8003a50:	d072      	beq.n	8003b38 <rt_test_008_006_execute+0x138>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8003a52:	6358      	str	r0, [r3, #52]	; 0x34
 8003a54:	f380 8811 	msr	BASEPRI, r0
    test_assert(m == 0, "spurious event");
 8003a58:	4943      	ldr	r1, [pc, #268]	; (8003b68 <rt_test_008_006_execute+0x168>)
 8003a5a:	f7fd fea1 	bl	80017a0 <_test_assert>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d1df      	bne.n	8003a22 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003a62:	69a3      	ldr	r3, [r4, #24]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 8003a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6c:	3201      	adds	r2, #1
 8003a6e:	d067      	beq.n	8003b40 <rt_test_008_006_execute+0x140>
 8003a70:	f380 8811 	msr	BASEPRI, r0
 8003a74:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8003a76:	493c      	ldr	r1, [pc, #240]	; (8003b68 <rt_test_008_006_execute+0x168>)
 8003a78:	f7fd fe92 	bl	80017a0 <_test_assert>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d1d0      	bne.n	8003a22 <rt_test_008_006_execute+0x22>
  test_set_step(2);
 8003a80:	2302      	movs	r3, #2
 8003a82:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 8003a84:	69a6      	ldr	r6, [r4, #24]
 8003a86:	2320      	movs	r3, #32
 8003a88:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 8003a8c:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003a8e:	b955      	cbnz	r5, 8003aa6 <rt_test_008_006_execute+0xa6>
    ctp->u.ewmask = events;
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
 8003a94:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003a96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a9a:	200a      	movs	r0, #10
 8003a9c:	f7ff ff10 	bl	80038c0 <chSchGoSleepTimeoutS>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	db51      	blt.n	8003b48 <rt_test_008_006_execute+0x148>
    m = ctp->epending & events;
 8003aa4:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8003aa6:	4268      	negs	r0, r5
 8003aa8:	4028      	ands	r0, r5
  ctp->epending &= ~m;
 8003aaa:	ea25 0500 	bic.w	r5, r5, r0
 8003aae:	6375      	str	r5, [r6, #52]	; 0x34
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	fab0 f080 	clz	r0, r0
 8003aba:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8003abc:	492a      	ldr	r1, [pc, #168]	; (8003b68 <rt_test_008_006_execute+0x168>)
 8003abe:	f7fd fe6f 	bl	80017a0 <_test_assert>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d1ad      	bne.n	8003a22 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 8003ac6:	69a6      	ldr	r6, [r4, #24]
 8003ac8:	2320      	movs	r3, #32
 8003aca:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 8003ace:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003ad0:	b955      	cbnz	r5, 8003ae8 <rt_test_008_006_execute+0xe8>
    ctp->u.ewmask = events;
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad6:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003ad8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003adc:	200a      	movs	r0, #10
 8003ade:	f7ff feef 	bl	80038c0 <chSchGoSleepTimeoutS>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	db34      	blt.n	8003b50 <rt_test_008_006_execute+0x150>
    m = ctp->epending & events;
 8003ae6:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6373      	str	r3, [r6, #52]	; 0x34
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	fab5 f085 	clz	r0, r5
 8003af4:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8003af6:	491c      	ldr	r1, [pc, #112]	; (8003b68 <rt_test_008_006_execute+0x168>)
 8003af8:	f7fd fe52 	bl	80017a0 <_test_assert>
 8003afc:	4605      	mov	r5, r0
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d18f      	bne.n	8003a22 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 8003b02:	69a4      	ldr	r4, [r4, #24]
 8003b04:	2320      	movs	r3, #32
 8003b06:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 8003b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	d009      	beq.n	8003b24 <rt_test_008_006_execute+0x124>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003b16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003b1a:	200b      	movs	r0, #11
 8003b1c:	f7ff fed0 	bl	80038c0 <chSchGoSleepTimeoutS>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	db19      	blt.n	8003b58 <rt_test_008_006_execute+0x158>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 8003b24:	2300      	movs	r3, #0
 8003b26:	6363      	str	r3, [r4, #52]	; 0x34
 8003b28:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	490e      	ldr	r1, [pc, #56]	; (8003b68 <rt_test_008_006_execute+0x168>)
}
 8003b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 8003b34:	f7fd be34 	b.w	80017a0 <_test_assert>
 8003b38:	f382 8811 	msr	BASEPRI, r2
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	e78b      	b.n	8003a58 <rt_test_008_006_execute+0x58>
 8003b40:	6358      	str	r0, [r3, #52]	; 0x34
 8003b42:	f380 8811 	msr	BASEPRI, r0
 8003b46:	e796      	b.n	8003a76 <rt_test_008_006_execute+0x76>
 8003b48:	f385 8811 	msr	BASEPRI, r5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	e7b5      	b.n	8003abc <rt_test_008_006_execute+0xbc>
 8003b50:	f385 8811 	msr	BASEPRI, r5
 8003b54:	2001      	movs	r0, #1
 8003b56:	e7ce      	b.n	8003af6 <rt_test_008_006_execute+0xf6>
 8003b58:	f385 8811 	msr	BASEPRI, r5
 8003b5c:	2501      	movs	r5, #1
 8003b5e:	e7e5      	b.n	8003b2c <rt_test_008_006_execute+0x12c>
 8003b60:	2000178c 	.word	0x2000178c
 8003b64:	20000da0 	.word	0x20000da0
 8003b68:	0800c260 	.word	0x0800c260
 8003b6c:	00000000 	.word	0x00000000

08003b70 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8003b70:	b161      	cbz	r1, 8003b8c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8003b74:	b410      	push	{r4}
 8003b76:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8003b78:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 8003b7a:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003b7c:	2004      	movs	r0, #4
 8003b7e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8003b82:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8003b84:	6053      	str	r3, [r2, #4]
}
 8003b86:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003b88:	f7ff be9a 	b.w	80038c0 <chSchGoSleepTimeoutS>
}
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000da0 	.word	0x20000da0
	...

08003ba0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8003baa:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8003bae:	f04f 0a20 	mov.w	sl, #32
 8003bb2:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8003bb6:	b33a      	cbz	r2, 8003c08 <oqWriteTimeout+0x68>
 8003bb8:	4604      	mov	r4, r0
 8003bba:	460f      	mov	r7, r1
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 8003bc2:	68a2      	ldr	r2, [r4, #8]
 8003bc4:	4296      	cmp	r6, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003bc6:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8003bca:	bf8c      	ite	hi
 8003bcc:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8003bce:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003bd0:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8003bd4:	45a8      	cmp	r8, r5
 8003bd6:	d840      	bhi.n	8003c5a <oqWriteTimeout+0xba>
  else if (n > s1) {
 8003bd8:	d32b      	bcc.n	8003c32 <oqWriteTimeout+0x92>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003bda:	462a      	mov	r2, r5
 8003bdc:	4639      	mov	r1, r7
 8003bde:	f7fd f973 	bl	8000ec8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8003be2:	68e2      	ldr	r2, [r4, #12]
 8003be4:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8003be6:	68a2      	ldr	r2, [r4, #8]
 8003be8:	1b52      	subs	r2, r2, r5
 8003bea:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8003bec:	b19d      	cbz	r5, 8003c16 <oqWriteTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8003bee:	f1b9 0f00 	cmp.w	r9, #0
 8003bf2:	d001      	beq.n	8003bf8 <oqWriteTimeout+0x58>
        nfy(oqp);
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	47c8      	blx	r9
 8003bf8:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8003bfc:	1b76      	subs	r6, r6, r5
      bp += done;
 8003bfe:	442f      	add	r7, r5
 8003c00:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8003c04:	2e00      	cmp	r6, #0
 8003c06:	d1dc      	bne.n	8003bc2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8003c08:	9803      	ldr	r0, [sp, #12]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8003c10:	b005      	add	sp, #20
 8003c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8003c16:	9902      	ldr	r1, [sp, #8]
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff ffa9 	bl	8003b70 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d0cf      	beq.n	8003bc2 <oqWriteTimeout+0x22>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	1b98      	subs	r0, r3, r6
 8003c26:	2300      	movs	r3, #0
 8003c28:	f383 8811 	msr	BASEPRI, r3
}
 8003c2c:	b005      	add	sp, #20
 8003c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8003c32:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003c36:	4642      	mov	r2, r8
 8003c38:	4639      	mov	r1, r7
    s2 = n - s1;
 8003c3a:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003c3c:	f7fd f944 	bl	8000ec8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8003c40:	eb07 0108 	add.w	r1, r7, r8
 8003c44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003c48:	68e0      	ldr	r0, [r4, #12]
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	f7fd f93c 	bl	8000ec8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8003c50:	68e2      	ldr	r2, [r4, #12]
 8003c52:	4643      	mov	r3, r8
 8003c54:	18d3      	adds	r3, r2, r3
 8003c56:	6163      	str	r3, [r4, #20]
 8003c58:	e7c5      	b.n	8003be6 <oqWriteTimeout+0x46>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003c5a:	462a      	mov	r2, r5
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	f7fd f933 	bl	8000ec8 <memcpy>
    oqp->q_wrptr += n;
 8003c62:	6962      	ldr	r2, [r4, #20]
 8003c64:	442a      	add	r2, r5
 8003c66:	6162      	str	r2, [r4, #20]
 8003c68:	e7bd      	b.n	8003be6 <oqWriteTimeout+0x46>
 8003c6a:	bf00      	nop
 8003c6c:	0000      	movs	r0, r0
	...

08003c70 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003c70:	3030      	adds	r0, #48	; 0x30
 8003c72:	f7ff bf95 	b.w	8003ba0 <oqWriteTimeout>
 8003c76:	bf00      	nop
	...

08003c80 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003c80:	3030      	adds	r0, #48	; 0x30
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	f7ff bf8b 	b.w	8003ba0 <oqWriteTimeout>
 8003c8a:	bf00      	nop
 8003c8c:	0000      	movs	r0, r0
	...

08003c90 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	4604      	mov	r4, r0
 8003c94:	460f      	mov	r7, r1
 8003c96:	4616      	mov	r6, r2
 8003c98:	2320      	movs	r3, #32
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	e003      	b.n	8003ca8 <oqPutTimeout+0x18>
 8003ca0:	f7ff ff66 	bl	8003b70 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	db18      	blt.n	8003cda <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8003ca8:	68a5      	ldr	r5, [r4, #8]
 8003caa:	4631      	mov	r1, r6
 8003cac:	4620      	mov	r0, r4
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	d0f6      	beq.n	8003ca0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8003cb2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8003cb4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003cb6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8003cb8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8003cba:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8003cbc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003cbe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003cc0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003cc4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8003cc6:	bf24      	itt	cs
 8003cc8:	68e3      	ldrcs	r3, [r4, #12]
 8003cca:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8003ccc:	69e3      	ldr	r3, [r4, #28]
 8003cce:	b103      	cbz	r3, 8003cd2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8003cd0:	4798      	blx	r3
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	f380 8811 	msr	BASEPRI, r0
}
 8003cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cda:	f385 8811 	msr	BASEPRI, r5
 8003cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ce0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003ce0:	3030      	adds	r0, #48	; 0x30
 8003ce2:	f7ff bfd5 	b.w	8003c90 <oqPutTimeout>
 8003ce6:	bf00      	nop
	...

08003cf0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003cf0:	3030      	adds	r0, #48	; 0x30
 8003cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf6:	f7ff bfcb 	b.w	8003c90 <oqPutTimeout>
 8003cfa:	bf00      	nop
 8003cfc:	0000      	movs	r0, r0
	...

08003d00 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8003d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d04:	b085      	sub	sp, #20
 8003d06:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8003d0a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8003d0e:	f04f 0a20 	mov.w	sl, #32
 8003d12:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8003d16:	b33a      	cbz	r2, 8003d68 <iqReadTimeout+0x68>
 8003d18:	4604      	mov	r4, r0
 8003d1a:	460f      	mov	r7, r1
 8003d1c:	4616      	mov	r6, r2
 8003d1e:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 8003d22:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003d24:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8003d26:	4296      	cmp	r6, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003d28:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8003d2a:	bf8c      	ite	hi
 8003d2c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8003d2e:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003d30:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8003d34:	45a8      	cmp	r8, r5
 8003d36:	d840      	bhi.n	8003dba <iqReadTimeout+0xba>
  else if (n > s1) {
 8003d38:	d32b      	bcc.n	8003d92 <iqReadTimeout+0x92>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003d3a:	462a      	mov	r2, r5
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	f7fd f8c3 	bl	8000ec8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003d42:	68e2      	ldr	r2, [r4, #12]
 8003d44:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8003d46:	68a2      	ldr	r2, [r4, #8]
 8003d48:	1b52      	subs	r2, r2, r5
 8003d4a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003d4c:	b19d      	cbz	r5, 8003d76 <iqReadTimeout+0x76>
      if (nfy != NULL) {
 8003d4e:	f1b9 0f00 	cmp.w	r9, #0
 8003d52:	d001      	beq.n	8003d58 <iqReadTimeout+0x58>
        nfy(iqp);
 8003d54:	4620      	mov	r0, r4
 8003d56:	47c8      	blx	r9
 8003d58:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 8003d5c:	1b76      	subs	r6, r6, r5
      bp += done;
 8003d5e:	442f      	add	r7, r5
 8003d60:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	d1dc      	bne.n	8003d22 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 8003d68:	9803      	ldr	r0, [sp, #12]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f383 8811 	msr	BASEPRI, r3
}
 8003d70:	b005      	add	sp, #20
 8003d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d76:	9902      	ldr	r1, [sp, #8]
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f7ff fef9 	bl	8003b70 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d0cf      	beq.n	8003d22 <iqReadTimeout+0x22>
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	1b98      	subs	r0, r3, r6
 8003d86:	2300      	movs	r3, #0
 8003d88:	f383 8811 	msr	BASEPRI, r3
}
 8003d8c:	b005      	add	sp, #20
 8003d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8003d92:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003d96:	4642      	mov	r2, r8
 8003d98:	4638      	mov	r0, r7
    s2 = n - s1;
 8003d9a:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003d9c:	f7fd f894 	bl	8000ec8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003da0:	eb07 0008 	add.w	r0, r7, r8
 8003da4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003da8:	68e1      	ldr	r1, [r4, #12]
 8003daa:	4642      	mov	r2, r8
 8003dac:	f7fd f88c 	bl	8000ec8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003db0:	68e2      	ldr	r2, [r4, #12]
 8003db2:	4643      	mov	r3, r8
 8003db4:	18d3      	adds	r3, r2, r3
 8003db6:	61a3      	str	r3, [r4, #24]
 8003db8:	e7c5      	b.n	8003d46 <iqReadTimeout+0x46>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003dba:	462a      	mov	r2, r5
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	f7fd f883 	bl	8000ec8 <memcpy>
    iqp->q_rdptr += n;
 8003dc2:	69a2      	ldr	r2, [r4, #24]
 8003dc4:	442a      	add	r2, r5
 8003dc6:	61a2      	str	r2, [r4, #24]
 8003dc8:	e7bd      	b.n	8003d46 <iqReadTimeout+0x46>
 8003dca:	bf00      	nop
 8003dcc:	0000      	movs	r0, r0
	...

08003dd0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003dd0:	300c      	adds	r0, #12
 8003dd2:	f7ff bf95 	b.w	8003d00 <iqReadTimeout>
 8003dd6:	bf00      	nop
	...

08003de0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003de0:	300c      	adds	r0, #12
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	f7ff bf8b 	b.w	8003d00 <iqReadTimeout>
 8003dea:	bf00      	nop
 8003dec:	0000      	movs	r0, r0
	...

08003df0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	2320      	movs	r3, #32
 8003df4:	4604      	mov	r4, r0
 8003df6:	460e      	mov	r6, r1
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	e003      	b.n	8003e06 <iqGetTimeout+0x16>
 8003dfe:	f7ff feb7 	bl	8003b70 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003e02:	2800      	cmp	r0, #0
 8003e04:	db1a      	blt.n	8003e3c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8003e06:	68a5      	ldr	r5, [r4, #8]
 8003e08:	4631      	mov	r1, r6
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	d0f6      	beq.n	8003dfe <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8003e10:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8003e12:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8003e14:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8003e16:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8003e18:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8003e1a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8003e1c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003e1e:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8003e20:	bf28      	it	cs
 8003e22:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8003e24:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8003e26:	bf28      	it	cs
 8003e28:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8003e2a:	69e3      	ldr	r3, [r4, #28]
 8003e2c:	b10b      	cbz	r3, 8003e32 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8003e2e:	4620      	mov	r0, r4
 8003e30:	4798      	blx	r3
 8003e32:	2300      	movs	r3, #0
 8003e34:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8003e38:	4628      	mov	r0, r5
}
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f385 8811 	msr	BASEPRI, r5
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
 8003e42:	bf00      	nop
	...

08003e50 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003e50:	300c      	adds	r0, #12
 8003e52:	f7ff bfcd 	b.w	8003df0 <iqGetTimeout>
 8003e56:	bf00      	nop
	...

08003e60 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003e60:	300c      	adds	r0, #12
 8003e62:	f04f 31ff 	mov.w	r1, #4294967295
 8003e66:	f7ff bfc3 	b.w	8003df0 <iqGetTimeout>
 8003e6a:	bf00      	nop
 8003e6c:	0000      	movs	r0, r0
	...

08003e70 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8003e70:	b508      	push	{r3, lr}
 8003e72:	4601      	mov	r1, r0
 8003e74:	2320      	movs	r3, #32
 8003e76:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003e7a:	2008      	movs	r0, #8
 8003e7c:	f7ff fd20 	bl	80038c0 <chSchGoSleepTimeoutS>
 8003e80:	2300      	movs	r3, #0
 8003e82:	f383 8811 	msr	BASEPRI, r3
}
 8003e86:	bd08      	pop	{r3, pc}
	...

08003e90 <Thd1>:
  (BaseSequentialStream *)&SD2,
  commands
};

static THD_WORKING_AREA(waThd1, 256);
static THD_FUNCTION(Thd1, arg){
 8003e90:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <Thd1+0x20>)
 8003e94:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <Thd1+0x24>)
 8003e96:	699b      	ldr	r3, [r3, #24]
  (void) arg;
  chRegSetThreadName(" dummy Thread 1");
  while(TRUE){
    palToggleLine(LINE_LED_GREEN);
 8003e98:	4c07      	ldr	r4, [pc, #28]	; (8003eb8 <Thd1+0x28>)
 8003e9a:	619a      	str	r2, [r3, #24]
 8003e9c:	6963      	ldr	r3, [r4, #20]
 8003e9e:	f083 0320 	eor.w	r3, r3, #32
 8003ea2:	6163      	str	r3, [r4, #20]
    chThdSleepMilliseconds(500);
 8003ea4:	f241 3088 	movw	r0, #5000	; 0x1388
 8003ea8:	f7ff ffe2 	bl	8003e70 <chThdSleep>
 8003eac:	e7f6      	b.n	8003e9c <Thd1+0xc>
 8003eae:	bf00      	nop
 8003eb0:	20000da0 	.word	0x20000da0
 8003eb4:	0800a9f8 	.word	0x0800a9f8
 8003eb8:	40020000 	.word	0x40020000
 8003ebc:	00000000 	.word	0x00000000

08003ec0 <rt_test_003_001_execute>:
 * - [3.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void rt_test_003_001_execute(void) {
 8003ec0:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [3.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8003ec2:	4e2b      	ldr	r6, [pc, #172]	; (8003f70 <rt_test_003_001_execute+0xb0>)
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8003eca:	6033      	str	r3, [r6, #0]
 8003ecc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 8003ece:	2064      	movs	r0, #100	; 0x64
 8003ed0:	f7ff ffce 	bl	8003e70 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 8003ed4:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8003ed8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8003edc:	f7fd fa38 	bl	8001350 <_test_assert_time_window.constprop.1>
 8003ee0:	b100      	cbz	r0, 8003ee4 <rt_test_003_001_execute+0x24>
    chThdSleepUntil(chTimeAddX(time, 100));
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
}
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	6033      	str	r3, [r6, #0]
 8003ee8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 8003eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eee:	f7ff ffbf 	bl	8003e70 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8003ef2:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8003ef6:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8003efa:	f7fd fa29 	bl	8001350 <_test_assert_time_window.constprop.1>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d1ef      	bne.n	8003ee2 <rt_test_003_001_execute+0x22>
  test_set_step(3);
 8003f02:	2303      	movs	r3, #3
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8003f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f0c:	f7ff ffb0 	bl	8003e70 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8003f10:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8003f14:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8003f18:	f7fd fa1a 	bl	8001350 <_test_assert_time_window.constprop.1>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d1e0      	bne.n	8003ee2 <rt_test_003_001_execute+0x22>
  test_set_step(4);
 8003f20:	2304      	movs	r3, #4
 8003f22:	6033      	str	r3, [r6, #0]
 8003f24:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8003f26:	f242 7010 	movw	r0, #10000	; 0x2710
 8003f2a:	f7ff ffa1 	bl	8003e70 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 8003f2e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8003f32:	4608      	mov	r0, r1
 8003f34:	3010      	adds	r0, #16
 8003f36:	3113      	adds	r1, #19
 8003f38:	f7fd fa0a 	bl	8001350 <_test_assert_time_window.constprop.1>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d1d0      	bne.n	8003ee2 <rt_test_003_001_execute+0x22>
  test_set_step(5);
 8003f40:	2305      	movs	r3, #5
 8003f42:	6033      	str	r3, [r6, #0]
 8003f44:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8003f46:	2320      	movs	r3, #32
 8003f48:	f106 0464 	add.w	r4, r6, #100	; 0x64
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 8003f52:	1a61      	subs	r1, r4, r1
 8003f54:	d002      	beq.n	8003f5c <rt_test_003_001_execute+0x9c>
 8003f56:	2008      	movs	r0, #8
 8003f58:	f7ff fcb2 	bl	80038c0 <chSchGoSleepTimeoutS>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 8003f62:	f106 0167 	add.w	r1, r6, #103	; 0x67
 8003f66:	4620      	mov	r0, r4
}
 8003f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 8003f6c:	f7fd b9f0 	b.w	8001350 <_test_assert_time_window.constprop.1>
 8003f70:	2000178c 	.word	0x2000178c
	...

08003f80 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8003f80:	b508      	push	{r3, lr}

  chThdSleep(1);
 8003f82:	2001      	movs	r0, #1
 8003f84:	f7ff ff74 	bl	8003e70 <chThdSleep>
 8003f88:	2320      	movs	r3, #32
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f92:	2300      	movs	r3, #0
 8003f94:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003f96:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8003f9a:	bd08      	pop	{r3, pc}
 8003f9c:	0000      	movs	r0, r0
	...

08003fa0 <rt_test_010_009_execute>:
static void rt_test_010_009_execute(void) {
 8003fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8003fa4:	f8df b090 	ldr.w	fp, [pc, #144]	; 8004038 <rt_test_010_009_execute+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003fa8:	4f1e      	ldr	r7, [pc, #120]	; (8004024 <rt_test_010_009_execute+0x84>)
 8003faa:	4e1f      	ldr	r6, [pc, #124]	; (8004028 <rt_test_010_009_execute+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8003fac:	4d1f      	ldr	r5, [pc, #124]	; (800402c <rt_test_010_009_execute+0x8c>)
  test_set_step(1);
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 8003fb4:	f7ff ffe4 	bl	8003f80 <test_wait_tick>
    n = 0;
 8003fb8:	2400      	movs	r4, #0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003fba:	46a2      	mov	sl, r4
    start = test_wait_tick();
 8003fbc:	4681      	mov	r9, r0
 8003fbe:	f04f 0820 	mov.w	r8, #32
 8003fc2:	f388 8811 	msr	BASEPRI, r8
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	463a      	mov	r2, r7
 8003fca:	4630      	mov	r0, r6
 8003fcc:	2101      	movs	r1, #1
 8003fce:	f7fe f927 	bl	8002220 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8003fd2:	463a      	mov	r2, r7
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f242 7110 	movw	r1, #10000	; 0x2710
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7fe f920 	bl	8002220 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f7fe f8dd 	bl	80021a0 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f7fe f8da 	bl	80021a0 <chVTDoResetI>
 8003fec:	f38a 8811 	msr	BASEPRI, sl
 8003ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8003ff4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((time - start) < (end - start));
 8003ffa:	eba3 0309 	sub.w	r3, r3, r9
 8003ffe:	4293      	cmp	r3, r2
      n++;
 8004000:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004004:	d9dd      	bls.n	8003fc2 <rt_test_010_009_execute+0x22>
  test_set_step(2);
 8004006:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8004008:	4809      	ldr	r0, [pc, #36]	; (8004030 <rt_test_010_009_execute+0x90>)
  test_set_step(2);
 800400a:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 800400e:	f7fd fcc7 	bl	80019a0 <test_print>
    test_printn(n * 2);
 8004012:	0060      	lsls	r0, r4, #1
 8004014:	f7fd fc54 	bl	80018c0 <test_printn>
    test_println(" timers/S");
 8004018:	4806      	ldr	r0, [pc, #24]	; (8004034 <rt_test_010_009_execute+0x94>)
}
 800401a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 800401e:	f7fd bc9f 	b.w	8001960 <test_println>
 8004022:	bf00      	nop
 8004024:	080015b1 	.word	0x080015b1
 8004028:	200017bc 	.word	0x200017bc
 800402c:	200017d0 	.word	0x200017d0
 8004030:	0800c450 	.word	0x0800c450
 8004034:	0800c460 	.word	0x0800c460
 8004038:	2000178c 	.word	0x2000178c
 800403c:	00000000 	.word	0x00000000

08004040 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8004040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int tseq, tcase;

  test_chp = stream;
 8004044:	4c9d      	ldr	r4, [pc, #628]	; (80042bc <test_execute+0x27c>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8004046:	4689      	mov	r9, r1
  test_chp = stream;
 8004048:	6020      	str	r0, [r4, #0]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 800404a:	b083      	sub	sp, #12
  test_println("");
 800404c:	489c      	ldr	r0, [pc, #624]	; (80042c0 <test_execute+0x280>)
 800404e:	f7fd fc87 	bl	8001960 <test_println>
  if (tsp->name != NULL) {
 8004052:	f8d9 3000 	ldr.w	r3, [r9]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8186 	beq.w	8004368 <test_execute+0x328>
 800405c:	4d99      	ldr	r5, [pc, #612]	; (80042c4 <test_execute+0x284>)
  while (*msgp)
 800405e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	6803      	ldr	r3, [r0, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4798      	blx	r3
  while (*msgp)
 8004068:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800406c:	2900      	cmp	r1, #0
 800406e:	d1f7      	bne.n	8004060 <test_execute+0x20>
    test_print("*** ");
    test_println(tsp->name);
 8004070:	f8d9 0000 	ldr.w	r0, [r9]
 8004074:	f7fd fc74 	bl	8001960 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8004078:	4893      	ldr	r0, [pc, #588]	; (80042c8 <test_execute+0x288>)
 800407a:	4d94      	ldr	r5, [pc, #592]	; (80042cc <test_execute+0x28c>)
 800407c:	f7fd fc70 	bl	8001960 <test_println>
  while (*msgp)
 8004080:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	6803      	ldr	r3, [r0, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4798      	blx	r3
  while (*msgp)
 800408a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800408e:	2900      	cmp	r1, #0
 8004090:	d1f7      	bne.n	8004082 <test_execute+0x42>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8004092:	488f      	ldr	r0, [pc, #572]	; (80042d0 <test_execute+0x290>)
 8004094:	4d8f      	ldr	r5, [pc, #572]	; (80042d4 <test_execute+0x294>)
 8004096:	f7fd fc63 	bl	8001960 <test_println>
  while (*msgp)
 800409a:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	6803      	ldr	r3, [r0, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4798      	blx	r3
  while (*msgp)
 80040a4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d1f7      	bne.n	800409c <test_execute+0x5c>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80040ac:	488a      	ldr	r0, [pc, #552]	; (80042d8 <test_execute+0x298>)
 80040ae:	4d8b      	ldr	r5, [pc, #556]	; (80042dc <test_execute+0x29c>)
 80040b0:	f7fd fc56 	bl	8001960 <test_println>
  while (*msgp)
 80040b4:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	6803      	ldr	r3, [r0, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4798      	blx	r3
  while (*msgp)
 80040be:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80040c2:	2900      	cmp	r1, #0
 80040c4:	d1f7      	bne.n	80040b6 <test_execute+0x76>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 80040c6:	4886      	ldr	r0, [pc, #536]	; (80042e0 <test_execute+0x2a0>)
 80040c8:	9101      	str	r1, [sp, #4]
 80040ca:	f7fd fc49 	bl	8001960 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 80040ce:	487c      	ldr	r0, [pc, #496]	; (80042c0 <test_execute+0x280>)
  test_tokp = test_tokens_buffer;
 80040d0:	4f84      	ldr	r7, [pc, #528]	; (80042e4 <test_execute+0x2a4>)
  test_println("");
 80040d2:	f7fd fc45 	bl	8001960 <test_println>

  test_global_fail = false;
 80040d6:	4b84      	ldr	r3, [pc, #528]	; (80042e8 <test_execute+0x2a8>)
  tseq = 0;
 80040d8:	9901      	ldr	r1, [sp, #4]
  test_global_fail = false;
 80040da:	7019      	strb	r1, [r3, #0]
 80040dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
  tseq = 0;
 80040e0:	468b      	mov	fp, r1
  while (tsp->sequences[tseq] != NULL) {
 80040e2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80040e6:	ea4f 068b 	mov.w	r6, fp, lsl #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 811a 	beq.w	8004324 <test_execute+0x2e4>
 80040f0:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 80040f2:	6820      	ldr	r0, [r4, #0]
 80040f4:	6803      	ldr	r3, [r0, #0]
 80040f6:	213d      	movs	r1, #61	; 0x3d
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80040fc:	3d01      	subs	r5, #1
 80040fe:	d1f8      	bne.n	80040f2 <test_execute+0xb2>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8004100:	6820      	ldr	r0, [r4, #0]
 8004102:	497a      	ldr	r1, [pc, #488]	; (80042ec <test_execute+0x2ac>)
 8004104:	6803      	ldr	r3, [r0, #0]
 8004106:	4d7a      	ldr	r5, [pc, #488]	; (80042f0 <test_execute+0x2b0>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	4798      	blx	r3
  while (*msgp)
 800410e:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	6803      	ldr	r3, [r0, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4798      	blx	r3
  while (*msgp)
 8004118:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800411c:	2900      	cmp	r1, #0
 800411e:	d1f7      	bne.n	8004110 <test_execute+0xd0>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8004120:	f10b 0b01 	add.w	fp, fp, #1
 8004124:	4658      	mov	r0, fp
 8004126:	4d73      	ldr	r5, [pc, #460]	; (80042f4 <test_execute+0x2b4>)
 8004128:	f7fd fbca 	bl	80018c0 <test_printn>
  while (*msgp)
 800412c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	6803      	ldr	r3, [r0, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4798      	blx	r3
  while (*msgp)
 8004136:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800413a:	2900      	cmp	r1, #0
 800413c:	d1f7      	bne.n	800412e <test_execute+0xee>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 800413e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004142:	599b      	ldr	r3, [r3, r6]
 8004144:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8004146:	7829      	ldrb	r1, [r5, #0]
 8004148:	b139      	cbz	r1, 800415a <test_execute+0x11a>
    streamPut(test_chp, *msgp++);
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	6803      	ldr	r3, [r0, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4798      	blx	r3
  while (*msgp)
 8004152:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004156:	2900      	cmp	r1, #0
 8004158:	d1f7      	bne.n	800414a <test_execute+0x10a>
    test_println(")");
 800415a:	4867      	ldr	r0, [pc, #412]	; (80042f8 <test_execute+0x2b8>)
 800415c:	f7fd fc00 	bl	8001960 <test_println>
#endif
    tcase = 0;
 8004160:	2500      	movs	r5, #0
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8004162:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004166:	599a      	ldr	r2, [r3, r6]
 8004168:	6852      	ldr	r2, [r2, #4]
 800416a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800416e:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8004172:	2a00      	cmp	r2, #0
 8004174:	d0b5      	beq.n	80040e2 <test_execute+0xa2>
      print_line();
 8004176:	f8df a198 	ldr.w	sl, [pc, #408]	; 8004310 <test_execute+0x2d0>
 800417a:	f7fd fc79 	bl	8001a70 <print_line>
  while (*msgp)
 800417e:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	6803      	ldr	r3, [r0, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4798      	blx	r3
  while (*msgp)
 8004188:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800418c:	2900      	cmp	r1, #0
 800418e:	d1f7      	bne.n	8004180 <test_execute+0x140>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8004190:	4658      	mov	r0, fp
 8004192:	f7fd fb95 	bl	80018c0 <test_printn>
    streamPut(test_chp, *msgp++);
 8004196:	6820      	ldr	r0, [r4, #0]
      test_print(".");
      test_printn(tcase + 1);
 8004198:	f8df a158 	ldr.w	sl, [pc, #344]	; 80042f4 <test_execute+0x2b4>
    streamPut(test_chp, *msgp++);
 800419c:	6803      	ldr	r3, [r0, #0]
 800419e:	212e      	movs	r1, #46	; 0x2e
 80041a0:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 80041a2:	3501      	adds	r5, #1
    streamPut(test_chp, *msgp++);
 80041a4:	4798      	blx	r3
      test_printn(tcase + 1);
 80041a6:	4628      	mov	r0, r5
 80041a8:	f7fd fb8a 	bl	80018c0 <test_printn>
  while (*msgp)
 80041ac:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	6803      	ldr	r3, [r0, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4798      	blx	r3
  while (*msgp)
 80041b6:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80041ba:	2900      	cmp	r1, #0
 80041bc:	d1f7      	bne.n	80041ae <test_execute+0x16e>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 80041be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80041c2:	599b      	ldr	r3, [r3, r6]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f853 3008 	ldr.w	r3, [r3, r8]
 80041ca:	f8d3 a000 	ldr.w	sl, [r3]
  while (*msgp)
 80041ce:	f89a 1000 	ldrb.w	r1, [sl]
 80041d2:	b139      	cbz	r1, 80041e4 <test_execute+0x1a4>
    streamPut(test_chp, *msgp++);
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	6803      	ldr	r3, [r0, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4798      	blx	r3
  while (*msgp)
 80041dc:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d1f7      	bne.n	80041d4 <test_execute+0x194>
      test_println(")");
 80041e4:	4844      	ldr	r0, [pc, #272]	; (80042f8 <test_execute+0x2b8>)
  test_local_fail = false;
 80041e6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8004314 <test_execute+0x2d4>
      test_println(")");
 80041ea:	f7fd fbb9 	bl	8001960 <test_println>
  chThdSleep(delay);
 80041ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80041f2:	f7ff fe3d 	bl	8003e70 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80041f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  test_tokp = test_tokens_buffer;
 80041fa:	4a40      	ldr	r2, [pc, #256]	; (80042fc <test_execute+0x2bc>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80041fc:	599b      	ldr	r3, [r3, r6]
  test_tokp = test_tokens_buffer;
 80041fe:	603a      	str	r2, [r7, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f853 8008 	ldr.w	r8, [r3, r8]
  if (tcp->setup != NULL)
 8004206:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_local_fail = false;
 800420a:	2200      	movs	r2, #0
 800420c:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
 8004210:	b103      	cbz	r3, 8004214 <test_execute+0x1d4>
    tcp->setup();
 8004212:	4798      	blx	r3
  tcp->execute();
 8004214:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004218:	4798      	blx	r3
  if (tcp->teardown != NULL)
 800421a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800421e:	b103      	cbz	r3, 8004222 <test_execute+0x1e2>
    tcp->teardown();
 8004220:	4798      	blx	r3
      if (test_local_fail) {
 8004222:	f89a 3000 	ldrb.w	r3, [sl]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <test_execute+0x274>
 800422a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8004318 <test_execute+0x2d8>
  while (*msgp)
 800422e:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	6803      	ldr	r3, [r0, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4798      	blx	r3
  while (*msgp)
 8004238:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800423c:	2900      	cmp	r1, #0
 800423e:	d1f7      	bne.n	8004230 <test_execute+0x1f0>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8004240:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <test_execute+0x2c0>)
 8004242:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800431c <test_execute+0x2dc>
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	f7fd fb3a 	bl	80018c0 <test_printn>
  while (*msgp)
 800424c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	6803      	ldr	r3, [r0, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4798      	blx	r3
  while (*msgp)
 8004256:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800425a:	2900      	cmp	r1, #0
 800425c:	d1f7      	bne.n	800424e <test_execute+0x20e>
  while (cp < test_tokp)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	4a26      	ldr	r2, [pc, #152]	; (80042fc <test_execute+0x2bc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d909      	bls.n	800427a <test_execute+0x23a>
  char *cp = test_tokens_buffer;
 8004266:	4690      	mov	r8, r2
    streamPut(test_chp, *cp++);
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	f818 1b01 	ldrb.w	r1, [r8], #1
 800426e:	6803      	ldr	r3, [r0, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4798      	blx	r3
  while (cp < test_tokp)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	4598      	cmp	r8, r3
 8004278:	d3f6      	bcc.n	8004268 <test_execute+0x228>
  while (*msgp)
 800427a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004320 <test_execute+0x2e0>
 800427e:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	6803      	ldr	r3, [r0, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	4798      	blx	r3
  while (*msgp)
 8004288:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800428c:	2900      	cmp	r1, #0
 800428e:	d1f7      	bne.n	8004280 <test_execute+0x240>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <test_execute+0x2c4>)
 8004292:	f8d3 8000 	ldr.w	r8, [r3]
  while (*msgp)
 8004296:	f898 1000 	ldrb.w	r1, [r8]
 800429a:	b139      	cbz	r1, 80042ac <test_execute+0x26c>
    streamPut(test_chp, *msgp++);
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	6803      	ldr	r3, [r0, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4798      	blx	r3
  while (*msgp)
 80042a4:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80042a8:	2900      	cmp	r1, #0
 80042aa:	d1f7      	bne.n	800429c <test_execute+0x25c>
        test_println("\")");
 80042ac:	4816      	ldr	r0, [pc, #88]	; (8004308 <test_execute+0x2c8>)
 80042ae:	f7fd fb57 	bl	8001960 <test_println>
 80042b2:	e756      	b.n	8004162 <test_execute+0x122>
      }
      else {
        test_println("--- Result: SUCCESS");
 80042b4:	4815      	ldr	r0, [pc, #84]	; (800430c <test_execute+0x2cc>)
 80042b6:	f7fd fb53 	bl	8001960 <test_println>
 80042ba:	e752      	b.n	8004162 <test_execute+0x122>
 80042bc:	200016e0 	.word	0x200016e0
 80042c0:	0800ad4c 	.word	0x0800ad4c
 80042c4:	0800d17c 	.word	0x0800d17c
 80042c8:	0800d228 	.word	0x0800d228
 80042cc:	0800d184 	.word	0x0800d184
 80042d0:	0800d22c 	.word	0x0800d22c
 80042d4:	0800d198 	.word	0x0800d198
 80042d8:	0800abd0 	.word	0x0800abd0
 80042dc:	0800d1ac 	.word	0x0800d1ac
 80042e0:	0800ac10 	.word	0x0800ac10
 80042e4:	200017a0 	.word	0x200017a0
 80042e8:	200016e8 	.word	0x200016e8
 80042ec:	0800ae58 	.word	0x0800ae58
 80042f0:	0800d1c0 	.word	0x0800d1c0
 80042f4:	0800d1d4 	.word	0x0800d1d4
 80042f8:	0800d244 	.word	0x0800d244
 80042fc:	20001790 	.word	0x20001790
 8004300:	2000178c 	.word	0x2000178c
 8004304:	200016e4 	.word	0x200016e4
 8004308:	0800d248 	.word	0x0800d248
 800430c:	0800d24c 	.word	0x0800d24c
 8004310:	0800d1d8 	.word	0x0800d1d8
 8004314:	20001788 	.word	0x20001788
 8004318:	0800d1e8 	.word	0x0800d1e8
 800431c:	0800d200 	.word	0x0800d200
 8004320:	0800d204 	.word	0x0800d204
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8004324:	f7fd fba4 	bl	8001a70 <print_line>
  test_println("");
 8004328:	4d11      	ldr	r5, [pc, #68]	; (8004370 <test_execute+0x330>)
 800432a:	4812      	ldr	r0, [pc, #72]	; (8004374 <test_execute+0x334>)
 800432c:	f7fd fb18 	bl	8001960 <test_println>
  while (*msgp)
 8004330:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	6803      	ldr	r3, [r0, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4798      	blx	r3
  while (*msgp)
 800433a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800433e:	2900      	cmp	r1, #0
 8004340:	d1f7      	bne.n	8004332 <test_execute+0x2f2>
  test_print("Final result: ");
  if (test_global_fail)
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <test_execute+0x338>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b93b      	cbnz	r3, 8004358 <test_execute+0x318>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <test_execute+0x33c>)
 800434a:	f7fd fb09 	bl	8001960 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <test_execute+0x338>)
 8004350:	7818      	ldrb	r0, [r3, #0]
 8004352:	b003      	add	sp, #12
 8004354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("FAILURE");
 8004358:	4809      	ldr	r0, [pc, #36]	; (8004380 <test_execute+0x340>)
 800435a:	f7fd fb01 	bl	8001960 <test_println>
}
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <test_execute+0x338>)
 8004360:	7818      	ldrb	r0, [r3, #0]
 8004362:	b003      	add	sp, #12
 8004364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8004368:	4806      	ldr	r0, [pc, #24]	; (8004384 <test_execute+0x344>)
 800436a:	f7fd faf9 	bl	8001960 <test_println>
 800436e:	e683      	b.n	8004078 <test_execute+0x38>
 8004370:	0800d208 	.word	0x0800d208
 8004374:	0800ad4c 	.word	0x0800ad4c
 8004378:	200016e8 	.word	0x200016e8
 800437c:	0800d258 	.word	0x0800d258
 8004380:	0800d260 	.word	0x0800d260
 8004384:	0800d218 	.word	0x0800d218
	...

08004390 <test_rt>:
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
 8004390:	4901      	ldr	r1, [pc, #4]	; (8004398 <test_rt+0x8>)
 8004392:	f7ff be55 	b.w	8004040 <test_execute>
 8004396:	bf00      	nop
 8004398:	0800c684 	.word	0x0800c684
 800439c:	00000000 	.word	0x00000000

080043a0 <test_oslib>:
}

static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
 80043a0:	4901      	ldr	r1, [pc, #4]	; (80043a8 <test_oslib+0x8>)
 80043a2:	f7ff be4d 	b.w	8004040 <test_execute>
 80043a6:	bf00      	nop
 80043a8:	0800b2b0 	.word	0x0800b2b0
 80043ac:	00000000 	.word	0x00000000

080043b0 <bmk_thread4>:
  return ch.rlist.current;
 80043b0:	4a07      	ldr	r2, [pc, #28]	; (80043d0 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 80043b2:	b510      	push	{r4, lr}
 80043b4:	2320      	movs	r3, #32
 80043b6:	6994      	ldr	r4, [r2, #24]
 80043b8:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 80043bc:	2003      	movs	r0, #3
 80043be:	f7ff fa0f 	bl	80037e0 <chSchGoSleepS>
  } while (msg == MSG_OK);
 80043c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f9      	beq.n	80043bc <bmk_thread4+0xc>
 80043c8:	2300      	movs	r3, #0
 80043ca:	f383 8811 	msr	BASEPRI, r3
}
 80043ce:	bd10      	pop	{r4, pc}
 80043d0:	20000da0 	.word	0x20000da0
	...

080043e0 <chMsgWait>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 80043e0:	b510      	push	{r4, lr}
 80043e2:	2320      	movs	r3, #32
 80043e4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 80043e8:	4c0c      	ldr	r4, [pc, #48]	; (800441c <chMsgWait+0x3c>)
 80043ea:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 80043ec:	4613      	mov	r3, r2
 80043ee:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 80043f2:	4298      	cmp	r0, r3
 80043f4:	d009      	beq.n	800440a <chMsgWait+0x2a>
  tqp->next             = tp->queue.next;
 80043f6:	6801      	ldr	r1, [r0, #0]
 80043f8:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 80043fa:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 80043fc:	604b      	str	r3, [r1, #4]
 80043fe:	2300      	movs	r3, #0
 8004400:	f880 2020 	strb.w	r2, [r0, #32]
 8004404:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8004408:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 800440a:	200e      	movs	r0, #14
 800440c:	f7ff f9e8 	bl	80037e0 <chSchGoSleepS>
 8004410:	69a2      	ldr	r2, [r4, #24]
 8004412:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004414:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8004418:	e7ed      	b.n	80043f6 <chMsgWait+0x16>
 800441a:	bf00      	nop
 800441c:	20000da0 	.word	0x20000da0

08004420 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	2620      	movs	r6, #32
 8004424:	2500      	movs	r5, #0
    tp = chMsgWait();
 8004426:	f7ff ffdb 	bl	80043e0 <chMsgWait>
 800442a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800442c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8004430:	4621      	mov	r1, r4
 8004432:	f7ff f8bd 	bl	80035b0 <chSchWakeupS>
 8004436:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 800443a:	2c00      	cmp	r4, #0
 800443c:	d1f3      	bne.n	8004426 <bmk_thread1+0x6>
}
 800443e:	bd70      	pop	{r4, r5, r6, pc}

08004440 <chMsgSend>:
  thread_t *ctp = currp;
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8004442:	b510      	push	{r4, lr}
 8004444:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8004446:	699c      	ldr	r4, [r3, #24]
 8004448:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 800444c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800444e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004450:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8004452:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8004456:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8004458:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800445a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 800445e:	6304      	str	r4, [r0, #48]	; 0x30
 8004460:	2a0e      	cmp	r2, #14
 8004462:	d007      	beq.n	8004474 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8004464:	200c      	movs	r0, #12
 8004466:	f7ff f9bb 	bl	80037e0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800446a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800446c:	2300      	movs	r3, #0
 800446e:	f383 8811 	msr	BASEPRI, r3
}
 8004472:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8004474:	f7fd fd4c 	bl	8001f10 <chSchReadyI>
 8004478:	e7f4      	b.n	8004464 <chMsgSend+0x24>
 800447a:	bf00      	nop
 800447c:	20000da0 	.word	0x20000da0

08004480 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8004480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004484:	4605      	mov	r5, r0
  start = test_wait_tick();
 8004486:	f7ff fd7b 	bl	8003f80 <test_wait_tick>
  uint32_t n = 0;
 800448a:	2400      	movs	r4, #0
  start = test_wait_tick();
 800448c:	4680      	mov	r8, r0
 800448e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 8004492:	f242 760f 	movw	r6, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 8004496:	2101      	movs	r1, #1
 8004498:	4628      	mov	r0, r5
 800449a:	f7ff ffd1 	bl	8004440 <chMsgSend>
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	eba3 0308 	sub.w	r3, r3, r8
  } while (chVTIsSystemTimeWithinX(start, end));
 80044a4:	42b3      	cmp	r3, r6
    n++;
 80044a6:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 80044aa:	d9f4      	bls.n	8004496 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 80044ac:	4628      	mov	r0, r5
 80044ae:	2100      	movs	r1, #0
 80044b0:	f7ff ffc6 	bl	8004440 <chMsgSend>
}
 80044b4:	4620      	mov	r0, r4
 80044b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ba:	bf00      	nop
 80044bc:	0000      	movs	r0, r0
	...

080044c0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 80044c0:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 80044c2:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 80044c4:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 80044c6:	f7ff ffbb 	bl	8004440 <chMsgSend>
  chMsgSend(p, 'B');
 80044ca:	4620      	mov	r0, r4
 80044cc:	2142      	movs	r1, #66	; 0x42
 80044ce:	f7ff ffb7 	bl	8004440 <chMsgSend>
  chMsgSend(p, 'C');
 80044d2:	4620      	mov	r0, r4
 80044d4:	2143      	movs	r1, #67	; 0x43
 80044d6:	f7ff ffb3 	bl	8004440 <chMsgSend>
  chMsgSend(p, 'D');
 80044da:	4620      	mov	r0, r4
 80044dc:	2144      	movs	r1, #68	; 0x44
}
 80044de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 80044e2:	f7ff bfad 	b.w	8004440 <chMsgSend>
 80044e6:	bf00      	nop
	...

080044f0 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 80044f2:	4a37      	ldr	r2, [pc, #220]	; (80045d0 <chMtxLockS+0xe0>)
  if (mp->owner != NULL) {
 80044f4:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 80044f6:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d040      	beq.n	800457e <chMtxLockS+0x8e>
      while (tp->prio < ctp->prio) {
 80044fc:	68a9      	ldr	r1, [r5, #8]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	4291      	cmp	r1, r2
 8004502:	4604      	mov	r4, r0
 8004504:	d907      	bls.n	8004516 <chMtxLockS+0x26>
        switch (tp->state) {
 8004506:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 800450a:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 800450c:	2a06      	cmp	r2, #6
 800450e:	d03b      	beq.n	8004588 <chMtxLockS+0x98>
 8004510:	2a07      	cmp	r2, #7
 8004512:	d015      	beq.n	8004540 <chMtxLockS+0x50>
 8004514:	b342      	cbz	r2, 8004568 <chMtxLockS+0x78>
      queue_prio_insert(ctp, &mp->queue);
 8004516:	4626      	mov	r6, r4
 8004518:	4623      	mov	r3, r4
 800451a:	e003      	b.n	8004524 <chMtxLockS+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	68aa      	ldr	r2, [r5, #8]
 8004520:	4291      	cmp	r1, r2
 8004522:	d32a      	bcc.n	800457a <chMtxLockS+0x8a>
    cp = cp->queue.next;
 8004524:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004526:	429c      	cmp	r4, r3
 8004528:	d1f8      	bne.n	800451c <chMtxLockS+0x2c>
  tp->queue.prev             = cp->queue.prev;
 800452a:	6873      	ldr	r3, [r6, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 800452c:	2006      	movs	r0, #6
 800452e:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8004532:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 8004534:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 8004536:	626c      	str	r4, [r5, #36]	; 0x24
}
 8004538:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 800453c:	f7ff b950 	b.w	80037e0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 8004540:	e9d3 0200 	ldrd	r0, r2, [r3]
 8004544:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8004546:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	6042      	str	r2, [r0, #4]
 800454c:	4632      	mov	r2, r6
 800454e:	e002      	b.n	8004556 <chMtxLockS+0x66>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004550:	6890      	ldr	r0, [r2, #8]
 8004552:	4288      	cmp	r0, r1
 8004554:	d332      	bcc.n	80045bc <chMtxLockS+0xcc>
    cp = cp->queue.next;
 8004556:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004558:	4296      	cmp	r6, r2
 800455a:	d1f9      	bne.n	8004550 <chMtxLockS+0x60>
  tp->queue.prev             = cp->queue.prev;
 800455c:	6872      	ldr	r2, [r6, #4]
 800455e:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8004562:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8004564:	6073      	str	r3, [r6, #4]
 8004566:	e7d6      	b.n	8004516 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8004568:	e9d3 1200 	ldrd	r1, r2, [r3]
 800456c:	6011      	str	r1, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800456e:	6819      	ldr	r1, [r3, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 8004570:	4618      	mov	r0, r3
 8004572:	604a      	str	r2, [r1, #4]
 8004574:	f7fd fccc 	bl	8001f10 <chSchReadyI>
 8004578:	e7cd      	b.n	8004516 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800457a:	461e      	mov	r6, r3
 800457c:	e7d5      	b.n	800452a <chMtxLockS+0x3a>
    mp->next = ctp->mtxlist;
 800457e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004580:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8004584:	63a8      	str	r0, [r5, #56]	; 0x38
}
 8004586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8004588:	e9d3 0200 	ldrd	r0, r2, [r3]
 800458c:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800458e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	4637      	mov	r7, r6
 8004594:	6042      	str	r2, [r0, #4]
 8004596:	4632      	mov	r2, r6
 8004598:	e002      	b.n	80045a0 <chMtxLockS+0xb0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800459a:	6890      	ldr	r0, [r2, #8]
 800459c:	4288      	cmp	r0, r1
 800459e:	d314      	bcc.n	80045ca <chMtxLockS+0xda>
    cp = cp->queue.next;
 80045a0:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80045a2:	4296      	cmp	r6, r2
 80045a4:	d1f9      	bne.n	800459a <chMtxLockS+0xaa>
  tp->queue.prev             = cp->queue.prev;
 80045a6:	687a      	ldr	r2, [r7, #4]
      while (tp->prio < ctp->prio) {
 80045a8:	68a9      	ldr	r1, [r5, #8]
 80045aa:	e9c3 7200 	strd	r7, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80045ae:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80045b0:	607b      	str	r3, [r7, #4]
          tp = tp->u.wtmtxp->owner;
 80045b2:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	428a      	cmp	r2, r1
 80045b8:	d3a5      	bcc.n	8004506 <chMtxLockS+0x16>
 80045ba:	e7ac      	b.n	8004516 <chMtxLockS+0x26>
    cp = cp->queue.next;
 80045bc:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 80045be:	6872      	ldr	r2, [r6, #4]
 80045c0:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80045c4:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80045c6:	6073      	str	r3, [r6, #4]
 80045c8:	e7a5      	b.n	8004516 <chMtxLockS+0x26>
    cp = cp->queue.next;
 80045ca:	4617      	mov	r7, r2
 80045cc:	e7eb      	b.n	80045a6 <chMtxLockS+0xb6>
 80045ce:	bf00      	nop
 80045d0:	20000da0 	.word	0x20000da0
	...

080045e0 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 80045e0:	b508      	push	{r3, lr}
 80045e2:	2320      	movs	r3, #32
 80045e4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80045e8:	f7ff ff82 	bl	80044f0 <chMtxLockS>
 80045ec:	2300      	movs	r3, #0
 80045ee:	f383 8811 	msr	BASEPRI, r3
}
 80045f2:	bd08      	pop	{r3, pc}
	...

08004600 <chSemWait>:
 8004600:	2320      	movs	r3, #32
 8004602:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8004606:	6883      	ldr	r3, [r0, #8]
 8004608:	3b01      	subs	r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	6083      	str	r3, [r0, #8]
 800460e:	db04      	blt.n	800461a <chSemWait+0x1a>
  return MSG_OK;
 8004610:	2000      	movs	r0, #0
 8004612:	2300      	movs	r3, #0
 8004614:	f383 8811 	msr	BASEPRI, r3
}
 8004618:	4770      	bx	lr
msg_t chSemWait(semaphore_t *sp) {
 800461a:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 800461c:	4c08      	ldr	r4, [pc, #32]	; (8004640 <chSemWait+0x40>)
 800461e:	69a2      	ldr	r2, [r4, #24]
 8004620:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8004622:	6841      	ldr	r1, [r0, #4]
 8004624:	4603      	mov	r3, r0
 8004626:	e9c2 0100 	strd	r0, r1, [r2]
  tp->queue.prev->queue.next = tp;
 800462a:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 800462c:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 800462e:	605a      	str	r2, [r3, #4]
 8004630:	f7ff f8d6 	bl	80037e0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8004634:	69a3      	ldr	r3, [r4, #24]
 8004636:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004638:	2300      	movs	r3, #0
 800463a:	f383 8811 	msr	BASEPRI, r3
}
 800463e:	bd10      	pop	{r4, pc}
 8004640:	20000da0 	.word	0x20000da0
	...

08004650 <rt_test_010_010_execute>:
static void rt_test_010_010_execute(void) {
 8004650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8004654:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80046d8 <rt_test_010_010_execute+0x88>
      chSemWait(&sem1);
 8004658:	4c1c      	ldr	r4, [pc, #112]	; (80046cc <rt_test_010_010_execute+0x7c>)
  test_set_step(1);
 800465a:	2301      	movs	r3, #1
 800465c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8004660:	f7ff fc8e 	bl	8003f80 <test_wait_tick>
    n = 0;
 8004664:	2500      	movs	r5, #0
    start = test_wait_tick();
 8004666:	4680      	mov	r8, r0
 8004668:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800466c:	f242 760f 	movw	r6, #9999	; 0x270f
      chSemWait(&sem1);
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff ffc5 	bl	8004600 <chSemWait>
      chSemSignal(&sem1);
 8004676:	4620      	mov	r0, r4
 8004678:	f7ff f812 	bl	80036a0 <chSemSignal>
      chSemWait(&sem1);
 800467c:	4620      	mov	r0, r4
 800467e:	f7ff ffbf 	bl	8004600 <chSemWait>
      chSemSignal(&sem1);
 8004682:	4620      	mov	r0, r4
 8004684:	f7ff f80c 	bl	80036a0 <chSemSignal>
      chSemWait(&sem1);
 8004688:	4620      	mov	r0, r4
 800468a:	f7ff ffb9 	bl	8004600 <chSemWait>
      chSemSignal(&sem1);
 800468e:	4620      	mov	r0, r4
 8004690:	f7ff f806 	bl	80036a0 <chSemSignal>
      chSemWait(&sem1);
 8004694:	4620      	mov	r0, r4
 8004696:	f7ff ffb3 	bl	8004600 <chSemWait>
      chSemSignal(&sem1);
 800469a:	4620      	mov	r0, r4
 800469c:	f7ff f800 	bl	80036a0 <chSemSignal>
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 80046a6:	42b3      	cmp	r3, r6
      n++;
 80046a8:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80046ac:	d9e0      	bls.n	8004670 <rt_test_010_010_execute+0x20>
  test_set_step(2);
 80046ae:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80046b0:	4807      	ldr	r0, [pc, #28]	; (80046d0 <rt_test_010_010_execute+0x80>)
  test_set_step(2);
 80046b2:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80046b6:	f7fd f973 	bl	80019a0 <test_print>
    test_printn(n * 4);
 80046ba:	00a8      	lsls	r0, r5, #2
 80046bc:	f7fd f900 	bl	80018c0 <test_printn>
    test_println(" wait+signal/S");
 80046c0:	4804      	ldr	r0, [pc, #16]	; (80046d4 <rt_test_010_010_execute+0x84>)
}
 80046c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 80046c6:	f7fd b94b 	b.w	8001960 <test_println>
 80046ca:	bf00      	nop
 80046cc:	20001068 	.word	0x20001068
 80046d0:	0800c450 	.word	0x0800c450
 80046d4:	0800c47c 	.word	0x0800c47c
 80046d8:	2000178c 	.word	0x2000178c
 80046dc:	00000000 	.word	0x00000000

080046e0 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4c08      	ldr	r4, [pc, #32]	; (8004704 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80046e4:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80046e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046ea:	075a      	lsls	r2, r3, #29
 80046ec:	d408      	bmi.n	8004700 <bmk_thread7+0x20>
    chSemWait(&sem1);
 80046ee:	4d06      	ldr	r5, [pc, #24]	; (8004708 <bmk_thread7+0x28>)
 80046f0:	4628      	mov	r0, r5
 80046f2:	f7ff ff85 	bl	8004600 <chSemWait>
 80046f6:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80046f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046fc:	075b      	lsls	r3, r3, #29
 80046fe:	d5f7      	bpl.n	80046f0 <bmk_thread7+0x10>
}
 8004700:	bd38      	pop	{r3, r4, r5, pc}
 8004702:	bf00      	nop
 8004704:	20000da0 	.word	0x20000da0
 8004708:	20001068 	.word	0x20001068
 800470c:	00000000 	.word	0x00000000

08004710 <thread3>:
static THD_FUNCTION(thread3, p) {
 8004710:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8004712:	4c04      	ldr	r4, [pc, #16]	; (8004724 <thread3+0x14>)
 8004714:	4620      	mov	r0, r4
 8004716:	f7ff ff73 	bl	8004600 <chSemWait>
  chSemSignal(&sem1);
 800471a:	4620      	mov	r0, r4
}
 800471c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8004720:	f7fe bfbe 	b.w	80036a0 <chSemSignal>
 8004724:	2000105c 	.word	0x2000105c
	...

08004730 <thread1.lto_priv.102>:
static THD_FUNCTION(thread1, p) {
 8004730:	b510      	push	{r4, lr}
 8004732:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8004734:	4803      	ldr	r0, [pc, #12]	; (8004744 <thread1.lto_priv.102+0x14>)
 8004736:	f7ff ff63 	bl	8004600 <chSemWait>
  test_emit_token(*(char *)p);
 800473a:	7820      	ldrb	r0, [r4, #0]
}
 800473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8004740:	f7fd b8ce 	b.w	80018e0 <test_emit_token>
 8004744:	2000105c 	.word	0x2000105c
	...

08004750 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8004750:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <chThdExitS+0x44>)
 8004754:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8004756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8004758:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800475a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800475e:	42ab      	cmp	r3, r5
 8004760:	d007      	beq.n	8004772 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fbd2 	bl	8001f10 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800476c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800476e:	42ab      	cmp	r3, r5
 8004770:	d1f7      	bne.n	8004762 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 8004772:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004776:	b943      	cbnz	r3, 800478a <chThdExitS+0x3a>
 8004778:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800477c:	079b      	lsls	r3, r3, #30
 800477e:	d104      	bne.n	800478a <chThdExitS+0x3a>
    REG_REMOVE(tp);
 8004780:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004784:	611a      	str	r2, [r3, #16]
 8004786:	6922      	ldr	r2, [r4, #16]
 8004788:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 800478a:	200f      	movs	r0, #15
}
 800478c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8004790:	f7ff b826 	b.w	80037e0 <chSchGoSleepS>
 8004794:	20000da0 	.word	0x20000da0
	...

080047a0 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 80047a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
  const ShellCommand *scp = scfg->sc_commands;
 80047a4:	e9d0 7300 	ldrd	r7, r3, [r0]
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 80047a8:	4978      	ldr	r1, [pc, #480]	; (800498c <shellThread+0x1ec>)
 80047aa:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80049c4 <shellThread+0x224>
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
#else
  while (true) {
#endif
    chprintf(chp, SHELL_PROMPT_STR);
 80047ae:	f8df a218 	ldr.w	sl, [pc, #536]	; 80049c8 <shellThread+0x228>
THD_FUNCTION(shellThread, p) {
 80047b2:	b09b      	sub	sp, #108	; 0x6c
 80047b4:	4680      	mov	r8, r0
  chprintf(chp, SHELL_NEWLINE_STR);
 80047b6:	4638      	mov	r0, r7
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 80047b8:	468b      	mov	fp, r1
  const ShellCommand *scp = scfg->sc_commands;
 80047ba:	9301      	str	r3, [sp, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 80047bc:	f7fe fa50 	bl	8002c60 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 80047c0:	4638      	mov	r0, r7
 80047c2:	4973      	ldr	r1, [pc, #460]	; (8004990 <shellThread+0x1f0>)
 80047c4:	f7fe fa4c 	bl	8002c60 <chprintf>
 80047c8:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 80047cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047d0:	075b      	lsls	r3, r3, #29
 80047d2:	f100 8083 	bmi.w	80048dc <shellThread+0x13c>
    chprintf(chp, SHELL_PROMPT_STR);
 80047d6:	4651      	mov	r1, sl
 80047d8:	4638      	mov	r0, r7
 80047da:	f7fe fa41 	bl	8002c60 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 80047de:	f8d8 4000 	ldr.w	r4, [r8]
  char *p = line;
 80047e2:	ae0a      	add	r6, sp, #40	; 0x28
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	4635      	mov	r5, r6
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 80047e8:	6893      	ldr	r3, [r2, #8]
 80047ea:	f10d 010f 	add.w	r1, sp, #15
 80047ee:	2201      	movs	r2, #1
 80047f0:	4620      	mov	r0, r4
 80047f2:	4798      	blx	r3
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d069      	beq.n	80048cc <shellThread+0x12c>
    if (c == 4) {
 80047f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d061      	beq.n	80048c4 <shellThread+0x124>
    if ((c == 8) || (c == 127)) {
 8004800:	2b08      	cmp	r3, #8
      continue;
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8004802:	f10d 0c67 	add.w	ip, sp, #103	; 0x67
    if ((c == 8) || (c == 127)) {
 8004806:	d012      	beq.n	800482e <shellThread+0x8e>
 8004808:	2b7f      	cmp	r3, #127	; 0x7f
      streamPut(chp, c);
 800480a:	4619      	mov	r1, r3
 800480c:	4620      	mov	r0, r4
    if ((c == 8) || (c == 127)) {
 800480e:	d00e      	beq.n	800482e <shellThread+0x8e>
    if (c == '\r') {
 8004810:	2b0d      	cmp	r3, #13
 8004812:	d021      	beq.n	8004858 <shellThread+0xb8>
    if (c < 0x20)
 8004814:	2b1f      	cmp	r3, #31
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	d9e6      	bls.n	80047e8 <shellThread+0x48>
    if (p < line + size - 1) {
 800481a:	4565      	cmp	r5, ip
 800481c:	d2e4      	bcs.n	80047e8 <shellThread+0x48>
      streamPut(chp, c);
 800481e:	68d3      	ldr	r3, [r2, #12]
 8004820:	4798      	blx	r3
      *p++ = (char)c;
 8004822:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004826:	702b      	strb	r3, [r5, #0]
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	3501      	adds	r5, #1
 800482c:	e7dc      	b.n	80047e8 <shellThread+0x48>
      if (p != line) {
 800482e:	42b5      	cmp	r5, r6
        streamPut(chp, 0x08);
 8004830:	f04f 0108 	mov.w	r1, #8
 8004834:	4620      	mov	r0, r4
 8004836:	6822      	ldr	r2, [r4, #0]
      if (p != line) {
 8004838:	d0d6      	beq.n	80047e8 <shellThread+0x48>
        streamPut(chp, 0x08);
 800483a:	68d3      	ldr	r3, [r2, #12]
 800483c:	4798      	blx	r3
        streamPut(chp, 0x20);
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	2120      	movs	r1, #32
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4620      	mov	r0, r4
 8004846:	4798      	blx	r3
        streamPut(chp, 0x08);
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	2108      	movs	r1, #8
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4620      	mov	r0, r4
 8004850:	4798      	blx	r3
        p--;
 8004852:	3d01      	subs	r5, #1
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	e7c7      	b.n	80047e8 <shellThread+0x48>
      chprintf(chp, SHELL_NEWLINE_STR);
 8004858:	4659      	mov	r1, fp
      *p = 0;
 800485a:	2400      	movs	r4, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 800485c:	f7fe fa00 	bl	8002c60 <chprintf>
    lp = parse_arguments(line, &tokp);
 8004860:	4630      	mov	r0, r6
 8004862:	a904      	add	r1, sp, #16
      *p = 0;
 8004864:	702c      	strb	r4, [r5, #0]
    lp = parse_arguments(line, &tokp);
 8004866:	f7fe f9cb 	bl	8002c00 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800486a:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 800486c:	4606      	mov	r6, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800486e:	2000      	movs	r0, #0
 8004870:	ad05      	add	r5, sp, #20
 8004872:	f7fe f9c5 	bl	8002c00 <parse_arguments>
 8004876:	b150      	cbz	r0, 800488e <shellThread+0xee>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8004878:	2c04      	cmp	r4, #4
 800487a:	d01c      	beq.n	80048b6 <shellThread+0x116>
      args[n++] = lp;
 800487c:	f845 0b04 	str.w	r0, [r5], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004880:	a904      	add	r1, sp, #16
 8004882:	2000      	movs	r0, #0
      args[n++] = lp;
 8004884:	3401      	adds	r4, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004886:	f7fe f9bb 	bl	8002c00 <parse_arguments>
 800488a:	2800      	cmp	r0, #0
 800488c:	d1f4      	bne.n	8004878 <shellThread+0xd8>
    args[n] = NULL;
 800488e:	ab1a      	add	r3, sp, #104	; 0x68
 8004890:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004894:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8004898:	2e00      	cmp	r6, #0
 800489a:	d095      	beq.n	80047c8 <shellThread+0x28>
      if (strcmp(cmd, "help") == 0) {
 800489c:	493d      	ldr	r1, [pc, #244]	; (8004994 <shellThread+0x1f4>)
 800489e:	4630      	mov	r0, r6
 80048a0:	f7fc fbb2 	bl	8001008 <strcmp>
 80048a4:	bb38      	cbnz	r0, 80048f6 <shellThread+0x156>
        if (n > 0) {
 80048a6:	2c00      	cmp	r4, #0
 80048a8:	d036      	beq.n	8004918 <shellThread+0x178>
          shellUsage(chp, "help");
 80048aa:	4a3a      	ldr	r2, [pc, #232]	; (8004994 <shellThread+0x1f4>)
 80048ac:	493a      	ldr	r1, [pc, #232]	; (8004998 <shellThread+0x1f8>)
 80048ae:	4638      	mov	r0, r7
 80048b0:	f7fe f9d6 	bl	8002c60 <chprintf>
 80048b4:	e788      	b.n	80047c8 <shellThread+0x28>
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 80048b6:	4939      	ldr	r1, [pc, #228]	; (800499c <shellThread+0x1fc>)
 80048b8:	4638      	mov	r0, r7
 80048ba:	f7fe f9d1 	bl	8002c60 <chprintf>
    args[n] = NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	9309      	str	r3, [sp, #36]	; 0x24
 80048c2:	e781      	b.n	80047c8 <shellThread+0x28>
      chprintf(chp, "^D");
 80048c4:	4620      	mov	r0, r4
 80048c6:	4936      	ldr	r1, [pc, #216]	; (80049a0 <shellThread+0x200>)
 80048c8:	f7fe f9ca 	bl	8002c60 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 80048cc:	492f      	ldr	r1, [pc, #188]	; (800498c <shellThread+0x1ec>)
 80048ce:	4638      	mov	r0, r7
 80048d0:	f7fe f9c6 	bl	8002c60 <chprintf>
      chprintf(chp, "logout");
 80048d4:	4638      	mov	r0, r7
 80048d6:	4933      	ldr	r1, [pc, #204]	; (80049a4 <shellThread+0x204>)
 80048d8:	f7fe f9c2 	bl	8002c60 <chprintf>
 80048dc:	2320      	movs	r3, #32
 80048de:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80048e2:	2100      	movs	r1, #0
 80048e4:	4830      	ldr	r0, [pc, #192]	; (80049a8 <shellThread+0x208>)
 80048e6:	f7fd fbfb 	bl	80020e0 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 80048ea:	2000      	movs	r0, #0
 80048ec:	f7ff ff30 	bl	8004750 <chThdExitS>
}
 80048f0:	b01b      	add	sp, #108	; 0x6c
 80048f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f6:	4d2d      	ldr	r5, [pc, #180]	; (80049ac <shellThread+0x20c>)
  while (scp->sc_name != NULL) {
 80048f8:	482d      	ldr	r0, [pc, #180]	; (80049b0 <shellThread+0x210>)
 80048fa:	e002      	b.n	8004902 <shellThread+0x162>
 80048fc:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8004900:	b358      	cbz	r0, 800495a <shellThread+0x1ba>
    if (strcmp(scp->sc_name, name) == 0) {
 8004902:	4631      	mov	r1, r6
 8004904:	f7fc fb80 	bl	8001008 <strcmp>
 8004908:	2800      	cmp	r0, #0
 800490a:	d1f7      	bne.n	80048fc <shellThread+0x15c>
      scp->sc_function(chp, argc, argv);
 800490c:	686b      	ldr	r3, [r5, #4]
 800490e:	aa05      	add	r2, sp, #20
 8004910:	4621      	mov	r1, r4
 8004912:	4638      	mov	r0, r7
 8004914:	4798      	blx	r3
 8004916:	e757      	b.n	80047c8 <shellThread+0x28>
        chprintf(chp, "Commands: help ");
 8004918:	4926      	ldr	r1, [pc, #152]	; (80049b4 <shellThread+0x214>)
 800491a:	4c24      	ldr	r4, [pc, #144]	; (80049ac <shellThread+0x20c>)
    chprintf(chp, "%s ", scp->sc_name);
 800491c:	4d26      	ldr	r5, [pc, #152]	; (80049b8 <shellThread+0x218>)
        chprintf(chp, "Commands: help ");
 800491e:	4638      	mov	r0, r7
 8004920:	f7fe f99e 	bl	8002c60 <chprintf>
  while (scp->sc_name != NULL) {
 8004924:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <shellThread+0x210>)
    chprintf(chp, "%s ", scp->sc_name);
 8004926:	4629      	mov	r1, r5
 8004928:	4638      	mov	r0, r7
 800492a:	f7fe f999 	bl	8002c60 <chprintf>
  while (scp->sc_name != NULL) {
 800492e:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8004932:	2a00      	cmp	r2, #0
 8004934:	d1f7      	bne.n	8004926 <shellThread+0x186>
        if (scp != NULL)
 8004936:	9c01      	ldr	r4, [sp, #4]
 8004938:	b154      	cbz	r4, 8004950 <shellThread+0x1b0>
  while (scp->sc_name != NULL) {
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	b142      	cbz	r2, 8004950 <shellThread+0x1b0>
    chprintf(chp, "%s ", scp->sc_name);
 800493e:	4d1e      	ldr	r5, [pc, #120]	; (80049b8 <shellThread+0x218>)
 8004940:	4629      	mov	r1, r5
 8004942:	4638      	mov	r0, r7
 8004944:	f7fe f98c 	bl	8002c60 <chprintf>
  while (scp->sc_name != NULL) {
 8004948:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800494c:	2a00      	cmp	r2, #0
 800494e:	d1f7      	bne.n	8004940 <shellThread+0x1a0>
        chprintf(chp, SHELL_NEWLINE_STR);
 8004950:	4659      	mov	r1, fp
 8004952:	4638      	mov	r0, r7
 8004954:	f7fe f984 	bl	8002c60 <chprintf>
 8004958:	e736      	b.n	80047c8 <shellThread+0x28>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800495a:	9d01      	ldr	r5, [sp, #4]
 800495c:	b15d      	cbz	r5, 8004976 <shellThread+0x1d6>
  while (scp->sc_name != NULL) {
 800495e:	6828      	ldr	r0, [r5, #0]
 8004960:	b918      	cbnz	r0, 800496a <shellThread+0x1ca>
 8004962:	e008      	b.n	8004976 <shellThread+0x1d6>
 8004964:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8004968:	b128      	cbz	r0, 8004976 <shellThread+0x1d6>
    if (strcmp(scp->sc_name, name) == 0) {
 800496a:	4631      	mov	r1, r6
 800496c:	f7fc fb4c 	bl	8001008 <strcmp>
 8004970:	2800      	cmp	r0, #0
 8004972:	d1f7      	bne.n	8004964 <shellThread+0x1c4>
 8004974:	e7ca      	b.n	800490c <shellThread+0x16c>
        chprintf(chp, "%s", cmd);
 8004976:	4632      	mov	r2, r6
 8004978:	4910      	ldr	r1, [pc, #64]	; (80049bc <shellThread+0x21c>)
 800497a:	4638      	mov	r0, r7
 800497c:	f7fe f970 	bl	8002c60 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8004980:	490f      	ldr	r1, [pc, #60]	; (80049c0 <shellThread+0x220>)
 8004982:	4638      	mov	r0, r7
 8004984:	f7fe f96c 	bl	8002c60 <chprintf>
 8004988:	e71e      	b.n	80047c8 <shellThread+0x28>
 800498a:	bf00      	nop
 800498c:	0800ae58 	.word	0x0800ae58
 8004990:	0800c6c0 	.word	0x0800c6c0
 8004994:	0800c700 	.word	0x0800c700
 8004998:	0800ad0c 	.word	0x0800ad0c
 800499c:	0800c6e8 	.word	0x0800c6e8
 80049a0:	0800c6dc 	.word	0x0800c6dc
 80049a4:	0800c6e0 	.word	0x0800c6e0
 80049a8:	20001074 	.word	0x20001074
 80049ac:	0800c730 	.word	0x0800c730
 80049b0:	0800c6b8 	.word	0x0800c6b8
 80049b4:	0800c708 	.word	0x0800c708
 80049b8:	0800c718 	.word	0x0800c718
 80049bc:	0800c71c 	.word	0x0800c71c
 80049c0:	0800c720 	.word	0x0800c720
 80049c4:	20000da0 	.word	0x20000da0
 80049c8:	0800c6d4 	.word	0x0800c6d4
 80049cc:	00000000 	.word	0x00000000

080049d0 <cmd_exit>:
  if (argc > 0) {
 80049d0:	2900      	cmp	r1, #0
 80049d2:	dd03      	ble.n	80049dc <cmd_exit+0xc>
    shellUsage(chp, "exit");
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <cmd_exit+0x28>)
 80049d6:	4909      	ldr	r1, [pc, #36]	; (80049fc <cmd_exit+0x2c>)
 80049d8:	f7fe b942 	b.w	8002c60 <chprintf>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 80049dc:	b508      	push	{r3, lr}
 80049de:	2320      	movs	r3, #32
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	4806      	ldr	r0, [pc, #24]	; (8004a00 <cmd_exit+0x30>)
 80049e6:	2100      	movs	r1, #0
 80049e8:	f7fd fb7a 	bl	80020e0 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 80049ec:	2000      	movs	r0, #0
}
 80049ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049f2:	f7ff bead 	b.w	8004750 <chThdExitS>
 80049f6:	bf00      	nop
 80049f8:	0800c6b8 	.word	0x0800c6b8
 80049fc:	0800ad0c 	.word	0x0800ad0c
 8004a00:	20001074 	.word	0x20001074
	...

08004a10 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004a10:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8004a14:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004a16:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f383 8811 	msr	BASEPRI, r3
}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
	...

08004a30 <chThdExit>:
 8004a30:	2320      	movs	r3, #32
 8004a32:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8004a36:	f7ff be8b 	b.w	8004750 <chThdExitS>
 8004a3a:	bf00      	nop
 8004a3c:	0000      	movs	r0, r0
	...

08004a40 <Thd3>:
static THD_FUNCTION(Thd3, arg) {
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	4f6e      	ldr	r7, [pc, #440]	; (8004c00 <Thd3+0x1c0>)
 8004a46:	4a6f      	ldr	r2, [pc, #444]	; (8004c04 <Thd3+0x1c4>)
 8004a48:	69bb      	ldr	r3, [r7, #24]
  palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);
 8004a4a:	486f      	ldr	r0, [pc, #444]	; (8004c08 <Thd3+0x1c8>)
 8004a4c:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(Thd3, arg) {
 8004a4e:	b083      	sub	sp, #12
  palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);
 8004a50:	2203      	movs	r2, #3
 8004a52:	2101      	movs	r1, #1
 8004a54:	f7fd fcec 	bl	8002430 <_pal_lld_setgroupmode>
 8004a58:	2320      	movs	r3, #32
 8004a5a:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8004a5e:	4d6b      	ldr	r5, [pc, #428]	; (8004c0c <Thd3+0x1cc>)
  if (adcp->state == ADC_STOP) {
 8004a60:	782a      	ldrb	r2, [r5, #0]
 8004a62:	2300      	movs	r3, #0
 8004a64:	2a01      	cmp	r2, #1
 8004a66:	606b      	str	r3, [r5, #4]
 8004a68:	d078      	beq.n	8004b5c <Thd3+0x11c>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	702b      	strb	r3, [r5, #0]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	69bb      	ldr	r3, [r7, #24]
  while(!chThdShouldTerminateX()) {
 8004a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a7a:	075a      	lsls	r2, r3, #29
 8004a7c:	d468      	bmi.n	8004b50 <Thd3+0x110>
 8004a7e:	4e64      	ldr	r6, [pc, #400]	; (8004c10 <Thd3+0x1d0>)
 8004a80:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8004c40 <Thd3+0x200>
 8004a84:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8004c44 <Thd3+0x204>
 8004a88:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004c48 <Thd3+0x208>
 8004a8c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004c4c <Thd3+0x20c>
 8004a90:	f106 0414 	add.w	r4, r6, #20
 8004a94:	2320      	movs	r3, #32
 8004a96:	f383 8811 	msr	BASEPRI, r3
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8004a9a:	2003      	movs	r0, #3
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8004a9c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a9e:	7028      	strb	r0, [r5, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
  mode = adcp->dmamode;
 8004aa2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  adcp->grpp     = grpp;
 8004aa4:	f8c5 b010 	str.w	fp, [r5, #16]
  adcp->depth    = depth;
 8004aa8:	220a      	movs	r2, #10
 8004aaa:	e9c5 6202 	strd	r6, r2, [r5, #8]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8004aae:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8004ab0:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 8004ab2:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(adcp->dmastp);
 8004ab4:	f8d3 e000 	ldr.w	lr, [r3]
  adcp->adc->SR    = 0;
 8004ab8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return ch.rlist.current;
 8004aba:	69b9      	ldr	r1, [r7, #24]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8004abc:	f8df c190 	ldr.w	ip, [pc, #400]	; 8004c50 <Thd3+0x210>
  dmaStreamEnable(adcp->dmastp);
 8004ac0:	f04e 0e01 	orr.w	lr, lr, #1
 8004ac4:	f8c3 e000 	str.w	lr, [r3]
  adcp->adc->SR    = 0;
 8004ac8:	2300      	movs	r3, #0
  adcp->adc->SMPR2 = grpp->smpr2;
 8004aca:	f04f 0e06 	mov.w	lr, #6
  adcp->adc->SR    = 0;
 8004ace:	6013      	str	r3, [r2, #0]
  adcp->adc->SQR3  = grpp->sqr3;
 8004ad0:	9301      	str	r3, [sp, #4]
  adcp->adc->SMPR1 = grpp->smpr1;
 8004ad2:	60d3      	str	r3, [r2, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8004ad4:	f8c2 e010 	str.w	lr, [r2, #16]
  adcp->adc->HTR   = grpp->htr;
 8004ad8:	6253      	str	r3, [r2, #36]	; 0x24
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8004ada:	f240 3e03 	movw	lr, #771	; 0x303
  adcp->adc->LTR   = grpp->ltr;
 8004ade:	6293      	str	r3, [r2, #40]	; 0x28
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8004ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 8004ae2:	6313      	str	r3, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8004ae4:	6353      	str	r3, [r2, #52]	; 0x34
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8004ae6:	4b4b      	ldr	r3, [pc, #300]	; (8004c14 <Thd3+0x1d4>)
 8004ae8:	6053      	str	r3, [r2, #4]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8004aea:	f8c2 e008 	str.w	lr, [r2, #8]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8004aee:	f8c2 c008 	str.w	ip, [r2, #8]
  tp->u.wttrp = trp;
 8004af2:	f8c1 a024 	str.w	sl, [r1, #36]	; 0x24
  *trp = tp;
 8004af6:	6169      	str	r1, [r5, #20]
    chSchGoSleepS(newstate);
 8004af8:	f7fe fe72 	bl	80037e0 <chSchGoSleepS>
 8004afc:	9b01      	ldr	r3, [sp, #4]
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	4618      	mov	r0, r3
 8004b04:	4633      	mov	r3, r6
                    mean += sample_buff[ii];
 8004b06:	f833 2b02 	ldrh.w	r2, [r3], #2
                  for (ii = 0; ii < MY_NUM_CH * MY_SAMPLING_NUMBER; ii++) {
 8004b0a:	429c      	cmp	r4, r3
                    mean += sample_buff[ii];
 8004b0c:	4410      	add	r0, r2
                  for (ii = 0; ii < MY_NUM_CH * MY_SAMPLING_NUMBER; ii++) {
 8004b0e:	d1fa      	bne.n	8004b06 <Thd3+0xc6>
                  mean /= MY_NUM_CH * MY_SAMPLING_NUMBER;
 8004b10:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <Thd3+0x1d8>)
 8004b12:	fba3 3000 	umull	r3, r0, r3, r0
 8004b16:	08c0      	lsrs	r0, r0, #3
 8004b18:	f8c9 0000 	str.w	r0, [r9]
                  lastvalue = ((float)mean) * 100.0 / 4095.0;
 8004b1c:	f7fc f8e4 	bl	8000ce8 <__aeabi_i2f>
 8004b20:	f7fb fd46 	bl	80005b0 <__aeabi_f2d>
 8004b24:	2200      	movs	r2, #0
 8004b26:	4b3d      	ldr	r3, [pc, #244]	; (8004c1c <Thd3+0x1dc>)
 8004b28:	f7fb fd9a 	bl	8000660 <__aeabi_dmul>
 8004b2c:	a332      	add	r3, pc, #200	; (adr r3, 8004bf8 <Thd3+0x1b8>)
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f7fb febf 	bl	80008b4 <__aeabi_ddiv>
 8004b36:	f7fb ffcd 	bl	8000ad4 <__aeabi_d2f>
 8004b3a:	f8c8 0000 	str.w	r0, [r8]
                  chThdSleepMilliseconds(100);
 8004b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b42:	f7ff f995 	bl	8003e70 <chThdSleep>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8004b46:	69bb      	ldr	r3, [r7, #24]
  while(!chThdShouldTerminateX()) {
 8004b48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b4c:	075b      	lsls	r3, r3, #29
 8004b4e:	d5a1      	bpl.n	8004a94 <Thd3+0x54>
  chThdExit(0);
 8004b50:	2000      	movs	r0, #0
}
 8004b52:	b003      	add	sp, #12
 8004b54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chThdExit(0);
 8004b58:	f7ff bf6a 	b.w	8004a30 <chThdExit>
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8004b5c:	4a30      	ldr	r2, [pc, #192]	; (8004c20 <Thd3+0x1e0>)
 8004b5e:	6811      	ldr	r1, [r2, #0]
 8004b60:	04c8      	lsls	r0, r1, #19
 8004b62:	d502      	bpl.n	8004b6a <Thd3+0x12a>
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
 8004b64:	62eb      	str	r3, [r5, #44]	; 0x2c
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	deff      	udf	#255	; 0xff
      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
        rccEnableDMA1(true);
      }
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
        rccEnableDMA2(true);
 8004b6a:	4b2e      	ldr	r3, [pc, #184]	; (8004c24 <Thd3+0x1e4>)
      dma.allocated_mask  |= mask;
 8004b6c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004b70:	6011      	str	r1, [r2, #0]
        rccEnableDMA2(true);
 8004b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
      dma.streams[i].param = param;
 8004b74:	6695      	str	r5, [r2, #104]	; 0x68
        rccEnableDMA2(true);
 8004b76:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8004b7a:	6319      	str	r1, [r3, #48]	; 0x30
 8004b7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
        rccEnableDMAMUX(true);
      }
#endif

      /* Putting the stream in a safe state.*/
      dmaStreamDisable(dmastp);
 8004b7e:	492a      	ldr	r1, [pc, #168]	; (8004c28 <Thd3+0x1e8>)
        rccEnableDMA2(true);
 8004b80:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8004b84:	6518      	str	r0, [r3, #80]	; 0x50
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8004b88:	680b      	ldr	r3, [r1, #0]
      dma.streams[i].func  = func;
 8004b8a:	4828      	ldr	r0, [pc, #160]	; (8004c2c <Thd3+0x1ec>)
 8004b8c:	6650      	str	r0, [r2, #100]	; 0x64
      dmaStreamDisable(dmastp);
 8004b8e:	f023 031f 	bic.w	r3, r3, #31
 8004b92:	600b      	str	r3, [r1, #0]
 8004b94:	680a      	ldr	r2, [r1, #0]
 8004b96:	f012 0201 	ands.w	r2, r2, #1
 8004b9a:	d1fb      	bne.n	8004b94 <Thd3+0x154>
 8004b9c:	4824      	ldr	r0, [pc, #144]	; (8004c30 <Thd3+0x1f0>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004b9e:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <Thd3+0x1f4>)
 8004ba0:	4c25      	ldr	r4, [pc, #148]	; (8004c38 <Thd3+0x1f8>)
 8004ba2:	263d      	movs	r6, #61	; 0x3d
 8004ba4:	6006      	str	r6, [r0, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8004ba6:	2021      	movs	r0, #33	; 0x21
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004ba8:	600a      	str	r2, [r1, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8004baa:	6148      	str	r0, [r1, #20]
 8004bac:	2060      	movs	r0, #96	; 0x60
 8004bae:	f883 033c 	strb.w	r0, [r3, #828]	; 0x33c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004bb2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004bb6:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004bba:	6058      	str	r0, [r3, #4]
      rccEnableADC1(true);
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <Thd3+0x1e4>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8004bbe:	608c      	str	r4, [r1, #8]
      rccEnableADC1(true);
 8004bc0:	6c58      	ldr	r0, [r3, #68]	; 0x44
    adcp->adc->CR1 = 0;
 8004bc2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      rccEnableADC1(true);
 8004bc4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004bc8:	6458      	str	r0, [r3, #68]	; 0x44
 8004bca:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004bcc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004bd0:	6658      	str	r0, [r3, #100]	; 0x64
 8004bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8004bd4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
 8004bd8:	4818      	ldr	r0, [pc, #96]	; (8004c3c <Thd3+0x1fc>)
 8004bda:	62e8      	str	r0, [r5, #44]	; 0x2c
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8004bdc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 8004be4:	2001      	movs	r0, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8004be6:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
    adcp->adc->CR1 = 0;
 8004bea:	604a      	str	r2, [r1, #4]
    adcp->adc->CR2 = 0;
 8004bec:	608a      	str	r2, [r1, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8004bee:	6088      	str	r0, [r1, #8]
 8004bf0:	e73b      	b.n	8004a6a <Thd3+0x2a>
 8004bf2:	bf00      	nop
 8004bf4:	f3af 8000 	nop.w
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	40affe00 	.word	0x40affe00
 8004c00:	20000da0 	.word	0x20000da0
 8004c04:	0800aa14 	.word	0x0800aa14
 8004c08:	40020000 	.word	0x40020000
 8004c0c:	20000ce0 	.word	0x20000ce0
 8004c10:	20001048 	.word	0x20001048
 8004c14:	04000100 	.word	0x04000100
 8004c18:	cccccccd 	.word	0xcccccccd
 8004c1c:	40590000 	.word	0x40590000
 8004c20:	20000f5c 	.word	0x20000f5c
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40026470 	.word	0x40026470
 8004c2c:	08002511 	.word	0x08002511
 8004c30:	4002640c 	.word	0x4002640c
 8004c34:	e000e100 	.word	0xe000e100
 8004c38:	4001204c 	.word	0x4001204c
 8004c3c:	0800aab0 	.word	0x0800aab0
 8004c40:	0800aea8 	.word	0x0800aea8
 8004c44:	20000cf4 	.word	0x20000cf4
 8004c48:	20001014 	.word	0x20001014
 8004c4c:	20001000 	.word	0x20001000
 8004c50:	40000303 	.word	0x40000303
	...

08004c60 <Thd2>:
static THD_FUNCTION(Thd2, arg){
 8004c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c64:	4f16      	ldr	r7, [pc, #88]	; (8004cc0 <Thd2+0x60>)
 palSetLine(LINE_LED_RGB_RED);
 8004c66:	4c17      	ldr	r4, [pc, #92]	; (8004cc4 <Thd2+0x64>)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <Thd2+0x68>)
 8004c6c:	619a      	str	r2, [r3, #24]
 8004c6e:	2101      	movs	r1, #1
 palSetLine(LINE_LED_RGB_BLUE);
 8004c70:	2204      	movs	r2, #4
 palSetLine(LINE_LED_RGB_GREEN);
 8004c72:	2602      	movs	r6, #2
 palSetLine(LINE_LED_RGB_RED);
 8004c74:	8321      	strh	r1, [r4, #24]
 palSetLine(LINE_LED_RGB_GREEN);
 8004c76:	8326      	strh	r6, [r4, #24]
 palSetLine(LINE_LED_RGB_BLUE);
 8004c78:	8322      	strh	r2, [r4, #24]
                        while (!chThdShouldTerminateX()){
 8004c7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c7e:	075a      	lsls	r2, r3, #29
 8004c80:	d418      	bmi.n	8004cb4 <Thd2+0x54>
                                       palClearLine(LINE_LED_RGB_GREEN);
 8004c82:	46b0      	mov	r8, r6
                                       chThdSleepSeconds(6);
 8004c84:	f64e 2060 	movw	r0, #60000	; 0xea60
                                       palClearLine(LINE_LED_RGB_RED);
 8004c88:	2501      	movs	r5, #1
                                       palClearLine(LINE_LED_RGB_GREEN);
 8004c8a:	f8a4 801a 	strh.w	r8, [r4, #26]
                                       chThdSleepSeconds(6);
 8004c8e:	f7ff f8ef 	bl	8003e70 <chThdSleep>
                                       chThdSleepSeconds(3);
 8004c92:	f247 5030 	movw	r0, #30000	; 0x7530
                                       palClearLine(LINE_LED_RGB_RED);
 8004c96:	8365      	strh	r5, [r4, #26]
                                       chThdSleepSeconds(3);
 8004c98:	f7ff f8ea 	bl	8003e70 <chThdSleep>
                                       palSetLine(LINE_LED_RGB_GREEN);
 8004c9c:	8326      	strh	r6, [r4, #24]
                                       chThdSleepSeconds(6);
 8004c9e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8004ca2:	f7ff f8e5 	bl	8003e70 <chThdSleep>
 8004ca6:	69bb      	ldr	r3, [r7, #24]
                                       palSetLine(LINE_LED_RGB_RED);
 8004ca8:	8325      	strh	r5, [r4, #24]
                                       palClearLine(LINE_LED_RGB_GREEN);
 8004caa:	8366      	strh	r6, [r4, #26]
                        while (!chThdShouldTerminateX()){
 8004cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cb0:	075b      	lsls	r3, r3, #29
 8004cb2:	d5e7      	bpl.n	8004c84 <Thd2+0x24>
  chThdExit(0);
 8004cb4:	2000      	movs	r0, #0
}
 8004cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chThdExit(0);
 8004cba:	f7ff beb9 	b.w	8004a30 <chThdExit>
 8004cbe:	bf00      	nop
 8004cc0:	20000da0 	.word	0x20000da0
 8004cc4:	40020800 	.word	0x40020800
 8004cc8:	0800aa08 	.word	0x0800aa08
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <bmk_thread3>:
  chThdExit((msg_t)p);
 8004cd0:	f7ff beae 	b.w	8004a30 <chThdExit>
	...

08004ce0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8004ce0:	4a0e      	ldr	r2, [pc, #56]	; (8004d1c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8004ce2:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 8004ce4:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8004ce6:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8004ce8:	2101      	movs	r1, #1
  thread_t *otp = currp;
 8004cea:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004cec:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 8004cee:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8004cf0:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8004cf4:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8004cf6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8004cf8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8004cfa:	f884 5020 	strb.w	r5, [r4, #32]
 8004cfe:	e000      	b.n	8004d02 <chSchDoReschedule+0x22>
 8004d00:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	4291      	cmp	r1, r2
 8004d06:	d3fb      	bcc.n	8004d00 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8004d08:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8004d0a:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8004d0c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8004d10:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8004d12:	605c      	str	r4, [r3, #4]
}
 8004d14:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8004d16:	f7fb bad3 	b.w	80002c0 <_port_switch>
 8004d1a:	bf00      	nop
 8004d1c:	20000da0 	.word	0x20000da0

08004d20 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <chSchRescheduleS+0x14>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8004d26:	6892      	ldr	r2, [r2, #8]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d800      	bhi.n	8004d30 <chSchRescheduleS+0x10>
}
 8004d2e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8004d30:	f7ff bfd6 	b.w	8004ce0 <chSchDoReschedule>
 8004d34:	20000da0 	.word	0x20000da0
	...

08004d40 <chSemSignalWait.constprop.65>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	2320      	movs	r3, #32
 8004d44:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8004d48:	4c15      	ldr	r4, [pc, #84]	; (8004da0 <chSemSignalWait.constprop.65+0x60>)
 8004d4a:	68a3      	ldr	r3, [r4, #8]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	60a3      	str	r3, [r4, #8]
 8004d52:	dd1a      	ble.n	8004d8a <chSemSignalWait.constprop.65+0x4a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8004d54:	3b01      	subs	r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	60a3      	str	r3, [r4, #8]
 8004d5a:	db06      	blt.n	8004d6a <chSemSignalWait.constprop.65+0x2a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8004d5c:	f7ff ffe0 	bl	8004d20 <chSchRescheduleS>
    msg = MSG_OK;
 8004d60:	2000      	movs	r0, #0
 8004d62:	2300      	movs	r3, #0
 8004d64:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8004d68:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 8004d6a:	4a0e      	ldr	r2, [pc, #56]	; (8004da4 <chSemSignalWait.constprop.65+0x64>)
  tp->queue.prev             = tqp->prev;
 8004d6c:	6863      	ldr	r3, [r4, #4]
 8004d6e:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8004d70:	2005      	movs	r0, #5
 8004d72:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8004d76:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8004d78:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 8004d7a:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8004d7c:	f7fe fd30 	bl	80037e0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8004d80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004d82:	2300      	movs	r3, #0
 8004d84:	f383 8811 	msr	BASEPRI, r3
}
 8004d88:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 8004d8a:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8004d8c:	6803      	ldr	r3, [r0, #0]
 8004d8e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004d90:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8004d92:	f7fd f8bd 	bl	8001f10 <chSchReadyI>
 8004d96:	2200      	movs	r2, #0
 8004d98:	68a3      	ldr	r3, [r4, #8]
 8004d9a:	6242      	str	r2, [r0, #36]	; 0x24
 8004d9c:	e7da      	b.n	8004d54 <chSemSignalWait.constprop.65+0x14>
 8004d9e:	bf00      	nop
 8004da0:	2000105c 	.word	0x2000105c
 8004da4:	20000da0 	.word	0x20000da0
	...

08004db0 <rt_test_005_005_execute>:

static void rt_test_005_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_005_005_execute(void) {
 8004db0:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 8004db2:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <rt_test_005_005_execute+0x88>)

  /* [5.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8004db4:	4d21      	ldr	r5, [pc, #132]	; (8004e3c <rt_test_005_005_execute+0x8c>)
  return chThdGetSelfX()->prio;
 8004db6:	699a      	ldr	r2, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004db8:	4821      	ldr	r0, [pc, #132]	; (8004e40 <rt_test_005_005_execute+0x90>)
 8004dba:	6892      	ldr	r2, [r2, #8]
 8004dbc:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <rt_test_005_005_execute+0x94>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 8004dbe:	4c22      	ldr	r4, [pc, #136]	; (8004e48 <rt_test_005_005_execute+0x98>)
static void rt_test_005_005_execute(void) {
 8004dc0:	b083      	sub	sp, #12
  test_set_step(1);
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	6029      	str	r1, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	3201      	adds	r2, #1
 8004dca:	9100      	str	r1, [sp, #0]
 8004dcc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004dd0:	f7fe fc86 	bl	80036e0 <chThdCreateStatic>
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <rt_test_005_005_execute+0x9c>)
  }

  /* [5.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8004dd6:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004dd8:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8004dda:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8004ddc:	f7ff ffb0 	bl	8004d40 <chSemSignalWait.constprop.65>
 8004de0:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8004de2:	491b      	ldr	r1, [pc, #108]	; (8004e50 <rt_test_005_005_execute+0xa0>)
 8004de4:	1b00      	subs	r0, r0, r4
 8004de6:	fab0 f080 	clz	r0, r0
 8004dea:	0940      	lsrs	r0, r0, #5
 8004dec:	f7fc fcd8 	bl	80017a0 <_test_assert>
 8004df0:	b108      	cbz	r0, 8004df6 <rt_test_005_005_execute+0x46>
  {
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
}
 8004df2:	b003      	add	sp, #12
 8004df4:	bd30      	pop	{r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 8004df6:	68a0      	ldr	r0, [r4, #8]
 8004df8:	4916      	ldr	r1, [pc, #88]	; (8004e54 <rt_test_005_005_execute+0xa4>)
 8004dfa:	fab0 f080 	clz	r0, r0
 8004dfe:	0940      	lsrs	r0, r0, #5
 8004e00:	f7fc fcce 	bl	80017a0 <_test_assert>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1f4      	bne.n	8004df2 <rt_test_005_005_execute+0x42>
  test_set_step(3);
 8004e08:	2303      	movs	r3, #3
 8004e0a:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8004e0c:	f7ff ff98 	bl	8004d40 <chSemSignalWait.constprop.65>
 8004e10:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8004e12:	490f      	ldr	r1, [pc, #60]	; (8004e50 <rt_test_005_005_execute+0xa0>)
 8004e14:	1b00      	subs	r0, r0, r4
 8004e16:	fab0 f080 	clz	r0, r0
 8004e1a:	0940      	lsrs	r0, r0, #5
 8004e1c:	f7fc fcc0 	bl	80017a0 <_test_assert>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d1e6      	bne.n	8004df2 <rt_test_005_005_execute+0x42>
    test_assert(sem1.cnt == 0, "counter not zero");
 8004e24:	68a0      	ldr	r0, [r4, #8]
 8004e26:	490b      	ldr	r1, [pc, #44]	; (8004e54 <rt_test_005_005_execute+0xa4>)
 8004e28:	fab0 f080 	clz	r0, r0
 8004e2c:	0940      	lsrs	r0, r0, #5
}
 8004e2e:	b003      	add	sp, #12
 8004e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8004e34:	f7fc bcb4 	b.w	80017a0 <_test_assert>
 8004e38:	20000da0 	.word	0x20000da0
 8004e3c:	2000178c 	.word	0x2000178c
 8004e40:	20001078 	.word	0x20001078
 8004e44:	08004711 	.word	0x08004711
 8004e48:	2000105c 	.word	0x2000105c
 8004e4c:	200017a4 	.word	0x200017a4
 8004e50:	0800c044 	.word	0x0800c044
 8004e54:	0800c054 	.word	0x0800c054
	...

08004e60 <chMBReset.constprop.40>:
void chMBReset(mailbox_t *mbp) {
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	2320      	movs	r3, #32
 8004e64:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 8004e68:	4c0a      	ldr	r4, [pc, #40]	; (8004e94 <chMBReset.constprop.40+0x34>)
 8004e6a:	6823      	ldr	r3, [r4, #0]
  mbp->reset = true;
 8004e6c:	2201      	movs	r2, #1
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8004e6e:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 8004e72:	2500      	movs	r5, #0
  mbp->reset = true;
 8004e74:	7522      	strb	r2, [r4, #20]
  mbp->rdptr = mbp->buffer;
 8004e76:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 8004e7a:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8004e7c:	f7fd f8e8 	bl	8002050 <chThdDequeueAllI.constprop.69>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8004e80:	f104 0020 	add.w	r0, r4, #32
 8004e84:	f7fd f8e4 	bl	8002050 <chThdDequeueAllI.constprop.69>
  chSchRescheduleS();
 8004e88:	f7ff ff4a 	bl	8004d20 <chSchRescheduleS>
 8004e8c:	f385 8811 	msr	BASEPRI, r5
}
 8004e90:	bd38      	pop	{r3, r4, r5, pc}
 8004e92:	bf00      	nop
 8004e94:	20000c50 	.word	0x20000c50
	...

08004ea0 <oslib_test_001_003_teardown>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
 8004ea0:	f7ff bfde 	b.w	8004e60 <chMBReset.constprop.40>
	...

08004eb0 <oslib_test_001_002_teardown>:
 8004eb0:	f7ff bff6 	b.w	8004ea0 <oslib_test_001_003_teardown>
	...

08004ec0 <oslib_test_001_001_teardown>:
 8004ec0:	f7ff bfee 	b.w	8004ea0 <oslib_test_001_003_teardown>
	...

08004ed0 <chMBPostTimeout.constprop.38>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8004ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	460e      	mov	r6, r1
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	4c18      	ldr	r4, [pc, #96]	; (8004f40 <chMBPostTimeout.constprop.38+0x70>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004ee0:	f104 0518 	add.w	r5, r4, #24
 8004ee4:	e00a      	b.n	8004efc <chMBPostTimeout.constprop.38+0x2c>
 8004ee6:	e9d4 7200 	ldrd	r7, r2, [r4]
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	eba2 0e07 	sub.w	lr, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004ef0:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 8004ef4:	d10e      	bne.n	8004f14 <chMBPostTimeout.constprop.38+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004ef6:	f7fe fe3b 	bl	8003b70 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8004efa:	b930      	cbnz	r0, 8004f0a <chMBPostTimeout.constprop.38+0x3a>
    if (mbp->reset) {
 8004efc:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
    if (mbp->reset) {
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ef      	beq.n	8004ee6 <chMBPostTimeout.constprop.38+0x16>
      return MSG_RESET;
 8004f06:	f06f 0001 	mvn.w	r0, #1
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f383 8811 	msr	BASEPRI, r3
}
 8004f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 8004f14:	68a0      	ldr	r0, [r4, #8]
 8004f16:	1d01      	adds	r1, r0, #4
 8004f18:	60a1      	str	r1, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 8004f1a:	428a      	cmp	r2, r1
      *mbp->wrptr++ = msg;
 8004f1c:	f8c0 8000 	str.w	r8, [r0]
      mbp->cnt++;
 8004f20:	f103 0301 	add.w	r3, r3, #1
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004f24:	4807      	ldr	r0, [pc, #28]	; (8004f44 <chMBPostTimeout.constprop.38+0x74>)
        mbp->wrptr = mbp->buffer;
 8004f26:	bf98      	it	ls
 8004f28:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
 8004f2a:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004f2c:	f7fd f808 	bl	8001f40 <chThdDequeueNextI.constprop.90>
      chSchRescheduleS();
 8004f30:	f7ff fef6 	bl	8004d20 <chSchRescheduleS>
      return MSG_OK;
 8004f34:	2000      	movs	r0, #0
 8004f36:	2300      	movs	r3, #0
 8004f38:	f383 8811 	msr	BASEPRI, r3
}
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	20000c50 	.word	0x20000c50
 8004f44:	20000c70 	.word	0x20000c70
	...

08004f50 <chMBPostAheadTimeout.constprop.35>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8004f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f54:	2320      	movs	r3, #32
 8004f56:	4680      	mov	r8, r0
 8004f58:	460e      	mov	r6, r1
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	4c18      	ldr	r4, [pc, #96]	; (8004fc0 <chMBPostAheadTimeout.constprop.35+0x70>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004f60:	f104 0518 	add.w	r5, r4, #24
 8004f64:	e00a      	b.n	8004f7c <chMBPostAheadTimeout.constprop.35+0x2c>
 8004f66:	e9d4 2700 	ldrd	r2, r7, [r4]
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	eba7 0e02 	sub.w	lr, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004f70:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 8004f74:	d10e      	bne.n	8004f94 <chMBPostAheadTimeout.constprop.35+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004f76:	f7fe fdfb 	bl	8003b70 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8004f7a:	b930      	cbnz	r0, 8004f8a <chMBPostAheadTimeout.constprop.35+0x3a>
    if (mbp->reset) {
 8004f7c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
    if (mbp->reset) {
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ef      	beq.n	8004f66 <chMBPostAheadTimeout.constprop.35+0x16>
      return MSG_RESET;
 8004f86:	f06f 0001 	mvn.w	r0, #1
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f383 8811 	msr	BASEPRI, r3
}
 8004f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8004f94:	68e1      	ldr	r1, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004f96:	480b      	ldr	r0, [pc, #44]	; (8004fc4 <chMBPostAheadTimeout.constprop.35+0x74>)
      if (--mbp->rdptr < mbp->buffer) {
 8004f98:	3904      	subs	r1, #4
 8004f9a:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 8004f9c:	bf88      	it	hi
 8004f9e:	1f39      	subhi	r1, r7, #4
 8004fa0:	60e1      	str	r1, [r4, #12]
      mbp->cnt++;
 8004fa2:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 8004fa4:	f8c1 8000 	str.w	r8, [r1]
      mbp->cnt++;
 8004fa8:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004faa:	f7fc ffc9 	bl	8001f40 <chThdDequeueNextI.constprop.90>
      chSchRescheduleS();
 8004fae:	f7ff feb7 	bl	8004d20 <chSchRescheduleS>
      return MSG_OK;
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f383 8811 	msr	BASEPRI, r3
}
 8004fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000c50 	.word	0x20000c50
 8004fc4:	20000c70 	.word	0x20000c70
	...

08004fd0 <chMBFetchTimeout.constprop.32>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	460e      	mov	r6, r1
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	4c15      	ldr	r4, [pc, #84]	; (8005034 <chMBFetchTimeout.constprop.32+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8004fde:	18e5      	adds	r5, r4, r3
 8004fe0:	e004      	b.n	8004fec <chMBFetchTimeout.constprop.32+0x1c>
 8004fe2:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8004fe4:	b96b      	cbnz	r3, 8005002 <chMBFetchTimeout.constprop.32+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8004fe6:	f7fe fdc3 	bl	8003b70 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8004fea:	b930      	cbnz	r0, 8004ffa <chMBFetchTimeout.constprop.32+0x2a>
    if (mbp->reset) {
 8004fec:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
    if (mbp->reset) {
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f5      	beq.n	8004fe2 <chMBFetchTimeout.constprop.32+0x12>
      return MSG_RESET;
 8004ff6:	f06f 0001 	mvn.w	r0, #1
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f383 8811 	msr	BASEPRI, r3
}
 8005000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8005002:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8005004:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8005006:	6810      	ldr	r0, [r2, #0]
 8005008:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 800500a:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 800500c:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 800500e:	f103 33ff 	add.w	r3, r3, #4294967295
      *msgp = *mbp->rdptr++;
 8005012:	6038      	str	r0, [r7, #0]
        mbp->rdptr = mbp->buffer;
 8005014:	bf28      	it	cs
 8005016:	6822      	ldrcs	r2, [r4, #0]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8005018:	4807      	ldr	r0, [pc, #28]	; (8005038 <chMBFetchTimeout.constprop.32+0x68>)
        mbp->rdptr = mbp->buffer;
 800501a:	bf28      	it	cs
 800501c:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 800501e:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8005020:	f7fc ff8e 	bl	8001f40 <chThdDequeueNextI.constprop.90>
      chSchRescheduleS();
 8005024:	f7ff fe7c 	bl	8004d20 <chSchRescheduleS>
      return MSG_OK;
 8005028:	2000      	movs	r0, #0
 800502a:	2300      	movs	r3, #0
 800502c:	f383 8811 	msr	BASEPRI, r3
}
 8005030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005032:	bf00      	nop
 8005034:	20000c50 	.word	0x20000c50
 8005038:	20000c68 	.word	0x20000c68
 800503c:	00000000 	.word	0x00000000

08005040 <oslib_test_001_003_execute>:
}

static void oslib_test_001_003_execute(void) {
 8005040:	b570      	push	{r4, r5, r6, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
 8005042:	4e40      	ldr	r6, [pc, #256]	; (8005144 <oslib_test_001_003_execute+0x104>)
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005044:	4d40      	ldr	r5, [pc, #256]	; (8005148 <oslib_test_001_003_execute+0x108>)
  test_set_step(1);
 8005046:	2301      	movs	r3, #1
static void oslib_test_001_003_execute(void) {
 8005048:	b082      	sub	sp, #8
  test_set_step(1);
 800504a:	6033      	str	r3, [r6, #0]
 800504c:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800504e:	f04f 31ff 	mov.w	r1, #4294967295
 8005052:	4620      	mov	r0, r4
 8005054:	f7ff ff3c 	bl	8004ed0 <chMBPostTimeout.constprop.38>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005058:	fab0 f080 	clz	r0, r0
 800505c:	4629      	mov	r1, r5
 800505e:	0940      	lsrs	r0, r0, #5
 8005060:	f7fc fb9e 	bl	80017a0 <_test_assert>
 8005064:	3401      	adds	r4, #1
 8005066:	b988      	cbnz	r0, 800508c <oslib_test_001_003_execute+0x4c>
    for (i = 0; i < MB_SIZE; i++) {
 8005068:	2c46      	cmp	r4, #70	; 0x46
 800506a:	d1f0      	bne.n	800504e <oslib_test_001_003_execute+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 800506c:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800506e:	2101      	movs	r1, #1
 8005070:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
 8005072:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8005074:	f7ff ff2c 	bl	8004ed0 <chMBPostTimeout.constprop.38>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005078:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800507c:	fab0 f080 	clz	r0, r0
 8005080:	4931      	ldr	r1, [pc, #196]	; (8005148 <oslib_test_001_003_execute+0x108>)
 8005082:	0940      	lsrs	r0, r0, #5
 8005084:	f7fc fb8c 	bl	80017a0 <_test_assert>
 8005088:	4604      	mov	r4, r0
 800508a:	b108      	cbz	r0, 8005090 <oslib_test_001_003_execute+0x50>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 800508c:	b002      	add	sp, #8
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	2520      	movs	r5, #32
 8005092:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 8005096:	2058      	movs	r0, #88	; 0x58
 8005098:	f7fc ff62 	bl	8001f60 <chMBPostI.constprop.37>
 800509c:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80050a0:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80050a4:	fab0 f080 	clz	r0, r0
 80050a8:	4927      	ldr	r1, [pc, #156]	; (8005148 <oslib_test_001_003_execute+0x108>)
 80050aa:	0940      	lsrs	r0, r0, #5
 80050ac:	f7fc fb78 	bl	80017a0 <_test_assert>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d1eb      	bne.n	800508c <oslib_test_001_003_execute+0x4c>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80050b4:	2101      	movs	r1, #1
 80050b6:	2058      	movs	r0, #88	; 0x58
 80050b8:	f7ff ff4a 	bl	8004f50 <chMBPostAheadTimeout.constprop.35>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80050bc:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80050c0:	fab0 f080 	clz	r0, r0
 80050c4:	4920      	ldr	r1, [pc, #128]	; (8005148 <oslib_test_001_003_execute+0x108>)
 80050c6:	0940      	lsrs	r0, r0, #5
 80050c8:	f7fc fb6a 	bl	80017a0 <_test_assert>
 80050cc:	4604      	mov	r4, r0
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d1dc      	bne.n	800508c <oslib_test_001_003_execute+0x4c>
 80050d2:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 80050d6:	2058      	movs	r0, #88	; 0x58
 80050d8:	f7fc ff6a 	bl	8001fb0 <chMBPostAheadI.constprop.34>
 80050dc:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80050e0:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80050e4:	fab0 f080 	clz	r0, r0
 80050e8:	4917      	ldr	r1, [pc, #92]	; (8005148 <oslib_test_001_003_execute+0x108>)
 80050ea:	0940      	lsrs	r0, r0, #5
 80050ec:	f7fc fb58 	bl	80017a0 <_test_assert>
 80050f0:	4604      	mov	r4, r0
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d1ca      	bne.n	800508c <oslib_test_001_003_execute+0x4c>
  test_set_step(3);
 80050f6:	2303      	movs	r3, #3
 80050f8:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 80050fa:	f7ff feb1 	bl	8004e60 <chMBReset.constprop.40>
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <oslib_test_001_003_execute+0x10c>)
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 8005100:	2101      	movs	r1, #1
 8005102:	751c      	strb	r4, [r3, #20]
 8005104:	a801      	add	r0, sp, #4
  test_set_step(4);
 8005106:	2304      	movs	r3, #4
 8005108:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800510a:	f7ff ff61 	bl	8004fd0 <chMBFetchTimeout.constprop.32>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800510e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8005112:	fab0 f080 	clz	r0, r0
 8005116:	490c      	ldr	r1, [pc, #48]	; (8005148 <oslib_test_001_003_execute+0x108>)
 8005118:	0940      	lsrs	r0, r0, #5
 800511a:	f7fc fb41 	bl	80017a0 <_test_assert>
 800511e:	4604      	mov	r4, r0
 8005120:	2800      	cmp	r0, #0
 8005122:	d1b3      	bne.n	800508c <oslib_test_001_003_execute+0x4c>
 8005124:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 8005128:	a801      	add	r0, sp, #4
 800512a:	f7fc ff69 	bl	8002000 <chMBFetchI.constprop.31>
 800512e:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005132:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8005136:	fab0 f080 	clz	r0, r0
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <oslib_test_001_003_execute+0x108>)
 800513c:	0940      	lsrs	r0, r0, #5
 800513e:	f7fc fb2f 	bl	80017a0 <_test_assert>
 8005142:	e7a3      	b.n	800508c <oslib_test_001_003_execute+0x4c>
 8005144:	2000178c 	.word	0x2000178c
 8005148:	0800afd0 	.word	0x0800afd0
 800514c:	20000c50 	.word	0x20000c50

08005150 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8005154:	4fad      	ldr	r7, [pc, #692]	; (800540c <oslib_test_001_002_execute+0x2bc>)
 8005156:	f04f 0801 	mov.w	r8, #1
static void oslib_test_001_002_execute(void) {
 800515a:	b082      	sub	sp, #8
  test_set_step(1);
 800515c:	f8c7 8000 	str.w	r8, [r7]
 8005160:	2620      	movs	r6, #32
 8005162:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8005166:	4caa      	ldr	r4, [pc, #680]	; (8005410 <oslib_test_001_002_execute+0x2c0>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8005168:	49aa      	ldr	r1, [pc, #680]	; (8005414 <oslib_test_001_002_execute+0x2c4>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800516a:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800516c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005170:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005172:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8005176:	f1a0 0004 	sub.w	r0, r0, #4
 800517a:	fab0 f080 	clz	r0, r0
 800517e:	0940      	lsrs	r0, r0, #5
 8005180:	f7fc fb0e 	bl	80017a0 <_test_assert>
 8005184:	b128      	cbz	r0, 8005192 <oslib_test_001_002_execute+0x42>
 8005186:	2300      	movs	r3, #0
 8005188:	f383 8811 	msr	BASEPRI, r3
}
 800518c:	b002      	add	sp, #8
 800518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005192:	4605      	mov	r5, r0
 8005194:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8005198:	2302      	movs	r3, #2
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 80051a0:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 80051a2:	6120      	str	r0, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80051a4:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 80051a8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 80051ac:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80051b0:	f7fc ff4e 	bl	8002050 <chThdDequeueAllI.constprop.69>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80051b4:	f104 0020 	add.w	r0, r4, #32
 80051b8:	f7fc ff4a 	bl	8002050 <chThdDequeueAllI.constprop.69>
 80051bc:	f385 8811 	msr	BASEPRI, r5
 80051c0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80051c4:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80051c8:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80051ca:	4993      	ldr	r1, [pc, #588]	; (8005418 <oslib_test_001_002_execute+0x2c8>)
  return (size_t)(mbp->top - mbp->buffer);
 80051cc:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80051ce:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80051d2:	f1a0 0004 	sub.w	r0, r0, #4
 80051d6:	fab0 f080 	clz	r0, r0
 80051da:	0940      	lsrs	r0, r0, #5
 80051dc:	f7fc fae0 	bl	80017a0 <_test_assert>
 80051e0:	4680      	mov	r8, r0
 80051e2:	b120      	cbz	r0, 80051ee <oslib_test_001_002_execute+0x9e>
 80051e4:	f385 8811 	msr	BASEPRI, r5
}
 80051e8:	b002      	add	sp, #8
 80051ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ee:	f380 8811 	msr	BASEPRI, r0
 80051f2:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80051f6:	6920      	ldr	r0, [r4, #16]
 80051f8:	4988      	ldr	r1, [pc, #544]	; (800541c <oslib_test_001_002_execute+0x2cc>)
 80051fa:	fab0 f080 	clz	r0, r0
 80051fe:	0940      	lsrs	r0, r0, #5
 8005200:	f7fc face 	bl	80017a0 <_test_assert>
 8005204:	4605      	mov	r5, r0
 8005206:	b110      	cbz	r0, 800520e <oslib_test_001_002_execute+0xbe>
 8005208:	f388 8811 	msr	BASEPRI, r8
 800520c:	e7be      	b.n	800518c <oslib_test_001_002_execute+0x3c>
 800520e:	f380 8811 	msr	BASEPRI, r0
 8005212:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8005216:	6820      	ldr	r0, [r4, #0]
 8005218:	68a3      	ldr	r3, [r4, #8]
 800521a:	4981      	ldr	r1, [pc, #516]	; (8005420 <oslib_test_001_002_execute+0x2d0>)
 800521c:	1ac0      	subs	r0, r0, r3
 800521e:	fab0 f080 	clz	r0, r0
 8005222:	0940      	lsrs	r0, r0, #5
 8005224:	f7fc fabc 	bl	80017a0 <_test_assert>
 8005228:	4680      	mov	r8, r0
 800522a:	2800      	cmp	r0, #0
 800522c:	d1da      	bne.n	80051e4 <oslib_test_001_002_execute+0x94>
 800522e:	f380 8811 	msr	BASEPRI, r0
 8005232:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	68e3      	ldr	r3, [r4, #12]
 800523a:	497a      	ldr	r1, [pc, #488]	; (8005424 <oslib_test_001_002_execute+0x2d4>)
 800523c:	1ac0      	subs	r0, r0, r3
 800523e:	fab0 f080 	clz	r0, r0
 8005242:	0940      	lsrs	r0, r0, #5
 8005244:	f7fc faac 	bl	80017a0 <_test_assert>
 8005248:	2800      	cmp	r0, #0
 800524a:	d1dd      	bne.n	8005208 <oslib_test_001_002_execute+0xb8>
 800524c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8005250:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005252:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8005428 <oslib_test_001_002_execute+0x2d8>
  mbp->reset = false;
 8005256:	7520      	strb	r0, [r4, #20]
 8005258:	4680      	mov	r8, r0
  test_set_step(3);
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	2542      	movs	r5, #66	; 0x42
 800525e:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 8005262:	4628      	mov	r0, r5
 8005264:	f7fc fe7c 	bl	8001f60 <chMBPostI.constprop.37>
 8005268:	f388 8811 	msr	BASEPRI, r8
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800526c:	fab0 f080 	clz	r0, r0
 8005270:	0940      	lsrs	r0, r0, #5
 8005272:	4651      	mov	r1, sl
 8005274:	f7fc fa94 	bl	80017a0 <_test_assert>
 8005278:	3501      	adds	r5, #1
 800527a:	4681      	mov	r9, r0
 800527c:	2800      	cmp	r0, #0
 800527e:	d185      	bne.n	800518c <oslib_test_001_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8005280:	2d45      	cmp	r5, #69	; 0x45
 8005282:	d1ec      	bne.n	800525e <oslib_test_001_002_execute+0x10e>
 8005284:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 8005288:	2041      	movs	r0, #65	; 0x41
 800528a:	f7fc fe91 	bl	8001fb0 <chMBPostAheadI.constprop.34>
 800528e:	f389 8811 	msr	BASEPRI, r9
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005292:	fab0 f080 	clz	r0, r0
 8005296:	0940      	lsrs	r0, r0, #5
 8005298:	4963      	ldr	r1, [pc, #396]	; (8005428 <oslib_test_001_002_execute+0x2d8>)
 800529a:	f7fc fa81 	bl	80017a0 <_test_assert>
 800529e:	4605      	mov	r5, r0
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f47f af73 	bne.w	800518c <oslib_test_001_002_execute+0x3c>
  test_set_step(4);
 80052a6:	f04f 0804 	mov.w	r8, #4
 80052aa:	f8c7 8000 	str.w	r8, [r7]
 80052ae:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80052b2:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80052b6:	6922      	ldr	r2, [r4, #16]
 80052b8:	1a5b      	subs	r3, r3, r1
 80052ba:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80052be:	bf0c      	ite	eq
 80052c0:	2001      	moveq	r0, #1
 80052c2:	2000      	movne	r0, #0
 80052c4:	4959      	ldr	r1, [pc, #356]	; (800542c <oslib_test_001_002_execute+0x2dc>)
 80052c6:	f7fc fa6b 	bl	80017a0 <_test_assert>
 80052ca:	4681      	mov	r9, r0
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d189      	bne.n	80051e4 <oslib_test_001_002_execute+0x94>
 80052d0:	f380 8811 	msr	BASEPRI, r0
 80052d4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80052d8:	6920      	ldr	r0, [r4, #16]
 80052da:	4955      	ldr	r1, [pc, #340]	; (8005430 <oslib_test_001_002_execute+0x2e0>)
 80052dc:	f1a0 0004 	sub.w	r0, r0, #4
 80052e0:	fab0 f080 	clz	r0, r0
 80052e4:	0940      	lsrs	r0, r0, #5
 80052e6:	f7fc fa5b 	bl	80017a0 <_test_assert>
 80052ea:	4605      	mov	r5, r0
 80052ec:	b110      	cbz	r0, 80052f4 <oslib_test_001_002_execute+0x1a4>
 80052ee:	f389 8811 	msr	BASEPRI, r9
 80052f2:	e74b      	b.n	800518c <oslib_test_001_002_execute+0x3c>
 80052f4:	f380 8811 	msr	BASEPRI, r0
 80052f8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80052fc:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8005300:	1ac6      	subs	r6, r0, r3
 8005302:	4270      	negs	r0, r6
 8005304:	4170      	adcs	r0, r6
 8005306:	494b      	ldr	r1, [pc, #300]	; (8005434 <oslib_test_001_002_execute+0x2e4>)
 8005308:	f7fc fa4a 	bl	80017a0 <_test_assert>
 800530c:	2800      	cmp	r0, #0
 800530e:	f47f af69 	bne.w	80051e4 <oslib_test_001_002_execute+0x94>
 8005312:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 8005316:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005318:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8005428 <oslib_test_001_002_execute+0x2d8>
  test_set_step(5);
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	4645      	mov	r5, r8
 8005320:	4606      	mov	r6, r0
 8005322:	f04f 0820 	mov.w	r8, #32
 8005326:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 800532a:	a801      	add	r0, sp, #4
 800532c:	f7fc fe68 	bl	8002000 <chMBFetchI.constprop.31>
 8005330:	f386 8811 	msr	BASEPRI, r6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005334:	fab0 f080 	clz	r0, r0
 8005338:	0940      	lsrs	r0, r0, #5
 800533a:	4649      	mov	r1, r9
 800533c:	f7fc fa30 	bl	80017a0 <_test_assert>
 8005340:	2800      	cmp	r0, #0
 8005342:	f47f af23 	bne.w	800518c <oslib_test_001_002_execute+0x3c>
      test_emit_token(msg2);
 8005346:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800534a:	f7fc fac9 	bl	80018e0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800534e:	3d01      	subs	r5, #1
 8005350:	d1e9      	bne.n	8005326 <oslib_test_001_002_execute+0x1d6>
    test_assert_sequence("ABCD", "wrong get sequence");
 8005352:	4939      	ldr	r1, [pc, #228]	; (8005438 <oslib_test_001_002_execute+0x2e8>)
 8005354:	4839      	ldr	r0, [pc, #228]	; (800543c <oslib_test_001_002_execute+0x2ec>)
 8005356:	f7fc fb3b 	bl	80019d0 <_test_assert_sequence>
 800535a:	2800      	cmp	r0, #0
 800535c:	f47f af16 	bne.w	800518c <oslib_test_001_002_execute+0x3c>
  test_set_step(6);
 8005360:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8005362:	f04f 31ff 	mov.w	r1, #4294967295
 8005366:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 8005368:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800536a:	f7ff fdb1 	bl	8004ed0 <chMBPostTimeout.constprop.38>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800536e:	fab0 f080 	clz	r0, r0
 8005372:	0940      	lsrs	r0, r0, #5
 8005374:	492c      	ldr	r1, [pc, #176]	; (8005428 <oslib_test_001_002_execute+0x2d8>)
 8005376:	f7fc fa13 	bl	80017a0 <_test_assert>
 800537a:	2800      	cmp	r0, #0
 800537c:	f47f af06 	bne.w	800518c <oslib_test_001_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8005380:	f04f 31ff 	mov.w	r1, #4294967295
 8005384:	a801      	add	r0, sp, #4
 8005386:	f7ff fe23 	bl	8004fd0 <chMBFetchTimeout.constprop.32>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800538a:	fab0 f080 	clz	r0, r0
 800538e:	0940      	lsrs	r0, r0, #5
 8005390:	4925      	ldr	r1, [pc, #148]	; (8005428 <oslib_test_001_002_execute+0x2d8>)
 8005392:	f7fc fa05 	bl	80017a0 <_test_assert>
 8005396:	2800      	cmp	r0, #0
 8005398:	f47f aef8 	bne.w	800518c <oslib_test_001_002_execute+0x3c>
  test_set_step(7);
 800539c:	2307      	movs	r3, #7
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	f388 8811 	msr	BASEPRI, r8
 80053a4:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80053a8:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80053aa:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80053ac:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80053b0:	1f19      	subs	r1, r3, #4
 80053b2:	4248      	negs	r0, r1
 80053b4:	4148      	adcs	r0, r1
 80053b6:	4918      	ldr	r1, [pc, #96]	; (8005418 <oslib_test_001_002_execute+0x2c8>)
 80053b8:	f7fc f9f2 	bl	80017a0 <_test_assert>
 80053bc:	2800      	cmp	r0, #0
 80053be:	f47f af11 	bne.w	80051e4 <oslib_test_001_002_execute+0x94>
 80053c2:	f385 8811 	msr	BASEPRI, r5
 80053c6:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80053ca:	6920      	ldr	r0, [r4, #16]
 80053cc:	4913      	ldr	r1, [pc, #76]	; (800541c <oslib_test_001_002_execute+0x2cc>)
 80053ce:	fab0 f080 	clz	r0, r0
 80053d2:	0940      	lsrs	r0, r0, #5
 80053d4:	f7fc f9e4 	bl	80017a0 <_test_assert>
 80053d8:	2800      	cmp	r0, #0
 80053da:	f47f af03 	bne.w	80051e4 <oslib_test_001_002_execute+0x94>
 80053de:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	490e      	ldr	r1, [pc, #56]	; (8005420 <oslib_test_001_002_execute+0x2d0>)
 80053e8:	1ac2      	subs	r2, r0, r3
 80053ea:	4250      	negs	r0, r2
 80053ec:	4150      	adcs	r0, r2
 80053ee:	f7fc f9d7 	bl	80017a0 <_test_assert>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f47f aeca 	bne.w	800518c <oslib_test_001_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	68e3      	ldr	r3, [r4, #12]
 80053fc:	4909      	ldr	r1, [pc, #36]	; (8005424 <oslib_test_001_002_execute+0x2d4>)
 80053fe:	1ac3      	subs	r3, r0, r3
 8005400:	4258      	negs	r0, r3
 8005402:	4158      	adcs	r0, r3
 8005404:	f7fc f9cc 	bl	80017a0 <_test_assert>
 8005408:	e6c0      	b.n	800518c <oslib_test_001_002_execute+0x3c>
 800540a:	bf00      	nop
 800540c:	2000178c 	.word	0x2000178c
 8005410:	20000c50 	.word	0x20000c50
 8005414:	0800af08 	.word	0x0800af08
 8005418:	0800af14 	.word	0x0800af14
 800541c:	0800af20 	.word	0x0800af20
 8005420:	0800af2c 	.word	0x0800af2c
 8005424:	0800af50 	.word	0x0800af50
 8005428:	0800afd0 	.word	0x0800afd0
 800542c:	0800af74 	.word	0x0800af74
 8005430:	0800af80 	.word	0x0800af80
 8005434:	0800af8c 	.word	0x0800af8c
 8005438:	0800afa4 	.word	0x0800afa4
 800543c:	0800afb8 	.word	0x0800afb8

08005440 <oslib_test_001_001_execute>:
static void oslib_test_001_001_execute(void) {
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005444:	4fb3      	ldr	r7, [pc, #716]	; (8005714 <oslib_test_001_001_execute+0x2d4>)
 8005446:	2301      	movs	r3, #1
static void oslib_test_001_001_execute(void) {
 8005448:	b082      	sub	sp, #8
  test_set_step(1);
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	2620      	movs	r6, #32
 800544e:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8005452:	4cb1      	ldr	r4, [pc, #708]	; (8005718 <oslib_test_001_001_execute+0x2d8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8005454:	49b1      	ldr	r1, [pc, #708]	; (800571c <oslib_test_001_001_execute+0x2dc>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005456:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8005458:	e9d4 2300 	ldrd	r2, r3, [r4]
 800545c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800545e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8005462:	f1a0 0004 	sub.w	r0, r0, #4
 8005466:	fab0 f080 	clz	r0, r0
 800546a:	0940      	lsrs	r0, r0, #5
 800546c:	f7fc f998 	bl	80017a0 <_test_assert>
 8005470:	b128      	cbz	r0, 800547e <oslib_test_001_001_execute+0x3e>
 8005472:	2300      	movs	r3, #0
 8005474:	f383 8811 	msr	BASEPRI, r3
}
 8005478:	b002      	add	sp, #8
 800547a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800547e:	4605      	mov	r5, r0
 8005480:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8005484:	2302      	movs	r3, #2
 8005486:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8005488:	f7ff fcea 	bl	8004e60 <chMBReset.constprop.40>
 800548c:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8005490:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005494:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005496:	49a2      	ldr	r1, [pc, #648]	; (8005720 <oslib_test_001_001_execute+0x2e0>)
  return (size_t)(mbp->top - mbp->buffer);
 8005498:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800549a:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800549e:	f1a0 0004 	sub.w	r0, r0, #4
 80054a2:	fab0 f080 	clz	r0, r0
 80054a6:	0940      	lsrs	r0, r0, #5
 80054a8:	f7fc f97a 	bl	80017a0 <_test_assert>
 80054ac:	4680      	mov	r8, r0
 80054ae:	b120      	cbz	r0, 80054ba <oslib_test_001_001_execute+0x7a>
 80054b0:	f385 8811 	msr	BASEPRI, r5
}
 80054b4:	b002      	add	sp, #8
 80054b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ba:	f380 8811 	msr	BASEPRI, r0
 80054be:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80054c2:	6920      	ldr	r0, [r4, #16]
 80054c4:	4997      	ldr	r1, [pc, #604]	; (8005724 <oslib_test_001_001_execute+0x2e4>)
 80054c6:	fab0 f080 	clz	r0, r0
 80054ca:	0940      	lsrs	r0, r0, #5
 80054cc:	f7fc f968 	bl	80017a0 <_test_assert>
 80054d0:	4605      	mov	r5, r0
 80054d2:	b110      	cbz	r0, 80054da <oslib_test_001_001_execute+0x9a>
 80054d4:	f388 8811 	msr	BASEPRI, r8
 80054d8:	e7ce      	b.n	8005478 <oslib_test_001_001_execute+0x38>
 80054da:	f380 8811 	msr	BASEPRI, r0
 80054de:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	68a3      	ldr	r3, [r4, #8]
 80054e6:	4990      	ldr	r1, [pc, #576]	; (8005728 <oslib_test_001_001_execute+0x2e8>)
 80054e8:	1ac0      	subs	r0, r0, r3
 80054ea:	fab0 f080 	clz	r0, r0
 80054ee:	0940      	lsrs	r0, r0, #5
 80054f0:	f7fc f956 	bl	80017a0 <_test_assert>
 80054f4:	4680      	mov	r8, r0
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d1da      	bne.n	80054b0 <oslib_test_001_001_execute+0x70>
 80054fa:	f380 8811 	msr	BASEPRI, r0
 80054fe:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	68e3      	ldr	r3, [r4, #12]
 8005506:	4989      	ldr	r1, [pc, #548]	; (800572c <oslib_test_001_001_execute+0x2ec>)
 8005508:	1ac0      	subs	r0, r0, r3
 800550a:	fab0 f080 	clz	r0, r0
 800550e:	0940      	lsrs	r0, r0, #5
 8005510:	f7fc f946 	bl	80017a0 <_test_assert>
 8005514:	2800      	cmp	r0, #0
 8005516:	d1dd      	bne.n	80054d4 <oslib_test_001_001_execute+0x94>
 8005518:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800551c:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800551e:	f04f 31ff 	mov.w	r1, #4294967295
  test_set_step(3);
 8005522:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8005524:	f7ff fcd4 	bl	8004ed0 <chMBPostTimeout.constprop.38>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8005528:	1c85      	adds	r5, r0, #2
 800552a:	bf14      	ite	ne
 800552c:	2000      	movne	r0, #0
 800552e:	2001      	moveq	r0, #1
 8005530:	497f      	ldr	r1, [pc, #508]	; (8005730 <oslib_test_001_001_execute+0x2f0>)
 8005532:	f7fc f935 	bl	80017a0 <_test_assert>
 8005536:	2800      	cmp	r0, #0
 8005538:	d19e      	bne.n	8005478 <oslib_test_001_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800553a:	f04f 31ff 	mov.w	r1, #4294967295
 800553e:	f7ff fd07 	bl	8004f50 <chMBPostAheadTimeout.constprop.35>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8005542:	1c82      	adds	r2, r0, #2
 8005544:	bf14      	ite	ne
 8005546:	2000      	movne	r0, #0
 8005548:	2001      	moveq	r0, #1
 800554a:	4979      	ldr	r1, [pc, #484]	; (8005730 <oslib_test_001_001_execute+0x2f0>)
 800554c:	f7fc f928 	bl	80017a0 <_test_assert>
 8005550:	2800      	cmp	r0, #0
 8005552:	d191      	bne.n	8005478 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8005554:	f04f 31ff 	mov.w	r1, #4294967295
 8005558:	a801      	add	r0, sp, #4
 800555a:	f7ff fd39 	bl	8004fd0 <chMBFetchTimeout.constprop.32>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800555e:	1c83      	adds	r3, r0, #2
 8005560:	bf14      	ite	ne
 8005562:	2000      	movne	r0, #0
 8005564:	2001      	moveq	r0, #1
 8005566:	4972      	ldr	r1, [pc, #456]	; (8005730 <oslib_test_001_001_execute+0x2f0>)
 8005568:	f7fc f91a 	bl	80017a0 <_test_assert>
 800556c:	2800      	cmp	r0, #0
 800556e:	d183      	bne.n	8005478 <oslib_test_001_001_execute+0x38>
  test_set_step(4);
 8005570:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005572:	4e70      	ldr	r6, [pc, #448]	; (8005734 <oslib_test_001_001_execute+0x2f4>)
  mbp->reset = false;
 8005574:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800557a:	f04f 31ff 	mov.w	r1, #4294967295
 800557e:	4628      	mov	r0, r5
 8005580:	f7ff fca6 	bl	8004ed0 <chMBPostTimeout.constprop.38>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005584:	fab0 f080 	clz	r0, r0
 8005588:	4631      	mov	r1, r6
 800558a:	0940      	lsrs	r0, r0, #5
 800558c:	f7fc f908 	bl	80017a0 <_test_assert>
 8005590:	3501      	adds	r5, #1
 8005592:	2800      	cmp	r0, #0
 8005594:	f47f af70 	bne.w	8005478 <oslib_test_001_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8005598:	2d45      	cmp	r5, #69	; 0x45
 800559a:	d1ee      	bne.n	800557a <oslib_test_001_001_execute+0x13a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 800559c:	f04f 31ff 	mov.w	r1, #4294967295
 80055a0:	2041      	movs	r0, #65	; 0x41
 80055a2:	f7ff fcd5 	bl	8004f50 <chMBPostAheadTimeout.constprop.35>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80055a6:	fab0 f080 	clz	r0, r0
 80055aa:	0940      	lsrs	r0, r0, #5
 80055ac:	4961      	ldr	r1, [pc, #388]	; (8005734 <oslib_test_001_001_execute+0x2f4>)
 80055ae:	f7fc f8f7 	bl	80017a0 <_test_assert>
 80055b2:	4605      	mov	r5, r0
 80055b4:	2800      	cmp	r0, #0
 80055b6:	f47f af5f 	bne.w	8005478 <oslib_test_001_001_execute+0x38>
  test_set_step(5);
 80055ba:	2305      	movs	r3, #5
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	2620      	movs	r6, #32
 80055c0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80055c4:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80055c8:	6922      	ldr	r2, [r4, #16]
 80055ca:	1a5b      	subs	r3, r3, r1
 80055cc:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80055d0:	bf0c      	ite	eq
 80055d2:	2001      	moveq	r0, #1
 80055d4:	2000      	movne	r0, #0
 80055d6:	4958      	ldr	r1, [pc, #352]	; (8005738 <oslib_test_001_001_execute+0x2f8>)
 80055d8:	f7fc f8e2 	bl	80017a0 <_test_assert>
 80055dc:	4680      	mov	r8, r0
 80055de:	2800      	cmp	r0, #0
 80055e0:	f47f af66 	bne.w	80054b0 <oslib_test_001_001_execute+0x70>
 80055e4:	f380 8811 	msr	BASEPRI, r0
 80055e8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80055ec:	6920      	ldr	r0, [r4, #16]
 80055ee:	4953      	ldr	r1, [pc, #332]	; (800573c <oslib_test_001_001_execute+0x2fc>)
 80055f0:	f1a0 0c04 	sub.w	ip, r0, #4
 80055f4:	f1dc 0000 	rsbs	r0, ip, #0
 80055f8:	eb40 000c 	adc.w	r0, r0, ip
 80055fc:	f7fc f8d0 	bl	80017a0 <_test_assert>
 8005600:	4605      	mov	r5, r0
 8005602:	2800      	cmp	r0, #0
 8005604:	f47f af66 	bne.w	80054d4 <oslib_test_001_001_execute+0x94>
 8005608:	f380 8811 	msr	BASEPRI, r0
 800560c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8005610:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8005614:	1ac6      	subs	r6, r0, r3
 8005616:	4270      	negs	r0, r6
 8005618:	4170      	adcs	r0, r6
 800561a:	4949      	ldr	r1, [pc, #292]	; (8005740 <oslib_test_001_001_execute+0x300>)
 800561c:	f7fc f8c0 	bl	80017a0 <_test_assert>
 8005620:	2800      	cmp	r0, #0
 8005622:	f47f af45 	bne.w	80054b0 <oslib_test_001_001_execute+0x70>
 8005626:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 800562a:	2306      	movs	r3, #6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800562c:	4e41      	ldr	r6, [pc, #260]	; (8005734 <oslib_test_001_001_execute+0x2f4>)
  test_set_step(6);
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8005632:	f04f 31ff 	mov.w	r1, #4294967295
 8005636:	a801      	add	r0, sp, #4
 8005638:	f7ff fcca 	bl	8004fd0 <chMBFetchTimeout.constprop.32>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800563c:	fab0 f080 	clz	r0, r0
 8005640:	4631      	mov	r1, r6
 8005642:	0940      	lsrs	r0, r0, #5
 8005644:	f7fc f8ac 	bl	80017a0 <_test_assert>
 8005648:	2800      	cmp	r0, #0
 800564a:	f47f af15 	bne.w	8005478 <oslib_test_001_001_execute+0x38>
      test_emit_token(msg2);
 800564e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005652:	f7fc f945 	bl	80018e0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8005656:	3d01      	subs	r5, #1
 8005658:	d1eb      	bne.n	8005632 <oslib_test_001_001_execute+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 800565a:	493a      	ldr	r1, [pc, #232]	; (8005744 <oslib_test_001_001_execute+0x304>)
 800565c:	483a      	ldr	r0, [pc, #232]	; (8005748 <oslib_test_001_001_execute+0x308>)
 800565e:	f7fc f9b7 	bl	80019d0 <_test_assert_sequence>
 8005662:	2800      	cmp	r0, #0
 8005664:	f47f af08 	bne.w	8005478 <oslib_test_001_001_execute+0x38>
  test_set_step(7);
 8005668:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800566a:	f04f 31ff 	mov.w	r1, #4294967295
 800566e:	2046      	movs	r0, #70	; 0x46
  test_set_step(7);
 8005670:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8005672:	f7ff fc2d 	bl	8004ed0 <chMBPostTimeout.constprop.38>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005676:	fab0 f080 	clz	r0, r0
 800567a:	0940      	lsrs	r0, r0, #5
 800567c:	492d      	ldr	r1, [pc, #180]	; (8005734 <oslib_test_001_001_execute+0x2f4>)
 800567e:	f7fc f88f 	bl	80017a0 <_test_assert>
 8005682:	2800      	cmp	r0, #0
 8005684:	f47f aef8 	bne.w	8005478 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8005688:	f04f 31ff 	mov.w	r1, #4294967295
 800568c:	a801      	add	r0, sp, #4
 800568e:	f7ff fc9f 	bl	8004fd0 <chMBFetchTimeout.constprop.32>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005692:	fab0 f080 	clz	r0, r0
 8005696:	0940      	lsrs	r0, r0, #5
 8005698:	4926      	ldr	r1, [pc, #152]	; (8005734 <oslib_test_001_001_execute+0x2f4>)
 800569a:	f7fc f881 	bl	80017a0 <_test_assert>
 800569e:	2800      	cmp	r0, #0
 80056a0:	f47f aeea 	bne.w	8005478 <oslib_test_001_001_execute+0x38>
  test_set_step(8);
 80056a4:	2308      	movs	r3, #8
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	2620      	movs	r6, #32
 80056aa:	f386 8811 	msr	BASEPRI, r6
 80056ae:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80056b2:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80056b4:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80056b6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80056ba:	1f19      	subs	r1, r3, #4
 80056bc:	4248      	negs	r0, r1
 80056be:	4148      	adcs	r0, r1
 80056c0:	4917      	ldr	r1, [pc, #92]	; (8005720 <oslib_test_001_001_execute+0x2e0>)
 80056c2:	f7fc f86d 	bl	80017a0 <_test_assert>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	f47f aef2 	bne.w	80054b0 <oslib_test_001_001_execute+0x70>
 80056cc:	f385 8811 	msr	BASEPRI, r5
 80056d0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80056d4:	6920      	ldr	r0, [r4, #16]
 80056d6:	4913      	ldr	r1, [pc, #76]	; (8005724 <oslib_test_001_001_execute+0x2e4>)
 80056d8:	fab0 f080 	clz	r0, r0
 80056dc:	0940      	lsrs	r0, r0, #5
 80056de:	f7fc f85f 	bl	80017a0 <_test_assert>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f47f aee4 	bne.w	80054b0 <oslib_test_001_001_execute+0x70>
 80056e8:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80056ec:	6820      	ldr	r0, [r4, #0]
 80056ee:	68a3      	ldr	r3, [r4, #8]
 80056f0:	490d      	ldr	r1, [pc, #52]	; (8005728 <oslib_test_001_001_execute+0x2e8>)
 80056f2:	1ac2      	subs	r2, r0, r3
 80056f4:	4250      	negs	r0, r2
 80056f6:	4150      	adcs	r0, r2
 80056f8:	f7fc f852 	bl	80017a0 <_test_assert>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f47f aebb 	bne.w	8005478 <oslib_test_001_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8005702:	6820      	ldr	r0, [r4, #0]
 8005704:	68e3      	ldr	r3, [r4, #12]
 8005706:	4909      	ldr	r1, [pc, #36]	; (800572c <oslib_test_001_001_execute+0x2ec>)
 8005708:	1ac3      	subs	r3, r0, r3
 800570a:	4258      	negs	r0, r3
 800570c:	4158      	adcs	r0, r3
 800570e:	f7fc f847 	bl	80017a0 <_test_assert>
 8005712:	e6b1      	b.n	8005478 <oslib_test_001_001_execute+0x38>
 8005714:	2000178c 	.word	0x2000178c
 8005718:	20000c50 	.word	0x20000c50
 800571c:	0800af08 	.word	0x0800af08
 8005720:	0800af14 	.word	0x0800af14
 8005724:	0800af20 	.word	0x0800af20
 8005728:	0800af2c 	.word	0x0800af2c
 800572c:	0800af50 	.word	0x0800af50
 8005730:	0800aee4 	.word	0x0800aee4
 8005734:	0800afd0 	.word	0x0800afd0
 8005738:	0800af74 	.word	0x0800af74
 800573c:	0800af80 	.word	0x0800af80
 8005740:	0800af8c 	.word	0x0800af8c
 8005744:	0800afa4 	.word	0x0800afa4
 8005748:	0800afb8 	.word	0x0800afb8
 800574c:	00000000 	.word	0x00000000

08005750 <oslib_test_003_002_execute>:
static void oslib_test_003_002_execute(void) {
 8005750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8005754:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800584c <oslib_test_003_002_execute+0xfc>
 8005758:	4d38      	ldr	r5, [pc, #224]	; (800583c <oslib_test_003_002_execute+0xec>)
 800575a:	4c39      	ldr	r4, [pc, #228]	; (8005840 <oslib_test_003_002_execute+0xf0>)
 800575c:	2301      	movs	r3, #1
 800575e:	f8ca 3000 	str.w	r3, [sl]
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8005762:	46a9      	mov	r9, r5
 8005764:	2604      	movs	r6, #4
 8005766:	f04f 0820 	mov.w	r8, #32
 800576a:	2700      	movs	r7, #0
 800576c:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8005770:	68eb      	ldr	r3, [r5, #12]
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	4648      	mov	r0, r9
  mp->next = php;
 8005776:	60ec      	str	r4, [r5, #12]
 8005778:	f7fc fcf2 	bl	8002160 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800577c:	f7ff fad0 	bl	8004d20 <chSchRescheduleS>
 8005780:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8005784:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 8005786:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8005788:	441c      	add	r4, r3
  while (n != 0U) {
 800578a:	d1ef      	bne.n	800576c <oslib_test_003_002_execute+0x1c>
  test_set_step(2);
 800578c:	2302      	movs	r3, #2
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800578e:	4e2d      	ldr	r6, [pc, #180]	; (8005844 <oslib_test_003_002_execute+0xf4>)
  test_set_step(2);
 8005790:	f8ca 3000 	str.w	r3, [sl]
 8005794:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005796:	2000      	movs	r0, #0
 8005798:	f7fe f8e2 	bl	8003960 <chGuardedPoolAllocTimeout.constprop.26>
 800579c:	3000      	adds	r0, #0
 800579e:	bf18      	it	ne
 80057a0:	2001      	movne	r0, #1
 80057a2:	4631      	mov	r1, r6
 80057a4:	f7fb fffc 	bl	80017a0 <_test_assert>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d144      	bne.n	8005836 <oslib_test_003_002_execute+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80057ac:	3c01      	subs	r4, #1
 80057ae:	d1f2      	bne.n	8005796 <oslib_test_003_002_execute+0x46>
  test_set_step(3);
 80057b0:	2303      	movs	r3, #3
 80057b2:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80057b6:	f7fe f8d3 	bl	8003960 <chGuardedPoolAllocTimeout.constprop.26>
 80057ba:	fab0 f080 	clz	r0, r0
 80057be:	0940      	lsrs	r0, r0, #5
 80057c0:	4921      	ldr	r1, [pc, #132]	; (8005848 <oslib_test_003_002_execute+0xf8>)
 80057c2:	f7fb ffed 	bl	80017a0 <_test_assert>
 80057c6:	bbb0      	cbnz	r0, 8005836 <oslib_test_003_002_execute+0xe6>
 80057c8:	4e1d      	ldr	r6, [pc, #116]	; (8005840 <oslib_test_003_002_execute+0xf0>)
 80057ca:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800583c <oslib_test_003_002_execute+0xec>
  test_set_step(4);
 80057ce:	2304      	movs	r3, #4
 80057d0:	f106 0910 	add.w	r9, r6, #16
 80057d4:	f8ca 3000 	str.w	r3, [sl]
 80057d8:	2720      	movs	r7, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 80057da:	4633      	mov	r3, r6
 80057dc:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 80057e0:	68ea      	ldr	r2, [r5, #12]
 80057e2:	f846 2b04 	str.w	r2, [r6], #4
 80057e6:	4640      	mov	r0, r8
  mp->next = php;
 80057e8:	60eb      	str	r3, [r5, #12]
 80057ea:	f7fc fcb9 	bl	8002160 <chSemSignalI>
  chSchRescheduleS();
 80057ee:	f7ff fa97 	bl	8004d20 <chSchRescheduleS>
 80057f2:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80057f6:	45b1      	cmp	r9, r6
 80057f8:	d1ef      	bne.n	80057da <oslib_test_003_002_execute+0x8a>
  test_set_step(5);
 80057fa:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80057fc:	4d11      	ldr	r5, [pc, #68]	; (8005844 <oslib_test_003_002_execute+0xf4>)
  test_set_step(5);
 80057fe:	f8ca 3000 	str.w	r3, [sl]
 8005802:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005804:	2000      	movs	r0, #0
 8005806:	f7fe f8ab 	bl	8003960 <chGuardedPoolAllocTimeout.constprop.26>
 800580a:	3000      	adds	r0, #0
 800580c:	bf18      	it	ne
 800580e:	2001      	movne	r0, #1
 8005810:	4629      	mov	r1, r5
 8005812:	f7fb ffc5 	bl	80017a0 <_test_assert>
 8005816:	b970      	cbnz	r0, 8005836 <oslib_test_003_002_execute+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005818:	3c01      	subs	r4, #1
 800581a:	d1f3      	bne.n	8005804 <oslib_test_003_002_execute+0xb4>
  test_set_step(6);
 800581c:	2306      	movs	r3, #6
 800581e:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005822:	f7fe f89d 	bl	8003960 <chGuardedPoolAllocTimeout.constprop.26>
 8005826:	fab0 f080 	clz	r0, r0
 800582a:	0940      	lsrs	r0, r0, #5
 800582c:	4906      	ldr	r1, [pc, #24]	; (8005848 <oslib_test_003_002_execute+0xf8>)
}
 800582e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005832:	f7fb bfb5 	b.w	80017a0 <_test_assert>
}
 8005836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583a:	bf00      	nop
 800583c:	20000c14 	.word	0x20000c14
 8005840:	20001038 	.word	0x20001038
 8005844:	0800b04c 	.word	0x0800b04c
 8005848:	0800b058 	.word	0x0800b058
 800584c:	2000178c 	.word	0x2000178c

08005850 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	2520      	movs	r5, #32
 8005854:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8005858:	2100      	movs	r1, #0
 800585a:	480b      	ldr	r0, [pc, #44]	; (8005888 <evt_thread7+0x38>)
 800585c:	f7fc fc40 	bl	80020e0 <chEvtBroadcastFlagsI>
 8005860:	2400      	movs	r4, #0
  chSchRescheduleS();
 8005862:	f7ff fa5d 	bl	8004d20 <chSchRescheduleS>
 8005866:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800586a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800586e:	f7fe faff 	bl	8003e70 <chThdSleep>
 8005872:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8005876:	4805      	ldr	r0, [pc, #20]	; (800588c <evt_thread7+0x3c>)
 8005878:	4621      	mov	r1, r4
 800587a:	f7fc fc31 	bl	80020e0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800587e:	f7ff fa4f 	bl	8004d20 <chSchRescheduleS>
 8005882:	f384 8811 	msr	BASEPRI, r4
}
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	20000c0c 	.word	0x20000c0c
 800588c:	20000c10 	.word	0x20000c10

08005890 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8005890:	b510      	push	{r4, lr}
 8005892:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8005894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005898:	f7fe faea 	bl	8003e70 <chThdSleep>
 800589c:	2320      	movs	r3, #32
 800589e:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 80058a2:	2101      	movs	r1, #1
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7fc fc03 	bl	80020b0 <chEvtSignalI>
  chSchRescheduleS();
 80058aa:	f7ff fa39 	bl	8004d20 <chSchRescheduleS>
 80058ae:	2300      	movs	r3, #0
 80058b0:	f383 8811 	msr	BASEPRI, r3
}
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	bf00      	nop
	...

080058c0 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 80058c0:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 80058c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80058c6:	f7fe fad3 	bl	8003e70 <chThdSleep>
 80058ca:	2320      	movs	r3, #32
 80058cc:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 80058d0:	4c06      	ldr	r4, [pc, #24]	; (80058ec <thread4B+0x2c>)
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7fe fe0c 	bl	80044f0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 80058d8:	4620      	mov	r0, r4
 80058da:	f7fc fc19 	bl	8002110 <chMtxUnlockS>
  chSchRescheduleS();
 80058de:	f7ff fa1f 	bl	8004d20 <chSchRescheduleS>
 80058e2:	2300      	movs	r3, #0
 80058e4:	f383 8811 	msr	BASEPRI, r3
}
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	20000c40 	.word	0x20000c40

080058f0 <thread2>:
static THD_FUNCTION(thread2, p) {
 80058f0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 80058f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058f6:	f7fe fabb 	bl	8003e70 <chThdSleep>
 80058fa:	2320      	movs	r3, #32
 80058fc:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 8005900:	4804      	ldr	r0, [pc, #16]	; (8005914 <thread2+0x24>)
 8005902:	f7fc fc2d 	bl	8002160 <chSemSignalI>
  chSchRescheduleS();
 8005906:	f7ff fa0b 	bl	8004d20 <chSchRescheduleS>
 800590a:	2300      	movs	r3, #0
 800590c:	f383 8811 	msr	BASEPRI, r3
}
 8005910:	bd08      	pop	{r3, pc}
 8005912:	bf00      	nop
 8005914:	2000105c 	.word	0x2000105c
	...

08005920 <thread4>:
static THD_FUNCTION(thread4, p) {
 8005920:	b508      	push	{r3, lr}
 8005922:	2220      	movs	r2, #32
 8005924:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8005928:	6883      	ldr	r3, [r0, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd05      	ble.n	800593a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800592e:	f7ff f9f7 	bl	8004d20 <chSchRescheduleS>
 8005932:	2300      	movs	r3, #0
 8005934:	f383 8811 	msr	BASEPRI, r3
}
 8005938:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 800593a:	f7fc fc11 	bl	8002160 <chSemSignalI>
  chSchRescheduleS();
 800593e:	f7ff f9ef 	bl	8004d20 <chSchRescheduleS>
 8005942:	2300      	movs	r3, #0
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	bd08      	pop	{r3, pc}
 800594a:	bf00      	nop
 800594c:	0000      	movs	r0, r0
	...

08005950 <thread1.lto_priv.101>:
static THD_FUNCTION(thread1, p) {
 8005950:	b510      	push	{r4, lr}
 8005952:	2320      	movs	r3, #32
 8005954:	4604      	mov	r4, r0
 8005956:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(&tr1, MSG_OK);
 800595a:	2100      	movs	r1, #0
 800595c:	4806      	ldr	r0, [pc, #24]	; (8005978 <thread1.lto_priv.101+0x28>)
 800595e:	f7fc fc0f 	bl	8002180 <chThdResumeI>
  chSchRescheduleS();
 8005962:	f7ff f9dd 	bl	8004d20 <chSchRescheduleS>
 8005966:	2300      	movs	r3, #0
 8005968:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800596c:	7820      	ldrb	r0, [r4, #0]
}
 800596e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8005972:	f7fb bfb5 	b.w	80018e0 <test_emit_token>
 8005976:	bf00      	nop
 8005978:	200017b8 	.word	0x200017b8
 800597c:	00000000 	.word	0x00000000

08005980 <chMtxUnlock>:
  thread_t *ctp = currp;
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 8005982:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005984:	699d      	ldr	r5, [r3, #24]
 8005986:	2320      	movs	r3, #32
 8005988:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800598c:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
 800598e:	68c3      	ldr	r3, [r0, #12]
 8005990:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8005992:	4284      	cmp	r4, r0
 8005994:	d01d      	beq.n	80059d2 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
 8005996:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8005998:	b14b      	cbz	r3, 80059ae <chMtxUnlock+0x2e>
 800599a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <chMtxUnlock+0x28>
 80059a0:	6892      	ldr	r2, [r2, #8]
 80059a2:	4291      	cmp	r1, r2
 80059a4:	bf38      	it	cc
 80059a6:	4611      	movcc	r1, r2
        lmp = lmp->next;
 80059a8:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f5      	bne.n	800599a <chMtxUnlock+0x1a>
 80059ae:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 80059b0:	6822      	ldr	r2, [r4, #0]
      mp->next = tp->mtxlist;
 80059b2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      ctp->prio = newprio;
 80059b4:	60a9      	str	r1, [r5, #8]
      (void) chSchReadyI(tp);
 80059b6:	4620      	mov	r0, r4
 80059b8:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80059ba:	6053      	str	r3, [r2, #4]
      mp->next = tp->mtxlist;
 80059bc:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->mtxlist = mp;
 80059c0:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 80059c2:	f7fc faa5 	bl	8001f10 <chSchReadyI>
      chSchRescheduleS();
 80059c6:	f7ff f9ab 	bl	8004d20 <chSchRescheduleS>
 80059ca:	2300      	movs	r3, #0
 80059cc:	f383 8811 	msr	BASEPRI, r3
}
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60a3      	str	r3, [r4, #8]
 80059d6:	2300      	movs	r3, #0
 80059d8:	f383 8811 	msr	BASEPRI, r3
}
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
 80059de:	bf00      	nop
 80059e0:	20000da0 	.word	0x20000da0
	...

080059f0 <chHeapAllocAligned.constprop.43>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 80059f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 80059f4:	4c37      	ldr	r4, [pc, #220]	; (8005ad4 <chHeapAllocAligned.constprop.43+0xe4>)
 80059f6:	2800      	cmp	r0, #0
 80059f8:	bf18      	it	ne
 80059fa:	4604      	movne	r4, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80059fc:	f104 070c 	add.w	r7, r4, #12
 8005a00:	4638      	mov	r0, r7
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005a02:	f101 0807 	add.w	r8, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005a06:	460d      	mov	r5, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005a08:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  H_LOCK(heapp);
 8005a0c:	f7fe fde8 	bl	80045e0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 8005a10:	1d20      	adds	r0, r4, #4
  while (H_NEXT(qp) != NULL) {
 8005a12:	6802      	ldr	r2, [r0, #0]

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005a14:	f102 030f 	add.w	r3, r2, #15
 8005a18:	f023 0307 	bic.w	r3, r3, #7

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005a1c:	461e      	mov	r6, r3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005a1e:	f102 0908 	add.w	r9, r2, #8
 8005a22:	3b08      	subs	r3, #8
  while (H_NEXT(qp) != NULL) {
 8005a24:	b17a      	cbz	r2, 8005a46 <chHeapAllocAligned.constprop.43+0x56>
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005a26:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8005a2a:	f10c 0101 	add.w	r1, ip, #1
 8005a2e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8005a32:	eba1 0e06 	sub.w	lr, r1, r6
 8005a36:	428b      	cmp	r3, r1
 8005a38:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8005a3c:	d201      	bcs.n	8005a42 <chHeapAllocAligned.constprop.43+0x52>
 8005a3e:	45f0      	cmp	r8, lr
 8005a40:	d912      	bls.n	8005a68 <chHeapAllocAligned.constprop.43+0x78>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 8005a42:	4610      	mov	r0, r2
 8005a44:	e7e5      	b.n	8005a12 <chHeapAllocAligned.constprop.43+0x22>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8005a46:	4638      	mov	r0, r7
 8005a48:	f7ff ff9a 	bl	8005980 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8005a4c:	6826      	ldr	r6, [r4, #0]
 8005a4e:	b146      	cbz	r6, 8005a62 <chHeapAllocAligned.constprop.43+0x72>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8005a50:	2208      	movs	r2, #8
 8005a52:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 8005a56:	4611      	mov	r1, r2
 8005a58:	47b0      	blx	r6
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	b108      	cbz	r0, 8005a62 <chHeapAllocAligned.constprop.43+0x72>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8005a5e:	e940 4502 	strd	r4, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8005a62:	4630      	mov	r0, r6
 8005a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d31a      	bcc.n	8005aa2 <chHeapAllocAligned.constprop.43+0xb2>
        if (H_PAGES(hp) == pages) {
 8005a6c:	45e0      	cmp	r8, ip
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	d02c      	beq.n	8005acc <chHeapAllocAligned.constprop.43+0xdc>
          fp = H_BLOCK(hp) + pages;
 8005a72:	f108 0801 	add.w	r8, r8, #1
 8005a76:	eb02 0cc8 	add.w	ip, r2, r8, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005a7a:	f10c 0608 	add.w	r6, ip, #8
 8005a7e:	1b89      	subs	r1, r1, r6
 8005a80:	10c9      	asrs	r1, r1, #3
          H_NEXT(fp) = H_NEXT(hp);
 8005a82:	f842 3038 	str.w	r3, [r2, r8, lsl #3]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005a86:	464e      	mov	r6, r9
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005a88:	f8cc 1004 	str.w	r1, [ip, #4]
          H_NEXT(qp) = fp;
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	f8c0 c000 	str.w	ip, [r0]
      H_UNLOCK(heapp);
 8005a92:	4638      	mov	r0, r7
      H_HEAP(hp) = heapp;
 8005a94:	e9c3 4500 	strd	r4, r5, [r3]
      H_UNLOCK(heapp);
 8005a98:	f7ff ff72 	bl	8005980 <chMtxUnlock>
}
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8005aa2:	eba3 0909 	sub.w	r9, r3, r9
 8005aa6:	ea4f 01e9 	mov.w	r1, r9, asr #3
        if (bpages > pages) {
 8005aaa:	45f0      	cmp	r8, lr
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8005aac:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8005aae:	d2f0      	bcs.n	8005a92 <chHeapAllocAligned.constprop.43+0xa2>
          fp = H_BLOCK(ahp) + pages;
 8005ab0:	f108 0c01 	add.w	ip, r8, #1
 8005ab4:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005ab8:	ea6f 0108 	mvn.w	r1, r8
 8005abc:	4471      	add	r1, lr
          H_NEXT(fp) = H_NEXT(hp);
 8005abe:	f8d2 e000 	ldr.w	lr, [r2]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005ac2:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8005ac4:	f843 e03c 	str.w	lr, [r3, ip, lsl #3]
          H_NEXT(hp) = fp;
 8005ac8:	6010      	str	r0, [r2, #0]
 8005aca:	e7e2      	b.n	8005a92 <chHeapAllocAligned.constprop.43+0xa2>
          H_NEXT(qp) = H_NEXT(hp);
 8005acc:	6003      	str	r3, [r0, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005ace:	464e      	mov	r6, r9
          H_NEXT(qp) = H_NEXT(hp);
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	e7de      	b.n	8005a92 <chHeapAllocAligned.constprop.43+0xa2>
 8005ad4:	20000f40 	.word	0x20000f40
	...

08005ae0 <dyn_create_object_heap>:
                                             size_t size) {
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8005ae2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8005ae4:	42a1      	cmp	r1, r4
                                             size_t size) {
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	4606      	mov	r6, r0
 8005aea:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8005aec:	d103      	bne.n	8005af6 <dyn_create_object_heap+0x16>
 8005aee:	e00d      	b.n	8005b0c <dyn_create_object_heap+0x2c>
    p = p->next;
 8005af0:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005af2:	42a5      	cmp	r5, r4
 8005af4:	d00a      	beq.n	8005b0c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005af6:	2208      	movs	r2, #8
 8005af8:	4631      	mov	r1, r6
 8005afa:	18a0      	adds	r0, r4, r2
 8005afc:	f004 fec2 	bl	800a884 <strncmp>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d1f5      	bne.n	8005af0 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 8005b04:	b114      	cbz	r4, 8005b0c <dyn_create_object_heap+0x2c>
    return NULL;
 8005b06:	4604      	mov	r4, r0
}
 8005b08:	4620      	mov	r0, r4
 8005b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f7ff ff6e 	bl	80059f0 <chHeapAllocAligned.constprop.43>
  if (dep == NULL) {
 8005b14:	4604      	mov	r4, r0
 8005b16:	b148      	cbz	r0, 8005b2c <dyn_create_object_heap+0x4c>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8005b18:	2208      	movs	r2, #8
 8005b1a:	4410      	add	r0, r2
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	f004 fefd 	bl	800a91c <strncpy>
  dep->next = dlp->next;
 8005b22:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8005b24:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8005b26:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = dep;
 8005b2a:	602c      	str	r4, [r5, #0]
}
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b30 <chThdCreateFromHeap>:
                              tfunc_t pf, void *arg) {
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	4616      	mov	r6, r2
 8005b36:	461d      	mov	r5, r3
 8005b38:	460c      	mov	r4, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8005b3a:	f7ff ff59 	bl	80059f0 <chHeapAllocAligned.constprop.43>
  if (wsp == NULL) {
 8005b3e:	b1d8      	cbz	r0, 8005b78 <chThdCreateFromHeap+0x48>
  thread_descriptor_t td = {
 8005b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b42:	9304      	str	r3, [sp, #16]
    (stkalign_t *)((uint8_t *)wsp + size),
 8005b44:	4404      	add	r4, r0
  thread_descriptor_t td = {
 8005b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b48:	9305      	str	r3, [sp, #20]
 8005b4a:	9402      	str	r4, [sp, #8]
 8005b4c:	e9cd 6000 	strd	r6, r0, [sp]
 8005b50:	9503      	str	r5, [sp, #12]
 8005b52:	2320      	movs	r3, #32
 8005b54:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 8005b58:	4668      	mov	r0, sp
 8005b5a:	f7fc f961 	bl	8001e20 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8005b64:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8005b66:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8005b68:	f7fd fd22 	bl	80035b0 <chSchWakeupS>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f383 8811 	msr	BASEPRI, r3
}
 8005b72:	4620      	mov	r0, r4
 8005b74:	b006      	add	sp, #24
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8005b78:	4604      	mov	r4, r0
 8005b7a:	e7fa      	b.n	8005b72 <chThdCreateFromHeap+0x42>
 8005b7c:	0000      	movs	r0, r0
	...

08005b80 <chPipeWriteTimeout.constprop.19>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8005b84:	4d37      	ldr	r5, [pc, #220]	; (8005c64 <chPipeWriteTimeout.constprop.19+0xe4>)
 8005b86:	7d2c      	ldrb	r4, [r5, #20]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8005b88:	b083      	sub	sp, #12
  if (pp->reset) {
 8005b8a:	b11c      	cbz	r4, 8005b94 <chPipeWriteTimeout.constprop.19+0x14>
    return (size_t)0;
 8005b8c:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 8005b8e:	b003      	add	sp, #12
 8005b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b94:	4681      	mov	r9, r0
  PW_LOCK(pp);
 8005b96:	4f34      	ldr	r7, [pc, #208]	; (8005c68 <chPipeWriteTimeout.constprop.19+0xe8>)
 8005b98:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8005b9c:	f7fe fd20 	bl	80045e0 <chMtxLock>
    *trp = NULL;
 8005ba0:	46a2      	mov	sl, r4
  PC_LOCK(pp);
 8005ba2:	f105 0b20 	add.w	fp, r5, #32
 8005ba6:	464e      	mov	r6, r9
 8005ba8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bac:	4658      	mov	r0, fp
 8005bae:	f7fe fd17 	bl	80045e0 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 8005bb2:	e9d5 4200 	ldrd	r4, r2, [r5]
 8005bb6:	692b      	ldr	r3, [r5, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 8005bb8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005bbc:	1b14      	subs	r4, r2, r4
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8005bbe:	1ae4      	subs	r4, r4, r3
 8005bc0:	42b4      	cmp	r4, r6
 8005bc2:	bf28      	it	cs
 8005bc4:	4634      	movcs	r4, r6
 8005bc6:	eba2 080c 	sub.w	r8, r2, ip
  pp->cnt += n;
 8005bca:	4423      	add	r3, r4
  if (n < s1) {
 8005bcc:	45a0      	cmp	r8, r4
  pp->cnt += n;
 8005bce:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 8005bd0:	d83f      	bhi.n	8005c52 <chPipeWriteTimeout.constprop.19+0xd2>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8005bd2:	4642      	mov	r2, r8
 8005bd4:	4639      	mov	r1, r7
    s2 = n - s1;
 8005bd6:	eba4 0908 	sub.w	r9, r4, r8
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8005bda:	4660      	mov	r0, ip
  else if (n > s1) {
 8005bdc:	d32c      	bcc.n	8005c38 <chPipeWriteTimeout.constprop.19+0xb8>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8005bde:	4622      	mov	r2, r4
 8005be0:	f7fb f972 	bl	8000ec8 <memcpy>
    pp->wrptr = pp->buffer;
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8005be8:	4658      	mov	r0, fp
      bp += done;
 8005bea:	4427      	add	r7, r4
  PC_UNLOCK(pp);
 8005bec:	f7ff fec8 	bl	8005980 <chMtxUnlock>
    if (done == (size_t)0) {
 8005bf0:	b97c      	cbnz	r4, 8005c12 <chPipeWriteTimeout.constprop.19+0x92>
 8005bf2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005bf6:	2320      	movs	r3, #32
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f384 8811 	msr	BASEPRI, r4
 8005c00:	eba9 0906 	sub.w	r9, r9, r6
  PW_UNLOCK(pp);
 8005c04:	4819      	ldr	r0, [pc, #100]	; (8005c6c <chPipeWriteTimeout.constprop.19+0xec>)
 8005c06:	f7ff febb 	bl	8005980 <chMtxUnlock>
 8005c0a:	4648      	mov	r0, r9
}
 8005c0c:	b003      	add	sp, #12
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 8005c12:	1b36      	subs	r6, r6, r4
 8005c14:	2320      	movs	r3, #32
 8005c16:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005c1a:	69eb      	ldr	r3, [r5, #28]
    chSchWakeupS(tp, msg);
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4618      	mov	r0, r3
  if (*trp != NULL) {
 8005c20:	b11b      	cbz	r3, 8005c2a <chPipeWriteTimeout.constprop.19+0xaa>
    *trp = NULL;
 8005c22:	f8c5 a01c 	str.w	sl, [r5, #28]
    chSchWakeupS(tp, msg);
 8005c26:	f7fd fcc3 	bl	80035b0 <chSchWakeupS>
 8005c2a:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8005c2e:	2e00      	cmp	r6, #0
 8005c30:	d1bc      	bne.n	8005bac <chPipeWriteTimeout.constprop.19+0x2c>
 8005c32:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c36:	e7e5      	b.n	8005c04 <chPipeWriteTimeout.constprop.19+0x84>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8005c38:	f7fb f946 	bl	8000ec8 <memcpy>
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8005c3c:	464a      	mov	r2, r9
 8005c3e:	eb07 0108 	add.w	r1, r7, r8
 8005c42:	6828      	ldr	r0, [r5, #0]
 8005c44:	f7fb f940 	bl	8000ec8 <memcpy>
    pp->wrptr = pp->buffer + s2;
 8005c48:	682a      	ldr	r2, [r5, #0]
 8005c4a:	eb02 0309 	add.w	r3, r2, r9
 8005c4e:	60ab      	str	r3, [r5, #8]
 8005c50:	e7ca      	b.n	8005be8 <chPipeWriteTimeout.constprop.19+0x68>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8005c52:	4660      	mov	r0, ip
 8005c54:	4622      	mov	r2, r4
 8005c56:	4639      	mov	r1, r7
 8005c58:	f7fb f936 	bl	8000ec8 <memcpy>
    pp->wrptr += n;
 8005c5c:	68ab      	ldr	r3, [r5, #8]
 8005c5e:	4423      	add	r3, r4
 8005c60:	60ab      	str	r3, [r5, #8]
 8005c62:	e7c1      	b.n	8005be8 <chPipeWriteTimeout.constprop.19+0x68>
 8005c64:	20000c90 	.word	0x20000c90
 8005c68:	0800b2d4 	.word	0x0800b2d4
 8005c6c:	20000cc0 	.word	0x20000cc0

08005c70 <chPipeReadTimeout.constprop.18>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8005c74:	4c36      	ldr	r4, [pc, #216]	; (8005d50 <chPipeReadTimeout.constprop.18+0xe0>)
 8005c76:	7d25      	ldrb	r5, [r4, #20]
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8005c78:	b083      	sub	sp, #12
  if (pp->reset) {
 8005c7a:	b11d      	cbz	r5, 8005c84 <chPipeReadTimeout.constprop.18+0x14>
    return (size_t)0;
 8005c7c:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 8005c7e:	b003      	add	sp, #12
 8005c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c84:	4689      	mov	r9, r1
 8005c86:	4607      	mov	r7, r0
  PR_LOCK(pp);
 8005c88:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8005c8c:	f7fe fca8 	bl	80045e0 <chMtxLock>
    *trp = NULL;
 8005c90:	46aa      	mov	sl, r5
 8005c92:	46c8      	mov	r8, r9
  PC_LOCK(pp);
 8005c94:	f104 0b20 	add.w	fp, r4, #32
 8005c98:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c9c:	4658      	mov	r0, fp
 8005c9e:	f7fe fc9f 	bl	80045e0 <chMtxLock>
  s1 = (size_t)(pp->top - pp->rdptr);
 8005ca2:	e9d4 c303 	ldrd	ip, r3, [r4, #12]
 8005ca6:	6866      	ldr	r6, [r4, #4]
 8005ca8:	4543      	cmp	r3, r8
 8005caa:	461d      	mov	r5, r3
 8005cac:	eba6 060c 	sub.w	r6, r6, ip
 8005cb0:	bf28      	it	cs
 8005cb2:	4645      	movcs	r5, r8
  pp->cnt -= n;
 8005cb4:	1b5b      	subs	r3, r3, r5
  if (n < s1) {
 8005cb6:	42ae      	cmp	r6, r5
  pp->cnt -= n;
 8005cb8:	6123      	str	r3, [r4, #16]
  if (n < s1) {
 8005cba:	d840      	bhi.n	8005d3e <chPipeReadTimeout.constprop.18+0xce>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	4661      	mov	r1, ip
    s2 = n - s1;
 8005cc0:	eba5 0906 	sub.w	r9, r5, r6
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8005cc4:	4638      	mov	r0, r7
  else if (n > s1) {
 8005cc6:	d32e      	bcc.n	8005d26 <chPipeReadTimeout.constprop.18+0xb6>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005cc8:	462a      	mov	r2, r5
 8005cca:	f7fb f8fd 	bl	8000ec8 <memcpy>
    pp->rdptr = pp->buffer;
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 8005cd2:	4658      	mov	r0, fp
      bp += done;
 8005cd4:	442f      	add	r7, r5
  PC_UNLOCK(pp);
 8005cd6:	f7ff fe53 	bl	8005980 <chMtxUnlock>
    if (done == (size_t)0) {
 8005cda:	b97d      	cbnz	r5, 8005cfc <chPipeReadTimeout.constprop.18+0x8c>
 8005cdc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f385 8811 	msr	BASEPRI, r5
 8005cea:	eba9 0908 	sub.w	r9, r9, r8
  PR_UNLOCK(pp);
 8005cee:	4819      	ldr	r0, [pc, #100]	; (8005d54 <chPipeReadTimeout.constprop.18+0xe4>)
 8005cf0:	f7ff fe46 	bl	8005980 <chMtxUnlock>
 8005cf4:	4648      	mov	r0, r9
}
 8005cf6:	b003      	add	sp, #12
 8005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 8005cfc:	eba8 0805 	sub.w	r8, r8, r5
 8005d00:	2320      	movs	r3, #32
 8005d02:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005d06:	69a3      	ldr	r3, [r4, #24]
    chSchWakeupS(tp, msg);
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4618      	mov	r0, r3
  if (*trp != NULL) {
 8005d0c:	b11b      	cbz	r3, 8005d16 <chPipeReadTimeout.constprop.18+0xa6>
    *trp = NULL;
 8005d0e:	f8c4 a018 	str.w	sl, [r4, #24]
    chSchWakeupS(tp, msg);
 8005d12:	f7fd fc4d 	bl	80035b0 <chSchWakeupS>
 8005d16:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8005d1a:	f1b8 0f00 	cmp.w	r8, #0
 8005d1e:	d1bd      	bne.n	8005c9c <chPipeReadTimeout.constprop.18+0x2c>
 8005d20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d24:	e7e3      	b.n	8005cee <chPipeReadTimeout.constprop.18+0x7e>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8005d26:	f7fb f8cf 	bl	8000ec8 <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 8005d2a:	464a      	mov	r2, r9
 8005d2c:	19b8      	adds	r0, r7, r6
 8005d2e:	6821      	ldr	r1, [r4, #0]
 8005d30:	f7fb f8ca 	bl	8000ec8 <memcpy>
    pp->rdptr = pp->buffer + s2;
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	eb02 0309 	add.w	r3, r2, r9
 8005d3a:	60e3      	str	r3, [r4, #12]
 8005d3c:	e7c9      	b.n	8005cd2 <chPipeReadTimeout.constprop.18+0x62>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005d3e:	4661      	mov	r1, ip
 8005d40:	462a      	mov	r2, r5
 8005d42:	4638      	mov	r0, r7
 8005d44:	f7fb f8c0 	bl	8000ec8 <memcpy>
    pp->rdptr += n;
 8005d48:	68e3      	ldr	r3, [r4, #12]
 8005d4a:	442b      	add	r3, r5
 8005d4c:	60e3      	str	r3, [r4, #12]
 8005d4e:	e7c0      	b.n	8005cd2 <chPipeReadTimeout.constprop.18+0x62>
 8005d50:	20000c90 	.word	0x20000c90
 8005d54:	20000cd0 	.word	0x20000cd0
	...

08005d60 <oslib_test_002_002_execute>:

static void oslib_test_002_002_execute(void) {
 8005d60:	b530      	push	{r4, r5, lr}

  /* [2.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8005d62:	4c22      	ldr	r4, [pc, #136]	; (8005dec <oslib_test_002_002_execute+0x8c>)
static void oslib_test_002_002_execute(void) {
 8005d64:	b085      	sub	sp, #20
  test_set_step(1);
 8005d66:	2301      	movs	r3, #1
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005d68:	2110      	movs	r1, #16
 8005d6a:	4668      	mov	r0, sp
  test_set_step(1);
 8005d6c:	6023      	str	r3, [r4, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005d6e:	f7ff ff7f 	bl	8005c70 <chPipeReadTimeout.constprop.18>
    test_assert(n == 0, "wrong size");
 8005d72:	fab0 f080 	clz	r0, r0
 8005d76:	0940      	lsrs	r0, r0, #5
 8005d78:	491d      	ldr	r1, [pc, #116]	; (8005df0 <oslib_test_002_002_execute+0x90>)
 8005d7a:	f7fb fd11 	bl	80017a0 <_test_assert>
 8005d7e:	b940      	cbnz	r0, 8005d92 <oslib_test_002_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005d80:	4d1c      	ldr	r5, [pc, #112]	; (8005df4 <oslib_test_002_002_execute+0x94>)
 8005d82:	68eb      	ldr	r3, [r5, #12]
 8005d84:	682a      	ldr	r2, [r5, #0]
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01d      	beq.n	8005dc6 <oslib_test_002_002_execute+0x66>
 8005d8a:	491b      	ldr	r1, [pc, #108]	; (8005df8 <oslib_test_002_002_execute+0x98>)
 8005d8c:	f7fb fd08 	bl	80017a0 <_test_assert>
 8005d90:	b108      	cbz	r0, 8005d96 <oslib_test_002_002_execute+0x36>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
}
 8005d92:	b005      	add	sp, #20
 8005d94:	bd30      	pop	{r4, r5, pc}
  test_set_step(2);
 8005d96:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005d98:	2010      	movs	r0, #16
  test_set_step(2);
 8005d9a:	6023      	str	r3, [r4, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005d9c:	f7ff fef0 	bl	8005b80 <chPipeWriteTimeout.constprop.19>
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 8005da0:	f1a0 0008 	sub.w	r0, r0, #8
 8005da4:	fab0 f080 	clz	r0, r0
 8005da8:	4911      	ldr	r1, [pc, #68]	; (8005df0 <oslib_test_002_002_execute+0x90>)
 8005daa:	0940      	lsrs	r0, r0, #5
 8005dac:	f7fb fcf8 	bl	80017a0 <_test_assert>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d1ee      	bne.n	8005d92 <oslib_test_002_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005db4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00c      	beq.n	8005dd6 <oslib_test_002_002_execute+0x76>
 8005dbc:	490e      	ldr	r1, [pc, #56]	; (8005df8 <oslib_test_002_002_execute+0x98>)
 8005dbe:	f7fb fcef 	bl	80017a0 <_test_assert>
}
 8005dc2:	b005      	add	sp, #20
 8005dc4:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005dc6:	68aa      	ldr	r2, [r5, #8]
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d1de      	bne.n	8005d8a <oslib_test_002_002_execute+0x2a>
 8005dcc:	6928      	ldr	r0, [r5, #16]
 8005dce:	fab0 f080 	clz	r0, r0
 8005dd2:	0940      	lsrs	r0, r0, #5
 8005dd4:	e7d9      	b.n	8005d8a <oslib_test_002_002_execute+0x2a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005dd6:	682a      	ldr	r2, [r5, #0]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d1ef      	bne.n	8005dbc <oslib_test_002_002_execute+0x5c>
 8005ddc:	6928      	ldr	r0, [r5, #16]
 8005dde:	f1a0 0008 	sub.w	r0, r0, #8
 8005de2:	fab0 f080 	clz	r0, r0
 8005de6:	0940      	lsrs	r0, r0, #5
 8005de8:	e7e8      	b.n	8005dbc <oslib_test_002_002_execute+0x5c>
 8005dea:	bf00      	nop
 8005dec:	2000178c 	.word	0x2000178c
 8005df0:	0800af08 	.word	0x0800af08
 8005df4:	20000c90 	.word	0x20000c90
 8005df8:	0800b028 	.word	0x0800b028
 8005dfc:	00000000 	.word	0x00000000

08005e00 <chFactoryRegisterObject.constprop.16>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 8005e04:	4807      	ldr	r0, [pc, #28]	; (8005e24 <chFactoryRegisterObject.constprop.16+0x24>)
 8005e06:	f7fe fbeb 	bl	80045e0 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 8005e0a:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <chFactoryRegisterObject.constprop.16+0x28>)
 8005e0c:	4807      	ldr	r0, [pc, #28]	; (8005e2c <chFactoryRegisterObject.constprop.16+0x2c>)
 8005e0e:	1f11      	subs	r1, r2, #4
 8005e10:	f7fd fb5e 	bl	80034d0 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 8005e14:	4604      	mov	r4, r0
 8005e16:	b100      	cbz	r0, 8005e1a <chFactoryRegisterObject.constprop.16+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8005e18:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 8005e1a:	4802      	ldr	r0, [pc, #8]	; (8005e24 <chFactoryRegisterObject.constprop.16+0x24>)
 8005e1c:	f7ff fdb0 	bl	8005980 <chMtxUnlock>

  return rop;
}
 8005e20:	4620      	mov	r0, r4
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20000e18 	.word	0x20000e18
 8005e28:	20000e2c 	.word	0x20000e2c
 8005e2c:	0800ab1c 	.word	0x0800ab1c

08005e30 <chFactoryFindObject.constprop.15>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8005e30:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8005e32:	4c07      	ldr	r4, [pc, #28]	; (8005e50 <chFactoryFindObject.constprop.15+0x20>)
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7fe fbd3 	bl	80045e0 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 8005e3a:	f104 0110 	add.w	r1, r4, #16
 8005e3e:	4805      	ldr	r0, [pc, #20]	; (8005e54 <chFactoryFindObject.constprop.15+0x24>)
 8005e40:	f7fd fb26 	bl	8003490 <dyn_find_object>
 8005e44:	4605      	mov	r5, r0

  F_UNLOCK();
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7ff fd9a 	bl	8005980 <chMtxUnlock>

  return rop;
}
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20000e18 	.word	0x20000e18
 8005e54:	0800ab1c 	.word	0x0800ab1c
	...

08005e60 <chFactoryCreateBuffer.constprop.14>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8005e60:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8005e62:	480a      	ldr	r0, [pc, #40]	; (8005e8c <chFactoryCreateBuffer.constprop.14+0x2c>)
 8005e64:	f7fe fbbc 	bl	80045e0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	4909      	ldr	r1, [pc, #36]	; (8005e90 <chFactoryCreateBuffer.constprop.14+0x30>)
 8005e6c:	4809      	ldr	r0, [pc, #36]	; (8005e94 <chFactoryCreateBuffer.constprop.14+0x34>)
 8005e6e:	f7ff fe37 	bl	8005ae0 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 8005e72:	4604      	mov	r4, r0
 8005e74:	b120      	cbz	r0, 8005e80 <chFactoryCreateBuffer.constprop.14+0x20>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
 8005e76:	2280      	movs	r2, #128	; 0x80
 8005e78:	2100      	movs	r1, #0
 8005e7a:	3010      	adds	r0, #16
 8005e7c:	f004 fc44 	bl	800a708 <memset>
  }

  F_UNLOCK();
 8005e80:	4802      	ldr	r0, [pc, #8]	; (8005e8c <chFactoryCreateBuffer.constprop.14+0x2c>)
 8005e82:	f7ff fd7d 	bl	8005980 <chMtxUnlock>

  return dbp;
}
 8005e86:	4620      	mov	r0, r4
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000e18 	.word	0x20000e18
 8005e90:	20000e3c 	.word	0x20000e3c
 8005e94:	0800aaf4 	.word	0x0800aaf4
	...

08005ea0 <chFactoryFindBuffer.constprop.13>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8005ea0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8005ea2:	4c07      	ldr	r4, [pc, #28]	; (8005ec0 <chFactoryFindBuffer.constprop.13+0x20>)
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7fe fb9b 	bl	80045e0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 8005eaa:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8005eae:	4805      	ldr	r0, [pc, #20]	; (8005ec4 <chFactoryFindBuffer.constprop.13+0x24>)
 8005eb0:	f7fd faee 	bl	8003490 <dyn_find_object>
 8005eb4:	4605      	mov	r5, r0

  F_UNLOCK();
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7ff fd62 	bl	8005980 <chMtxUnlock>

  return dbp;
}
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	20000e18 	.word	0x20000e18
 8005ec4:	0800aaf4 	.word	0x0800aaf4
	...

08005ed0 <chFactoryCreateSemaphore.constprop.12>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8005ed0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8005ed2:	480a      	ldr	r0, [pc, #40]	; (8005efc <chFactoryCreateSemaphore.constprop.12+0x2c>)
 8005ed4:	f7fe fb84 	bl	80045e0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 8005ed8:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <chFactoryCreateSemaphore.constprop.12+0x30>)
 8005eda:	480a      	ldr	r0, [pc, #40]	; (8005f04 <chFactoryCreateSemaphore.constprop.12+0x34>)
 8005edc:	1f11      	subs	r1, r2, #4
 8005ede:	f7fd faf7 	bl	80034d0 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	b128      	cbz	r0, 8005ef2 <chFactoryCreateSemaphore.constprop.12+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 8005ee6:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 8005eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
  sp->cnt = n;
 8005eee:	2200      	movs	r2, #0
 8005ef0:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 8005ef2:	4802      	ldr	r0, [pc, #8]	; (8005efc <chFactoryCreateSemaphore.constprop.12+0x2c>)
 8005ef4:	f7ff fd44 	bl	8005980 <chMtxUnlock>

  return dsp;
}
 8005ef8:	4620      	mov	r0, r4
 8005efa:	bd10      	pop	{r4, pc}
 8005efc:	20000e18 	.word	0x20000e18
 8005f00:	20000e44 	.word	0x20000e44
 8005f04:	0800ab14 	.word	0x0800ab14
	...

08005f10 <chFactoryFindSemaphore.constprop.11>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8005f10:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8005f12:	4c07      	ldr	r4, [pc, #28]	; (8005f30 <chFactoryFindSemaphore.constprop.11+0x20>)
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7fe fb63 	bl	80045e0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 8005f1a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005f1e:	4805      	ldr	r0, [pc, #20]	; (8005f34 <chFactoryFindSemaphore.constprop.11+0x24>)
 8005f20:	f7fd fab6 	bl	8003490 <dyn_find_object>
 8005f24:	4605      	mov	r5, r0

  F_UNLOCK();
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff fd2a 	bl	8005980 <chMtxUnlock>

  return dsp;
}
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	20000e18 	.word	0x20000e18
 8005f34:	0800ab14 	.word	0x0800ab14
	...

08005f40 <chFactoryCreateMailbox.constprop.10>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8005f40:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8005f42:	4811      	ldr	r0, [pc, #68]	; (8005f88 <chFactoryCreateMailbox.constprop.10+0x48>)
 8005f44:	f7fe fb4c 	bl	80045e0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8005f48:	2278      	movs	r2, #120	; 0x78
 8005f4a:	4910      	ldr	r1, [pc, #64]	; (8005f8c <chFactoryCreateMailbox.constprop.10+0x4c>)
 8005f4c:	4810      	ldr	r0, [pc, #64]	; (8005f90 <chFactoryCreateMailbox.constprop.10+0x50>)
 8005f4e:	f7ff fdc7 	bl	8005ae0 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8005f52:	4604      	mov	r4, r0
 8005f54:	b198      	cbz	r0, 8005f7e <chFactoryCreateMailbox.constprop.10+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 8005f56:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 8005f5a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 8005f5e:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8005f62:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8005f66:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 8005f6a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 8005f6e:	f100 0578 	add.w	r5, r0, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8005f72:	2000      	movs	r0, #0
  mbp->buffer = buf;
 8005f74:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 8005f76:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 8005f78:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 8005f7a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  }

  F_UNLOCK();
 8005f7e:	4802      	ldr	r0, [pc, #8]	; (8005f88 <chFactoryCreateMailbox.constprop.10+0x48>)
 8005f80:	f7ff fcfe 	bl	8005980 <chMtxUnlock>

  return dmp;
}
 8005f84:	4620      	mov	r0, r4
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	20000e18 	.word	0x20000e18
 8005f8c:	20000e54 	.word	0x20000e54
 8005f90:	0800aafc 	.word	0x0800aafc
	...

08005fa0 <chFactoryFindMailbox.constprop.9>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8005fa0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8005fa2:	4c07      	ldr	r4, [pc, #28]	; (8005fc0 <chFactoryFindMailbox.constprop.9+0x20>)
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7fe fb1b 	bl	80045e0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 8005faa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005fae:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <chFactoryFindMailbox.constprop.9+0x24>)
 8005fb0:	f7fd fa6e 	bl	8003490 <dyn_find_object>
 8005fb4:	4605      	mov	r5, r0

  F_UNLOCK();
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff fce2 	bl	8005980 <chMtxUnlock>

  return dmp;
}
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20000e18 	.word	0x20000e18
 8005fc4:	0800aafc 	.word	0x0800aafc
	...

08005fd0 <chFactoryCreateObjectsFIFO.constprop.8>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8005fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8005fd4:	4822      	ldr	r0, [pc, #136]	; (8006060 <chFactoryCreateObjectsFIFO.constprop.8+0x90>)
 8005fd6:	f7fe fb03 	bl	80045e0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8005fda:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005fde:	4921      	ldr	r1, [pc, #132]	; (8006064 <chFactoryCreateObjectsFIFO.constprop.8+0x94>)
 8005fe0:	4821      	ldr	r0, [pc, #132]	; (8006068 <chFactoryCreateObjectsFIFO.constprop.8+0x98>)
 8005fe2:	f7ff fd7d 	bl	8005ae0 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	b398      	cbz	r0, 8006052 <chFactoryCreateObjectsFIFO.constprop.8+0x82>
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8005fea:	f100 0810 	add.w	r8, r0, #16
  mp->object_size = size;
 8005fee:	2610      	movs	r6, #16
  mp->align = align;
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	e9c0 8804 	strd	r8, r8, [r0, #16]
 8005ff6:	e9c0 6308 	strd	r6, r3, [r0, #32]
  mp->next = NULL;
 8005ffa:	2700      	movs	r7, #0
    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
                            (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 8005ffc:	f100 0b94 	add.w	fp, r0, #148	; 0x94
 8006000:	465d      	mov	r5, fp
 8006002:	61c7      	str	r7, [r0, #28]
  mp->provider = provider;
 8006004:	6287      	str	r7, [r0, #40]	; 0x28
 8006006:	6187      	str	r7, [r0, #24]
 8006008:	f100 0a54 	add.w	sl, r0, #84	; 0x54
 800600c:	f04f 0920 	mov.w	r9, #32
 8006010:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 8006014:	69e3      	ldr	r3, [r4, #28]
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	4640      	mov	r0, r8
  mp->next = php;
 800601a:	61e5      	str	r5, [r4, #28]
 800601c:	f7fc f8a0 	bl	8002160 <chSemSignalI>
  chSchRescheduleS();
 8006020:	f7fe fe7e 	bl	8004d20 <chSchRescheduleS>
 8006024:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8006028:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 800602a:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800602c:	441d      	add	r5, r3
  while (n != 0U) {
 800602e:	d1ef      	bne.n	8006010 <chFactoryCreateObjectsFIFO.constprop.8+0x40>
  chThdQueueObjectInit(&mbp->qw);
 8006030:	f104 0244 	add.w	r2, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8006034:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8006038:	e9c4 aa0d 	strd	sl, sl, [r4, #52]	; 0x34
 800603c:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 8006040:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->buffer = buf;
 8006044:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
  mbp->top    = &buf[n];
 8006048:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 800604c:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 800604e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }

  F_UNLOCK();
 8006052:	4803      	ldr	r0, [pc, #12]	; (8006060 <chFactoryCreateObjectsFIFO.constprop.8+0x90>)
 8006054:	f7ff fc94 	bl	8005980 <chMtxUnlock>

  return dofp;
}
 8006058:	4620      	mov	r0, r4
 800605a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605e:	bf00      	nop
 8006060:	20000e18 	.word	0x20000e18
 8006064:	20000e58 	.word	0x20000e58
 8006068:	0800ab04 	.word	0x0800ab04
 800606c:	00000000 	.word	0x00000000

08006070 <chFactoryFindObjectsFIFO.constprop.7>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8006070:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8006072:	4c07      	ldr	r4, [pc, #28]	; (8006090 <chFactoryFindObjectsFIFO.constprop.7+0x20>)
 8006074:	4620      	mov	r0, r4
 8006076:	f7fe fab3 	bl	80045e0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800607a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800607e:	4805      	ldr	r0, [pc, #20]	; (8006094 <chFactoryFindObjectsFIFO.constprop.7+0x24>)
 8006080:	f7fd fa06 	bl	8003490 <dyn_find_object>
 8006084:	4605      	mov	r5, r0

  F_UNLOCK();
 8006086:	4620      	mov	r0, r4
 8006088:	f7ff fc7a 	bl	8005980 <chMtxUnlock>

  return dofp;
}
 800608c:	4628      	mov	r0, r5
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	20000e18 	.word	0x20000e18
 8006094:	0800ab04 	.word	0x0800ab04
	...

080060a0 <chFactoryCreatePipe.constprop.6>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 80060a0:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 80060a2:	4815      	ldr	r0, [pc, #84]	; (80060f8 <chFactoryCreatePipe.constprop.6+0x58>)
 80060a4:	f7fe fa9c 	bl	80045e0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 80060a8:	2270      	movs	r2, #112	; 0x70
 80060aa:	4914      	ldr	r1, [pc, #80]	; (80060fc <chFactoryCreatePipe.constprop.6+0x5c>)
 80060ac:	4814      	ldr	r0, [pc, #80]	; (8006100 <chFactoryCreatePipe.constprop.6+0x60>)
 80060ae:	f7ff fd17 	bl	8005ae0 <dyn_create_object_heap>
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size);
  if (dpp != NULL) {
 80060b2:	4604      	mov	r4, r0
 80060b4:	b1d8      	cbz	r0, 80060ee <chFactoryCreatePipe.constprop.6+0x4e>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, dpp->buffer, size);
 80060b6:	f100 0260 	add.w	r2, r0, #96	; 0x60
  pp->cnt    = (size_t)0;
 80060ba:	2300      	movs	r3, #0
  pp->top    = &buf[n];
 80060bc:	f100 0570 	add.w	r5, r0, #112	; 0x70
  PW_INIT(pp);
 80060c0:	f104 0140 	add.w	r1, r4, #64	; 0x40
  PC_INIT(pp);
 80060c4:	3030      	adds	r0, #48	; 0x30
  pp->buffer = buf;
 80060c6:	6122      	str	r2, [r4, #16]
  pp->wrptr  = buf;
 80060c8:	e9c4 2206 	strd	r2, r2, [r4, #24]
  PR_INIT(pp);
 80060cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
  pp->rtr    = NULL;
 80060d0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80060d4:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
 80060d8:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
 80060dc:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
  pp->top    = &buf[n];
 80060e0:	6165      	str	r5, [r4, #20]
  pp->cnt    = (size_t)0;
 80060e2:	6223      	str	r3, [r4, #32]
  pp->reset  = false;
 80060e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 80060e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80060ea:	64a3      	str	r3, [r4, #72]	; 0x48
 80060ec:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  F_UNLOCK();
 80060ee:	4802      	ldr	r0, [pc, #8]	; (80060f8 <chFactoryCreatePipe.constprop.6+0x58>)
 80060f0:	f7ff fc46 	bl	8005980 <chMtxUnlock>

  return dpp;
}
 80060f4:	4620      	mov	r0, r4
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20000e18 	.word	0x20000e18
 80060fc:	20000e5c 	.word	0x20000e5c
 8006100:	0800ab0c 	.word	0x0800ab0c
	...

08006110 <chFactoryFindPipe.constprop.5>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8006110:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8006112:	4c07      	ldr	r4, [pc, #28]	; (8006130 <chFactoryFindPipe.constprop.5+0x20>)
 8006114:	4620      	mov	r0, r4
 8006116:	f7fe fa63 	bl	80045e0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800611a:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800611e:	4805      	ldr	r0, [pc, #20]	; (8006134 <chFactoryFindPipe.constprop.5+0x24>)
 8006120:	f7fd f9b6 	bl	8003490 <dyn_find_object>
 8006124:	4605      	mov	r5, r0

  F_UNLOCK();
 8006126:	4620      	mov	r0, r4
 8006128:	f7ff fc2a 	bl	8005980 <chMtxUnlock>

  return dpp;
}
 800612c:	4628      	mov	r0, r5
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20000e18 	.word	0x20000e18
 8006134:	0800ab0c 	.word	0x0800ab0c
	...

08006140 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8006140:	b5f0      	push	{r4, r5, r6, r7, lr}
  PC_LOCK(pp);
 8006142:	4c1c      	ldr	r4, [pc, #112]	; (80061b4 <oslib_test_002_001_execute+0x74>)
  test_set_step(1);
 8006144:	4f1c      	ldr	r7, [pc, #112]	; (80061b8 <oslib_test_002_001_execute+0x78>)
 8006146:	2601      	movs	r6, #1
static void oslib_test_002_001_execute(void) {
 8006148:	b085      	sub	sp, #20
 800614a:	f104 0020 	add.w	r0, r4, #32
  test_set_step(1);
 800614e:	603e      	str	r6, [r7, #0]
 8006150:	f7fe fa46 	bl	80045e0 <chMtxLock>
  pp->wrptr = pp->buffer;
 8006154:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8006156:	7526      	strb	r6, [r4, #20]
  pp->cnt   = (size_t)0;
 8006158:	2500      	movs	r5, #0
  pp->rdptr = pp->buffer;
 800615a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 800615e:	6125      	str	r5, [r4, #16]
 8006160:	2320      	movs	r3, #32
 8006162:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(&pp->wtr, MSG_RESET);
 8006166:	f06f 0101 	mvn.w	r1, #1
 800616a:	f104 0018 	add.w	r0, r4, #24
 800616e:	f7fc f807 	bl	8002180 <chThdResumeI>
  chThdResumeI(&pp->rtr, MSG_RESET);
 8006172:	f104 001c 	add.w	r0, r4, #28
 8006176:	f06f 0101 	mvn.w	r1, #1
 800617a:	f7fc f801 	bl	8002180 <chThdResumeI>
  chSchRescheduleS();
 800617e:	f7fe fdcf 	bl	8004d20 <chSchRescheduleS>
 8006182:	f385 8811 	msr	BASEPRI, r5
  PC_UNLOCK(pp);
 8006186:	f104 0020 	add.w	r0, r4, #32
 800618a:	f7ff fbf9 	bl	8005980 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800618e:	68e3      	ldr	r3, [r4, #12]
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	4293      	cmp	r3, r2
 8006194:	d006      	beq.n	80061a4 <oslib_test_002_001_execute+0x64>
 8006196:	4628      	mov	r0, r5
 8006198:	4908      	ldr	r1, [pc, #32]	; (80061bc <oslib_test_002_001_execute+0x7c>)
 800619a:	f7fb fb01 	bl	80017a0 <_test_assert>
 800619e:	b178      	cbz	r0, 80061c0 <oslib_test_002_001_execute+0x80>
}
 80061a0:	b005      	add	sp, #20
 80061a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80061a4:	68a2      	ldr	r2, [r4, #8]
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d1f5      	bne.n	8006196 <oslib_test_002_001_execute+0x56>
 80061aa:	6925      	ldr	r5, [r4, #16]
 80061ac:	fab5 f085 	clz	r0, r5
 80061b0:	0940      	lsrs	r0, r0, #5
 80061b2:	e7f1      	b.n	8006198 <oslib_test_002_001_execute+0x58>
 80061b4:	20000c90 	.word	0x20000c90
 80061b8:	2000178c 	.word	0x2000178c
 80061bc:	0800b028 	.word	0x0800b028
  test_set_step(2);
 80061c0:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80061c2:	2010      	movs	r0, #16
  test_set_step(2);
 80061c4:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80061c6:	f7ff fcdb 	bl	8005b80 <chPipeWriteTimeout.constprop.19>
    test_assert(n == 0, "not reset");
 80061ca:	fab0 f080 	clz	r0, r0
 80061ce:	0940      	lsrs	r0, r0, #5
 80061d0:	49be      	ldr	r1, [pc, #760]	; (80064cc <oslib_test_002_001_execute+0x38c>)
 80061d2:	f7fb fae5 	bl	80017a0 <_test_assert>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d1e2      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80061da:	68e3      	ldr	r3, [r4, #12]
 80061dc:	6822      	ldr	r2, [r4, #0]
 80061de:	4293      	cmp	r3, r2
 80061e0:	f000 8199 	beq.w	8006516 <oslib_test_002_001_execute+0x3d6>
 80061e4:	49ba      	ldr	r1, [pc, #744]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 80061e6:	f7fb fadb 	bl	80017a0 <_test_assert>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d1d8      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(3);
 80061ee:	2303      	movs	r3, #3
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80061f0:	2110      	movs	r1, #16
 80061f2:	4668      	mov	r0, sp
  test_set_step(3);
 80061f4:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80061f6:	f7ff fd3b 	bl	8005c70 <chPipeReadTimeout.constprop.18>
    test_assert(n == 0, "not reset");
 80061fa:	fab0 f080 	clz	r0, r0
 80061fe:	0940      	lsrs	r0, r0, #5
 8006200:	49b2      	ldr	r1, [pc, #712]	; (80064cc <oslib_test_002_001_execute+0x38c>)
 8006202:	f7fb facd 	bl	80017a0 <_test_assert>
 8006206:	2800      	cmp	r0, #0
 8006208:	d1ca      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800620a:	68e3      	ldr	r3, [r4, #12]
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	4293      	cmp	r3, r2
 8006210:	f000 818a 	beq.w	8006528 <oslib_test_002_001_execute+0x3e8>
 8006214:	49ae      	ldr	r1, [pc, #696]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 8006216:	f7fb fac3 	bl	80017a0 <_test_assert>
 800621a:	2800      	cmp	r0, #0
 800621c:	d1c0      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800621e:	68e3      	ldr	r3, [r4, #12]
 8006220:	6822      	ldr	r2, [r4, #0]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8006222:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8006224:	2104      	movs	r1, #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006226:	4293      	cmp	r3, r2
  test_set_step(4);
 8006228:	6039      	str	r1, [r7, #0]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800622a:	f000 8186 	beq.w	800653a <oslib_test_002_001_execute+0x3fa>
 800622e:	49a8      	ldr	r1, [pc, #672]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 8006230:	f7fb fab6 	bl	80017a0 <_test_assert>
 8006234:	2800      	cmp	r0, #0
 8006236:	d1b3      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(5);
 8006238:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800623a:	2010      	movs	r0, #16
  test_set_step(5);
 800623c:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800623e:	f7ff fc9f 	bl	8005b80 <chPipeWriteTimeout.constprop.19>
    test_assert(n == PIPE_SIZE, "wrong size");
 8006242:	f1a0 0010 	sub.w	r0, r0, #16
 8006246:	fab0 f080 	clz	r0, r0
 800624a:	49a2      	ldr	r1, [pc, #648]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 800624c:	0940      	lsrs	r0, r0, #5
 800624e:	f7fb faa7 	bl	80017a0 <_test_assert>
 8006252:	2800      	cmp	r0, #0
 8006254:	d1a4      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	4293      	cmp	r3, r2
 800625c:	f000 8176 	beq.w	800654c <oslib_test_002_001_execute+0x40c>
 8006260:	499b      	ldr	r1, [pc, #620]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 8006262:	f7fb fa9d 	bl	80017a0 <_test_assert>
 8006266:	2800      	cmp	r0, #0
 8006268:	d19a      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(6);
 800626a:	2306      	movs	r3, #6
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800626c:	2110      	movs	r1, #16
 800626e:	4668      	mov	r0, sp
  test_set_step(6);
 8006270:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8006272:	f7ff fcfd 	bl	8005c70 <chPipeReadTimeout.constprop.18>
    test_assert(n == PIPE_SIZE, "wrong size");
 8006276:	f1a0 0010 	sub.w	r0, r0, #16
 800627a:	fab0 f080 	clz	r0, r0
 800627e:	4995      	ldr	r1, [pc, #596]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 8006280:	0940      	lsrs	r0, r0, #5
 8006282:	f7fb fa8d 	bl	80017a0 <_test_assert>
 8006286:	2800      	cmp	r0, #0
 8006288:	d18a      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800628a:	68e3      	ldr	r3, [r4, #12]
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	4293      	cmp	r3, r2
 8006290:	f000 8166 	beq.w	8006560 <oslib_test_002_001_execute+0x420>
 8006294:	498e      	ldr	r1, [pc, #568]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 8006296:	f7fb fa83 	bl	80017a0 <_test_assert>
 800629a:	2800      	cmp	r0, #0
 800629c:	d180      	bne.n	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800629e:	4669      	mov	r1, sp
 80062a0:	2210      	movs	r2, #16
 80062a2:	488d      	ldr	r0, [pc, #564]	; (80064d8 <oslib_test_002_001_execute+0x398>)
 80062a4:	f004 f9fe 	bl	800a6a4 <memcmp>
 80062a8:	fab0 f080 	clz	r0, r0
 80062ac:	0940      	lsrs	r0, r0, #5
 80062ae:	498b      	ldr	r1, [pc, #556]	; (80064dc <oslib_test_002_001_execute+0x39c>)
 80062b0:	f7fb fa76 	bl	80017a0 <_test_assert>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f47f af73 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(7);
 80062ba:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80062bc:	2004      	movs	r0, #4
  test_set_step(7);
 80062be:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80062c0:	f7ff fc5e 	bl	8005b80 <chPipeWriteTimeout.constprop.19>
    test_assert(n == 4, "wrong size");
 80062c4:	1f03      	subs	r3, r0, #4
 80062c6:	4258      	negs	r0, r3
 80062c8:	4158      	adcs	r0, r3
 80062ca:	4982      	ldr	r1, [pc, #520]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 80062cc:	f7fb fa68 	bl	80017a0 <_test_assert>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f47f af65 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80062d6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80062da:	4293      	cmp	r3, r2
 80062dc:	d009      	beq.n	80062f2 <oslib_test_002_001_execute+0x1b2>
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d106      	bne.n	80062f2 <oslib_test_002_001_execute+0x1b2>
 80062e4:	6920      	ldr	r0, [r4, #16]
 80062e6:	f1a0 0e04 	sub.w	lr, r0, #4
 80062ea:	f1de 0000 	rsbs	r0, lr, #0
 80062ee:	eb40 000e 	adc.w	r0, r0, lr
 80062f2:	4977      	ldr	r1, [pc, #476]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 80062f4:	f7fb fa54 	bl	80017a0 <_test_assert>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	f47f af51 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(8);
 80062fe:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8006300:	200c      	movs	r0, #12
  test_set_step(8);
 8006302:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8006304:	f7ff fc3c 	bl	8005b80 <chPipeWriteTimeout.constprop.19>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8006308:	f1a0 0c0c 	sub.w	ip, r0, #12
 800630c:	f1dc 0000 	rsbs	r0, ip, #0
 8006310:	eb40 000c 	adc.w	r0, r0, ip
 8006314:	496f      	ldr	r1, [pc, #444]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 8006316:	f7fb fa43 	bl	80017a0 <_test_assert>
 800631a:	2800      	cmp	r0, #0
 800631c:	f47f af40 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006320:	68e3      	ldr	r3, [r4, #12]
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	4293      	cmp	r3, r2
 8006326:	f000 8124 	beq.w	8006572 <oslib_test_002_001_execute+0x432>
 800632a:	4969      	ldr	r1, [pc, #420]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 800632c:	f7fb fa38 	bl	80017a0 <_test_assert>
 8006330:	2800      	cmp	r0, #0
 8006332:	f47f af35 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(9);
 8006336:	2309      	movs	r3, #9
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8006338:	2104      	movs	r1, #4
 800633a:	4668      	mov	r0, sp
  test_set_step(9);
 800633c:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 800633e:	f7ff fc97 	bl	8005c70 <chPipeReadTimeout.constprop.18>
    test_assert(n == 4, "wrong size");
 8006342:	1f05      	subs	r5, r0, #4
 8006344:	4268      	negs	r0, r5
 8006346:	4168      	adcs	r0, r5
 8006348:	4962      	ldr	r1, [pc, #392]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 800634a:	f7fb fa29 	bl	80017a0 <_test_assert>
 800634e:	2800      	cmp	r0, #0
 8006350:	f47f af26 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	68e2      	ldr	r2, [r4, #12]
 8006358:	429a      	cmp	r2, r3
 800635a:	d007      	beq.n	800636c <oslib_test_002_001_execute+0x22c>
 800635c:	68a2      	ldr	r2, [r4, #8]
 800635e:	4293      	cmp	r3, r2
 8006360:	d104      	bne.n	800636c <oslib_test_002_001_execute+0x22c>
 8006362:	6920      	ldr	r0, [r4, #16]
 8006364:	f1a0 010c 	sub.w	r1, r0, #12
 8006368:	4248      	negs	r0, r1
 800636a:	4148      	adcs	r0, r1
 800636c:	4958      	ldr	r1, [pc, #352]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 800636e:	f7fb fa17 	bl	80017a0 <_test_assert>
 8006372:	2800      	cmp	r0, #0
 8006374:	f47f af14 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 8006378:	9800      	ldr	r0, [sp, #0]
 800637a:	4b59      	ldr	r3, [pc, #356]	; (80064e0 <oslib_test_002_001_execute+0x3a0>)
 800637c:	4957      	ldr	r1, [pc, #348]	; (80064dc <oslib_test_002_001_execute+0x39c>)
 800637e:	1ac2      	subs	r2, r0, r3
 8006380:	4250      	negs	r0, r2
 8006382:	4150      	adcs	r0, r2
 8006384:	f7fb fa0c 	bl	80017a0 <_test_assert>
 8006388:	2800      	cmp	r0, #0
 800638a:	f47f af09 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(10);
 800638e:	230a      	movs	r3, #10
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8006390:	210c      	movs	r1, #12
 8006392:	4668      	mov	r0, sp
  test_set_step(10);
 8006394:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8006396:	f7ff fc6b 	bl	8005c70 <chPipeReadTimeout.constprop.18>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800639a:	f1a0 030c 	sub.w	r3, r0, #12
 800639e:	4258      	negs	r0, r3
 80063a0:	4158      	adcs	r0, r3
 80063a2:	494c      	ldr	r1, [pc, #304]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 80063a4:	f7fb f9fc 	bl	80017a0 <_test_assert>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f47f aef9 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80063ae:	68e3      	ldr	r3, [r4, #12]
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	4293      	cmp	r3, r2
 80063b4:	f000 80e7 	beq.w	8006586 <oslib_test_002_001_execute+0x446>
 80063b8:	4945      	ldr	r1, [pc, #276]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 80063ba:	f7fb f9f1 	bl	80017a0 <_test_assert>
 80063be:	2800      	cmp	r0, #0
 80063c0:	f47f aeee 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 80063c4:	4669      	mov	r1, sp
 80063c6:	220c      	movs	r2, #12
 80063c8:	4843      	ldr	r0, [pc, #268]	; (80064d8 <oslib_test_002_001_execute+0x398>)
 80063ca:	f004 f96b 	bl	800a6a4 <memcmp>
 80063ce:	fab0 f080 	clz	r0, r0
 80063d2:	0940      	lsrs	r0, r0, #5
 80063d4:	4941      	ldr	r1, [pc, #260]	; (80064dc <oslib_test_002_001_execute+0x39c>)
 80063d6:	f7fb f9e3 	bl	80017a0 <_test_assert>
 80063da:	2800      	cmp	r0, #0
 80063dc:	f47f aee0 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(11);
 80063e0:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80063e2:	2005      	movs	r0, #5
  test_set_step(11);
 80063e4:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80063e6:	f7ff fbcb 	bl	8005b80 <chPipeWriteTimeout.constprop.19>
    test_assert(n == 5, "wrong size");
 80063ea:	f1a0 0e05 	sub.w	lr, r0, #5
 80063ee:	f1de 0000 	rsbs	r0, lr, #0
 80063f2:	eb40 000e 	adc.w	r0, r0, lr
 80063f6:	4937      	ldr	r1, [pc, #220]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 80063f8:	f7fb f9d2 	bl	80017a0 <_test_assert>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f47f aecf 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8006402:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <oslib_test_002_001_execute+0x2de>
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	4293      	cmp	r3, r2
 800640e:	d106      	bne.n	800641e <oslib_test_002_001_execute+0x2de>
 8006410:	6920      	ldr	r0, [r4, #16]
 8006412:	f1a0 0c05 	sub.w	ip, r0, #5
 8006416:	f1dc 0000 	rsbs	r0, ip, #0
 800641a:	eb40 000c 	adc.w	r0, r0, ip
 800641e:	492c      	ldr	r1, [pc, #176]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 8006420:	f7fb f9be 	bl	80017a0 <_test_assert>
 8006424:	2800      	cmp	r0, #0
 8006426:	f47f aebb 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(12);
 800642a:	230c      	movs	r3, #12
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 800642c:	2105      	movs	r1, #5
 800642e:	4668      	mov	r0, sp
  test_set_step(12);
 8006430:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8006432:	f7ff fc1d 	bl	8005c70 <chPipeReadTimeout.constprop.18>
    test_assert(n == 5, "wrong size");
 8006436:	1f46      	subs	r6, r0, #5
 8006438:	4270      	negs	r0, r6
 800643a:	4170      	adcs	r0, r6
 800643c:	4925      	ldr	r1, [pc, #148]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 800643e:	f7fb f9af 	bl	80017a0 <_test_assert>
 8006442:	2800      	cmp	r0, #0
 8006444:	f47f aeac 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006448:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800644c:	4293      	cmp	r3, r2
 800644e:	f000 80b5 	beq.w	80065bc <oslib_test_002_001_execute+0x47c>
 8006452:	491f      	ldr	r1, [pc, #124]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 8006454:	f7fb f9a4 	bl	80017a0 <_test_assert>
 8006458:	2800      	cmp	r0, #0
 800645a:	f47f aea1 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 800645e:	4669      	mov	r1, sp
 8006460:	2205      	movs	r2, #5
 8006462:	481d      	ldr	r0, [pc, #116]	; (80064d8 <oslib_test_002_001_execute+0x398>)
 8006464:	f004 f91e 	bl	800a6a4 <memcmp>
 8006468:	fab0 f080 	clz	r0, r0
 800646c:	0940      	lsrs	r0, r0, #5
 800646e:	491b      	ldr	r1, [pc, #108]	; (80064dc <oslib_test_002_001_execute+0x39c>)
 8006470:	f7fb f996 	bl	80017a0 <_test_assert>
 8006474:	2800      	cmp	r0, #0
 8006476:	f47f ae93 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(13);
 800647a:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800647c:	2010      	movs	r0, #16
  test_set_step(13);
 800647e:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8006480:	f7ff fb7e 	bl	8005b80 <chPipeWriteTimeout.constprop.19>
    test_assert(n == PIPE_SIZE, "wrong size");
 8006484:	f1a0 0510 	sub.w	r5, r0, #16
 8006488:	4268      	negs	r0, r5
 800648a:	4168      	adcs	r0, r5
 800648c:	4911      	ldr	r1, [pc, #68]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 800648e:	f7fb f987 	bl	80017a0 <_test_assert>
 8006492:	2800      	cmp	r0, #0
 8006494:	f47f ae84 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006498:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800649c:	4293      	cmp	r3, r2
 800649e:	f000 8083 	beq.w	80065a8 <oslib_test_002_001_execute+0x468>
 80064a2:	490b      	ldr	r1, [pc, #44]	; (80064d0 <oslib_test_002_001_execute+0x390>)
 80064a4:	f7fb f97c 	bl	80017a0 <_test_assert>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f47f ae79 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
  test_set_step(14);
 80064ae:	230e      	movs	r3, #14
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80064b0:	2110      	movs	r1, #16
 80064b2:	4668      	mov	r0, sp
  test_set_step(14);
 80064b4:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80064b6:	f7ff fbdb 	bl	8005c70 <chPipeReadTimeout.constprop.18>
    test_assert(n == PIPE_SIZE, "wrong size");
 80064ba:	f1a0 0310 	sub.w	r3, r0, #16
 80064be:	4258      	negs	r0, r3
 80064c0:	4158      	adcs	r0, r3
 80064c2:	4904      	ldr	r1, [pc, #16]	; (80064d4 <oslib_test_002_001_execute+0x394>)
 80064c4:	f7fb f96c 	bl	80017a0 <_test_assert>
 80064c8:	e00c      	b.n	80064e4 <oslib_test_002_001_execute+0x3a4>
 80064ca:	bf00      	nop
 80064cc:	0800aff8 	.word	0x0800aff8
 80064d0:	0800b028 	.word	0x0800b028
 80064d4:	0800af08 	.word	0x0800af08
 80064d8:	0800b2d4 	.word	0x0800b2d4
 80064dc:	0800b004 	.word	0x0800b004
 80064e0:	33323130 	.word	0x33323130
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f47f ae5b 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80064ea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d052      	beq.n	8006598 <oslib_test_002_001_execute+0x458>
 80064f2:	4937      	ldr	r1, [pc, #220]	; (80065d0 <oslib_test_002_001_execute+0x490>)
 80064f4:	f7fb f954 	bl	80017a0 <_test_assert>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	f47f ae51 	bne.w	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80064fe:	4669      	mov	r1, sp
 8006500:	2210      	movs	r2, #16
 8006502:	4834      	ldr	r0, [pc, #208]	; (80065d4 <oslib_test_002_001_execute+0x494>)
 8006504:	f004 f8ce 	bl	800a6a4 <memcmp>
 8006508:	fab0 f080 	clz	r0, r0
 800650c:	4932      	ldr	r1, [pc, #200]	; (80065d8 <oslib_test_002_001_execute+0x498>)
 800650e:	0940      	lsrs	r0, r0, #5
 8006510:	f7fb f946 	bl	80017a0 <_test_assert>
 8006514:	e644      	b.n	80061a0 <oslib_test_002_001_execute+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006516:	68a2      	ldr	r2, [r4, #8]
 8006518:	4293      	cmp	r3, r2
 800651a:	f47f ae63 	bne.w	80061e4 <oslib_test_002_001_execute+0xa4>
 800651e:	6920      	ldr	r0, [r4, #16]
 8006520:	fab0 f080 	clz	r0, r0
 8006524:	0940      	lsrs	r0, r0, #5
 8006526:	e65d      	b.n	80061e4 <oslib_test_002_001_execute+0xa4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006528:	68a2      	ldr	r2, [r4, #8]
 800652a:	4293      	cmp	r3, r2
 800652c:	f47f ae72 	bne.w	8006214 <oslib_test_002_001_execute+0xd4>
 8006530:	6920      	ldr	r0, [r4, #16]
 8006532:	fab0 f080 	clz	r0, r0
 8006536:	0940      	lsrs	r0, r0, #5
 8006538:	e66c      	b.n	8006214 <oslib_test_002_001_execute+0xd4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800653a:	68a2      	ldr	r2, [r4, #8]
 800653c:	4293      	cmp	r3, r2
 800653e:	f47f ae76 	bne.w	800622e <oslib_test_002_001_execute+0xee>
 8006542:	6920      	ldr	r0, [r4, #16]
 8006544:	fab0 f080 	clz	r0, r0
 8006548:	0940      	lsrs	r0, r0, #5
 800654a:	e670      	b.n	800622e <oslib_test_002_001_execute+0xee>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800654c:	68a2      	ldr	r2, [r4, #8]
 800654e:	4293      	cmp	r3, r2
 8006550:	f47f ae86 	bne.w	8006260 <oslib_test_002_001_execute+0x120>
 8006554:	6920      	ldr	r0, [r4, #16]
 8006556:	f1a0 0210 	sub.w	r2, r0, #16
 800655a:	4250      	negs	r0, r2
 800655c:	4150      	adcs	r0, r2
 800655e:	e67f      	b.n	8006260 <oslib_test_002_001_execute+0x120>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006560:	68a2      	ldr	r2, [r4, #8]
 8006562:	4293      	cmp	r3, r2
 8006564:	f47f ae96 	bne.w	8006294 <oslib_test_002_001_execute+0x154>
 8006568:	6920      	ldr	r0, [r4, #16]
 800656a:	fab0 f080 	clz	r0, r0
 800656e:	0940      	lsrs	r0, r0, #5
 8006570:	e690      	b.n	8006294 <oslib_test_002_001_execute+0x154>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006572:	68a2      	ldr	r2, [r4, #8]
 8006574:	4293      	cmp	r3, r2
 8006576:	f47f aed8 	bne.w	800632a <oslib_test_002_001_execute+0x1ea>
 800657a:	6920      	ldr	r0, [r4, #16]
 800657c:	f1a0 0610 	sub.w	r6, r0, #16
 8006580:	4270      	negs	r0, r6
 8006582:	4170      	adcs	r0, r6
 8006584:	e6d1      	b.n	800632a <oslib_test_002_001_execute+0x1ea>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006586:	68a2      	ldr	r2, [r4, #8]
 8006588:	4293      	cmp	r3, r2
 800658a:	f47f af15 	bne.w	80063b8 <oslib_test_002_001_execute+0x278>
 800658e:	6920      	ldr	r0, [r4, #16]
 8006590:	fab0 f080 	clz	r0, r0
 8006594:	0940      	lsrs	r0, r0, #5
 8006596:	e70f      	b.n	80063b8 <oslib_test_002_001_execute+0x278>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	4293      	cmp	r3, r2
 800659c:	d0a9      	beq.n	80064f2 <oslib_test_002_001_execute+0x3b2>
 800659e:	6920      	ldr	r0, [r4, #16]
 80065a0:	fab0 f080 	clz	r0, r0
 80065a4:	0940      	lsrs	r0, r0, #5
 80065a6:	e7a4      	b.n	80064f2 <oslib_test_002_001_execute+0x3b2>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	4293      	cmp	r3, r2
 80065ac:	f43f af79 	beq.w	80064a2 <oslib_test_002_001_execute+0x362>
 80065b0:	6920      	ldr	r0, [r4, #16]
 80065b2:	f1a0 0210 	sub.w	r2, r0, #16
 80065b6:	4250      	negs	r0, r2
 80065b8:	4150      	adcs	r0, r2
 80065ba:	e772      	b.n	80064a2 <oslib_test_002_001_execute+0x362>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	4293      	cmp	r3, r2
 80065c0:	f43f af47 	beq.w	8006452 <oslib_test_002_001_execute+0x312>
 80065c4:	6920      	ldr	r0, [r4, #16]
 80065c6:	fab0 f080 	clz	r0, r0
 80065ca:	0940      	lsrs	r0, r0, #5
 80065cc:	e741      	b.n	8006452 <oslib_test_002_001_execute+0x312>
 80065ce:	bf00      	nop
 80065d0:	0800b028 	.word	0x0800b028
 80065d4:	0800b2d4 	.word	0x0800b2d4
 80065d8:	0800b004 	.word	0x0800b004
 80065dc:	00000000 	.word	0x00000000

080065e0 <rt_test_010_011_execute>:
static void rt_test_010_011_execute(void) {
 80065e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80065e4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8006668 <rt_test_010_011_execute+0x88>
      chMtxLock(&mtx1);
 80065e8:	4c1c      	ldr	r4, [pc, #112]	; (800665c <rt_test_010_011_execute+0x7c>)
  test_set_step(1);
 80065ea:	2301      	movs	r3, #1
 80065ec:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80065f0:	f7fd fcc6 	bl	8003f80 <test_wait_tick>
    n = 0;
 80065f4:	2500      	movs	r5, #0
    start = test_wait_tick();
 80065f6:	4680      	mov	r8, r0
 80065f8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80065fc:	f242 760f 	movw	r6, #9999	; 0x270f
      chMtxLock(&mtx1);
 8006600:	4620      	mov	r0, r4
 8006602:	f7fd ffed 	bl	80045e0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8006606:	4620      	mov	r0, r4
 8006608:	f7ff f9ba 	bl	8005980 <chMtxUnlock>
      chMtxLock(&mtx1);
 800660c:	4620      	mov	r0, r4
 800660e:	f7fd ffe7 	bl	80045e0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8006612:	4620      	mov	r0, r4
 8006614:	f7ff f9b4 	bl	8005980 <chMtxUnlock>
      chMtxLock(&mtx1);
 8006618:	4620      	mov	r0, r4
 800661a:	f7fd ffe1 	bl	80045e0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800661e:	4620      	mov	r0, r4
 8006620:	f7ff f9ae 	bl	8005980 <chMtxUnlock>
      chMtxLock(&mtx1);
 8006624:	4620      	mov	r0, r4
 8006626:	f7fd ffdb 	bl	80045e0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff f9a8 	bl	8005980 <chMtxUnlock>
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8006636:	42b3      	cmp	r3, r6
      n++;
 8006638:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800663c:	d9e0      	bls.n	8006600 <rt_test_010_011_execute+0x20>
  test_set_step(2);
 800663e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8006640:	4807      	ldr	r0, [pc, #28]	; (8006660 <rt_test_010_011_execute+0x80>)
  test_set_step(2);
 8006642:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8006646:	f7fb f9ab 	bl	80019a0 <test_print>
    test_printn(n * 4);
 800664a:	00a8      	lsls	r0, r5, #2
 800664c:	f7fb f938 	bl	80018c0 <test_printn>
    test_println(" lock+unlock/S");
 8006650:	4804      	ldr	r0, [pc, #16]	; (8006664 <rt_test_010_011_execute+0x84>)
}
 8006652:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8006656:	f7fb b983 	b.w	8001960 <test_println>
 800665a:	bf00      	nop
 800665c:	20001028 	.word	0x20001028
 8006660:	0800c450 	.word	0x0800c450
 8006664:	0800c49c 	.word	0x0800c49c
 8006668:	2000178c 	.word	0x2000178c
 800666c:	00000000 	.word	0x00000000

08006670 <thread8>:
static THD_FUNCTION(thread8, p) {
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	4607      	mov	r7, r0
  chMtxLock(&m2);
 8006674:	481b      	ldr	r0, [pc, #108]	; (80066e4 <thread8+0x74>)
 8006676:	f7fd ffb3 	bl	80045e0 <chMtxLock>
  chMtxLock(&m1);
 800667a:	481b      	ldr	r0, [pc, #108]	; (80066e8 <thread8+0x78>)
 800667c:	f7fd ffb0 	bl	80045e0 <chMtxLock>
 8006680:	2320      	movs	r3, #32
 8006682:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8006686:	4d19      	ldr	r5, [pc, #100]	; (80066ec <thread8+0x7c>)
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8006688:	69ab      	ldr	r3, [r5, #24]
 800668a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 800668c:	4630      	mov	r0, r6
 800668e:	f7fb fd3f 	bl	8002110 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8006692:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <thread8+0x80>)
 8006694:	69ac      	ldr	r4, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8006696:	4618      	mov	r0, r3
 8006698:	6263      	str	r3, [r4, #36]	; 0x24
 800669a:	e003      	b.n	80066a4 <thread8+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800669c:	6899      	ldr	r1, [r3, #8]
 800669e:	68a2      	ldr	r2, [r4, #8]
 80066a0:	4291      	cmp	r1, r2
 80066a2:	d302      	bcc.n	80066aa <thread8+0x3a>
    cp = cp->queue.next;
 80066a4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80066a6:	4283      	cmp	r3, r0
 80066a8:	d1f8      	bne.n	800669c <thread8+0x2c>
  tp->queue.prev             = cp->queue.prev;
 80066aa:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
 80066ac:	2007      	movs	r0, #7
 80066ae:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80066b2:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80066b4:	605c      	str	r4, [r3, #4]
 80066b6:	f7fd f893 	bl	80037e0 <chSchGoSleepS>
  return currp->u.rdymsg;
 80066ba:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	3301      	adds	r3, #1
 80066c0:	d002      	beq.n	80066c8 <thread8+0x58>
    chMtxLockS(mp);
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7fd ff14 	bl	80044f0 <chMtxLockS>
 80066c8:	2300      	movs	r3, #0
 80066ca:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80066ce:	7838      	ldrb	r0, [r7, #0]
 80066d0:	f7fb f906 	bl	80018e0 <test_emit_token>
  chMtxUnlock(&m1);
 80066d4:	4804      	ldr	r0, [pc, #16]	; (80066e8 <thread8+0x78>)
 80066d6:	f7ff f953 	bl	8005980 <chMtxUnlock>
  chMtxUnlock(&m2);
 80066da:	4802      	ldr	r0, [pc, #8]	; (80066e4 <thread8+0x74>)
}
 80066dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 80066e0:	f7ff b94e 	b.w	8005980 <chMtxUnlock>
 80066e4:	20000c40 	.word	0x20000c40
 80066e8:	20000c30 	.word	0x20000c30
 80066ec:	20000da0 	.word	0x20000da0
 80066f0:	20000c04 	.word	0x20000c04
	...

08006700 <thread6>:
static THD_FUNCTION(thread6, p) {
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4606      	mov	r6, r0
  chMtxLock(&m1);
 8006704:	4816      	ldr	r0, [pc, #88]	; (8006760 <thread6+0x60>)
 8006706:	f7fd ff6b 	bl	80045e0 <chMtxLock>
 800670a:	2320      	movs	r3, #32
 800670c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8006710:	4b14      	ldr	r3, [pc, #80]	; (8006764 <thread6+0x64>)
 8006712:	699c      	ldr	r4, [r3, #24]
 8006714:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8006716:	4628      	mov	r0, r5
 8006718:	f7fb fcfa 	bl	8002110 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 800671c:	4812      	ldr	r0, [pc, #72]	; (8006768 <thread6+0x68>)
 800671e:	6260      	str	r0, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8006720:	4603      	mov	r3, r0
 8006722:	e003      	b.n	800672c <thread6+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8006724:	6899      	ldr	r1, [r3, #8]
 8006726:	68a2      	ldr	r2, [r4, #8]
 8006728:	4291      	cmp	r1, r2
 800672a:	d302      	bcc.n	8006732 <thread6+0x32>
    cp = cp->queue.next;
 800672c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800672e:	4283      	cmp	r3, r0
 8006730:	d1f8      	bne.n	8006724 <thread6+0x24>
  tp->queue.prev             = cp->queue.prev;
 8006732:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8006734:	2007      	movs	r0, #7
 8006736:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800673a:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800673c:	605c      	str	r4, [r3, #4]
 800673e:	f7fd f84f 	bl	80037e0 <chSchGoSleepS>
  chMtxLockS(mp);
 8006742:	4628      	mov	r0, r5
 8006744:	f7fd fed4 	bl	80044f0 <chMtxLockS>
 8006748:	2300      	movs	r3, #0
 800674a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800674e:	7830      	ldrb	r0, [r6, #0]
 8006750:	f7fb f8c6 	bl	80018e0 <test_emit_token>
  chMtxUnlock(&m1);
 8006754:	4802      	ldr	r0, [pc, #8]	; (8006760 <thread6+0x60>)
}
 8006756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 800675a:	f7ff b911 	b.w	8005980 <chMtxUnlock>
 800675e:	bf00      	nop
 8006760:	20000c30 	.word	0x20000c30
 8006764:	20000da0 	.word	0x20000da0
 8006768:	20000c04 	.word	0x20000c04
 800676c:	00000000 	.word	0x00000000

08006770 <thread9>:
static THD_FUNCTION(thread9, p) {
 8006770:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 8006772:	4c06      	ldr	r4, [pc, #24]	; (800678c <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 8006774:	4605      	mov	r5, r0
  chMtxLock(&m2);
 8006776:	4620      	mov	r0, r4
 8006778:	f7fd ff32 	bl	80045e0 <chMtxLock>
  test_emit_token(*(char *)p);
 800677c:	7828      	ldrb	r0, [r5, #0]
 800677e:	f7fb f8af 	bl	80018e0 <test_emit_token>
  chMtxUnlock(&m2);
 8006782:	4620      	mov	r0, r4
}
 8006784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8006788:	f7ff b8fa 	b.w	8005980 <chMtxUnlock>
 800678c:	20000c40 	.word	0x20000c40

08006790 <rt_test_006_005_execute>:
static void rt_test_006_005_execute(void) {
 8006790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006794:	4d4e      	ldr	r5, [pc, #312]	; (80068d0 <rt_test_006_005_execute+0x140>)
  test_set_step(2);
 8006796:	4c4f      	ldr	r4, [pc, #316]	; (80068d4 <rt_test_006_005_execute+0x144>)
  return chThdGetSelfX()->prio;
 8006798:	69aa      	ldr	r2, [r5, #24]
 800679a:	2302      	movs	r3, #2
 800679c:	6896      	ldr	r6, [r2, #8]
 800679e:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 80067a0:	f7fa fda6 	bl	80012f0 <chMtxTryLock.constprop.63>
    test_assert(b, "already locked");
 80067a4:	494c      	ldr	r1, [pc, #304]	; (80068d8 <rt_test_006_005_execute+0x148>)
 80067a6:	f7fa fffb 	bl	80017a0 <_test_assert>
 80067aa:	b108      	cbz	r0, 80067b0 <rt_test_006_005_execute+0x20>
}
 80067ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 80067b0:	2303      	movs	r3, #3
 80067b2:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 80067b4:	f7fa fd9c 	bl	80012f0 <chMtxTryLock.constprop.63>
    test_assert(!b, "not locked");
 80067b8:	f080 0001 	eor.w	r0, r0, #1
 80067bc:	b2c0      	uxtb	r0, r0
 80067be:	4947      	ldr	r1, [pc, #284]	; (80068dc <rt_test_006_005_execute+0x14c>)
 80067c0:	f7fa ffee 	bl	80017a0 <_test_assert>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1f1      	bne.n	80067ac <rt_test_006_005_execute+0x1c>
    chMtxUnlock(&m1);
 80067c8:	4f45      	ldr	r7, [pc, #276]	; (80068e0 <rt_test_006_005_execute+0x150>)
  test_set_step(4);
 80067ca:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 80067cc:	4638      	mov	r0, r7
  test_set_step(4);
 80067ce:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 80067d0:	f7ff f8d6 	bl	8005980 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 80067d4:	68b8      	ldr	r0, [r7, #8]
 80067d6:	4943      	ldr	r1, [pc, #268]	; (80068e4 <rt_test_006_005_execute+0x154>)
 80067d8:	fab0 f080 	clz	r0, r0
 80067dc:	0940      	lsrs	r0, r0, #5
 80067de:	f7fa ffdf 	bl	80017a0 <_test_assert>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d1e2      	bne.n	80067ac <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80067e6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80067e8:	493f      	ldr	r1, [pc, #252]	; (80068e8 <rt_test_006_005_execute+0x158>)
 80067ea:	1bc0      	subs	r0, r0, r7
 80067ec:	fab0 f080 	clz	r0, r0
 80067f0:	0940      	lsrs	r0, r0, #5
 80067f2:	f7fa ffd5 	bl	80017a0 <_test_assert>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d1d8      	bne.n	80067ac <rt_test_006_005_execute+0x1c>
 80067fa:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80067fc:	493b      	ldr	r1, [pc, #236]	; (80068ec <rt_test_006_005_execute+0x15c>)
 80067fe:	6898      	ldr	r0, [r3, #8]
 8006800:	1b80      	subs	r0, r0, r6
 8006802:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 8006806:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8006808:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 800680a:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800680c:	f7fa ffc8 	bl	80017a0 <_test_assert>
 8006810:	2800      	cmp	r0, #0
 8006812:	d1cb      	bne.n	80067ac <rt_test_006_005_execute+0x1c>
  test_set_step(6);
 8006814:	2306      	movs	r3, #6
 8006816:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8006818:	f7fa fd6a 	bl	80012f0 <chMtxTryLock.constprop.63>
    test_assert(b, "already locked");
 800681c:	492e      	ldr	r1, [pc, #184]	; (80068d8 <rt_test_006_005_execute+0x148>)
 800681e:	f7fa ffbf 	bl	80017a0 <_test_assert>
 8006822:	2800      	cmp	r0, #0
 8006824:	d1c2      	bne.n	80067ac <rt_test_006_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8006826:	f7fa fd63 	bl	80012f0 <chMtxTryLock.constprop.63>
    test_assert(!b, "not locked");
 800682a:	f080 0001 	eor.w	r0, r0, #1
 800682e:	b2c0      	uxtb	r0, r0
 8006830:	492a      	ldr	r1, [pc, #168]	; (80068dc <rt_test_006_005_execute+0x14c>)
 8006832:	f7fa ffb5 	bl	80017a0 <_test_assert>
 8006836:	2800      	cmp	r0, #0
 8006838:	d1b8      	bne.n	80067ac <rt_test_006_005_execute+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 800683a:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800683e:	2320      	movs	r3, #32
 8006840:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 8006844:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8006848:	b1db      	cbz	r3, 8006882 <rt_test_006_005_execute+0xf2>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 800684a:	4681      	mov	r9, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 800684c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 800684e:	68d9      	ldr	r1, [r3, #12]
 8006850:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8006854:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8006856:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8006858:	d035      	beq.n	80068c6 <rt_test_006_005_execute+0x136>
        mp->next = tp->mtxlist;
 800685a:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800685e:	6811      	ldr	r1, [r2, #0]
 8006860:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006862:	604b      	str	r3, [r1, #4]
 8006864:	e9c3 2c02 	strd	r2, ip, [r3, #8]
        tp->mtxlist = mp;
 8006868:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 800686a:	f7fb fb51 	bl	8001f10 <chSchReadyI>
 800686e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1ea      	bne.n	800684c <rt_test_006_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 8006876:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800687a:	f8c8 3008 	str.w	r3, [r8, #8]
    chSchRescheduleS();
 800687e:	f7fe fa4f 	bl	8004d20 <chSchRescheduleS>
 8006882:	2300      	movs	r3, #0
 8006884:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8006888:	68b8      	ldr	r0, [r7, #8]
 800688a:	4916      	ldr	r1, [pc, #88]	; (80068e4 <rt_test_006_005_execute+0x154>)
 800688c:	fab0 f080 	clz	r0, r0
 8006890:	0940      	lsrs	r0, r0, #5
 8006892:	f7fa ff85 	bl	80017a0 <_test_assert>
 8006896:	2800      	cmp	r0, #0
 8006898:	d188      	bne.n	80067ac <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 800689a:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 800689c:	4912      	ldr	r1, [pc, #72]	; (80068e8 <rt_test_006_005_execute+0x158>)
 800689e:	1bc7      	subs	r7, r0, r7
 80068a0:	4278      	negs	r0, r7
 80068a2:	4178      	adcs	r0, r7
 80068a4:	f7fa ff7c 	bl	80017a0 <_test_assert>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	f47f af7f 	bne.w	80067ac <rt_test_006_005_execute+0x1c>
 80068ae:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80068b0:	490e      	ldr	r1, [pc, #56]	; (80068ec <rt_test_006_005_execute+0x15c>)
 80068b2:	6898      	ldr	r0, [r3, #8]
 80068b4:	1b82      	subs	r2, r0, r6
  test_set_step(7);
 80068b6:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80068b8:	4250      	negs	r0, r2
  test_set_step(7);
 80068ba:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80068bc:	4150      	adcs	r0, r2
}
 80068be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80068c2:	f7fa bf6d 	b.w	80017a0 <_test_assert>
        mp->owner = NULL;
 80068c6:	f8c3 9008 	str.w	r9, [r3, #8]
 80068ca:	460b      	mov	r3, r1
 80068cc:	e7d1      	b.n	8006872 <rt_test_006_005_execute+0xe2>
 80068ce:	bf00      	nop
 80068d0:	20000da0 	.word	0x20000da0
 80068d4:	2000178c 	.word	0x2000178c
 80068d8:	0800c0f0 	.word	0x0800c0f0
 80068dc:	0800c100 	.word	0x0800c100
 80068e0:	20000c30 	.word	0x20000c30
 80068e4:	0800c10c 	.word	0x0800c10c
 80068e8:	0800c044 	.word	0x0800c044
 80068ec:	0800c118 	.word	0x0800c118

080068f0 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 80068f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80068f4:	4d44      	ldr	r5, [pc, #272]	; (8006a08 <rt_test_006_004_execute+0x118>)
  test_set_step(2);
 80068f6:	4e45      	ldr	r6, [pc, #276]	; (8006a0c <rt_test_006_004_execute+0x11c>)
  return chThdGetSelfX()->prio;
 80068f8:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80068fa:	4a45      	ldr	r2, [pc, #276]	; (8006a10 <rt_test_006_004_execute+0x120>)
 80068fc:	689c      	ldr	r4, [r3, #8]
 80068fe:	4845      	ldr	r0, [pc, #276]	; (8006a14 <rt_test_006_004_execute+0x124>)
 8006900:	4b45      	ldr	r3, [pc, #276]	; (8006a18 <rt_test_006_004_execute+0x128>)
static void rt_test_006_004_execute(void) {
 8006902:	b083      	sub	sp, #12
    pa = p + 1;
 8006904:	f104 0801 	add.w	r8, r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8006908:	9200      	str	r2, [sp, #0]
  test_set_step(2);
 800690a:	2702      	movs	r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800690c:	4642      	mov	r2, r8
 800690e:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 8006912:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8006914:	f7fc fee4 	bl	80036e0 <chThdCreateStatic>
 8006918:	4f40      	ldr	r7, [pc, #256]	; (8006a1c <rt_test_006_004_execute+0x12c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800691a:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <rt_test_006_004_execute+0x130>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800691c:	6038      	str	r0, [r7, #0]
    pb = p + 2;
 800691e:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8006922:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006926:	464a      	mov	r2, r9
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	483e      	ldr	r0, [pc, #248]	; (8006a24 <rt_test_006_004_execute+0x134>)
 800692c:	4b3e      	ldr	r3, [pc, #248]	; (8006a28 <rt_test_006_004_execute+0x138>)
 800692e:	f7fc fed7 	bl	80036e0 <chThdCreateStatic>
  test_set_step(3);
 8006932:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8006934:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
 8006936:	483d      	ldr	r0, [pc, #244]	; (8006a2c <rt_test_006_004_execute+0x13c>)
  test_set_step(3);
 8006938:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 800693a:	f7fd fe51 	bl	80045e0 <chMtxLock>
 800693e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8006940:	493b      	ldr	r1, [pc, #236]	; (8006a30 <rt_test_006_004_execute+0x140>)
 8006942:	6898      	ldr	r0, [r3, #8]
 8006944:	1b00      	subs	r0, r0, r4
 8006946:	fab0 f080 	clz	r0, r0
 800694a:	0940      	lsrs	r0, r0, #5
 800694c:	f7fa ff28 	bl	80017a0 <_test_assert>
 8006950:	b110      	cbz	r0, 8006958 <rt_test_006_004_execute+0x68>
}
 8006952:	b003      	add	sp, #12
 8006954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 8006958:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 800695a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 800695e:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8006960:	f7fd fa86 	bl	8003e70 <chThdSleep>
 8006964:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8006966:	4932      	ldr	r1, [pc, #200]	; (8006a30 <rt_test_006_004_execute+0x140>)
 8006968:	6898      	ldr	r0, [r3, #8]
 800696a:	eba0 0008 	sub.w	r0, r0, r8
 800696e:	fab0 f080 	clz	r0, r0
 8006972:	0940      	lsrs	r0, r0, #5
 8006974:	f7fa ff14 	bl	80017a0 <_test_assert>
 8006978:	2800      	cmp	r0, #0
 800697a:	d1ea      	bne.n	8006952 <rt_test_006_004_execute+0x62>
  test_set_step(5);
 800697c:	2305      	movs	r3, #5
    chMtxLock(&m2);
 800697e:	482d      	ldr	r0, [pc, #180]	; (8006a34 <rt_test_006_004_execute+0x144>)
  test_set_step(5);
 8006980:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8006982:	f7fd fe2d 	bl	80045e0 <chMtxLock>
 8006986:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8006988:	4929      	ldr	r1, [pc, #164]	; (8006a30 <rt_test_006_004_execute+0x140>)
 800698a:	6898      	ldr	r0, [r3, #8]
 800698c:	eba0 0008 	sub.w	r0, r0, r8
 8006990:	fab0 f080 	clz	r0, r0
 8006994:	0940      	lsrs	r0, r0, #5
 8006996:	f7fa ff03 	bl	80017a0 <_test_assert>
 800699a:	2800      	cmp	r0, #0
 800699c:	d1d9      	bne.n	8006952 <rt_test_006_004_execute+0x62>
  test_set_step(6);
 800699e:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 80069a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 80069a4:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 80069a6:	f7fd fa63 	bl	8003e70 <chThdSleep>
 80069aa:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 80069ac:	4920      	ldr	r1, [pc, #128]	; (8006a30 <rt_test_006_004_execute+0x140>)
 80069ae:	6898      	ldr	r0, [r3, #8]
 80069b0:	eba0 0009 	sub.w	r0, r0, r9
 80069b4:	fab0 f080 	clz	r0, r0
 80069b8:	0940      	lsrs	r0, r0, #5
 80069ba:	f7fa fef1 	bl	80017a0 <_test_assert>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d1c7      	bne.n	8006952 <rt_test_006_004_execute+0x62>
  test_set_step(7);
 80069c2:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 80069c4:	481b      	ldr	r0, [pc, #108]	; (8006a34 <rt_test_006_004_execute+0x144>)
  test_set_step(7);
 80069c6:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 80069c8:	f7fe ffda 	bl	8005980 <chMtxUnlock>
 80069cc:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80069ce:	4918      	ldr	r1, [pc, #96]	; (8006a30 <rt_test_006_004_execute+0x140>)
 80069d0:	6898      	ldr	r0, [r3, #8]
 80069d2:	eba0 0008 	sub.w	r0, r0, r8
 80069d6:	fab0 f080 	clz	r0, r0
 80069da:	0940      	lsrs	r0, r0, #5
 80069dc:	f7fa fee0 	bl	80017a0 <_test_assert>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d1b6      	bne.n	8006952 <rt_test_006_004_execute+0x62>
  test_set_step(8);
 80069e4:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 80069e6:	4811      	ldr	r0, [pc, #68]	; (8006a2c <rt_test_006_004_execute+0x13c>)
  test_set_step(8);
 80069e8:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 80069ea:	f7fe ffc9 	bl	8005980 <chMtxUnlock>
 80069ee:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 80069f0:	490f      	ldr	r1, [pc, #60]	; (8006a30 <rt_test_006_004_execute+0x140>)
 80069f2:	6898      	ldr	r0, [r3, #8]
 80069f4:	1b00      	subs	r0, r0, r4
 80069f6:	fab0 f080 	clz	r0, r0
 80069fa:	0940      	lsrs	r0, r0, #5
}
 80069fc:	b003      	add	sp, #12
 80069fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8006a02:	f7fa becd 	b.w	80017a0 <_test_assert>
 8006a06:	bf00      	nop
 8006a08:	20000da0 	.word	0x20000da0
 8006a0c:	2000178c 	.word	0x2000178c
 8006a10:	0800c0d8 	.word	0x0800c0d8
 8006a14:	20001078 	.word	0x20001078
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	200017a4 	.word	0x200017a4
 8006a20:	0800c0dc 	.word	0x0800c0dc
 8006a24:	200011c0 	.word	0x200011c0
 8006a28:	080058c1 	.word	0x080058c1
 8006a2c:	20000c30 	.word	0x20000c30
 8006a30:	0800c118 	.word	0x0800c118
 8006a34:	20000c40 	.word	0x20000c40
	...

08006a40 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8006a40:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8006a42:	4c06      	ldr	r4, [pc, #24]	; (8006a5c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8006a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a48:	f7fd fa12 	bl	8003e70 <chThdSleep>
  chMtxLock(&m1);
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7fd fdc7 	bl	80045e0 <chMtxLock>
  chMtxUnlock(&m1);
 8006a52:	4620      	mov	r0, r4
}
 8006a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8006a58:	f7fe bf92 	b.w	8005980 <chMtxUnlock>
 8006a5c:	20000c30 	.word	0x20000c30

08006a60 <thread1.lto_priv.103>:
static THD_FUNCTION(thread1, p) {
 8006a60:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8006a62:	4c06      	ldr	r4, [pc, #24]	; (8006a7c <thread1.lto_priv.103+0x1c>)
static THD_FUNCTION(thread1, p) {
 8006a64:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7fd fdba 	bl	80045e0 <chMtxLock>
  test_emit_token(*(char *)p);
 8006a6c:	7828      	ldrb	r0, [r5, #0]
 8006a6e:	f7fa ff37 	bl	80018e0 <test_emit_token>
  chMtxUnlock(&m1);
 8006a72:	4620      	mov	r0, r4
}
 8006a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8006a78:	f7fe bf82 	b.w	8005980 <chMtxUnlock>
 8006a7c:	20000c30 	.word	0x20000c30

08006a80 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8006a80:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006a82:	4d17      	ldr	r5, [pc, #92]	; (8006ae0 <chFactoryReleaseSemaphore+0x60>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8006a84:	4604      	mov	r4, r0
  F_LOCK();
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7fd fdaa 	bl	80045e0 <chMtxLock>
  dep->refs--;
 8006a8c:	6863      	ldr	r3, [r4, #4]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006a92:	b123      	cbz	r3, 8006a9e <chFactoryReleaseSemaphore+0x1e>
  F_UNLOCK();
 8006a94:	4812      	ldr	r0, [pc, #72]	; (8006ae0 <chFactoryReleaseSemaphore+0x60>)
}
 8006a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006a9a:	f7fe bf71 	b.w	8005980 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006a9e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8006aa2:	460a      	mov	r2, r1
 8006aa4:	e002      	b.n	8006aac <chFactoryReleaseSemaphore+0x2c>
    if (prev->next == element) {
 8006aa6:	429c      	cmp	r4, r3
 8006aa8:	d00a      	beq.n	8006ac0 <chFactoryReleaseSemaphore+0x40>
 8006aaa:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8006aac:	6813      	ldr	r3, [r2, #0]
 8006aae:	428b      	cmp	r3, r1
 8006ab0:	d1f9      	bne.n	8006aa6 <chFactoryReleaseSemaphore+0x26>
 8006ab2:	2320      	movs	r3, #32
 8006ab4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	2320      	movs	r3, #32
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	2300      	movs	r3, #0
  mp->next = php;
 8006ad0:	62ec      	str	r4, [r5, #44]	; 0x2c
 8006ad2:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 8006ad6:	4802      	ldr	r0, [pc, #8]	; (8006ae0 <chFactoryReleaseSemaphore+0x60>)
}
 8006ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006adc:	f7fe bf50 	b.w	8005980 <chMtxUnlock>
 8006ae0:	20000e18 	.word	0x20000e18
	...

08006af0 <oslib_test_005_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_005_003_execute(void) {
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [5.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 8006af2:	4c42      	ldr	r4, [pc, #264]	; (8006bfc <oslib_test_005_003_execute+0x10c>)
 8006af4:	2501      	movs	r5, #1
 8006af6:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 8006af8:	f7ff fa0a 	bl	8005f10 <chFactoryFindSemaphore.constprop.11>
    test_assert(dsp == NULL, "found");
 8006afc:	fab0 f080 	clz	r0, r0
 8006b00:	0940      	lsrs	r0, r0, #5
 8006b02:	493f      	ldr	r1, [pc, #252]	; (8006c00 <oslib_test_005_003_execute+0x110>)
 8006b04:	f7fa fe4c 	bl	80017a0 <_test_assert>
 8006b08:	b100      	cbz	r0, 8006b0c <oslib_test_005_003_execute+0x1c>
  test_set_step(6);
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
}
 8006b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8006b10:	f7ff f9de 	bl	8005ed0 <chFactoryCreateSemaphore.constprop.12>
    test_assert(dsp != NULL, "cannot create");
 8006b14:	4606      	mov	r6, r0
 8006b16:	3000      	adds	r0, #0
 8006b18:	bf18      	it	ne
 8006b1a:	2001      	movne	r0, #1
 8006b1c:	4939      	ldr	r1, [pc, #228]	; (8006c04 <oslib_test_005_003_execute+0x114>)
 8006b1e:	f7fa fe3f 	bl	80017a0 <_test_assert>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d1f1      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
  test_set_step(3);
 8006b26:	2303      	movs	r3, #3
 8006b28:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8006b2a:	f7ff f9d1 	bl	8005ed0 <chFactoryCreateSemaphore.constprop.12>
    test_assert(dsp1 == NULL, "can create");
 8006b2e:	fab0 f080 	clz	r0, r0
 8006b32:	0940      	lsrs	r0, r0, #5
 8006b34:	4934      	ldr	r1, [pc, #208]	; (8006c08 <oslib_test_005_003_execute+0x118>)
 8006b36:	f7fa fe33 	bl	80017a0 <_test_assert>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d1e5      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
  test_set_step(4);
 8006b3e:	2304      	movs	r3, #4
 8006b40:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8006b42:	f7ff f9e5 	bl	8005f10 <chFactoryFindSemaphore.constprop.11>
    test_assert(dsp1 != NULL, "not found");
 8006b46:	4607      	mov	r7, r0
 8006b48:	3000      	adds	r0, #0
 8006b4a:	bf18      	it	ne
 8006b4c:	2001      	movne	r0, #1
 8006b4e:	492f      	ldr	r1, [pc, #188]	; (8006c0c <oslib_test_005_003_execute+0x11c>)
 8006b50:	f7fa fe26 	bl	80017a0 <_test_assert>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d1d8      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8006b58:	1bf0      	subs	r0, r6, r7
 8006b5a:	fab0 f080 	clz	r0, r0
 8006b5e:	492c      	ldr	r1, [pc, #176]	; (8006c10 <oslib_test_005_003_execute+0x120>)
 8006b60:	0940      	lsrs	r0, r0, #5
 8006b62:	f7fa fe1d 	bl	80017a0 <_test_assert>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d1cf      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	4928      	ldr	r1, [pc, #160]	; (8006c10 <oslib_test_005_003_execute+0x120>)
 8006b6e:	f1a0 0002 	sub.w	r0, r0, #2
 8006b72:	fab0 f080 	clz	r0, r0
 8006b76:	0940      	lsrs	r0, r0, #5
 8006b78:	f7fa fe12 	bl	80017a0 <_test_assert>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1c4      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8006b80:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8006b82:	4923      	ldr	r1, [pc, #140]	; (8006c10 <oslib_test_005_003_execute+0x120>)
 8006b84:	442b      	add	r3, r5
 8006b86:	4628      	mov	r0, r5
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	f7fa fe09 	bl	80017a0 <_test_assert>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d1bb      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	491e      	ldr	r1, [pc, #120]	; (8006c10 <oslib_test_005_003_execute+0x120>)
 8006b96:	f1a0 0c03 	sub.w	ip, r0, #3
 8006b9a:	f1dc 0000 	rsbs	r0, ip, #0
 8006b9e:	eb40 000c 	adc.w	r0, r0, ip
 8006ba2:	f7fa fdfd 	bl	80017a0 <_test_assert>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d1af      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 8006baa:	4638      	mov	r0, r7
 8006bac:	f7ff ff68 	bl	8006a80 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4918      	ldr	r1, [pc, #96]	; (8006c14 <oslib_test_005_003_execute+0x124>)
 8006bb4:	1e82      	subs	r2, r0, #2
 8006bb6:	4250      	negs	r0, r2
 8006bb8:	4150      	adcs	r0, r2
 8006bba:	f7fa fdf1 	bl	80017a0 <_test_assert>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d1a3      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	f7ff ff5c 	bl	8006a80 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8006bc8:	6870      	ldr	r0, [r6, #4]
 8006bca:	4912      	ldr	r1, [pc, #72]	; (8006c14 <oslib_test_005_003_execute+0x124>)
 8006bcc:	1b43      	subs	r3, r0, r5
 8006bce:	4258      	negs	r0, r3
 8006bd0:	4158      	adcs	r0, r3
 8006bd2:	f7fa fde5 	bl	80017a0 <_test_assert>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d197      	bne.n	8006b0a <oslib_test_005_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 8006bda:	4630      	mov	r0, r6
  test_set_step(5);
 8006bdc:	2305      	movs	r3, #5
 8006bde:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8006be0:	f7ff ff4e 	bl	8006a80 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8006be4:	2306      	movs	r3, #6
 8006be6:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8006be8:	f7ff f992 	bl	8005f10 <chFactoryFindSemaphore.constprop.11>
    test_assert(dsp == NULL, "found");
 8006bec:	fab0 f080 	clz	r0, r0
 8006bf0:	0940      	lsrs	r0, r0, #5
 8006bf2:	4903      	ldr	r1, [pc, #12]	; (8006c00 <oslib_test_005_003_execute+0x110>)
}
 8006bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8006bf8:	f7fa bdd2 	b.w	80017a0 <_test_assert>
 8006bfc:	2000178c 	.word	0x2000178c
 8006c00:	0800b1cc 	.word	0x0800b1cc
 8006c04:	0800b1ac 	.word	0x0800b1ac
 8006c08:	0800b1bc 	.word	0x0800b1bc
 8006c0c:	0800b1c8 	.word	0x0800b1c8
 8006c10:	0800b1d4 	.word	0x0800b1d4
 8006c14:	0800b1f0 	.word	0x0800b1f0
	...

08006c20 <oslib_test_005_003_teardown>:
static void oslib_test_005_003_teardown(void) {
 8006c20:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8006c22:	f7ff f975 	bl	8005f10 <chFactoryFindSemaphore.constprop.11>
  if (dsp != NULL) {
 8006c26:	b140      	cbz	r0, 8006c3a <oslib_test_005_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8006c28:	6843      	ldr	r3, [r0, #4]
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	b12b      	cbz	r3, 8006c3a <oslib_test_005_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f7ff ff26 	bl	8006a80 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f9      	bne.n	8006c2e <oslib_test_005_003_teardown+0xe>
}
 8006c3a:	bd10      	pop	{r4, pc}
 8006c3c:	0000      	movs	r0, r0
	...

08006c40 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop){
 8006c40:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006c42:	4d17      	ldr	r5, [pc, #92]	; (8006ca0 <chFactoryReleaseObject+0x60>)
void chFactoryReleaseObject(registered_object_t *rop){
 8006c44:	4604      	mov	r4, r0
  F_LOCK();
 8006c46:	4628      	mov	r0, r5
 8006c48:	f7fd fcca 	bl	80045e0 <chMtxLock>
  dep->refs--;
 8006c4c:	6863      	ldr	r3, [r4, #4]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006c52:	b123      	cbz	r3, 8006c5e <chFactoryReleaseObject+0x1e>
  F_UNLOCK();
 8006c54:	4812      	ldr	r0, [pc, #72]	; (8006ca0 <chFactoryReleaseObject+0x60>)
}
 8006c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006c5a:	f7fe be91 	b.w	8005980 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006c5e:	f105 0110 	add.w	r1, r5, #16
 8006c62:	460a      	mov	r2, r1
 8006c64:	e002      	b.n	8006c6c <chFactoryReleaseObject+0x2c>
    if (prev->next == element) {
 8006c66:	429c      	cmp	r4, r3
 8006c68:	d00a      	beq.n	8006c80 <chFactoryReleaseObject+0x40>
 8006c6a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8006c6c:	6813      	ldr	r3, [r2, #0]
 8006c6e:	428b      	cmp	r3, r1
 8006c70:	d1f9      	bne.n	8006c66 <chFactoryReleaseObject+0x26>
 8006c72:	2320      	movs	r3, #32
 8006c74:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	696a      	ldr	r2, [r5, #20]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	2320      	movs	r3, #32
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	696b      	ldr	r3, [r5, #20]
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	2300      	movs	r3, #0
  mp->next = php;
 8006c90:	616c      	str	r4, [r5, #20]
 8006c92:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 8006c96:	4802      	ldr	r0, [pc, #8]	; (8006ca0 <chFactoryReleaseObject+0x60>)
}
 8006c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006c9c:	f7fe be70 	b.w	8005980 <chMtxUnlock>
 8006ca0:	20000e18 	.word	0x20000e18
	...

08006cb0 <oslib_test_005_001_execute>:
static void oslib_test_005_001_execute(void) {
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8006cb4:	4c51      	ldr	r4, [pc, #324]	; (8006dfc <oslib_test_005_001_execute+0x14c>)
 8006cb6:	2501      	movs	r5, #1
 8006cb8:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8006cba:	f7ff f8b9 	bl	8005e30 <chFactoryFindObject.constprop.15>
    test_assert(rop == NULL, "found");
 8006cbe:	fab0 f080 	clz	r0, r0
 8006cc2:	0940      	lsrs	r0, r0, #5
 8006cc4:	494e      	ldr	r1, [pc, #312]	; (8006e00 <oslib_test_005_001_execute+0x150>)
 8006cc6:	f7fa fd6b 	bl	80017a0 <_test_assert>
 8006cca:	b108      	cbz	r0, 8006cd0 <oslib_test_005_001_execute+0x20>
}
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8006cd0:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006cd2:	484c      	ldr	r0, [pc, #304]	; (8006e04 <oslib_test_005_001_execute+0x154>)
  test_set_step(2);
 8006cd4:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006cd6:	f7ff f893 	bl	8005e00 <chFactoryRegisterObject.constprop.16>
    test_assert(rop != NULL, "cannot register");
 8006cda:	4606      	mov	r6, r0
 8006cdc:	3000      	adds	r0, #0
 8006cde:	bf18      	it	ne
 8006ce0:	2001      	movne	r0, #1
 8006ce2:	4949      	ldr	r1, [pc, #292]	; (8006e08 <oslib_test_005_001_execute+0x158>)
 8006ce4:	f7fa fd5c 	bl	80017a0 <_test_assert>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d1ef      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
  test_set_step(3);
 8006cec:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006cee:	4847      	ldr	r0, [pc, #284]	; (8006e0c <oslib_test_005_001_execute+0x15c>)
  test_set_step(3);
 8006cf0:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006cf2:	f7ff f885 	bl	8005e00 <chFactoryRegisterObject.constprop.16>
    test_assert(rop1 == NULL, "can register");
 8006cf6:	fab0 f080 	clz	r0, r0
 8006cfa:	0940      	lsrs	r0, r0, #5
 8006cfc:	4944      	ldr	r1, [pc, #272]	; (8006e10 <oslib_test_005_001_execute+0x160>)
 8006cfe:	f7fa fd4f 	bl	80017a0 <_test_assert>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d1e2      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
  test_set_step(4);
 8006d06:	2304      	movs	r3, #4
 8006d08:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 8006d0a:	f7ff f891 	bl	8005e30 <chFactoryFindObject.constprop.15>
    test_assert(rop1 != NULL, "not found");
 8006d0e:	4607      	mov	r7, r0
 8006d10:	3000      	adds	r0, #0
 8006d12:	bf18      	it	ne
 8006d14:	2001      	movne	r0, #1
 8006d16:	493f      	ldr	r1, [pc, #252]	; (8006e14 <oslib_test_005_001_execute+0x164>)
 8006d18:	f7fa fd42 	bl	80017a0 <_test_assert>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d1d5      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	493d      	ldr	r1, [pc, #244]	; (8006e18 <oslib_test_005_001_execute+0x168>)
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	f245 58aa 	movw	r8, #21930	; 0x55aa
 8006d2a:	eba0 0008 	sub.w	r0, r0, r8
 8006d2e:	fab0 f080 	clz	r0, r0
 8006d32:	0940      	lsrs	r0, r0, #5
 8006d34:	f7fa fd34 	bl	80017a0 <_test_assert>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d1c7      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 8006d3c:	1bf0      	subs	r0, r6, r7
 8006d3e:	fab0 f080 	clz	r0, r0
 8006d42:	4936      	ldr	r1, [pc, #216]	; (8006e1c <oslib_test_005_001_execute+0x16c>)
 8006d44:	0940      	lsrs	r0, r0, #5
 8006d46:	f7fa fd2b 	bl	80017a0 <_test_assert>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d1be      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	4932      	ldr	r1, [pc, #200]	; (8006e1c <oslib_test_005_001_execute+0x16c>)
 8006d52:	f1a0 0002 	sub.w	r0, r0, #2
 8006d56:	fab0 f080 	clz	r0, r0
 8006d5a:	0940      	lsrs	r0, r0, #5
 8006d5c:	f7fa fd20 	bl	80017a0 <_test_assert>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d1b3      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
 8006d64:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8006d66:	492d      	ldr	r1, [pc, #180]	; (8006e1c <oslib_test_005_001_execute+0x16c>)
 8006d68:	442b      	add	r3, r5
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	607b      	str	r3, [r7, #4]
 8006d6e:	f7fa fd17 	bl	80017a0 <_test_assert>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d1aa      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4927      	ldr	r1, [pc, #156]	; (8006e18 <oslib_test_005_001_execute+0x168>)
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	eba0 0e08 	sub.w	lr, r0, r8
 8006d80:	f1de 0000 	rsbs	r0, lr, #0
 8006d84:	eb40 000e 	adc.w	r0, r0, lr
 8006d88:	f7fa fd0a 	bl	80017a0 <_test_assert>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d19d      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4922      	ldr	r1, [pc, #136]	; (8006e1c <oslib_test_005_001_execute+0x16c>)
 8006d94:	f1a0 0c03 	sub.w	ip, r0, #3
 8006d98:	f1dc 0000 	rsbs	r0, ip, #0
 8006d9c:	eb40 000c 	adc.w	r0, r0, ip
 8006da0:	f7fa fcfe 	bl	80017a0 <_test_assert>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d191      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ff49 	bl	8006c40 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	491b      	ldr	r1, [pc, #108]	; (8006e20 <oslib_test_005_001_execute+0x170>)
 8006db2:	1e82      	subs	r2, r0, #2
 8006db4:	4250      	negs	r0, r2
 8006db6:	4150      	adcs	r0, r2
 8006db8:	f7fa fcf2 	bl	80017a0 <_test_assert>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d185      	bne.n	8006ccc <oslib_test_005_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff ff3d 	bl	8006c40 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 8006dc6:	6870      	ldr	r0, [r6, #4]
 8006dc8:	4915      	ldr	r1, [pc, #84]	; (8006e20 <oslib_test_005_001_execute+0x170>)
 8006dca:	1b43      	subs	r3, r0, r5
 8006dcc:	4258      	negs	r0, r3
 8006dce:	4158      	adcs	r0, r3
 8006dd0:	f7fa fce6 	bl	80017a0 <_test_assert>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f47f af79 	bne.w	8006ccc <oslib_test_005_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 8006dda:	4630      	mov	r0, r6
  test_set_step(5);
 8006ddc:	2305      	movs	r3, #5
 8006dde:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 8006de0:	f7ff ff2e 	bl	8006c40 <chFactoryReleaseObject>
  test_set_step(6);
 8006de4:	2306      	movs	r3, #6
 8006de6:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8006de8:	f7ff f822 	bl	8005e30 <chFactoryFindObject.constprop.15>
    test_assert(rop == NULL, "found");
 8006dec:	fab0 f080 	clz	r0, r0
 8006df0:	0940      	lsrs	r0, r0, #5
 8006df2:	4903      	ldr	r1, [pc, #12]	; (8006e00 <oslib_test_005_001_execute+0x150>)
}
 8006df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8006df8:	f7fa bcd2 	b.w	80017a0 <_test_assert>
 8006dfc:	2000178c 	.word	0x2000178c
 8006e00:	0800b1cc 	.word	0x0800b1cc
 8006e04:	20000c88 	.word	0x20000c88
 8006e08:	0800b15c 	.word	0x0800b15c
 8006e0c:	20000c8c 	.word	0x20000c8c
 8006e10:	0800b16c 	.word	0x0800b16c
 8006e14:	0800b1c8 	.word	0x0800b1c8
 8006e18:	0800b17c 	.word	0x0800b17c
 8006e1c:	0800b1d4 	.word	0x0800b1d4
 8006e20:	0800b1f0 	.word	0x0800b1f0
	...

08006e30 <oslib_test_005_001_teardown>:
static void oslib_test_005_001_teardown(void) {
 8006e30:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8006e32:	f7fe fffd 	bl	8005e30 <chFactoryFindObject.constprop.15>
  if (rop != NULL) {
 8006e36:	b140      	cbz	r0, 8006e4a <oslib_test_005_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8006e38:	6843      	ldr	r3, [r0, #4]
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	b12b      	cbz	r3, 8006e4a <oslib_test_005_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7ff fefe 	bl	8006c40 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f9      	bne.n	8006e3e <oslib_test_005_001_teardown+0xe>
}
 8006e4a:	bd10      	pop	{r4, pc}
 8006e4c:	0000      	movs	r0, r0
	...

08006e50 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8006e54:	4c17      	ldr	r4, [pc, #92]	; (8006eb4 <chHeapStatus+0x64>)
 8006e56:	2800      	cmp	r0, #0
 8006e58:	bf18      	it	ne
 8006e5a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8006e5c:	f104 070c 	add.w	r7, r4, #12
 8006e60:	4638      	mov	r0, r7
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006e62:	4689      	mov	r9, r1
 8006e64:	4690      	mov	r8, r2
  H_LOCK(heapp);
 8006e66:	f7fd fbbb 	bl	80045e0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8006e6a:	6863      	ldr	r3, [r4, #4]
 8006e6c:	b1f3      	cbz	r3, 8006eac <chHeapStatus+0x5c>
  lpages = 0U;
 8006e6e:	2400      	movs	r4, #0
  tpages = 0U;
 8006e70:	4625      	mov	r5, r4
  n = 0U;
 8006e72:	4626      	mov	r6, r4
  while (H_NEXT(qp) != NULL) {
 8006e74:	e9d3 3000 	ldrd	r3, r0, [r3]
 8006e78:	4284      	cmp	r4, r0
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 8006e7a:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8006e7e:	4405      	add	r5, r0
 8006e80:	bf38      	it	cc
 8006e82:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f5      	bne.n	8006e74 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	d002      	beq.n	8006e94 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8006e8e:	00ed      	lsls	r5, r5, #3
 8006e90:	f8c9 5000 	str.w	r5, [r9]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8006e94:	f1b8 0f00 	cmp.w	r8, #0
 8006e98:	d002      	beq.n	8006ea0 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8006e9a:	00e4      	lsls	r4, r4, #3
 8006e9c:	f8c8 4000 	str.w	r4, [r8]
  }
  H_UNLOCK(heapp);
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f7fe fd6d 	bl	8005980 <chMtxUnlock>

  return n;
}
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
 8006eac:	461c      	mov	r4, r3
  tpages = 0U;
 8006eae:	461d      	mov	r5, r3
  n = 0U;
 8006eb0:	461e      	mov	r6, r3
 8006eb2:	e7e9      	b.n	8006e88 <chHeapStatus+0x38>
 8006eb4:	20000f40 	.word	0x20000f40
	...

08006ec0 <cmd_mem>:
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006ec0:	b530      	push	{r4, r5, lr}
  if (argc > 0) {
 8006ec2:	2900      	cmp	r1, #0
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006ec4:	b083      	sub	sp, #12
  if (argc > 0) {
 8006ec6:	dd05      	ble.n	8006ed4 <cmd_mem+0x14>
    shellUsage(chp, "mem");
 8006ec8:	4a12      	ldr	r2, [pc, #72]	; (8006f14 <cmd_mem+0x54>)
 8006eca:	4913      	ldr	r1, [pc, #76]	; (8006f18 <cmd_mem+0x58>)
 8006ecc:	f7fb fec8 	bl	8002c60 <chprintf>
}
 8006ed0:	b003      	add	sp, #12
 8006ed2:	bd30      	pop	{r4, r5, pc}
 8006ed4:	4604      	mov	r4, r0
  n = chHeapStatus(NULL, &total, &largest);
 8006ed6:	aa01      	add	r2, sp, #4
 8006ed8:	4669      	mov	r1, sp
 8006eda:	2000      	movs	r0, #0
 8006edc:	f7ff ffb8 	bl	8006e50 <chHeapStatus>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <cmd_mem+0x5c>)
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8006ee2:	490f      	ldr	r1, [pc, #60]	; (8006f20 <cmd_mem+0x60>)
 8006ee4:	e9d3 3200 	ldrd	r3, r2, [r3]
  n = chHeapStatus(NULL, &total, &largest);
 8006ee8:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	4620      	mov	r0, r4
 8006eee:	f7fb feb7 	bl	8002c60 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8006ef2:	462a      	mov	r2, r5
 8006ef4:	490b      	ldr	r1, [pc, #44]	; (8006f24 <cmd_mem+0x64>)
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f7fb feb2 	bl	8002c60 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 8006efc:	9a00      	ldr	r2, [sp, #0]
 8006efe:	490a      	ldr	r1, [pc, #40]	; (8006f28 <cmd_mem+0x68>)
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7fb fead 	bl	8002c60 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8006f06:	4620      	mov	r0, r4
 8006f08:	9a01      	ldr	r2, [sp, #4]
 8006f0a:	4908      	ldr	r1, [pc, #32]	; (8006f2c <cmd_mem+0x6c>)
 8006f0c:	f7fb fea8 	bl	8002c60 <chprintf>
}
 8006f10:	b003      	add	sp, #12
 8006f12:	bd30      	pop	{r4, r5, pc}
 8006f14:	0800ac84 	.word	0x0800ac84
 8006f18:	0800ad0c 	.word	0x0800ad0c
 8006f1c:	20000f38 	.word	0x20000f38
 8006f20:	0800ac88 	.word	0x0800ac88
 8006f24:	0800aca8 	.word	0x0800aca8
 8006f28:	0800acc0 	.word	0x0800acc0
 8006f2c:	0800ace0 	.word	0x0800ace0

08006f30 <chHeapFree>:
void chHeapFree(void *p) {
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 8006f32:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8006f36:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8006f38:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 8006f3a:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8006f3e:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8006f42:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8006f44:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 8006f48:	3504      	adds	r5, #4
  H_LOCK(heapp);
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	f7fd fb48 	bl	80045e0 <chMtxLock>
  qp = &heapp->header;
 8006f50:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 8006f52:	42ab      	cmp	r3, r5
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	d001      	beq.n	8006f5c <chHeapFree+0x2c>
 8006f58:	429c      	cmp	r4, r3
 8006f5a:	d902      	bls.n	8006f62 <chHeapFree+0x32>
 8006f5c:	b11a      	cbz	r2, 8006f66 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8006f5e:	4294      	cmp	r4, r2
 8006f60:	d301      	bcc.n	8006f66 <chHeapFree+0x36>
void chHeapFree(void *p) {
 8006f62:	4613      	mov	r3, r2
 8006f64:	e7f5      	b.n	8006f52 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006f66:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8006f6a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8006f6e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006f70:	1c4a      	adds	r2, r1, #1
 8006f72:	f856 0c08 	ldr.w	r0, [r6, #-8]
 8006f76:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 8006f7a:	4281      	cmp	r1, r0
 8006f7c:	d00a      	beq.n	8006f94 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	1c4a      	adds	r2, r1, #1
 8006f82:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006f86:	4294      	cmp	r4, r2
 8006f88:	d012      	beq.n	8006fb0 <chHeapFree+0x80>
  H_UNLOCK(heapp);
 8006f8a:	4638      	mov	r0, r7
}
 8006f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006f90:	f7fe bcf6 	b.w	8005980 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8006f94:	6849      	ldr	r1, [r1, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8006f96:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
 8006f9a:	f846 0c08 	str.w	r0, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f846 2c04 	str.w	r2, [r6, #-4]
      if ((H_LIMIT(qp) == hp)) {
 8006fa4:	6859      	ldr	r1, [r3, #4]
 8006fa6:	1c4a      	adds	r2, r1, #1
 8006fa8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006fac:	4294      	cmp	r4, r2
 8006fae:	d1ec      	bne.n	8006f8a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 8006fb0:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006fb4:	3201      	adds	r2, #1
 8006fb6:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8006fb8:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006fba:	6059      	str	r1, [r3, #4]
  H_UNLOCK(heapp);
 8006fbc:	4638      	mov	r0, r7
}
 8006fbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006fc2:	f7fe bcdd 	b.w	8005980 <chMtxUnlock>
 8006fc6:	bf00      	nop
	...

08006fd0 <oslib_test_004_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [4.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_004_002_execute(void) {
 8006fd0:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [4.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8006fd2:	4c14      	ldr	r4, [pc, #80]	; (8007024 <oslib_test_004_002_execute+0x54>)
static void oslib_test_004_002_execute(void) {
 8006fd4:	b082      	sub	sp, #8
  test_set_step(1);
 8006fd6:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006fd8:	466a      	mov	r2, sp
 8006fda:	a901      	add	r1, sp, #4
 8006fdc:	2000      	movs	r0, #0
  test_set_step(1);
 8006fde:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006fe0:	f7ff ff36 	bl	8006e50 <chHeapStatus>
 8006fe4:	2110      	movs	r1, #16
 8006fe6:	4810      	ldr	r0, [pc, #64]	; (8007028 <oslib_test_004_002_execute+0x58>)
 8006fe8:	f7fe fd02 	bl	80059f0 <chHeapAllocAligned.constprop.43>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 8006fec:	4606      	mov	r6, r0
 8006fee:	3000      	adds	r0, #0
 8006ff0:	bf18      	it	ne
 8006ff2:	2001      	movne	r0, #1
 8006ff4:	490d      	ldr	r1, [pc, #52]	; (800702c <oslib_test_004_002_execute+0x5c>)
 8006ff6:	f7fa fbd3 	bl	80017a0 <_test_assert>
 8006ffa:	b980      	cbnz	r0, 800701e <oslib_test_004_002_execute+0x4e>
 8006ffc:	4605      	mov	r5, r0
    chHeapFree(p1);
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7ff ff96 	bl	8006f30 <chHeapFree>
  }

  /* [4.2.2] Testing allocation failure.*/
  test_set_step(2);
 8007004:	2302      	movs	r3, #2
 8007006:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800700a:	4628      	mov	r0, r5
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	f7fe fcef 	bl	80059f0 <chHeapAllocAligned.constprop.43>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 8007012:	fab0 f080 	clz	r0, r0
 8007016:	0940      	lsrs	r0, r0, #5
 8007018:	4905      	ldr	r1, [pc, #20]	; (8007030 <oslib_test_004_002_execute+0x60>)
 800701a:	f7fa fbc1 	bl	80017a0 <_test_assert>
  }
}
 800701e:	b002      	add	sp, #8
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	bf00      	nop
 8007024:	2000178c 	.word	0x2000178c
 8007028:	200016ec 	.word	0x200016ec
 800702c:	0800b120 	.word	0x0800b120
 8007030:	0800b134 	.word	0x0800b134
	...

08007040 <oslib_test_004_001_execute>:
static void oslib_test_004_001_execute(void) {
 8007040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8007044:	4cbf      	ldr	r4, [pc, #764]	; (8007344 <oslib_test_004_001_execute+0x304>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8007046:	48c0      	ldr	r0, [pc, #768]	; (8007348 <oslib_test_004_001_execute+0x308>)
static void oslib_test_004_001_execute(void) {
 8007048:	b084      	sub	sp, #16
  test_set_step(1);
 800704a:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 800704c:	4669      	mov	r1, sp
 800704e:	2200      	movs	r2, #0
  test_set_step(1);
 8007050:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8007052:	f7ff fefd 	bl	8006e50 <chHeapStatus>
 8007056:	f1a0 0001 	sub.w	r0, r0, #1
 800705a:	fab0 f080 	clz	r0, r0
 800705e:	49bb      	ldr	r1, [pc, #748]	; (800734c <oslib_test_004_001_execute+0x30c>)
 8007060:	0940      	lsrs	r0, r0, #5
 8007062:	f7fa fb9d 	bl	80017a0 <_test_assert>
 8007066:	b110      	cbz	r0, 800706e <oslib_test_004_001_execute+0x2e>
}
 8007068:	b004      	add	sp, #16
 800706a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 800706e:	2302      	movs	r3, #2
 8007070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007074:	48b4      	ldr	r0, [pc, #720]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	f7fe fcba 	bl	80059f0 <chHeapAllocAligned.constprop.43>
    test_assert(p1 == NULL, "allocation not failed");
 800707c:	fab0 f080 	clz	r0, r0
 8007080:	0940      	lsrs	r0, r0, #5
 8007082:	49b3      	ldr	r1, [pc, #716]	; (8007350 <oslib_test_004_001_execute+0x310>)
 8007084:	f7fa fb8c 	bl	80017a0 <_test_assert>
 8007088:	2800      	cmp	r0, #0
 800708a:	d1ed      	bne.n	8007068 <oslib_test_004_001_execute+0x28>
  test_set_step(3);
 800708c:	2303      	movs	r3, #3
 800708e:	2110      	movs	r1, #16
 8007090:	48ad      	ldr	r0, [pc, #692]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	f7fe fcac 	bl	80059f0 <chHeapAllocAligned.constprop.43>
    test_assert(p1 != NULL, "allocation failed");
 8007098:	4605      	mov	r5, r0
 800709a:	3000      	adds	r0, #0
 800709c:	bf18      	it	ne
 800709e:	2001      	movne	r0, #1
 80070a0:	49ac      	ldr	r1, [pc, #688]	; (8007354 <oslib_test_004_001_execute+0x314>)
 80070a2:	f7fa fb7d 	bl	80017a0 <_test_assert>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d1de      	bne.n	8007068 <oslib_test_004_001_execute+0x28>
    chHeapFree(p1);
 80070aa:	4628      	mov	r0, r5
 80070ac:	f7ff ff40 	bl	8006f30 <chHeapFree>
  test_set_step(4);
 80070b0:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80070b2:	a903      	add	r1, sp, #12
 80070b4:	aa02      	add	r2, sp, #8
 80070b6:	48a4      	ldr	r0, [pc, #656]	; (8007348 <oslib_test_004_001_execute+0x308>)
  test_set_step(4);
 80070b8:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80070ba:	f7ff fec9 	bl	8006e50 <chHeapStatus>
 80070be:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 80070c0:	f1a0 0001 	sub.w	r0, r0, #1
 80070c4:	fab0 f080 	clz	r0, r0
 80070c8:	0940      	lsrs	r0, r0, #5
 80070ca:	49a3      	ldr	r1, [pc, #652]	; (8007358 <oslib_test_004_001_execute+0x318>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80070cc:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 80070ce:	f7fa fb67 	bl	80017a0 <_test_assert>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d1c8      	bne.n	8007068 <oslib_test_004_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 80070d6:	9803      	ldr	r0, [sp, #12]
 80070d8:	49a0      	ldr	r1, [pc, #640]	; (800735c <oslib_test_004_001_execute+0x31c>)
 80070da:	280f      	cmp	r0, #15
 80070dc:	bf94      	ite	ls
 80070de:	2000      	movls	r0, #0
 80070e0:	2001      	movhi	r0, #1
 80070e2:	f7fa fb5d 	bl	80017a0 <_test_assert>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d1be      	bne.n	8007068 <oslib_test_004_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 80070ea:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 80070ee:	1ac0      	subs	r0, r0, r3
 80070f0:	fab0 f080 	clz	r0, r0
 80070f4:	4999      	ldr	r1, [pc, #612]	; (800735c <oslib_test_004_001_execute+0x31c>)
 80070f6:	0940      	lsrs	r0, r0, #5
 80070f8:	f7fa fb52 	bl	80017a0 <_test_assert>
 80070fc:	4605      	mov	r5, r0
 80070fe:	2800      	cmp	r0, #0
 8007100:	d1b2      	bne.n	8007068 <oslib_test_004_001_execute+0x28>
  test_set_step(5);
 8007102:	2305      	movs	r3, #5
 8007104:	2110      	movs	r1, #16
 8007106:	4890      	ldr	r0, [pc, #576]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	f7fe fc71 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 800710e:	2110      	movs	r1, #16
 8007110:	4680      	mov	r8, r0
 8007112:	488d      	ldr	r0, [pc, #564]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007114:	f7fe fc6c 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 8007118:	2110      	movs	r1, #16
 800711a:	4607      	mov	r7, r0
 800711c:	488a      	ldr	r0, [pc, #552]	; (8007348 <oslib_test_004_001_execute+0x308>)
 800711e:	f7fe fc67 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 8007122:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 8007124:	4640      	mov	r0, r8
 8007126:	f7ff ff03 	bl	8006f30 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800712a:	4638      	mov	r0, r7
 800712c:	f7ff ff00 	bl	8006f30 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff fefd 	bl	8006f30 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007136:	462a      	mov	r2, r5
 8007138:	a901      	add	r1, sp, #4
 800713a:	4883      	ldr	r0, [pc, #524]	; (8007348 <oslib_test_004_001_execute+0x308>)
 800713c:	f7ff fe88 	bl	8006e50 <chHeapStatus>
 8007140:	f1a0 0001 	sub.w	r0, r0, #1
 8007144:	fab0 f080 	clz	r0, r0
 8007148:	4980      	ldr	r1, [pc, #512]	; (800734c <oslib_test_004_001_execute+0x30c>)
 800714a:	0940      	lsrs	r0, r0, #5
 800714c:	f7fa fb28 	bl	80017a0 <_test_assert>
 8007150:	4605      	mov	r5, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	d188      	bne.n	8007068 <oslib_test_004_001_execute+0x28>
  test_set_step(6);
 8007156:	2306      	movs	r3, #6
 8007158:	2110      	movs	r1, #16
 800715a:	487b      	ldr	r0, [pc, #492]	; (8007348 <oslib_test_004_001_execute+0x308>)
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	f7fe fc47 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 8007162:	2110      	movs	r1, #16
 8007164:	4606      	mov	r6, r0
 8007166:	4878      	ldr	r0, [pc, #480]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007168:	f7fe fc42 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 800716c:	2110      	movs	r1, #16
 800716e:	4607      	mov	r7, r0
 8007170:	4875      	ldr	r0, [pc, #468]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007172:	f7fe fc3d 	bl	80059f0 <chHeapAllocAligned.constprop.43>
    chHeapFree(p3);                                 /* Merges forward.*/
 8007176:	f7ff fedb 	bl	8006f30 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800717a:	4638      	mov	r0, r7
 800717c:	f7ff fed8 	bl	8006f30 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff fed5 	bl	8006f30 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007186:	462a      	mov	r2, r5
 8007188:	a901      	add	r1, sp, #4
 800718a:	486f      	ldr	r0, [pc, #444]	; (8007348 <oslib_test_004_001_execute+0x308>)
 800718c:	f7ff fe60 	bl	8006e50 <chHeapStatus>
 8007190:	1e43      	subs	r3, r0, #1
 8007192:	4258      	negs	r0, r3
 8007194:	496d      	ldr	r1, [pc, #436]	; (800734c <oslib_test_004_001_execute+0x30c>)
 8007196:	4158      	adcs	r0, r3
 8007198:	f7fa fb02 	bl	80017a0 <_test_assert>
 800719c:	4605      	mov	r5, r0
 800719e:	2800      	cmp	r0, #0
 80071a0:	f47f af62 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
  test_set_step(7);
 80071a4:	2307      	movs	r3, #7
 80071a6:	2111      	movs	r1, #17
 80071a8:	4867      	ldr	r0, [pc, #412]	; (8007348 <oslib_test_004_001_execute+0x308>)
 80071aa:	6023      	str	r3, [r4, #0]
 80071ac:	f7fe fc20 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 80071b0:	2110      	movs	r1, #16
 80071b2:	4606      	mov	r6, r0
 80071b4:	4864      	ldr	r0, [pc, #400]	; (8007348 <oslib_test_004_001_execute+0x308>)
 80071b6:	f7fe fc1b 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 80071ba:	4607      	mov	r7, r0
    chHeapFree(p1);
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff feb7 	bl	8006f30 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80071c2:	462a      	mov	r2, r5
 80071c4:	a901      	add	r1, sp, #4
 80071c6:	4860      	ldr	r0, [pc, #384]	; (8007348 <oslib_test_004_001_execute+0x308>)
 80071c8:	f7ff fe42 	bl	8006e50 <chHeapStatus>
 80071cc:	f1a0 0802 	sub.w	r8, r0, #2
 80071d0:	f1d8 0000 	rsbs	r0, r8, #0
 80071d4:	4962      	ldr	r1, [pc, #392]	; (8007360 <oslib_test_004_001_execute+0x320>)
 80071d6:	eb40 0008 	adc.w	r0, r0, r8
 80071da:	f7fa fae1 	bl	80017a0 <_test_assert>
 80071de:	4605      	mov	r5, r0
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f47f af41 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
 80071e6:	2110      	movs	r1, #16
 80071e8:	4857      	ldr	r0, [pc, #348]	; (8007348 <oslib_test_004_001_execute+0x308>)
 80071ea:	f7fe fc01 	bl	80059f0 <chHeapAllocAligned.constprop.43>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80071ee:	462a      	mov	r2, r5
 80071f0:	4606      	mov	r6, r0
 80071f2:	a901      	add	r1, sp, #4
 80071f4:	4854      	ldr	r0, [pc, #336]	; (8007348 <oslib_test_004_001_execute+0x308>)
 80071f6:	f7ff fe2b 	bl	8006e50 <chHeapStatus>
 80071fa:	2801      	cmp	r0, #1
 80071fc:	f000 809f 	beq.w	800733e <oslib_test_004_001_execute+0x2fe>
 8007200:	2200      	movs	r2, #0
 8007202:	a901      	add	r1, sp, #4
 8007204:	4850      	ldr	r0, [pc, #320]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007206:	f7ff fe23 	bl	8006e50 <chHeapStatus>
 800720a:	f1a0 0e02 	sub.w	lr, r0, #2
 800720e:	f1de 0000 	rsbs	r0, lr, #0
 8007212:	eb40 000e 	adc.w	r0, r0, lr
 8007216:	494d      	ldr	r1, [pc, #308]	; (800734c <oslib_test_004_001_execute+0x30c>)
 8007218:	f7fa fac2 	bl	80017a0 <_test_assert>
 800721c:	4605      	mov	r5, r0
 800721e:	2800      	cmp	r0, #0
 8007220:	f47f af22 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
    chHeapFree(p2);
 8007224:	4638      	mov	r0, r7
 8007226:	f7ff fe83 	bl	8006f30 <chHeapFree>
    chHeapFree(p1);
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff fe80 	bl	8006f30 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007230:	462a      	mov	r2, r5
 8007232:	a901      	add	r1, sp, #4
 8007234:	4844      	ldr	r0, [pc, #272]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007236:	f7ff fe0b 	bl	8006e50 <chHeapStatus>
 800723a:	f100 3cff 	add.w	ip, r0, #4294967295
 800723e:	f1dc 0000 	rsbs	r0, ip, #0
 8007242:	4942      	ldr	r1, [pc, #264]	; (800734c <oslib_test_004_001_execute+0x30c>)
 8007244:	eb40 000c 	adc.w	r0, r0, ip
 8007248:	f7fa faaa 	bl	80017a0 <_test_assert>
 800724c:	4605      	mov	r5, r0
 800724e:	2800      	cmp	r0, #0
 8007250:	f47f af0a 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
  test_set_step(8);
 8007254:	2308      	movs	r3, #8
 8007256:	2110      	movs	r1, #16
 8007258:	483b      	ldr	r0, [pc, #236]	; (8007348 <oslib_test_004_001_execute+0x308>)
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	f7fe fbc8 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 8007260:	2110      	movs	r1, #16
 8007262:	4607      	mov	r7, r0
 8007264:	4838      	ldr	r0, [pc, #224]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007266:	f7fe fbc3 	bl	80059f0 <chHeapAllocAligned.constprop.43>
 800726a:	4606      	mov	r6, r0
    chHeapFree(p1);
 800726c:	4638      	mov	r0, r7
 800726e:	f7ff fe5f 	bl	8006f30 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8007272:	462a      	mov	r2, r5
 8007274:	a901      	add	r1, sp, #4
 8007276:	4834      	ldr	r0, [pc, #208]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007278:	f7ff fdea 	bl	8006e50 <chHeapStatus>
 800727c:	1e87      	subs	r7, r0, #2
 800727e:	4278      	negs	r0, r7
 8007280:	4937      	ldr	r1, [pc, #220]	; (8007360 <oslib_test_004_001_execute+0x320>)
 8007282:	4178      	adcs	r0, r7
 8007284:	f7fa fa8c 	bl	80017a0 <_test_assert>
 8007288:	4605      	mov	r5, r0
 800728a:	2800      	cmp	r0, #0
 800728c:	f47f aeec 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
 8007290:	2120      	movs	r1, #32
 8007292:	482d      	ldr	r0, [pc, #180]	; (8007348 <oslib_test_004_001_execute+0x308>)
 8007294:	f7fe fbac 	bl	80059f0 <chHeapAllocAligned.constprop.43>
    chHeapFree(p1);
 8007298:	f7ff fe4a 	bl	8006f30 <chHeapFree>
    chHeapFree(p2);
 800729c:	4630      	mov	r0, r6
 800729e:	f7ff fe47 	bl	8006f30 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80072a2:	462a      	mov	r2, r5
 80072a4:	a901      	add	r1, sp, #4
 80072a6:	4828      	ldr	r0, [pc, #160]	; (8007348 <oslib_test_004_001_execute+0x308>)
 80072a8:	f7ff fdd2 	bl	8006e50 <chHeapStatus>
 80072ac:	1e45      	subs	r5, r0, #1
 80072ae:	4268      	negs	r0, r5
 80072b0:	4926      	ldr	r1, [pc, #152]	; (800734c <oslib_test_004_001_execute+0x30c>)
 80072b2:	4168      	adcs	r0, r5
 80072b4:	f7fa fa74 	bl	80017a0 <_test_assert>
 80072b8:	4602      	mov	r2, r0
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f47f aed4 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
  test_set_step(9);
 80072c0:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 80072c2:	a901      	add	r1, sp, #4
 80072c4:	4820      	ldr	r0, [pc, #128]	; (8007348 <oslib_test_004_001_execute+0x308>)
  test_set_step(9);
 80072c6:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 80072c8:	f7ff fdc2 	bl	8006e50 <chHeapStatus>
 80072cc:	9901      	ldr	r1, [sp, #4]
 80072ce:	481e      	ldr	r0, [pc, #120]	; (8007348 <oslib_test_004_001_execute+0x308>)
 80072d0:	f7fe fb8e 	bl	80059f0 <chHeapAllocAligned.constprop.43>
    test_assert(p1 != NULL, "allocation failed");
 80072d4:	4606      	mov	r6, r0
 80072d6:	3000      	adds	r0, #0
 80072d8:	491e      	ldr	r1, [pc, #120]	; (8007354 <oslib_test_004_001_execute+0x314>)
 80072da:	bf18      	it	ne
 80072dc:	2001      	movne	r0, #1
 80072de:	f7fa fa5f 	bl	80017a0 <_test_assert>
 80072e2:	4602      	mov	r2, r0
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f47f aebf 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 80072ea:	4601      	mov	r1, r0
 80072ec:	4816      	ldr	r0, [pc, #88]	; (8007348 <oslib_test_004_001_execute+0x308>)
 80072ee:	f7ff fdaf 	bl	8006e50 <chHeapStatus>
 80072f2:	fab0 f080 	clz	r0, r0
 80072f6:	0940      	lsrs	r0, r0, #5
 80072f8:	491a      	ldr	r1, [pc, #104]	; (8007364 <oslib_test_004_001_execute+0x324>)
 80072fa:	f7fa fa51 	bl	80017a0 <_test_assert>
 80072fe:	4605      	mov	r5, r0
 8007300:	2800      	cmp	r0, #0
 8007302:	f47f aeb1 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
    chHeapFree(p1);
 8007306:	4630      	mov	r0, r6
 8007308:	f7ff fe12 	bl	8006f30 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800730c:	462a      	mov	r2, r5
 800730e:	a901      	add	r1, sp, #4
  test_set_step(10);
 8007310:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007312:	480d      	ldr	r0, [pc, #52]	; (8007348 <oslib_test_004_001_execute+0x308>)
  test_set_step(10);
 8007314:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007316:	f7ff fd9b 	bl	8006e50 <chHeapStatus>
 800731a:	1e42      	subs	r2, r0, #1
 800731c:	4250      	negs	r0, r2
 800731e:	4150      	adcs	r0, r2
 8007320:	490a      	ldr	r1, [pc, #40]	; (800734c <oslib_test_004_001_execute+0x30c>)
 8007322:	f7fa fa3d 	bl	80017a0 <_test_assert>
 8007326:	2800      	cmp	r0, #0
 8007328:	f47f ae9e 	bne.w	8007068 <oslib_test_004_001_execute+0x28>
    test_assert(n == sz, "size changed");
 800732c:	e9dd 3000 	ldrd	r3, r0, [sp]
 8007330:	1ac3      	subs	r3, r0, r3
 8007332:	4258      	negs	r0, r3
 8007334:	490c      	ldr	r1, [pc, #48]	; (8007368 <oslib_test_004_001_execute+0x328>)
 8007336:	4158      	adcs	r0, r3
 8007338:	f7fa fa32 	bl	80017a0 <_test_assert>
 800733c:	e694      	b.n	8007068 <oslib_test_004_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800733e:	2001      	movs	r0, #1
 8007340:	e769      	b.n	8007216 <oslib_test_004_001_execute+0x1d6>
 8007342:	bf00      	nop
 8007344:	2000178c 	.word	0x2000178c
 8007348:	200016ec 	.word	0x200016ec
 800734c:	0800b0b4 	.word	0x0800b0b4
 8007350:	0800b134 	.word	0x0800b134
 8007354:	0800b120 	.word	0x0800b120
 8007358:	0800b0c4 	.word	0x0800b0c4
 800735c:	0800b0d8 	.word	0x0800b0d8
 8007360:	0800b0f0 	.word	0x0800b0f0
 8007364:	0800af14 	.word	0x0800af14
 8007368:	0800b100 	.word	0x0800b100
 800736c:	00000000 	.word	0x00000000

08007370 <dyn_release_object_heap.part.3>:
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8007370:	460a      	mov	r2, r1
 8007372:	e002      	b.n	800737a <dyn_release_object_heap.part.3+0xa>
    if (prev->next == element) {
 8007374:	4298      	cmp	r0, r3
 8007376:	d006      	beq.n	8007386 <dyn_release_object_heap.part.3+0x16>
 8007378:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800737a:	6813      	ldr	r3, [r2, #0]
 800737c:	428b      	cmp	r3, r1
 800737e:	d1f9      	bne.n	8007374 <dyn_release_object_heap.part.3+0x4>
  return NULL;
 8007380:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8007382:	f7ff bdd5 	b.w	8006f30 <chHeapFree>
      prev->next = element->next;
 8007386:	6803      	ldr	r3, [r0, #0]
 8007388:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800738a:	f7ff bdd1 	b.w	8006f30 <chHeapFree>
 800738e:	bf00      	nop

08007390 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8007390:	b510      	push	{r4, lr}
 8007392:	4604      	mov	r4, r0

  F_LOCK();
 8007394:	4807      	ldr	r0, [pc, #28]	; (80073b4 <chFactoryReleasePipe+0x24>)
 8007396:	f7fd f923 	bl	80045e0 <chMtxLock>
  dep->refs--;
 800739a:	6863      	ldr	r3, [r4, #4]
 800739c:	3b01      	subs	r3, #1
 800739e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80073a0:	b91b      	cbnz	r3, 80073aa <chFactoryReleasePipe+0x1a>
 80073a2:	4620      	mov	r0, r4
 80073a4:	4904      	ldr	r1, [pc, #16]	; (80073b8 <chFactoryReleasePipe+0x28>)
 80073a6:	f7ff ffe3 	bl	8007370 <dyn_release_object_heap.part.3>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
 80073aa:	4802      	ldr	r0, [pc, #8]	; (80073b4 <chFactoryReleasePipe+0x24>)
}
 80073ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80073b0:	f7fe bae6 	b.w	8005980 <chMtxUnlock>
 80073b4:	20000e18 	.word	0x20000e18
 80073b8:	20000e5c 	.word	0x20000e5c
 80073bc:	00000000 	.word	0x00000000

080073c0 <oslib_test_005_006_execute>:
      chFactoryReleasePipe(dpp);
    }
  }
}

static void oslib_test_005_006_execute(void) {
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [5.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 80073c2:	4c42      	ldr	r4, [pc, #264]	; (80074cc <oslib_test_005_006_execute+0x10c>)
 80073c4:	2501      	movs	r5, #1
 80073c6:	6025      	str	r5, [r4, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 80073c8:	f7fe fea2 	bl	8006110 <chFactoryFindPipe.constprop.5>
    test_assert(dpp == NULL, "found");
 80073cc:	fab0 f080 	clz	r0, r0
 80073d0:	0940      	lsrs	r0, r0, #5
 80073d2:	493f      	ldr	r1, [pc, #252]	; (80074d0 <oslib_test_005_006_execute+0x110>)
 80073d4:	f7fa f9e4 	bl	80017a0 <_test_assert>
 80073d8:	b100      	cbz	r0, 80073dc <oslib_test_005_006_execute+0x1c>
  test_set_step(6);
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
}
 80073da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80073dc:	2302      	movs	r3, #2
 80073de:	6023      	str	r3, [r4, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 80073e0:	f7fe fe5e 	bl	80060a0 <chFactoryCreatePipe.constprop.6>
    test_assert(dpp != NULL, "cannot create");
 80073e4:	4606      	mov	r6, r0
 80073e6:	3000      	adds	r0, #0
 80073e8:	bf18      	it	ne
 80073ea:	2001      	movne	r0, #1
 80073ec:	4939      	ldr	r1, [pc, #228]	; (80074d4 <oslib_test_005_006_execute+0x114>)
 80073ee:	f7fa f9d7 	bl	80017a0 <_test_assert>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d1f1      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
  test_set_step(3);
 80073f6:	2303      	movs	r3, #3
 80073f8:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 80073fa:	f7fe fe51 	bl	80060a0 <chFactoryCreatePipe.constprop.6>
    test_assert(dpp1 == NULL, "can create");
 80073fe:	fab0 f080 	clz	r0, r0
 8007402:	0940      	lsrs	r0, r0, #5
 8007404:	4934      	ldr	r1, [pc, #208]	; (80074d8 <oslib_test_005_006_execute+0x118>)
 8007406:	f7fa f9cb 	bl	80017a0 <_test_assert>
 800740a:	2800      	cmp	r0, #0
 800740c:	d1e5      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
  test_set_step(4);
 800740e:	2304      	movs	r3, #4
 8007410:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 8007412:	f7fe fe7d 	bl	8006110 <chFactoryFindPipe.constprop.5>
    test_assert(dpp1 != NULL, "not found");
 8007416:	4607      	mov	r7, r0
 8007418:	3000      	adds	r0, #0
 800741a:	bf18      	it	ne
 800741c:	2001      	movne	r0, #1
 800741e:	492f      	ldr	r1, [pc, #188]	; (80074dc <oslib_test_005_006_execute+0x11c>)
 8007420:	f7fa f9be 	bl	80017a0 <_test_assert>
 8007424:	2800      	cmp	r0, #0
 8007426:	d1d8      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
    test_assert(dpp == dpp1, "object reference mismatch");
 8007428:	1bf0      	subs	r0, r6, r7
 800742a:	fab0 f080 	clz	r0, r0
 800742e:	492c      	ldr	r1, [pc, #176]	; (80074e0 <oslib_test_005_006_execute+0x120>)
 8007430:	0940      	lsrs	r0, r0, #5
 8007432:	f7fa f9b5 	bl	80017a0 <_test_assert>
 8007436:	2800      	cmp	r0, #0
 8007438:	d1cf      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4928      	ldr	r1, [pc, #160]	; (80074e0 <oslib_test_005_006_execute+0x120>)
 800743e:	f1a0 0002 	sub.w	r0, r0, #2
 8007442:	fab0 f080 	clz	r0, r0
 8007446:	0940      	lsrs	r0, r0, #5
 8007448:	f7fa f9aa 	bl	80017a0 <_test_assert>
 800744c:	2800      	cmp	r0, #0
 800744e:	d1c4      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
 8007450:	687b      	ldr	r3, [r7, #4]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 8007452:	4923      	ldr	r1, [pc, #140]	; (80074e0 <oslib_test_005_006_execute+0x120>)
 8007454:	442b      	add	r3, r5
 8007456:	4628      	mov	r0, r5
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	f7fa f9a1 	bl	80017a0 <_test_assert>
 800745e:	2800      	cmp	r0, #0
 8007460:	d1bb      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	491e      	ldr	r1, [pc, #120]	; (80074e0 <oslib_test_005_006_execute+0x120>)
 8007466:	f1a0 0c03 	sub.w	ip, r0, #3
 800746a:	f1dc 0000 	rsbs	r0, ip, #0
 800746e:	eb40 000c 	adc.w	r0, r0, ip
 8007472:	f7fa f995 	bl	80017a0 <_test_assert>
 8007476:	2800      	cmp	r0, #0
 8007478:	d1af      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
    chFactoryReleasePipe(dpp2);
 800747a:	4638      	mov	r0, r7
 800747c:	f7ff ff88 	bl	8007390 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4918      	ldr	r1, [pc, #96]	; (80074e4 <oslib_test_005_006_execute+0x124>)
 8007484:	1e82      	subs	r2, r0, #2
 8007486:	4250      	negs	r0, r2
 8007488:	4150      	adcs	r0, r2
 800748a:	f7fa f989 	bl	80017a0 <_test_assert>
 800748e:	2800      	cmp	r0, #0
 8007490:	d1a3      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
    chFactoryReleasePipe(dpp1);
 8007492:	4638      	mov	r0, r7
 8007494:	f7ff ff7c 	bl	8007390 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 8007498:	6870      	ldr	r0, [r6, #4]
 800749a:	4912      	ldr	r1, [pc, #72]	; (80074e4 <oslib_test_005_006_execute+0x124>)
 800749c:	1b43      	subs	r3, r0, r5
 800749e:	4258      	negs	r0, r3
 80074a0:	4158      	adcs	r0, r3
 80074a2:	f7fa f97d 	bl	80017a0 <_test_assert>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d197      	bne.n	80073da <oslib_test_005_006_execute+0x1a>
    chFactoryReleasePipe(dpp);
 80074aa:	4630      	mov	r0, r6
  test_set_step(5);
 80074ac:	2305      	movs	r3, #5
 80074ae:	6023      	str	r3, [r4, #0]
    chFactoryReleasePipe(dpp);
 80074b0:	f7ff ff6e 	bl	8007390 <chFactoryReleasePipe>
  test_set_step(6);
 80074b4:	2306      	movs	r3, #6
 80074b6:	6023      	str	r3, [r4, #0]
    dpp = chFactoryFindPipe("mypipe");
 80074b8:	f7fe fe2a 	bl	8006110 <chFactoryFindPipe.constprop.5>
    test_assert(dpp == NULL, "found");
 80074bc:	fab0 f080 	clz	r0, r0
 80074c0:	0940      	lsrs	r0, r0, #5
 80074c2:	4903      	ldr	r1, [pc, #12]	; (80074d0 <oslib_test_005_006_execute+0x110>)
}
 80074c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 80074c8:	f7fa b96a 	b.w	80017a0 <_test_assert>
 80074cc:	2000178c 	.word	0x2000178c
 80074d0:	0800b1cc 	.word	0x0800b1cc
 80074d4:	0800b1ac 	.word	0x0800b1ac
 80074d8:	0800b1bc 	.word	0x0800b1bc
 80074dc:	0800b1c8 	.word	0x0800b1c8
 80074e0:	0800b1d4 	.word	0x0800b1d4
 80074e4:	0800b1f0 	.word	0x0800b1f0
	...

080074f0 <oslib_test_005_006_teardown>:
static void oslib_test_005_006_teardown(void) {
 80074f0:	b510      	push	{r4, lr}
  dpp = chFactoryFindPipe("mypipe");
 80074f2:	f7fe fe0d 	bl	8006110 <chFactoryFindPipe.constprop.5>
  if (dpp != NULL) {
 80074f6:	b140      	cbz	r0, 800750a <oslib_test_005_006_teardown+0x1a>
    while (dpp->element.refs > 0U) {
 80074f8:	6843      	ldr	r3, [r0, #4]
 80074fa:	4604      	mov	r4, r0
 80074fc:	b12b      	cbz	r3, 800750a <oslib_test_005_006_teardown+0x1a>
      chFactoryReleasePipe(dpp);
 80074fe:	4620      	mov	r0, r4
 8007500:	f7ff ff46 	bl	8007390 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f9      	bne.n	80074fe <oslib_test_005_006_teardown+0xe>
}
 800750a:	bd10      	pop	{r4, pc}
 800750c:	0000      	movs	r0, r0
	...

08007510 <chFactoryReleaseObjectsFIFO>:
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8007510:	b510      	push	{r4, lr}
 8007512:	4604      	mov	r4, r0
  F_LOCK();
 8007514:	4807      	ldr	r0, [pc, #28]	; (8007534 <chFactoryReleaseObjectsFIFO+0x24>)
 8007516:	f7fd f863 	bl	80045e0 <chMtxLock>
  dep->refs--;
 800751a:	6863      	ldr	r3, [r4, #4]
 800751c:	3b01      	subs	r3, #1
 800751e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8007520:	b91b      	cbnz	r3, 800752a <chFactoryReleaseObjectsFIFO+0x1a>
 8007522:	4620      	mov	r0, r4
 8007524:	4904      	ldr	r1, [pc, #16]	; (8007538 <chFactoryReleaseObjectsFIFO+0x28>)
 8007526:	f7ff ff23 	bl	8007370 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 800752a:	4802      	ldr	r0, [pc, #8]	; (8007534 <chFactoryReleaseObjectsFIFO+0x24>)
}
 800752c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8007530:	f7fe ba26 	b.w	8005980 <chMtxUnlock>
 8007534:	20000e18 	.word	0x20000e18
 8007538:	20000e58 	.word	0x20000e58
 800753c:	00000000 	.word	0x00000000

08007540 <oslib_test_005_005_execute>:
static void oslib_test_005_005_execute(void) {
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8007542:	4c42      	ldr	r4, [pc, #264]	; (800764c <oslib_test_005_005_execute+0x10c>)
 8007544:	2501      	movs	r5, #1
 8007546:	6025      	str	r5, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8007548:	f7fe fd92 	bl	8006070 <chFactoryFindObjectsFIFO.constprop.7>
    test_assert(dofp == NULL, "found");
 800754c:	fab0 f080 	clz	r0, r0
 8007550:	0940      	lsrs	r0, r0, #5
 8007552:	493f      	ldr	r1, [pc, #252]	; (8007650 <oslib_test_005_005_execute+0x110>)
 8007554:	f7fa f924 	bl	80017a0 <_test_assert>
 8007558:	b100      	cbz	r0, 800755c <oslib_test_005_005_execute+0x1c>
}
 800755a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800755c:	2302      	movs	r3, #2
 800755e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8007560:	f7fe fd36 	bl	8005fd0 <chFactoryCreateObjectsFIFO.constprop.8>
    test_assert(dofp != NULL, "cannot create");
 8007564:	4606      	mov	r6, r0
 8007566:	3000      	adds	r0, #0
 8007568:	bf18      	it	ne
 800756a:	2001      	movne	r0, #1
 800756c:	4939      	ldr	r1, [pc, #228]	; (8007654 <oslib_test_005_005_execute+0x114>)
 800756e:	f7fa f917 	bl	80017a0 <_test_assert>
 8007572:	2800      	cmp	r0, #0
 8007574:	d1f1      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
  test_set_step(3);
 8007576:	2303      	movs	r3, #3
 8007578:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800757a:	f7fe fd29 	bl	8005fd0 <chFactoryCreateObjectsFIFO.constprop.8>
    test_assert(dofp1 == NULL, "can create");
 800757e:	fab0 f080 	clz	r0, r0
 8007582:	0940      	lsrs	r0, r0, #5
 8007584:	4934      	ldr	r1, [pc, #208]	; (8007658 <oslib_test_005_005_execute+0x118>)
 8007586:	f7fa f90b 	bl	80017a0 <_test_assert>
 800758a:	2800      	cmp	r0, #0
 800758c:	d1e5      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
  test_set_step(4);
 800758e:	2304      	movs	r3, #4
 8007590:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8007592:	f7fe fd6d 	bl	8006070 <chFactoryFindObjectsFIFO.constprop.7>
    test_assert(dofp1 != NULL, "not found");
 8007596:	4607      	mov	r7, r0
 8007598:	3000      	adds	r0, #0
 800759a:	bf18      	it	ne
 800759c:	2001      	movne	r0, #1
 800759e:	492f      	ldr	r1, [pc, #188]	; (800765c <oslib_test_005_005_execute+0x11c>)
 80075a0:	f7fa f8fe 	bl	80017a0 <_test_assert>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d1d8      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 80075a8:	1bf0      	subs	r0, r6, r7
 80075aa:	fab0 f080 	clz	r0, r0
 80075ae:	492c      	ldr	r1, [pc, #176]	; (8007660 <oslib_test_005_005_execute+0x120>)
 80075b0:	0940      	lsrs	r0, r0, #5
 80075b2:	f7fa f8f5 	bl	80017a0 <_test_assert>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d1cf      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4928      	ldr	r1, [pc, #160]	; (8007660 <oslib_test_005_005_execute+0x120>)
 80075be:	f1a0 0002 	sub.w	r0, r0, #2
 80075c2:	fab0 f080 	clz	r0, r0
 80075c6:	0940      	lsrs	r0, r0, #5
 80075c8:	f7fa f8ea 	bl	80017a0 <_test_assert>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1c4      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
 80075d0:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 80075d2:	4923      	ldr	r1, [pc, #140]	; (8007660 <oslib_test_005_005_execute+0x120>)
 80075d4:	442b      	add	r3, r5
 80075d6:	4628      	mov	r0, r5
 80075d8:	607b      	str	r3, [r7, #4]
 80075da:	f7fa f8e1 	bl	80017a0 <_test_assert>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d1bb      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	491e      	ldr	r1, [pc, #120]	; (8007660 <oslib_test_005_005_execute+0x120>)
 80075e6:	f1a0 0c03 	sub.w	ip, r0, #3
 80075ea:	f1dc 0000 	rsbs	r0, ip, #0
 80075ee:	eb40 000c 	adc.w	r0, r0, ip
 80075f2:	f7fa f8d5 	bl	80017a0 <_test_assert>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d1af      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 80075fa:	4638      	mov	r0, r7
 80075fc:	f7ff ff88 	bl	8007510 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4918      	ldr	r1, [pc, #96]	; (8007664 <oslib_test_005_005_execute+0x124>)
 8007604:	1e82      	subs	r2, r0, #2
 8007606:	4250      	negs	r0, r2
 8007608:	4150      	adcs	r0, r2
 800760a:	f7fa f8c9 	bl	80017a0 <_test_assert>
 800760e:	2800      	cmp	r0, #0
 8007610:	d1a3      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 8007612:	4638      	mov	r0, r7
 8007614:	f7ff ff7c 	bl	8007510 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 8007618:	6870      	ldr	r0, [r6, #4]
 800761a:	4912      	ldr	r1, [pc, #72]	; (8007664 <oslib_test_005_005_execute+0x124>)
 800761c:	1b43      	subs	r3, r0, r5
 800761e:	4258      	negs	r0, r3
 8007620:	4158      	adcs	r0, r3
 8007622:	f7fa f8bd 	bl	80017a0 <_test_assert>
 8007626:	2800      	cmp	r0, #0
 8007628:	d197      	bne.n	800755a <oslib_test_005_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp);
 800762a:	4630      	mov	r0, r6
  test_set_step(5);
 800762c:	2305      	movs	r3, #5
 800762e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 8007630:	f7ff ff6e 	bl	8007510 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 8007634:	2306      	movs	r3, #6
 8007636:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8007638:	f7fe fd1a 	bl	8006070 <chFactoryFindObjectsFIFO.constprop.7>
    test_assert(dofp == NULL, "found");
 800763c:	fab0 f080 	clz	r0, r0
 8007640:	0940      	lsrs	r0, r0, #5
 8007642:	4903      	ldr	r1, [pc, #12]	; (8007650 <oslib_test_005_005_execute+0x110>)
}
 8007644:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8007648:	f7fa b8aa 	b.w	80017a0 <_test_assert>
 800764c:	2000178c 	.word	0x2000178c
 8007650:	0800b1cc 	.word	0x0800b1cc
 8007654:	0800b1ac 	.word	0x0800b1ac
 8007658:	0800b1bc 	.word	0x0800b1bc
 800765c:	0800b1c8 	.word	0x0800b1c8
 8007660:	0800b1d4 	.word	0x0800b1d4
 8007664:	0800b1f0 	.word	0x0800b1f0
	...

08007670 <oslib_test_005_005_teardown>:
static void oslib_test_005_005_teardown(void) {
 8007670:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8007672:	f7fe fcfd 	bl	8006070 <chFactoryFindObjectsFIFO.constprop.7>
  if (dofp != NULL) {
 8007676:	b140      	cbz	r0, 800768a <oslib_test_005_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8007678:	6843      	ldr	r3, [r0, #4]
 800767a:	4604      	mov	r4, r0
 800767c:	b12b      	cbz	r3, 800768a <oslib_test_005_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff ff46 	bl	8007510 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8007684:	6863      	ldr	r3, [r4, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f9      	bne.n	800767e <oslib_test_005_005_teardown+0xe>
}
 800768a:	bd10      	pop	{r4, pc}
 800768c:	0000      	movs	r0, r0
	...

08007690 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8007690:	b510      	push	{r4, lr}
 8007692:	4604      	mov	r4, r0
  F_LOCK();
 8007694:	4807      	ldr	r0, [pc, #28]	; (80076b4 <chFactoryReleaseMailbox+0x24>)
 8007696:	f7fc ffa3 	bl	80045e0 <chMtxLock>
  dep->refs--;
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	3b01      	subs	r3, #1
 800769e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80076a0:	b91b      	cbnz	r3, 80076aa <chFactoryReleaseMailbox+0x1a>
 80076a2:	4620      	mov	r0, r4
 80076a4:	4904      	ldr	r1, [pc, #16]	; (80076b8 <chFactoryReleaseMailbox+0x28>)
 80076a6:	f7ff fe63 	bl	8007370 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 80076aa:	4802      	ldr	r0, [pc, #8]	; (80076b4 <chFactoryReleaseMailbox+0x24>)
}
 80076ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80076b0:	f7fe b966 	b.w	8005980 <chMtxUnlock>
 80076b4:	20000e18 	.word	0x20000e18
 80076b8:	20000e54 	.word	0x20000e54
 80076bc:	00000000 	.word	0x00000000

080076c0 <oslib_test_005_004_execute>:
static void oslib_test_005_004_execute(void) {
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80076c2:	4c42      	ldr	r4, [pc, #264]	; (80077cc <oslib_test_005_004_execute+0x10c>)
 80076c4:	2501      	movs	r5, #1
 80076c6:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80076c8:	f7fe fc6a 	bl	8005fa0 <chFactoryFindMailbox.constprop.9>
    test_assert(dmp == NULL, "found");
 80076cc:	fab0 f080 	clz	r0, r0
 80076d0:	0940      	lsrs	r0, r0, #5
 80076d2:	493f      	ldr	r1, [pc, #252]	; (80077d0 <oslib_test_005_004_execute+0x110>)
 80076d4:	f7fa f864 	bl	80017a0 <_test_assert>
 80076d8:	b100      	cbz	r0, 80076dc <oslib_test_005_004_execute+0x1c>
}
 80076da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80076dc:	2302      	movs	r3, #2
 80076de:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 80076e0:	f7fe fc2e 	bl	8005f40 <chFactoryCreateMailbox.constprop.10>
    test_assert(dmp != NULL, "cannot create");
 80076e4:	4606      	mov	r6, r0
 80076e6:	3000      	adds	r0, #0
 80076e8:	bf18      	it	ne
 80076ea:	2001      	movne	r0, #1
 80076ec:	4939      	ldr	r1, [pc, #228]	; (80077d4 <oslib_test_005_004_execute+0x114>)
 80076ee:	f7fa f857 	bl	80017a0 <_test_assert>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d1f1      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
  test_set_step(3);
 80076f6:	2303      	movs	r3, #3
 80076f8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 80076fa:	f7fe fc21 	bl	8005f40 <chFactoryCreateMailbox.constprop.10>
    test_assert(dmp1 == NULL, "can create");
 80076fe:	fab0 f080 	clz	r0, r0
 8007702:	0940      	lsrs	r0, r0, #5
 8007704:	4934      	ldr	r1, [pc, #208]	; (80077d8 <oslib_test_005_004_execute+0x118>)
 8007706:	f7fa f84b 	bl	80017a0 <_test_assert>
 800770a:	2800      	cmp	r0, #0
 800770c:	d1e5      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
  test_set_step(4);
 800770e:	2304      	movs	r3, #4
 8007710:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8007712:	f7fe fc45 	bl	8005fa0 <chFactoryFindMailbox.constprop.9>
    test_assert(dmp1 != NULL, "not found");
 8007716:	4607      	mov	r7, r0
 8007718:	3000      	adds	r0, #0
 800771a:	bf18      	it	ne
 800771c:	2001      	movne	r0, #1
 800771e:	492f      	ldr	r1, [pc, #188]	; (80077dc <oslib_test_005_004_execute+0x11c>)
 8007720:	f7fa f83e 	bl	80017a0 <_test_assert>
 8007724:	2800      	cmp	r0, #0
 8007726:	d1d8      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8007728:	1bf0      	subs	r0, r6, r7
 800772a:	fab0 f080 	clz	r0, r0
 800772e:	492c      	ldr	r1, [pc, #176]	; (80077e0 <oslib_test_005_004_execute+0x120>)
 8007730:	0940      	lsrs	r0, r0, #5
 8007732:	f7fa f835 	bl	80017a0 <_test_assert>
 8007736:	2800      	cmp	r0, #0
 8007738:	d1cf      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4928      	ldr	r1, [pc, #160]	; (80077e0 <oslib_test_005_004_execute+0x120>)
 800773e:	f1a0 0002 	sub.w	r0, r0, #2
 8007742:	fab0 f080 	clz	r0, r0
 8007746:	0940      	lsrs	r0, r0, #5
 8007748:	f7fa f82a 	bl	80017a0 <_test_assert>
 800774c:	2800      	cmp	r0, #0
 800774e:	d1c4      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
 8007750:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8007752:	4923      	ldr	r1, [pc, #140]	; (80077e0 <oslib_test_005_004_execute+0x120>)
 8007754:	442b      	add	r3, r5
 8007756:	4628      	mov	r0, r5
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	f7fa f821 	bl	80017a0 <_test_assert>
 800775e:	2800      	cmp	r0, #0
 8007760:	d1bb      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	491e      	ldr	r1, [pc, #120]	; (80077e0 <oslib_test_005_004_execute+0x120>)
 8007766:	f1a0 0c03 	sub.w	ip, r0, #3
 800776a:	f1dc 0000 	rsbs	r0, ip, #0
 800776e:	eb40 000c 	adc.w	r0, r0, ip
 8007772:	f7fa f815 	bl	80017a0 <_test_assert>
 8007776:	2800      	cmp	r0, #0
 8007778:	d1af      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 800777a:	4638      	mov	r0, r7
 800777c:	f7ff ff88 	bl	8007690 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4918      	ldr	r1, [pc, #96]	; (80077e4 <oslib_test_005_004_execute+0x124>)
 8007784:	1e82      	subs	r2, r0, #2
 8007786:	4250      	negs	r0, r2
 8007788:	4150      	adcs	r0, r2
 800778a:	f7fa f809 	bl	80017a0 <_test_assert>
 800778e:	2800      	cmp	r0, #0
 8007790:	d1a3      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8007792:	4638      	mov	r0, r7
 8007794:	f7ff ff7c 	bl	8007690 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8007798:	6870      	ldr	r0, [r6, #4]
 800779a:	4912      	ldr	r1, [pc, #72]	; (80077e4 <oslib_test_005_004_execute+0x124>)
 800779c:	1b43      	subs	r3, r0, r5
 800779e:	4258      	negs	r0, r3
 80077a0:	4158      	adcs	r0, r3
 80077a2:	f7f9 fffd 	bl	80017a0 <_test_assert>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d197      	bne.n	80076da <oslib_test_005_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 80077aa:	4630      	mov	r0, r6
  test_set_step(5);
 80077ac:	2305      	movs	r3, #5
 80077ae:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 80077b0:	f7ff ff6e 	bl	8007690 <chFactoryReleaseMailbox>
  test_set_step(6);
 80077b4:	2306      	movs	r3, #6
 80077b6:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80077b8:	f7fe fbf2 	bl	8005fa0 <chFactoryFindMailbox.constprop.9>
    test_assert(dmp == NULL, "found");
 80077bc:	fab0 f080 	clz	r0, r0
 80077c0:	0940      	lsrs	r0, r0, #5
 80077c2:	4903      	ldr	r1, [pc, #12]	; (80077d0 <oslib_test_005_004_execute+0x110>)
}
 80077c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 80077c8:	f7f9 bfea 	b.w	80017a0 <_test_assert>
 80077cc:	2000178c 	.word	0x2000178c
 80077d0:	0800b1cc 	.word	0x0800b1cc
 80077d4:	0800b1ac 	.word	0x0800b1ac
 80077d8:	0800b1bc 	.word	0x0800b1bc
 80077dc:	0800b1c8 	.word	0x0800b1c8
 80077e0:	0800b1d4 	.word	0x0800b1d4
 80077e4:	0800b1f0 	.word	0x0800b1f0
	...

080077f0 <oslib_test_005_004_teardown>:
static void oslib_test_005_004_teardown(void) {
 80077f0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 80077f2:	f7fe fbd5 	bl	8005fa0 <chFactoryFindMailbox.constprop.9>
  if (dmp != NULL) {
 80077f6:	b140      	cbz	r0, 800780a <oslib_test_005_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 80077f8:	6843      	ldr	r3, [r0, #4]
 80077fa:	4604      	mov	r4, r0
 80077fc:	b12b      	cbz	r3, 800780a <oslib_test_005_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff ff46 	bl	8007690 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8007804:	6863      	ldr	r3, [r4, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f9      	bne.n	80077fe <oslib_test_005_004_teardown+0xe>
}
 800780a:	bd10      	pop	{r4, pc}
 800780c:	0000      	movs	r0, r0
	...

08007810 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8007810:	b510      	push	{r4, lr}
 8007812:	4604      	mov	r4, r0
  F_LOCK();
 8007814:	4807      	ldr	r0, [pc, #28]	; (8007834 <chFactoryReleaseBuffer+0x24>)
 8007816:	f7fc fee3 	bl	80045e0 <chMtxLock>
  dep->refs--;
 800781a:	6863      	ldr	r3, [r4, #4]
 800781c:	3b01      	subs	r3, #1
 800781e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8007820:	b91b      	cbnz	r3, 800782a <chFactoryReleaseBuffer+0x1a>
 8007822:	4620      	mov	r0, r4
 8007824:	4904      	ldr	r1, [pc, #16]	; (8007838 <chFactoryReleaseBuffer+0x28>)
 8007826:	f7ff fda3 	bl	8007370 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 800782a:	4802      	ldr	r0, [pc, #8]	; (8007834 <chFactoryReleaseBuffer+0x24>)
}
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8007830:	f7fe b8a6 	b.w	8005980 <chMtxUnlock>
 8007834:	20000e18 	.word	0x20000e18
 8007838:	20000e3c 	.word	0x20000e3c
 800783c:	00000000 	.word	0x00000000

08007840 <oslib_test_005_002_execute>:
static void oslib_test_005_002_execute(void) {
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8007842:	4c42      	ldr	r4, [pc, #264]	; (800794c <oslib_test_005_002_execute+0x10c>)
 8007844:	2501      	movs	r5, #1
 8007846:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8007848:	f7fe fb2a 	bl	8005ea0 <chFactoryFindBuffer.constprop.13>
    test_assert(dbp == NULL, "found");
 800784c:	fab0 f080 	clz	r0, r0
 8007850:	0940      	lsrs	r0, r0, #5
 8007852:	493f      	ldr	r1, [pc, #252]	; (8007950 <oslib_test_005_002_execute+0x110>)
 8007854:	f7f9 ffa4 	bl	80017a0 <_test_assert>
 8007858:	b100      	cbz	r0, 800785c <oslib_test_005_002_execute+0x1c>
}
 800785a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800785c:	2302      	movs	r3, #2
 800785e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8007860:	f7fe fafe 	bl	8005e60 <chFactoryCreateBuffer.constprop.14>
    test_assert(dbp != NULL, "cannot create");
 8007864:	4606      	mov	r6, r0
 8007866:	3000      	adds	r0, #0
 8007868:	bf18      	it	ne
 800786a:	2001      	movne	r0, #1
 800786c:	4939      	ldr	r1, [pc, #228]	; (8007954 <oslib_test_005_002_execute+0x114>)
 800786e:	f7f9 ff97 	bl	80017a0 <_test_assert>
 8007872:	2800      	cmp	r0, #0
 8007874:	d1f1      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
  test_set_step(3);
 8007876:	2303      	movs	r3, #3
 8007878:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 800787a:	f7fe faf1 	bl	8005e60 <chFactoryCreateBuffer.constprop.14>
    test_assert(dbp1 == NULL, "can create");
 800787e:	fab0 f080 	clz	r0, r0
 8007882:	0940      	lsrs	r0, r0, #5
 8007884:	4934      	ldr	r1, [pc, #208]	; (8007958 <oslib_test_005_002_execute+0x118>)
 8007886:	f7f9 ff8b 	bl	80017a0 <_test_assert>
 800788a:	2800      	cmp	r0, #0
 800788c:	d1e5      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
  test_set_step(4);
 800788e:	2304      	movs	r3, #4
 8007890:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8007892:	f7fe fb05 	bl	8005ea0 <chFactoryFindBuffer.constprop.13>
    test_assert(dbp1 != NULL, "not found");
 8007896:	4607      	mov	r7, r0
 8007898:	3000      	adds	r0, #0
 800789a:	bf18      	it	ne
 800789c:	2001      	movne	r0, #1
 800789e:	492f      	ldr	r1, [pc, #188]	; (800795c <oslib_test_005_002_execute+0x11c>)
 80078a0:	f7f9 ff7e 	bl	80017a0 <_test_assert>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d1d8      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 80078a8:	1bf0      	subs	r0, r6, r7
 80078aa:	fab0 f080 	clz	r0, r0
 80078ae:	492c      	ldr	r1, [pc, #176]	; (8007960 <oslib_test_005_002_execute+0x120>)
 80078b0:	0940      	lsrs	r0, r0, #5
 80078b2:	f7f9 ff75 	bl	80017a0 <_test_assert>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d1cf      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4928      	ldr	r1, [pc, #160]	; (8007960 <oslib_test_005_002_execute+0x120>)
 80078be:	f1a0 0002 	sub.w	r0, r0, #2
 80078c2:	fab0 f080 	clz	r0, r0
 80078c6:	0940      	lsrs	r0, r0, #5
 80078c8:	f7f9 ff6a 	bl	80017a0 <_test_assert>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d1c4      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
 80078d0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 80078d2:	4923      	ldr	r1, [pc, #140]	; (8007960 <oslib_test_005_002_execute+0x120>)
 80078d4:	442b      	add	r3, r5
 80078d6:	4628      	mov	r0, r5
 80078d8:	607b      	str	r3, [r7, #4]
 80078da:	f7f9 ff61 	bl	80017a0 <_test_assert>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d1bb      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	491e      	ldr	r1, [pc, #120]	; (8007960 <oslib_test_005_002_execute+0x120>)
 80078e6:	f1a0 0c03 	sub.w	ip, r0, #3
 80078ea:	f1dc 0000 	rsbs	r0, ip, #0
 80078ee:	eb40 000c 	adc.w	r0, r0, ip
 80078f2:	f7f9 ff55 	bl	80017a0 <_test_assert>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d1af      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 80078fa:	4638      	mov	r0, r7
 80078fc:	f7ff ff88 	bl	8007810 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4918      	ldr	r1, [pc, #96]	; (8007964 <oslib_test_005_002_execute+0x124>)
 8007904:	1e82      	subs	r2, r0, #2
 8007906:	4250      	negs	r0, r2
 8007908:	4150      	adcs	r0, r2
 800790a:	f7f9 ff49 	bl	80017a0 <_test_assert>
 800790e:	2800      	cmp	r0, #0
 8007910:	d1a3      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8007912:	4638      	mov	r0, r7
 8007914:	f7ff ff7c 	bl	8007810 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8007918:	6870      	ldr	r0, [r6, #4]
 800791a:	4912      	ldr	r1, [pc, #72]	; (8007964 <oslib_test_005_002_execute+0x124>)
 800791c:	1b43      	subs	r3, r0, r5
 800791e:	4258      	negs	r0, r3
 8007920:	4158      	adcs	r0, r3
 8007922:	f7f9 ff3d 	bl	80017a0 <_test_assert>
 8007926:	2800      	cmp	r0, #0
 8007928:	d197      	bne.n	800785a <oslib_test_005_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 800792a:	4630      	mov	r0, r6
  test_set_step(5);
 800792c:	2305      	movs	r3, #5
 800792e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8007930:	f7ff ff6e 	bl	8007810 <chFactoryReleaseBuffer>
  test_set_step(6);
 8007934:	2306      	movs	r3, #6
 8007936:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8007938:	f7fe fab2 	bl	8005ea0 <chFactoryFindBuffer.constprop.13>
    test_assert(dbp == NULL, "found");
 800793c:	fab0 f080 	clz	r0, r0
 8007940:	0940      	lsrs	r0, r0, #5
 8007942:	4903      	ldr	r1, [pc, #12]	; (8007950 <oslib_test_005_002_execute+0x110>)
}
 8007944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8007948:	f7f9 bf2a 	b.w	80017a0 <_test_assert>
 800794c:	2000178c 	.word	0x2000178c
 8007950:	0800b1cc 	.word	0x0800b1cc
 8007954:	0800b1ac 	.word	0x0800b1ac
 8007958:	0800b1bc 	.word	0x0800b1bc
 800795c:	0800b1c8 	.word	0x0800b1c8
 8007960:	0800b1d4 	.word	0x0800b1d4
 8007964:	0800b1f0 	.word	0x0800b1f0
	...

08007970 <oslib_test_005_002_teardown>:
static void oslib_test_005_002_teardown(void) {
 8007970:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8007972:	f7fe fa95 	bl	8005ea0 <chFactoryFindBuffer.constprop.13>
  if (dbp != NULL) {
 8007976:	b140      	cbz	r0, 800798a <oslib_test_005_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8007978:	6843      	ldr	r3, [r0, #4]
 800797a:	4604      	mov	r4, r0
 800797c:	b12b      	cbz	r3, 800798a <oslib_test_005_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 800797e:	4620      	mov	r0, r4
 8007980:	f7ff ff46 	bl	8007810 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8007984:	6863      	ldr	r3, [r4, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f9      	bne.n	800797e <oslib_test_005_002_teardown+0xe>
}
 800798a:	bd10      	pop	{r4, pc}
 800798c:	0000      	movs	r0, r0
	...

08007990 <chThdRelease>:
 8007990:	2220      	movs	r2, #32
 8007992:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8007996:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800799a:	3b01      	subs	r3, #1
 800799c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80079a6:	2b0f      	cmp	r3, #15
 80079a8:	d003      	beq.n	80079b2 <chThdRelease+0x22>
 80079aa:	2300      	movs	r3, #0
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	4770      	bx	lr
    REG_REMOVE(tp);
 80079b2:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void chThdRelease(thread_t *tp) {
 80079b6:	b410      	push	{r4}
    REG_REMOVE(tp);
 80079b8:	6119      	str	r1, [r3, #16]
 80079ba:	6904      	ldr	r4, [r0, #16]
 80079bc:	2100      	movs	r1, #0
 80079be:	6163      	str	r3, [r4, #20]
 80079c0:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80079c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80079c8:	f003 0303 	and.w	r3, r3, #3
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d00c      	beq.n	80079ea <chThdRelease+0x5a>
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d108      	bne.n	80079e6 <chThdRelease+0x56>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80079d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80079d6:	69c0      	ldr	r0, [r0, #28]
 80079d8:	f382 8811 	msr	BASEPRI, r2
  php->next = mp->next;
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	6002      	str	r2, [r0, #0]
  mp->next = php;
 80079e0:	6018      	str	r0, [r3, #0]
 80079e2:	f381 8811 	msr	BASEPRI, r1
}
 80079e6:	bc10      	pop	{r4}
 80079e8:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 80079ea:	69c0      	ldr	r0, [r0, #28]
}
 80079ec:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 80079ee:	f7ff ba9f 	b.w	8006f30 <chHeapFree>
 80079f2:	bf00      	nop
	...

08007a00 <rt_test_010_006_execute>:
static void rt_test_010_006_execute(void) {
 8007a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8007a04:	4b1a      	ldr	r3, [pc, #104]	; (8007a70 <rt_test_010_006_execute+0x70>)
  test_set_step(1);
 8007a06:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007a7c <rt_test_010_006_execute+0x7c>
  return chThdGetSelfX()->prio;
 8007a0a:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007a0c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007a80 <rt_test_010_006_execute+0x80>
  tprio_t prio = chThdGetPriorityX() + 1;
 8007a10:	689d      	ldr	r5, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007a12:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8007a84 <rt_test_010_006_execute+0x84>
  test_set_step(1);
 8007a16:	2301      	movs	r3, #1
static void rt_test_010_006_execute(void) {
 8007a18:	b082      	sub	sp, #8
  tprio_t prio = chThdGetPriorityX() + 1;
 8007a1a:	441d      	add	r5, r3
  test_set_step(1);
 8007a1c:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8007a20:	f7fc faae 	bl	8003f80 <test_wait_tick>
    n = 0;
 8007a24:	2400      	movs	r4, #0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007a26:	4627      	mov	r7, r4
    start = test_wait_tick();
 8007a28:	4606      	mov	r6, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	462a      	mov	r2, r5
 8007a2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a32:	9700      	str	r7, [sp, #0]
 8007a34:	4640      	mov	r0, r8
 8007a36:	f7fb fe53 	bl	80036e0 <chThdCreateStatic>
 8007a3a:	f7ff ffa9 	bl	8007990 <chThdRelease>
 8007a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8007a42:	f242 720f 	movw	r2, #9999	; 0x270f
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	1b9b      	subs	r3, r3, r6
 8007a4a:	4293      	cmp	r3, r2
      n++;
 8007a4c:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8007a50:	d9eb      	bls.n	8007a2a <rt_test_010_006_execute+0x2a>
  test_set_step(2);
 8007a52:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8007a54:	4807      	ldr	r0, [pc, #28]	; (8007a74 <rt_test_010_006_execute+0x74>)
  test_set_step(2);
 8007a56:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8007a5a:	f7f9 ffa1 	bl	80019a0 <test_print>
    test_printn(n);
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f7f9 ff2e 	bl	80018c0 <test_printn>
    test_println(" threads/S");
 8007a64:	4804      	ldr	r0, [pc, #16]	; (8007a78 <rt_test_010_006_execute+0x78>)
}
 8007a66:	b002      	add	sp, #8
 8007a68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 8007a6c:	f7f9 bf78 	b.w	8001960 <test_println>
 8007a70:	20000da0 	.word	0x20000da0
 8007a74:	0800c450 	.word	0x0800c450
 8007a78:	0800c3f4 	.word	0x0800c3f4
 8007a7c:	2000178c 	.word	0x2000178c
 8007a80:	08004cd1 	.word	0x08004cd1
 8007a84:	20001078 	.word	0x20001078
	...

08007a90 <cmd_threads>:
  if (argc > 0) {
 8007a90:	2900      	cmp	r1, #0
 8007a92:	dd03      	ble.n	8007a9c <cmd_threads+0xc>
    shellUsage(chp, "threads");
 8007a94:	4a29      	ldr	r2, [pc, #164]	; (8007b3c <cmd_threads+0xac>)
 8007a96:	492a      	ldr	r1, [pc, #168]	; (8007b40 <cmd_threads+0xb0>)
 8007a98:	f7fb b8e2 	b.w	8002c60 <chprintf>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8007aa0:	4928      	ldr	r1, [pc, #160]	; (8007b44 <cmd_threads+0xb4>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007aa2:	b089      	sub	sp, #36	; 0x24
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8007aa8:	f7fb f8da 	bl	8002c60 <chprintf>
 8007aac:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8007ab0:	4f25      	ldr	r7, [pc, #148]	; (8007b48 <cmd_threads+0xb8>)
 8007ab2:	693c      	ldr	r4, [r7, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8007ab4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007ab8:	3301      	adds	r3, #1
 8007aba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f8df a084 	ldr.w	sl, [pc, #132]	; 8007b4c <cmd_threads+0xbc>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8007ac8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8007b50 <cmd_threads+0xc0>
 8007acc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8007b54 <cmd_threads+0xc4>
 8007ad0:	9607      	str	r6, [sp, #28]
 8007ad2:	e00a      	b.n	8007aea <cmd_threads+0x5a>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 8007ad4:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 8007ad8:	3301      	adds	r3, #1
 8007ada:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 8007ade:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7ff ff54 	bl	8007990 <chThdRelease>
 8007ae8:	465c      	mov	r4, fp
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 8007aea:	f894 c020 	ldrb.w	ip, [r4, #32]
 8007aee:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8007af2:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 8007af6:	68a6      	ldr	r6, [r4, #8]
 8007af8:	68e3      	ldr	r3, [r4, #12]
    uint32_t stklimit = (uint32_t)tp->wabase;
 8007afa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8007afe:	3801      	subs	r0, #1
 8007b00:	2900      	cmp	r1, #0
 8007b02:	bf08      	it	eq
 8007b04:	4649      	moveq	r1, r9
 8007b06:	9001      	str	r0, [sp, #4]
 8007b08:	e9cd c103 	strd	ip, r1, [sp, #12]
 8007b0c:	9602      	str	r6, [sp, #8]
 8007b0e:	9400      	str	r4, [sp, #0]
 8007b10:	4641      	mov	r1, r8
 8007b12:	4628      	mov	r0, r5
 8007b14:	f7fb f8a4 	bl	8002c60 <chprintf>
 8007b18:	9b07      	ldr	r3, [sp, #28]
 8007b1a:	f383 8811 	msr	BASEPRI, r3
  ntp = tp->newer;
 8007b1e:	f8d4 b010 	ldr.w	fp, [r4, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8007b22:	45bb      	cmp	fp, r7
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	d1d4      	bne.n	8007ad4 <cmd_threads+0x44>
 8007b2a:	f382 8811 	msr	BASEPRI, r2
  chThdRelease(tp);
 8007b2e:	4620      	mov	r0, r4
}
 8007b30:	b009      	add	sp, #36	; 0x24
 8007b32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b36:	f7ff bf2b 	b.w	8007990 <chThdRelease>
 8007b3a:	bf00      	nop
 8007b3c:	0800cd80 	.word	0x0800cd80
 8007b40:	0800ad0c 	.word	0x0800ad0c
 8007b44:	0800add4 	.word	0x0800add4
 8007b48:	20000da0 	.word	0x20000da0
 8007b4c:	0800c770 	.word	0x0800c770
 8007b50:	0800ad4c 	.word	0x0800ad4c
 8007b54:	0800ae14 	.word	0x0800ae14
	...

08007b60 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4604      	mov	r4, r0
 8007b64:	2320      	movs	r3, #32
 8007b66:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 8007b6a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007b6e:	2b0f      	cmp	r3, #15
 8007b70:	d007      	beq.n	8007b82 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8007b72:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8007b74:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007b76:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8007b78:	2009      	movs	r0, #9
 8007b7a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 8007b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b7e:	f7fb fe2f 	bl	80037e0 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8007b82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b84:	2300      	movs	r3, #0
 8007b86:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff ff00 	bl	8007990 <chThdRelease>
}
 8007b90:	4628      	mov	r0, r5
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	20000da0 	.word	0x20000da0
	...

08007ba0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8007ba0:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <main+0x94>)
  PWR->CR |= PWR_CR_DBP;
 8007ba2:	4825      	ldr	r0, [pc, #148]	; (8007c38 <main+0x98>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8007ba4:	691a      	ldr	r2, [r3, #16]
 8007ba6:	f062 021f 	orn	r2, r2, #31


/*
 * Application entry point.
 */
int main(void) {
 8007baa:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8007bae:	611a      	str	r2, [r3, #16]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	f002 021f 	and.w	r2, r2, #31
 8007bb6:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8007bb8:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8007bbc:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8007bbe:	695a      	ldr	r2, [r3, #20]
 8007bc0:	615c      	str	r4, [r3, #20]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	6959      	ldr	r1, [r3, #20]
 8007bc6:	615a      	str	r2, [r3, #20]
 8007bc8:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8007bca:	6a19      	ldr	r1, [r3, #32]
 8007bcc:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8007bd0:	6219      	str	r1, [r3, #32]
 8007bd2:	6a19      	ldr	r1, [r3, #32]
 8007bd4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8007bd8:	6219      	str	r1, [r3, #32]
 8007bda:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8007bdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bde:	625c      	str	r4, [r3, #36]	; 0x24
 8007be0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007be2:	625a      	str	r2, [r3, #36]	; 0x24
 8007be4:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8007be6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007be8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007bec:	6419      	str	r1, [r3, #64]	; 0x40
 8007bee:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8007bf0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007bf4:	6619      	str	r1, [r3, #96]	; 0x60
 8007bf6:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8007bf8:	6801      	ldr	r1, [r0, #0]
 8007bfa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007bfe:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8007c00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c02:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8007c06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007c0a:	b08b      	sub	sp, #44	; 0x2c
 8007c0c:	d003      	beq.n	8007c16 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 8007c0e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007c12:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8007c14:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8007c16:	4808      	ldr	r0, [pc, #32]	; (8007c38 <main+0x98>)
  dma.allocated_mask = 0U;
 8007c18:	4908      	ldr	r1, [pc, #32]	; (8007c3c <main+0x9c>)
 8007c1a:	6842      	ldr	r2, [r0, #4]
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <main+0xa0>)
 8007c1e:	4d09      	ldr	r5, [pc, #36]	; (8007c44 <main+0xa4>)
 8007c20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c24:	2400      	movs	r4, #0
 8007c26:	6042      	str	r2, [r0, #4]
 8007c28:	460a      	mov	r2, r1
 8007c2a:	600c      	str	r4, [r1, #0]
 8007c2c:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8007c30:	e00c      	b.n	8007c4c <main+0xac>
 8007c32:	bf00      	nop
 8007c34:	40023800 	.word	0x40023800
 8007c38:	40007000 	.word	0x40007000
 8007c3c:	20000f5c 	.word	0x20000f5c
 8007c40:	0800aa2c 	.word	0x0800aa2c
 8007c44:	40026010 	.word	0x40026010
 8007c48:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8007c4c:	602c      	str	r4, [r5, #0]
 8007c4e:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8007c50:	4299      	cmp	r1, r3
    dma.streams[i].func = NULL;
 8007c52:	6054      	str	r4, [r2, #4]
 8007c54:	f102 0208 	add.w	r2, r2, #8
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8007c58:	d1f6      	bne.n	8007c48 <main+0xa8>
  adcp->state    = ADC_STOP;
 8007c5a:	48db      	ldr	r0, [pc, #876]	; (8007fc8 <main+0x428>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8007c5c:	4adb      	ldr	r2, [pc, #876]	; (8007fcc <main+0x42c>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8007c5e:	f8df b3bc 	ldr.w	fp, [pc, #956]	; 800801c <main+0x47c>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007c62:	4edb      	ldr	r6, [pc, #876]	; (8007fd0 <main+0x430>)
  adcp->config   = NULL;
 8007c64:	6044      	str	r4, [r0, #4]
  DMA1->LIFCR = 0xFFFFFFFFU;
 8007c66:	f04f 3eff 	mov.w	lr, #4294967295
 8007c6a:	f8c2 e008 	str.w	lr, [r2, #8]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8007c6e:	4dd9      	ldr	r5, [pc, #868]	; (8007fd4 <main+0x434>)
  adcp->samples  = NULL;
 8007c70:	6084      	str	r4, [r0, #8]
 8007c72:	f04f 0c60 	mov.w	ip, #96	; 0x60
  DMA1->HIFCR = 0xFFFFFFFFU;
 8007c76:	f8c2 e00c 	str.w	lr, [r2, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c7a:	2180      	movs	r1, #128	; 0x80
  DMA2->LIFCR = 0xFFFFFFFFU;
 8007c7c:	f8cb e008 	str.w	lr, [fp, #8]
 8007c80:	f44f 7880 	mov.w	r8, #256	; 0x100
  adcp->depth    = 0;
 8007c84:	60c4      	str	r4, [r0, #12]
 8007c86:	f44f 7900 	mov.w	r9, #512	; 0x200
  DMA2->HIFCR = 0xFFFFFFFFU;
 8007c8a:	f8cb e00c 	str.w	lr, [fp, #12]
 8007c8e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  tqp->next = (thread_t *)tqp;
 8007c92:	f100 0b18 	add.w	fp, r0, #24
 8007c96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007c9a:	2340      	movs	r3, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007c9c:	f886 c306 	strb.w	ip, [r6, #774]	; 0x306

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8007ca0:	4fcd      	ldr	r7, [pc, #820]	; (8007fd8 <main+0x438>)
  adcp->grpp     = NULL;
 8007ca2:	6104      	str	r4, [r0, #16]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007ca4:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
  adcp->thread   = NULL;
 8007ca8:	6144      	str	r4, [r0, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007caa:	6033      	str	r3, [r6, #0]
 8007cac:	f8c0 b018 	str.w	fp, [r0, #24]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007cb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007cb4:	f886 c307 	strb.w	ip, [r6, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007cb8:	f8c6 1180 	str.w	r1, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007cbc:	6031      	str	r1, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007cbe:	f886 c308 	strb.w	ip, [r6, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007cc2:	f8c6 8180 	str.w	r8, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007cc6:	f8c6 8000 	str.w	r8, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007cca:	f886 c309 	strb.w	ip, [r6, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007cce:	f8c6 9180 	str.w	r9, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007cd2:	f8c6 9000 	str.w	r9, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007cd6:	f886 c30a 	strb.w	ip, [r6, #778]	; 0x30a
  adcp->state    = ADC_STOP;
 8007cda:	f04f 0901 	mov.w	r9, #1
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007cde:	f8c6 a180 	str.w	sl, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007ce2:	f8c6 a000 	str.w	sl, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007ce6:	f886 c317 	strb.w	ip, [r6, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007cea:	f8c6 2180 	str.w	r2, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007cee:	6032      	str	r2, [r6, #0]
  oqp->q_counter = size;
 8007cf0:	2210      	movs	r2, #16
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007cf2:	f886 c328 	strb.w	ip, [r6, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007cf6:	f8c6 8184 	str.w	r8, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007cfa:	f8c6 8004 	str.w	r8, [r6, #4]
 8007cfe:	f880 9000 	strb.w	r9, [r0]
  tqp->prev = (thread_t *)tqp;
 8007d02:	f8c0 b01c 	str.w	fp, [r0, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007d06:	f886 c312 	strb.w	ip, [r6, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007d0a:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007d0e:	6033      	str	r3, [r6, #0]
  iqp->q_counter = 0;
 8007d10:	616c      	str	r4, [r5, #20]
  oqp->q_counter = size;
 8007d12:	63aa      	str	r2, [r5, #56]	; 0x38
 8007d14:	f8d7 c040 	ldr.w	ip, [r7, #64]	; 0x40
 8007d18:	f8df a304 	ldr.w	sl, [pc, #772]	; 8008020 <main+0x480>
 8007d1c:	9203      	str	r2, [sp, #12]
 8007d1e:	46a8      	mov	r8, r5
 8007d20:	ea4c 0c09 	orr.w	ip, ip, r9
  ADCD1.adc     = ADC1;
 8007d24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d28:	f848 ab04 	str.w	sl, [r8], #4
  mp->owner = NULL;
 8007d2c:	6204      	str	r4, [r0, #32]
 8007d2e:	f5a3 3338 	sub.w	r3, r3, #188416	; 0x2e000
 8007d32:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
 8007d36:	f8d7 c060 	ldr.w	ip, [r7, #96]	; 0x60
 8007d3a:	6283      	str	r3, [r0, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8007d3c:	4ba7      	ldr	r3, [pc, #668]	; (8007fdc <main+0x43c>)
  ADCD1.dmastp  = NULL;
 8007d3e:	62c4      	str	r4, [r0, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8007d40:	6303      	str	r3, [r0, #48]	; 0x30
  oqp->q_top     = bp + size;
 8007d42:	f105 0074 	add.w	r0, r5, #116	; 0x74
  oqp->q_notify  = onfy;
 8007d46:	4ba6      	ldr	r3, [pc, #664]	; (8007fe0 <main+0x440>)
  oqp->q_top     = bp + size;
 8007d48:	6428      	str	r0, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 8007d4a:	64eb      	str	r3, [r5, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8007d4c:	48a5      	ldr	r0, [pc, #660]	; (8007fe4 <main+0x444>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8007d4e:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 8008024 <main+0x484>
 8007d52:	6768      	str	r0, [r5, #116]	; 0x74
  tqp->next = (thread_t *)tqp;
 8007d54:	f105 030c 	add.w	r3, r5, #12
  iqp->q_buffer  = bp;
 8007d58:	f105 0054 	add.w	r0, r5, #84	; 0x54
  ST_ENABLE_CLOCK();
 8007d5c:	ea4c 0c09 	orr.w	ip, ip, r9
  esp->next = (event_listener_t *)esp;
 8007d60:	f8c5 8004 	str.w	r8, [r5, #4]
  tqp->prev = (thread_t *)tqp;
 8007d64:	e9c5 3303 	strd	r3, r3, [r5, #12]
  iqp->q_top     = bp + size;
 8007d68:	f105 0864 	add.w	r8, r5, #100	; 0x64
  tqp->next = (thread_t *)tqp;
 8007d6c:	f105 0330 	add.w	r3, r5, #48	; 0x30
  iqp->q_buffer  = bp;
 8007d70:	61a8      	str	r0, [r5, #24]
  iqp->q_wrptr   = bp;
 8007d72:	e9c5 0008 	strd	r0, r0, [r5, #32]
  iqp->q_top     = bp + size;
 8007d76:	f8c5 801c 	str.w	r8, [r5, #28]
  oqp->q_buffer  = bp;
 8007d7a:	f8c5 803c 	str.w	r8, [r5, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 8007d7e:	e9c5 8811 	strd	r8, r8, [r5, #68]	; 0x44
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8007d82:	f885 9008 	strb.w	r9, [r5, #8]
  iqp->q_link    = link;
 8007d86:	e9c5 450a 	strd	r4, r5, [r5, #40]	; 0x28
  oqp->q_link    = link;
 8007d8a:	652d      	str	r5, [r5, #80]	; 0x50
  tqp->prev = (thread_t *)tqp;
 8007d8c:	e9c5 330c 	strd	r3, r3, [r5, #48]	; 0x30
 8007d90:	f8c7 c060 	str.w	ip, [r7, #96]	; 0x60
 8007d94:	6e38      	ldr	r0, [r7, #96]	; 0x60
  ST_ENABLE_STOP();
 8007d96:	f8da c008 	ldr.w	ip, [sl, #8]
  tqp->next = (thread_t *)tqp;
 8007d9a:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8008028 <main+0x488>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8007d9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 8007da2:	ea4c 0c09 	orr.w	ip, ip, r9
 8007da6:	f8ca c008 	str.w	ip, [sl, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8007daa:	f242 03cf 	movw	r3, #8399	; 0x20cf
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007dae:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8007db2:	6283      	str	r3, [r0, #40]	; 0x28
  tmp->cumulative = (rttime_t)0;
 8007db4:	f04f 0b00 	mov.w	fp, #0
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8007db8:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8007dbc:	f108 031c 	add.w	r3, r8, #28
  STM32_ST_TIM->CCMR1  = 0;
 8007dc0:	6184      	str	r4, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8007dc2:	6344      	str	r4, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8007dc4:	60c4      	str	r4, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8007dc6:	6044      	str	r4, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8007dc8:	f8c0 9014 	str.w	r9, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8007dcc:	f8c0 9000 	str.w	r9, [r0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007dd0:	f886 131c 	strb.w	r1, [r6, #796]	; 0x31c
  chTMStartMeasurementX(&tm);
 8007dd4:	eb0d 0002 	add.w	r0, sp, r2
 8007dd8:	9102      	str	r1, [sp, #8]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007dda:	f8c6 a180 	str.w	sl, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007dde:	f8c6 a000 	str.w	sl, [r6]
  tmp->cumulative = (rttime_t)0;
 8007de2:	f04f 0a00 	mov.w	sl, #0
  tqp->prev = (thread_t *)tqp;
 8007de6:	e9c8 8800 	strd	r8, r8, [r8]
  tmp->worst      = (rtcnt_t)0;
 8007dea:	e9cd e404 	strd	lr, r4, [sp, #16]
  ch.vtlist.delta = (sysinterval_t)-1;
 8007dee:	f8c8 e024 	str.w	lr, [r8, #36]	; 0x24
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8007df2:	e9c8 3307 	strd	r3, r3, [r8, #28]
  tmp->cumulative = (rttime_t)0;
 8007df6:	e9cd ab08 	strd	sl, fp, [sp, #32]
  tmp->n          = (ucnt_t)0;
 8007dfa:	e9cd 4406 	strd	r4, r4, [sp, #24]
  ch.rlist.prio = NOPRIO;
 8007dfe:	f8c8 4008 	str.w	r4, [r8, #8]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8007e02:	e9c8 8804 	strd	r8, r8, [r8, #16]
  ch.vtlist.lasttime = (systime_t)0;
 8007e06:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
 8007e0a:	f8c8 4074 	str.w	r4, [r8, #116]	; 0x74
  chTMStartMeasurementX(&tm);
 8007e0e:	f7f9 fa67 	bl	80012e0 <chTMStartMeasurementX.constprop.71>
  chTMStopMeasurementX(&tm);
 8007e12:	a804      	add	r0, sp, #16
 8007e14:	f7f9 ffdc 	bl	8001dd0 <chTMStopMeasurementX>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007e18:	f8df a210 	ldr.w	sl, [pc, #528]	; 800802c <main+0x48c>
  tqp->next = (thread_t *)tqp;
 8007e1c:	f8df c210 	ldr.w	ip, [pc, #528]	; 8008030 <main+0x490>
  tp->prio      = prio;
 8007e20:	9902      	ldr	r1, [sp, #8]
 8007e22:	f8df b210 	ldr.w	fp, [pc, #528]	; 8008034 <main+0x494>
 8007e26:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
  tp->realprio  = prio;
 8007e2a:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
 8007e2e:	f8ca b000 	str.w	fp, [sl]
 8007e32:	f10a 010c 	add.w	r1, sl, #12
  dlp->next = (dyn_element_t *)dlp;
 8007e36:	f10c 0b10 	add.w	fp, ip, #16
  H_PAGES(&default_heap.header) = 0;
 8007e3a:	e9ca 4401 	strd	r4, r4, [sl, #4]
 8007e3e:	f8ca 4014 	str.w	r4, [sl, #20]
  tqp->prev = (thread_t *)tqp;
 8007e42:	e9ca 1103 	strd	r1, r1, [sl, #12]
 8007e46:	f8cc b010 	str.w	fp, [ip, #16]
 8007e4a:	f10c 0a24 	add.w	sl, ip, #36	; 0x24
 8007e4e:	f10c 0b28 	add.w	fp, ip, #40	; 0x28
  mp->object_size = size;
 8007e52:	2114      	movs	r1, #20
 8007e54:	f8cc 1018 	str.w	r1, [ip, #24]
 8007e58:	f8cc a024 	str.w	sl, [ip, #36]	; 0x24
 8007e5c:	f8cc b028 	str.w	fp, [ip, #40]	; 0x28
 8007e60:	f10c 0a3c 	add.w	sl, ip, #60	; 0x3c
 8007e64:	f10c 0b40 	add.w	fp, ip, #64	; 0x40
 8007e68:	211c      	movs	r1, #28
 8007e6a:	f8cc 1030 	str.w	r1, [ip, #48]	; 0x30
 8007e6e:	f8cc a03c 	str.w	sl, [ip, #60]	; 0x3c
 8007e72:	f10c 0144 	add.w	r1, ip, #68	; 0x44
  mp->align = align;
 8007e76:	f04f 0a04 	mov.w	sl, #4
 8007e7a:	f8cc b040 	str.w	fp, [ip, #64]	; 0x40
  mp->provider = provider;
 8007e7e:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8008038 <main+0x498>
 8007e82:	f8cc 4008 	str.w	r4, [ip, #8]
  mp->next = NULL;
 8007e86:	f8cc 4014 	str.w	r4, [ip, #20]
 8007e8a:	f8cc 402c 	str.w	r4, [ip, #44]	; 0x2c
 8007e8e:	f8cc 1044 	str.w	r1, [ip, #68]	; 0x44
  mp->align = align;
 8007e92:	f8cc a01c 	str.w	sl, [ip, #28]
 8007e96:	f8cc a034 	str.w	sl, [ip, #52]	; 0x34
  mp->provider = provider;
 8007e9a:	f8cc b020 	str.w	fp, [ip, #32]
 8007e9e:	f8cc b038 	str.w	fp, [ip, #56]	; 0x38
  ch_memcore.nextmem = __heap_base__;
 8007ea2:	4b51      	ldr	r3, [pc, #324]	; (8007fe8 <main+0x448>)
 8007ea4:	4951      	ldr	r1, [pc, #324]	; (8007fec <main+0x44c>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ea6:	4852      	ldr	r0, [pc, #328]	; (8007ff0 <main+0x450>)
  ch.tm.offset = tm.last;
 8007ea8:	9a06      	ldr	r2, [sp, #24]
 8007eaa:	f8c8 2074 	str.w	r2, [r8, #116]	; 0x74
 8007eae:	e9cc cc00 	strd	ip, ip, [ip]
  ch_memcore.endmem  = __heap_end__;
 8007eb2:	f8df c188 	ldr.w	ip, [pc, #392]	; 800803c <main+0x49c>
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007eb6:	f888 4051 	strb.w	r4, [r8, #81]	; 0x51
  tp->epending  = (eventmask_t)0;
 8007eba:	e9c8 4419 	strd	r4, r4, [r8, #100]	; 0x64
 8007ebe:	e9c3 1c00 	strd	r1, ip, [r3]
  tp->refs      = (trefs_t)1;
 8007ec2:	f888 9052 	strb.w	r9, [r8, #82]	; 0x52
 8007ec6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8007eca:	494a      	ldr	r1, [pc, #296]	; (8007ff4 <main+0x454>)
  REG_INSERT(tp);
 8007ecc:	f8d8 2014 	ldr.w	r2, [r8, #20]
  tp->name      = name;
 8007ed0:	f8df e16c 	ldr.w	lr, [pc, #364]	; 8008040 <main+0x4a0>
 8007ed4:	f8c8 e048 	str.w	lr, [r8, #72]	; 0x48
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ed8:	f64f 0bff 	movw	fp, #63743	; 0xf8ff
 8007edc:	ea0c 0c0b 	and.w	ip, ip, fp
  REG_INSERT(tp);
 8007ee0:	f108 0330 	add.w	r3, r8, #48	; 0x30
  reg_value  =  (reg_value                                   |
 8007ee4:	ea4c 0101 	orr.w	r1, ip, r1
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007ee8:	f8df e158 	ldr.w	lr, [pc, #344]	; 8008044 <main+0x4a4>
 8007eec:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
 8007ef0:	f8c8 8040 	str.w	r8, [r8, #64]	; 0x40
 8007ef4:	6113      	str	r3, [r2, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8007ef6:	60c1      	str	r1, [r0, #12]
 8007ef8:	f8de b00c 	ldr.w	fp, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007efc:	493e      	ldr	r1, [pc, #248]	; (8007ff8 <main+0x458>)
 8007efe:	f8c8 3014 	str.w	r3, [r8, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007f02:	f04b 7b80 	orr.w	fp, fp, #16777216	; 0x1000000
 8007f06:	f8ce b00c 	str.w	fp, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007f0a:	f8d1 e000 	ldr.w	lr, [r1]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f0e:	9a03      	ldr	r2, [sp, #12]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8007f10:	f8c8 3018 	str.w	r3, [r8, #24]
 8007f14:	ea4e 0e09 	orr.w	lr, lr, r9
  currp->wabase = NULL;
 8007f18:	f8c8 404c 	str.w	r4, [r8, #76]	; 0x4c
  currp->state = CH_STATE_CURRENT;
 8007f1c:	f888 9050 	strb.w	r9, [r8, #80]	; 0x50
  tlp->next = (thread_t *)tlp;
 8007f20:	f108 0358 	add.w	r3, r8, #88	; 0x58
 8007f24:	f8c1 e000 	str.w	lr, [r1]
 8007f28:	f04f 0b20 	mov.w	fp, #32
  tqp->next = (thread_t *)tqp;
 8007f2c:	f108 015c 	add.w	r1, r8, #92	; 0x5c
 8007f30:	77c2      	strb	r2, [r0, #31]
  tlp->next = (thread_t *)tlp;
 8007f32:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 8007f36:	f880 b022 	strb.w	fp, [r0, #34]	; 0x22
  tqp->prev = (thread_t *)tqp;
 8007f3a:	e9c8 1117 	strd	r1, r1, [r8, #92]	; 0x5c
 8007f3e:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8007f42:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007f44:	f38b 8811 	msr	BASEPRI, fp
  tp = chThdCreateSuspendedI(tdp);
 8007f48:	482c      	ldr	r0, [pc, #176]	; (8007ffc <main+0x45c>)
 8007f4a:	f7f9 ff69 	bl	8001e20 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8007f4e:	2100      	movs	r1, #0
 8007f50:	f7fb fb2e 	bl	80035b0 <chSchWakeupS>
 8007f54:	f384 8811 	msr	BASEPRI, r4
  *
  *
  *
  */

  palSetLineMode(LINE_LED_RGB_RED, PAL_MODE_OUTPUT_PUSHPULL);
 8007f58:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8008048 <main+0x4a8>
 8007f5c:	4b28      	ldr	r3, [pc, #160]	; (8008000 <main+0x460>)
 8007f5e:	464a      	mov	r2, r9
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	601b      	str	r3, [r3, #0]
 8007f66:	f7fa fa63 	bl	8002430 <_pal_lld_setgroupmode>
  palSetLineMode(LINE_LED_RGB_GREEN, PAL_MODE_OUTPUT_PUSHPULL);
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	f7fa fa60 	bl	8002430 <_pal_lld_setgroupmode>
  palSetLineMode(LINE_LED_RGB_BLUE, PAL_MODE_OUTPUT_PUSHPULL);
 8007f70:	4651      	mov	r1, sl
 8007f72:	f7fa fa5d 	bl	8002430 <_pal_lld_setgroupmode>

  palSetLine(LINE_LED_RGB_RED);
  palSetLine(LINE_LED_RGB_GREEN);
 8007f76:	2202      	movs	r2, #2
  palSetLine(LINE_LED_RGB_RED);
 8007f78:	f8a8 9018 	strh.w	r9, [r8, #24]
  palSetLine(LINE_LED_RGB_BLUE);

 chThdCreateStatic(waThd1, sizeof(waThd1), NORMALPRIO + 1,Thd1, NULL);
 8007f7c:	4b21      	ldr	r3, [pc, #132]	; (8008004 <main+0x464>)
  palSetLine(LINE_LED_RGB_GREEN);
 8007f7e:	f8a8 2018 	strh.w	r2, [r8, #24]
 chThdCreateStatic(waThd1, sizeof(waThd1), NORMALPRIO + 1,Thd1, NULL);
 8007f82:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  palSetLine(LINE_LED_RGB_BLUE);
 8007f86:	f8a8 a018 	strh.w	sl, [r8, #24]
 chThdCreateStatic(waThd1, sizeof(waThd1), NORMALPRIO + 1,Thd1, NULL);
 8007f8a:	2281      	movs	r2, #129	; 0x81
 8007f8c:	9400      	str	r4, [sp, #0]
 8007f8e:	481e      	ldr	r0, [pc, #120]	; (8008008 <main+0x468>)
 8007f90:	f7fb fba6 	bl	80036e0 <chThdCreateStatic>

 chThdCreateStatic(waThd3, sizeof(waThd3), NORMALPRIO + 1,Thd3,NULL);
 8007f94:	9400      	str	r4, [sp, #0]
 8007f96:	4b1d      	ldr	r3, [pc, #116]	; (800800c <main+0x46c>)
 8007f98:	481d      	ldr	r0, [pc, #116]	; (8008010 <main+0x470>)
 8007f9a:	2281      	movs	r2, #129	; 0x81
 8007f9c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8007fa0:	f7fb fb9e 	bl	80036e0 <chThdCreateStatic>
 8007fa4:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8007fa8:	7a2b      	ldrb	r3, [r5, #8]
 8007faa:	454b      	cmp	r3, r9
 8007fac:	d070      	beq.n	8008090 <main+0x4f0>
  USART_TypeDef *u = sdp->usart;
 8007fae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8007fb0:	4a18      	ldr	r2, [pc, #96]	; (8008014 <main+0x474>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d07d      	beq.n	80080b2 <main+0x512>
 8007fb6:	4818      	ldr	r0, [pc, #96]	; (8008018 <main+0x478>)
    fck = STM32_PCLK2 / config->speed;
 8007fb8:	f240 4245 	movw	r2, #1093	; 0x445
 8007fbc:	f640 018b 	movw	r1, #2187	; 0x88b
 8007fc0:	4283      	cmp	r3, r0
 8007fc2:	bf08      	it	eq
 8007fc4:	460a      	moveq	r2, r1
 8007fc6:	e041      	b.n	800804c <main+0x4ac>
 8007fc8:	20000ce0 	.word	0x20000ce0
 8007fcc:	40026000 	.word	0x40026000
 8007fd0:	e000e100 	.word	0xe000e100
 8007fd4:	20000d14 	.word	0x20000d14
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	00022c16 	.word	0x00022c16
 8007fe0:	080013e1 	.word	0x080013e1
 8007fe4:	40004400 	.word	0x40004400
 8007fe8:	20000f38 	.word	0x20000f38
 8007fec:	20001e40 	.word	0x20001e40
 8007ff0:	e000ed00 	.word	0xe000ed00
 8007ff4:	05fa0300 	.word	0x05fa0300
 8007ff8:	e0001000 	.word	0xe0001000
 8007ffc:	0800ae88 	.word	0x0800ae88
 8008000:	20001074 	.word	0x20001074
 8008004:	08003e91 	.word	0x08003e91
 8008008:	200017e8 	.word	0x200017e8
 800800c:	08004a41 	.word	0x08004a41
 8008010:	20001b78 	.word	0x20001b78
 8008014:	40011000 	.word	0x40011000
 8008018:	40011400 	.word	0x40011400
 800801c:	40026400 	.word	0x40026400
 8008020:	0800d268 	.word	0x0800d268
 8008024:	e0042000 	.word	0xe0042000
 8008028:	20000da0 	.word	0x20000da0
 800802c:	20000f40 	.word	0x20000f40
 8008030:	20000e18 	.word	0x20000e18
 8008034:	08001391 	.word	0x08001391
 8008038:	08001b01 	.word	0x08001b01
 800803c:	20018000 	.word	0x20018000
 8008040:	0800ab2c 	.word	0x0800ab2c
 8008044:	e000edf0 	.word	0xe000edf0
 8008048:	40020800 	.word	0x40020800
  u->BRR = fck;
 800804c:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800804e:	2440      	movs	r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8008050:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8008052:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 8008056:	2200      	movs	r2, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8008058:	611c      	str	r4, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800805a:	6158      	str	r0, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800805c:	60d9      	str	r1, [r3, #12]
    sdp->rxmask = 0xFF;
 800805e:	20ff      	movs	r0, #255	; 0xff
  u->SR = 0;
 8008060:	601a      	str	r2, [r3, #0]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8008062:	2102      	movs	r1, #2
  (void)u->SR;  /* SR reset step 1.*/
 8008064:	681c      	ldr	r4, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8008066:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8008068:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800806c:	7229      	strb	r1, [r5, #8]
 800806e:	f382 8811 	msr	BASEPRI, r2
 8008072:	4e11      	ldr	r6, [pc, #68]	; (80080b8 <main+0x518>)
 8008074:	4d11      	ldr	r5, [pc, #68]	; (80080bc <main+0x51c>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 8008076:	4c12      	ldr	r4, [pc, #72]	; (80080c0 <main+0x520>)
 8008078:	2381      	movs	r3, #129	; 0x81
 800807a:	4622      	mov	r2, r4
 800807c:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8008080:	e9cd 5600 	strd	r5, r6, [sp]
 8008084:	2000      	movs	r0, #0
 8008086:	f7fd fd53 	bl	8005b30 <chThdCreateFromHeap>
                                            "shell", NORMALPRIO + 1,
                                            shellThread, (void *)&shell_cfg1);
    chThdWait(shelltp);               /* Waiting termination.             */
 800808a:	f7ff fd69 	bl	8007b60 <chThdWait>
 800808e:	e7f3      	b.n	8008078 <main+0x4d8>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8008090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008096:	643b      	str	r3, [r7, #64]	; 0x40
 8008098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800809a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800809e:	663b      	str	r3, [r7, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80080a0:	23c0      	movs	r3, #192	; 0xc0
 80080a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080a4:	f886 3326 	strb.w	r3, [r6, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80080a8:	2340      	movs	r3, #64	; 0x40
 80080aa:	f8c6 3184 	str.w	r3, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80080ae:	6073      	str	r3, [r6, #4]
 80080b0:	e77d      	b.n	8007fae <main+0x40e>
    fck = STM32_PCLK2 / config->speed;
 80080b2:	f640 028b 	movw	r2, #2187	; 0x88b
 80080b6:	e7c9      	b.n	800804c <main+0x4ac>
 80080b8:	0800c728 	.word	0x0800c728
 80080bc:	080047a1 	.word	0x080047a1
 80080c0:	0800aea0 	.word	0x0800aea0
	...

080080d0 <rt_test_010_005_execute>:
static void rt_test_010_005_execute(void) {
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 80080d4:	4b1a      	ldr	r3, [pc, #104]	; (8008140 <rt_test_010_005_execute+0x70>)
  test_set_step(1);
 80080d6:	f8df a074 	ldr.w	sl, [pc, #116]	; 800814c <rt_test_010_005_execute+0x7c>
  return chThdGetSelfX()->prio;
 80080da:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80080dc:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008150 <rt_test_010_005_execute+0x80>
  tprio_t prio = chThdGetPriorityX() - 1;
 80080e0:	689d      	ldr	r5, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80080e2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008154 <rt_test_010_005_execute+0x84>
  test_set_step(1);
 80080e6:	2301      	movs	r3, #1
static void rt_test_010_005_execute(void) {
 80080e8:	b082      	sub	sp, #8
  test_set_step(1);
 80080ea:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 80080ee:	f7fb ff47 	bl	8003f80 <test_wait_tick>
    n = 0;
 80080f2:	2400      	movs	r4, #0
  tprio_t prio = chThdGetPriorityX() - 1;
 80080f4:	3d01      	subs	r5, #1
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80080f6:	4627      	mov	r7, r4
    start = test_wait_tick();
 80080f8:	4606      	mov	r6, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80080fa:	464b      	mov	r3, r9
 80080fc:	462a      	mov	r2, r5
 80080fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008102:	9700      	str	r7, [sp, #0]
 8008104:	4640      	mov	r0, r8
 8008106:	f7fb faeb 	bl	80036e0 <chThdCreateStatic>
 800810a:	f7ff fd29 	bl	8007b60 <chThdWait>
 800810e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008112:	f242 720f 	movw	r2, #9999	; 0x270f
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	1b9b      	subs	r3, r3, r6
 800811a:	4293      	cmp	r3, r2
      n++;
 800811c:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008120:	d9eb      	bls.n	80080fa <rt_test_010_005_execute+0x2a>
  test_set_step(2);
 8008122:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8008124:	4807      	ldr	r0, [pc, #28]	; (8008144 <rt_test_010_005_execute+0x74>)
  test_set_step(2);
 8008126:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800812a:	f7f9 fc39 	bl	80019a0 <test_print>
    test_printn(n);
 800812e:	4620      	mov	r0, r4
 8008130:	f7f9 fbc6 	bl	80018c0 <test_printn>
    test_println(" threads/S");
 8008134:	4804      	ldr	r0, [pc, #16]	; (8008148 <rt_test_010_005_execute+0x78>)
}
 8008136:	b002      	add	sp, #8
 8008138:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 800813c:	f7f9 bc10 	b.w	8001960 <test_println>
 8008140:	20000da0 	.word	0x20000da0
 8008144:	0800c450 	.word	0x0800c450
 8008148:	0800c3f4 	.word	0x0800c3f4
 800814c:	2000178c 	.word	0x2000178c
 8008150:	08004cd1 	.word	0x08004cd1
 8008154:	20001078 	.word	0x20001078
	...

08008160 <test_wait_threads>:
void test_wait_threads(void) {
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	4c07      	ldr	r4, [pc, #28]	; (8008180 <test_wait_threads+0x20>)
      threads[i] = NULL;
 8008164:	2600      	movs	r6, #0
 8008166:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800816a:	f854 0b04 	ldr.w	r0, [r4], #4
 800816e:	b118      	cbz	r0, 8008178 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8008170:	f7ff fcf6 	bl	8007b60 <chThdWait>
      threads[i] = NULL;
 8008174:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008178:	42ac      	cmp	r4, r5
 800817a:	d1f6      	bne.n	800816a <test_wait_threads+0xa>
}
 800817c:	bd70      	pop	{r4, r5, r6, pc}
 800817e:	bf00      	nop
 8008180:	200017a4 	.word	0x200017a4
	...

08008190 <rt_test_010_008_execute>:
static void rt_test_010_008_execute(void) {
 8008190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008194:	b085      	sub	sp, #20
    n = 0;
 8008196:	ac04      	add	r4, sp, #16
  return ch.rlist.current;
 8008198:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8008280 <rt_test_010_008_execute+0xf0>
  test_set_step(1);
 800819c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8008284 <rt_test_010_008_execute+0xf4>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80081a0:	4f32      	ldr	r7, [pc, #200]	; (800826c <rt_test_010_008_execute+0xdc>)
 80081a2:	4e33      	ldr	r6, [pc, #204]	; (8008270 <rt_test_010_008_execute+0xe0>)
 80081a4:	4d33      	ldr	r5, [pc, #204]	; (8008274 <rt_test_010_008_execute+0xe4>)
  test_set_step(1);
 80081a6:	2201      	movs	r2, #1
    n = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_set_step(1);
 80081ae:	f8c9 2000 	str.w	r2, [r9]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80081b2:	f7fb fee5 	bl	8003f80 <test_wait_tick>
  return chThdGetSelfX()->prio;
 80081b6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	9400      	str	r4, [sp, #0]
 80081be:	463b      	mov	r3, r7
 80081c0:	3a01      	subs	r2, #1
 80081c2:	4630      	mov	r0, r6
 80081c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081c8:	f7fb fa8a 	bl	80036e0 <chThdCreateStatic>
 80081cc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80081d0:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	9400      	str	r4, [sp, #0]
 80081d6:	463b      	mov	r3, r7
 80081d8:	3a01      	subs	r2, #1
 80081da:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80081de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081e2:	f7fb fa7d 	bl	80036e0 <chThdCreateStatic>
 80081e6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80081ea:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80081ec:	689a      	ldr	r2, [r3, #8]
 80081ee:	9400      	str	r4, [sp, #0]
 80081f0:	463b      	mov	r3, r7
 80081f2:	3a01      	subs	r2, #1
 80081f4:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80081f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081fc:	f7fb fa70 	bl	80036e0 <chThdCreateStatic>
 8008200:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008204:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	9400      	str	r4, [sp, #0]
 800820a:	463b      	mov	r3, r7
 800820c:	3a01      	subs	r2, #1
 800820e:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8008212:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008216:	f7fb fa63 	bl	80036e0 <chThdCreateStatic>
 800821a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800821e:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008220:	689a      	ldr	r2, [r3, #8]
 8008222:	9400      	str	r4, [sp, #0]
 8008224:	3a01      	subs	r2, #1
 8008226:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800822a:	463b      	mov	r3, r7
 800822c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8008230:	f7fb fa56 	bl	80036e0 <chThdCreateStatic>
  test_set_step(2);
 8008234:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008236:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
 8008238:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(2);
 800823c:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 8008240:	f7fb fe16 	bl	8003e70 <chThdSleep>
    test_terminate_threads();
 8008244:	f7f9 faec 	bl	8001820 <test_terminate_threads>
    test_wait_threads();
 8008248:	f7ff ff8a 	bl	8008160 <test_wait_threads>
  test_set_step(3);
 800824c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800824e:	480a      	ldr	r0, [pc, #40]	; (8008278 <rt_test_010_008_execute+0xe8>)
  test_set_step(3);
 8008250:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8008254:	f7f9 fba4 	bl	80019a0 <test_print>
    test_printn(n);
 8008258:	9803      	ldr	r0, [sp, #12]
 800825a:	f7f9 fb31 	bl	80018c0 <test_printn>
    test_println(" ctxswc/S");
 800825e:	4807      	ldr	r0, [pc, #28]	; (800827c <rt_test_010_008_execute+0xec>)
 8008260:	f7f9 fb7e 	bl	8001960 <test_println>
}
 8008264:	b005      	add	sp, #20
 8008266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800826a:	bf00      	nop
 800826c:	08003581 	.word	0x08003581
 8008270:	20001078 	.word	0x20001078
 8008274:	200017a4 	.word	0x200017a4
 8008278:	0800c450 	.word	0x0800c450
 800827c:	0800c434 	.word	0x0800c434
 8008280:	20000da0 	.word	0x20000da0
 8008284:	2000178c 	.word	0x2000178c
	...

08008290 <rt_test_010_004_execute>:
static void rt_test_010_004_execute(void) {
 8008290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8008294:	4b2c      	ldr	r3, [pc, #176]	; (8008348 <rt_test_010_004_execute+0xb8>)
  test_set_step(1);
 8008296:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008360 <rt_test_010_004_execute+0xd0>
  return chThdGetSelfX()->prio;
 800829a:	699a      	ldr	r2, [r3, #24]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800829c:	482b      	ldr	r0, [pc, #172]	; (800834c <rt_test_010_004_execute+0xbc>)
 800829e:	6892      	ldr	r2, [r2, #8]
 80082a0:	4b2b      	ldr	r3, [pc, #172]	; (8008350 <rt_test_010_004_execute+0xc0>)
static void rt_test_010_004_execute(void) {
 80082a2:	b082      	sub	sp, #8
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80082a4:	2500      	movs	r5, #0
 80082a6:	3201      	adds	r2, #1
  test_set_step(1);
 80082a8:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80082aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80082ae:	9500      	str	r5, [sp, #0]
  test_set_step(1);
 80082b0:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80082b4:	f7fb fa14 	bl	80036e0 <chThdCreateStatic>
 80082b8:	4a26      	ldr	r2, [pc, #152]	; (8008354 <rt_test_010_004_execute+0xc4>)
  test_set_step(2);
 80082ba:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80082bc:	4604      	mov	r4, r0
 80082be:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 80082c0:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 80082c4:	f7fb fe5c 	bl	8003f80 <test_wait_tick>
      chSchWakeupS(tp, MSG_OK);
 80082c8:	462e      	mov	r6, r5
    start = test_wait_tick();
 80082ca:	4681      	mov	r9, r0
 80082cc:	2720      	movs	r7, #32
 80082ce:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80082d2:	f387 8811 	msr	BASEPRI, r7
      chSchWakeupS(tp, MSG_OK);
 80082d6:	2100      	movs	r1, #0
 80082d8:	4620      	mov	r0, r4
 80082da:	f7fb f969 	bl	80035b0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80082de:	4620      	mov	r0, r4
 80082e0:	2100      	movs	r1, #0
 80082e2:	f7fb f965 	bl	80035b0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80082e6:	4620      	mov	r0, r4
 80082e8:	2100      	movs	r1, #0
 80082ea:	f7fb f961 	bl	80035b0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80082ee:	4620      	mov	r0, r4
 80082f0:	2100      	movs	r1, #0
 80082f2:	f7fb f95d 	bl	80035b0 <chSchWakeupS>
 80082f6:	f386 8811 	msr	BASEPRI, r6
 80082fa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 80082fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8008302:	eba3 0309 	sub.w	r3, r3, r9
 8008306:	4293      	cmp	r3, r2
      n += 4;
 8008308:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 800830c:	d9e1      	bls.n	80082d2 <rt_test_010_004_execute+0x42>
  test_set_step(3);
 800830e:	2303      	movs	r3, #3
 8008310:	f8ca 3000 	str.w	r3, [sl]
 8008314:	f387 8811 	msr	BASEPRI, r7
    chSchWakeupS(tp, MSG_TIMEOUT);
 8008318:	f04f 31ff 	mov.w	r1, #4294967295
 800831c:	4620      	mov	r0, r4
 800831e:	f7fb f947 	bl	80035b0 <chSchWakeupS>
 8008322:	f386 8811 	msr	BASEPRI, r6
    test_wait_threads();
 8008326:	f7ff ff1b 	bl	8008160 <test_wait_threads>
  test_set_step(4);
 800832a:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800832c:	480a      	ldr	r0, [pc, #40]	; (8008358 <rt_test_010_004_execute+0xc8>)
  test_set_step(4);
 800832e:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8008332:	f7f9 fb35 	bl	80019a0 <test_print>
    test_printn(n * 2);
 8008336:	0068      	lsls	r0, r5, #1
 8008338:	f7f9 fac2 	bl	80018c0 <test_printn>
    test_println(" ctxswc/S");
 800833c:	4807      	ldr	r0, [pc, #28]	; (800835c <rt_test_010_004_execute+0xcc>)
}
 800833e:	b002      	add	sp, #8
 8008340:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 8008344:	f7f9 bb0c 	b.w	8001960 <test_println>
 8008348:	20000da0 	.word	0x20000da0
 800834c:	20001078 	.word	0x20001078
 8008350:	080043b1 	.word	0x080043b1
 8008354:	200017a4 	.word	0x200017a4
 8008358:	0800c450 	.word	0x0800c450
 800835c:	0800c434 	.word	0x0800c434
 8008360:	2000178c 	.word	0x2000178c
	...

08008370 <rt_test_010_003_execute>:
static void rt_test_010_003_execute(void) {
 8008370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8008374:	4f34      	ldr	r7, [pc, #208]	; (8008448 <rt_test_010_003_execute+0xd8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008376:	4d35      	ldr	r5, [pc, #212]	; (800844c <rt_test_010_003_execute+0xdc>)
  return chThdGetSelfX()->prio;
 8008378:	69bb      	ldr	r3, [r7, #24]
  test_set_step(1);
 800837a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8008464 <rt_test_010_003_execute+0xf4>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	4b33      	ldr	r3, [pc, #204]	; (8008450 <rt_test_010_003_execute+0xe0>)
 8008382:	4c34      	ldr	r4, [pc, #208]	; (8008454 <rt_test_010_003_execute+0xe4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008384:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8008468 <rt_test_010_003_execute+0xf8>
static void rt_test_010_003_execute(void) {
 8008388:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800838a:	2600      	movs	r6, #0
  test_set_step(1);
 800838c:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008390:	3201      	adds	r2, #1
 8008392:	4628      	mov	r0, r5
 8008394:	9600      	str	r6, [sp, #0]
 8008396:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 800839a:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800839e:	f7fb f99f 	bl	80036e0 <chThdCreateStatic>
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	9600      	str	r6, [sp, #0]
  test_set_step(2);
 80083aa:	f04f 0c02 	mov.w	ip, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80083ae:	464b      	mov	r3, r9
 80083b0:	3a02      	subs	r2, #2
 80083b2:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 80083b6:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 80083ba:	f8c8 c000 	str.w	ip, [r8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80083be:	f7fb f98f 	bl	80036e0 <chThdCreateStatic>
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	9600      	str	r6, [sp, #0]
 80083ca:	464b      	mov	r3, r9
 80083cc:	3a03      	subs	r2, #3
 80083ce:	f505 7024 	add.w	r0, r5, #656	; 0x290
 80083d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083d6:	f7fb f983 	bl	80036e0 <chThdCreateStatic>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	9600      	str	r6, [sp, #0]
 80083e2:	464b      	mov	r3, r9
 80083e4:	3a04      	subs	r2, #4
 80083e6:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80083ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083ee:	f7fb f977 	bl	80036e0 <chThdCreateStatic>
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	9600      	str	r6, [sp, #0]
 80083fa:	3a05      	subs	r2, #5
 80083fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008400:	464b      	mov	r3, r9
 8008402:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8008406:	f7fb f96b 	bl	80036e0 <chThdCreateStatic>
  test_set_step(3);
 800840a:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800840c:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 800840e:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 8008410:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 8008414:	f7fc f834 	bl	8004480 <msg_loop_test>
 8008418:	4604      	mov	r4, r0
    test_wait_threads();
 800841a:	f7ff fea1 	bl	8008160 <test_wait_threads>
  test_set_step(4);
 800841e:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8008420:	480d      	ldr	r0, [pc, #52]	; (8008458 <rt_test_010_003_execute+0xe8>)
  test_set_step(4);
 8008422:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8008426:	f7f9 fabb 	bl	80019a0 <test_print>
    test_printn(n);
 800842a:	4620      	mov	r0, r4
 800842c:	f7f9 fa48 	bl	80018c0 <test_printn>
    test_print(" msgs/S, ");
 8008430:	480a      	ldr	r0, [pc, #40]	; (800845c <rt_test_010_003_execute+0xec>)
 8008432:	f7f9 fab5 	bl	80019a0 <test_print>
    test_printn(n << 1);
 8008436:	0060      	lsls	r0, r4, #1
 8008438:	f7f9 fa42 	bl	80018c0 <test_printn>
    test_println(" ctxswc/S");
 800843c:	4808      	ldr	r0, [pc, #32]	; (8008460 <rt_test_010_003_execute+0xf0>)
}
 800843e:	b003      	add	sp, #12
 8008440:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_println(" ctxswc/S");
 8008444:	f7f9 ba8c 	b.w	8001960 <test_println>
 8008448:	20000da0 	.word	0x20000da0
 800844c:	20001078 	.word	0x20001078
 8008450:	08004421 	.word	0x08004421
 8008454:	200017a4 	.word	0x200017a4
 8008458:	0800c450 	.word	0x0800c450
 800845c:	0800c3b8 	.word	0x0800c3b8
 8008460:	0800c434 	.word	0x0800c434
 8008464:	2000178c 	.word	0x2000178c
 8008468:	08004cd1 	.word	0x08004cd1
 800846c:	00000000 	.word	0x00000000

08008470 <rt_test_010_002_execute>:
static void rt_test_010_002_execute(void) {
 8008470:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 8008472:	4b16      	ldr	r3, [pc, #88]	; (80084cc <rt_test_010_002_execute+0x5c>)
  test_set_step(1);
 8008474:	4c16      	ldr	r4, [pc, #88]	; (80084d0 <rt_test_010_002_execute+0x60>)
  return chThdGetSelfX()->prio;
 8008476:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008478:	4816      	ldr	r0, [pc, #88]	; (80084d4 <rt_test_010_002_execute+0x64>)
 800847a:	6892      	ldr	r2, [r2, #8]
 800847c:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <rt_test_010_002_execute+0x68>)
static void rt_test_010_002_execute(void) {
 800847e:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008480:	2100      	movs	r1, #0
 8008482:	9100      	str	r1, [sp, #0]
 8008484:	3201      	adds	r2, #1
 8008486:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 800848a:	2501      	movs	r5, #1
 800848c:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800848e:	f7fb f927 	bl	80036e0 <chThdCreateStatic>
 8008492:	4a12      	ldr	r2, [pc, #72]	; (80084dc <rt_test_010_002_execute+0x6c>)
  test_set_step(2);
 8008494:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008496:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8008498:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 800849a:	f7fb fff1 	bl	8004480 <msg_loop_test>
 800849e:	4605      	mov	r5, r0
    test_wait_threads();
 80084a0:	f7ff fe5e 	bl	8008160 <test_wait_threads>
  test_set_step(3);
 80084a4:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80084a6:	480e      	ldr	r0, [pc, #56]	; (80084e0 <rt_test_010_002_execute+0x70>)
  test_set_step(3);
 80084a8:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 80084aa:	f7f9 fa79 	bl	80019a0 <test_print>
    test_printn(n);
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7f9 fa06 	bl	80018c0 <test_printn>
    test_print(" msgs/S, ");
 80084b4:	480b      	ldr	r0, [pc, #44]	; (80084e4 <rt_test_010_002_execute+0x74>)
 80084b6:	f7f9 fa73 	bl	80019a0 <test_print>
    test_printn(n << 1);
 80084ba:	0068      	lsls	r0, r5, #1
 80084bc:	f7f9 fa00 	bl	80018c0 <test_printn>
    test_println(" ctxswc/S");
 80084c0:	4809      	ldr	r0, [pc, #36]	; (80084e8 <rt_test_010_002_execute+0x78>)
}
 80084c2:	b003      	add	sp, #12
 80084c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_println(" ctxswc/S");
 80084c8:	f7f9 ba4a 	b.w	8001960 <test_println>
 80084cc:	20000da0 	.word	0x20000da0
 80084d0:	2000178c 	.word	0x2000178c
 80084d4:	20001078 	.word	0x20001078
 80084d8:	08004421 	.word	0x08004421
 80084dc:	200017a4 	.word	0x200017a4
 80084e0:	0800c450 	.word	0x0800c450
 80084e4:	0800c3b8 	.word	0x0800c3b8
 80084e8:	0800c434 	.word	0x0800c434
 80084ec:	00000000 	.word	0x00000000

080084f0 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 80084f0:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 80084f2:	4b16      	ldr	r3, [pc, #88]	; (800854c <rt_test_010_001_execute+0x5c>)
  test_set_step(1);
 80084f4:	4c16      	ldr	r4, [pc, #88]	; (8008550 <rt_test_010_001_execute+0x60>)
  return chThdGetSelfX()->prio;
 80084f6:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80084f8:	4816      	ldr	r0, [pc, #88]	; (8008554 <rt_test_010_001_execute+0x64>)
 80084fa:	6892      	ldr	r2, [r2, #8]
 80084fc:	4b16      	ldr	r3, [pc, #88]	; (8008558 <rt_test_010_001_execute+0x68>)
static void rt_test_010_001_execute(void) {
 80084fe:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008500:	2100      	movs	r1, #0
 8008502:	9100      	str	r1, [sp, #0]
 8008504:	3a01      	subs	r2, #1
 8008506:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 800850a:	2501      	movs	r5, #1
 800850c:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800850e:	f7fb f8e7 	bl	80036e0 <chThdCreateStatic>
 8008512:	4a12      	ldr	r2, [pc, #72]	; (800855c <rt_test_010_001_execute+0x6c>)
  test_set_step(2);
 8008514:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008516:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8008518:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 800851a:	f7fb ffb1 	bl	8004480 <msg_loop_test>
 800851e:	4605      	mov	r5, r0
    test_wait_threads();
 8008520:	f7ff fe1e 	bl	8008160 <test_wait_threads>
  test_set_step(3);
 8008524:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8008526:	480e      	ldr	r0, [pc, #56]	; (8008560 <rt_test_010_001_execute+0x70>)
  test_set_step(3);
 8008528:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 800852a:	f7f9 fa39 	bl	80019a0 <test_print>
    test_printn(n);
 800852e:	4628      	mov	r0, r5
 8008530:	f7f9 f9c6 	bl	80018c0 <test_printn>
    test_print(" msgs/S, ");
 8008534:	480b      	ldr	r0, [pc, #44]	; (8008564 <rt_test_010_001_execute+0x74>)
 8008536:	f7f9 fa33 	bl	80019a0 <test_print>
    test_printn(n << 1);
 800853a:	0068      	lsls	r0, r5, #1
 800853c:	f7f9 f9c0 	bl	80018c0 <test_printn>
    test_println(" ctxswc/S");
 8008540:	4809      	ldr	r0, [pc, #36]	; (8008568 <rt_test_010_001_execute+0x78>)
}
 8008542:	b003      	add	sp, #12
 8008544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_println(" ctxswc/S");
 8008548:	f7f9 ba0a 	b.w	8001960 <test_println>
 800854c:	20000da0 	.word	0x20000da0
 8008550:	2000178c 	.word	0x2000178c
 8008554:	20001078 	.word	0x20001078
 8008558:	08004421 	.word	0x08004421
 800855c:	200017a4 	.word	0x200017a4
 8008560:	0800c450 	.word	0x0800c450
 8008564:	0800c3b8 	.word	0x0800c3b8
 8008568:	0800c434 	.word	0x0800c434
 800856c:	00000000 	.word	0x00000000

08008570 <rt_test_009_002_execute>:

static void rt_test_009_002_execute(void) {
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8008572:	4d3d      	ldr	r5, [pc, #244]	; (8008668 <rt_test_009_002_execute+0xf8>)
 8008574:	4b3d      	ldr	r3, [pc, #244]	; (800866c <rt_test_009_002_execute+0xfc>)
 8008576:	4a3e      	ldr	r2, [pc, #248]	; (8008670 <rt_test_009_002_execute+0x100>)
 8008578:	493e      	ldr	r1, [pc, #248]	; (8008674 <rt_test_009_002_execute+0x104>)
 800857a:	2001      	movs	r0, #1
 800857c:	6028      	str	r0, [r5, #0]
 800857e:	f103 070c 	add.w	r7, r3, #12
 8008582:	2620      	movs	r6, #32
 8008584:	2400      	movs	r4, #0
 8008586:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 800858a:	6808      	ldr	r0, [r1, #0]
 800858c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 800858e:	600a      	str	r2, [r1, #0]
 8008590:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
 8008594:	429f      	cmp	r7, r3
 8008596:	d002      	beq.n	800859e <rt_test_009_002_execute+0x2e>
 8008598:	f853 2b04 	ldr.w	r2, [r3], #4
 800859c:	e7f3      	b.n	8008586 <rt_test_009_002_execute+0x16>
  return ch.rlist.current;
 800859e:	4b36      	ldr	r3, [pc, #216]	; (8008678 <rt_test_009_002_execute+0x108>)
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80085a0:	4a36      	ldr	r2, [pc, #216]	; (800867c <rt_test_009_002_execute+0x10c>)
  return chThdGetSelfX()->prio;
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	4836      	ldr	r0, [pc, #216]	; (8008680 <rt_test_009_002_execute+0x110>)
 80085a6:	689e      	ldr	r6, [r3, #8]
 80085a8:	4c36      	ldr	r4, [pc, #216]	; (8008684 <rt_test_009_002_execute+0x114>)
  test_set_step(3);
 80085aa:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80085ac:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 80085ae:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80085b0:	f7fb f846 	bl	8003640 <chThdCreateFromMemoryPool.constprop.42>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80085b4:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80085b6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80085b8:	4a33      	ldr	r2, [pc, #204]	; (8008688 <rt_test_009_002_execute+0x118>)
 80085ba:	4834      	ldr	r0, [pc, #208]	; (800868c <rt_test_009_002_execute+0x11c>)
 80085bc:	f7fb f840 	bl	8003640 <chThdCreateFromMemoryPool.constprop.42>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80085c0:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80085c2:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80085c4:	4a32      	ldr	r2, [pc, #200]	; (8008690 <rt_test_009_002_execute+0x120>)
 80085c6:	4833      	ldr	r0, [pc, #204]	; (8008694 <rt_test_009_002_execute+0x124>)
 80085c8:	f7fb f83a 	bl	8003640 <chThdCreateFromMemoryPool.constprop.42>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80085cc:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80085ce:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80085d0:	4a31      	ldr	r2, [pc, #196]	; (8008698 <rt_test_009_002_execute+0x128>)
 80085d2:	4832      	ldr	r0, [pc, #200]	; (800869c <rt_test_009_002_execute+0x12c>)
 80085d4:	f7fb f834 	bl	8003640 <chThdCreateFromMemoryPool.constprop.42>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80085d8:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80085da:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80085dc:	4a30      	ldr	r2, [pc, #192]	; (80086a0 <rt_test_009_002_execute+0x130>)
 80085de:	4831      	ldr	r0, [pc, #196]	; (80086a4 <rt_test_009_002_execute+0x134>)
 80085e0:	f7fb f82e 	bl	8003640 <chThdCreateFromMemoryPool.constprop.42>
 80085e4:	4606      	mov	r6, r0
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 80085e6:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80085e8:	6126      	str	r6, [r4, #16]
  test_set_step(4);
 80085ea:	2304      	movs	r3, #4
 80085ec:	602b      	str	r3, [r5, #0]
    test_assert((threads[0] != NULL) &&
 80085ee:	b138      	cbz	r0, 8008600 <rt_test_009_002_execute+0x90>
 80085f0:	6860      	ldr	r0, [r4, #4]
 80085f2:	b128      	cbz	r0, 8008600 <rt_test_009_002_execute+0x90>
 80085f4:	68a0      	ldr	r0, [r4, #8]
 80085f6:	b118      	cbz	r0, 8008600 <rt_test_009_002_execute+0x90>
 80085f8:	68e0      	ldr	r0, [r4, #12]
 80085fa:	3000      	adds	r0, #0
 80085fc:	bf18      	it	ne
 80085fe:	2001      	movne	r0, #1
 8008600:	4929      	ldr	r1, [pc, #164]	; (80086a8 <rt_test_009_002_execute+0x138>)
 8008602:	f7f9 f8cd 	bl	80017a0 <_test_assert>
 8008606:	b100      	cbz	r0, 800860a <rt_test_009_002_execute+0x9a>
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
}
 8008608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 800860a:	fab6 f086 	clz	r0, r6
 800860e:	0940      	lsrs	r0, r0, #5
 8008610:	4926      	ldr	r1, [pc, #152]	; (80086ac <rt_test_009_002_execute+0x13c>)
 8008612:	f7f9 f8c5 	bl	80017a0 <_test_assert>
 8008616:	2800      	cmp	r0, #0
 8008618:	d1f6      	bne.n	8008608 <rt_test_009_002_execute+0x98>
  test_set_step(5);
 800861a:	2305      	movs	r3, #5
 800861c:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 800861e:	f7ff fd9f 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8008622:	4923      	ldr	r1, [pc, #140]	; (80086b0 <rt_test_009_002_execute+0x140>)
 8008624:	4823      	ldr	r0, [pc, #140]	; (80086b4 <rt_test_009_002_execute+0x144>)
 8008626:	f7f9 f9d3 	bl	80019d0 <_test_assert_sequence>
 800862a:	2800      	cmp	r0, #0
 800862c:	d1ec      	bne.n	8008608 <rt_test_009_002_execute+0x98>
  test_set_step(6);
 800862e:	2306      	movs	r3, #6
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8008630:	4f10      	ldr	r7, [pc, #64]	; (8008674 <rt_test_009_002_execute+0x104>)
 8008632:	4e21      	ldr	r6, [pc, #132]	; (80086b8 <rt_test_009_002_execute+0x148>)
  test_set_step(6);
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8008638:	4638      	mov	r0, r7
 800863a:	f7f9 fa81 	bl	8001b40 <chPoolAlloc>
 800863e:	3000      	adds	r0, #0
 8008640:	bf18      	it	ne
 8008642:	2001      	movne	r0, #1
 8008644:	4631      	mov	r1, r6
 8008646:	f7f9 f8ab 	bl	80017a0 <_test_assert>
 800864a:	2800      	cmp	r0, #0
 800864c:	d1dc      	bne.n	8008608 <rt_test_009_002_execute+0x98>
    for (i = 0; i < 4; i++)
 800864e:	3c01      	subs	r4, #1
 8008650:	d1f2      	bne.n	8008638 <rt_test_009_002_execute+0xc8>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8008652:	4808      	ldr	r0, [pc, #32]	; (8008674 <rt_test_009_002_execute+0x104>)
 8008654:	f7f9 fa74 	bl	8001b40 <chPoolAlloc>
 8008658:	fab0 f080 	clz	r0, r0
 800865c:	0940      	lsrs	r0, r0, #5
 800865e:	4917      	ldr	r1, [pc, #92]	; (80086bc <rt_test_009_002_execute+0x14c>)
}
 8008660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8008664:	f7f9 b89c 	b.w	80017a0 <_test_assert>
 8008668:	2000178c 	.word	0x2000178c
 800866c:	0800d294 	.word	0x0800d294
 8008670:	20001078 	.word	0x20001078
 8008674:	20001018 	.word	0x20001018
 8008678:	20000da0 	.word	0x20000da0
 800867c:	0800c0d8 	.word	0x0800c0d8
 8008680:	0800c304 	.word	0x0800c304
 8008684:	200017a4 	.word	0x200017a4
 8008688:	0800c0dc 	.word	0x0800c0dc
 800868c:	0800c30c 	.word	0x0800c30c
 8008690:	0800c314 	.word	0x0800c314
 8008694:	0800c318 	.word	0x0800c318
 8008698:	0800d0d0 	.word	0x0800d0d0
 800869c:	0800c320 	.word	0x0800c320
 80086a0:	0800c154 	.word	0x0800c154
 80086a4:	0800c328 	.word	0x0800c328
 80086a8:	0800c330 	.word	0x0800c330
 80086ac:	0800c348 	.word	0x0800c348
 80086b0:	0800c1b4 	.word	0x0800c1b4
 80086b4:	0800afb8 	.word	0x0800afb8
 80086b8:	0800c364 	.word	0x0800c364
 80086bc:	0800c374 	.word	0x0800c374

080086c0 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 80086c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80086c4:	4b45      	ldr	r3, [pc, #276]	; (80087dc <rt_test_009_001_execute+0x11c>)
  test_set_step(2);
 80086c6:	4c46      	ldr	r4, [pc, #280]	; (80087e0 <rt_test_009_001_execute+0x120>)
  return chThdGetSelfX()->prio;
 80086c8:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80086ca:	4846      	ldr	r0, [pc, #280]	; (80087e4 <rt_test_009_001_execute+0x124>)
 80086cc:	689e      	ldr	r6, [r3, #8]
static void rt_test_009_001_execute(void) {
 80086ce:	b086      	sub	sp, #24
  test_set_step(2);
 80086d0:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80086d2:	a905      	add	r1, sp, #20
 80086d4:	aa04      	add	r2, sp, #16
  test_set_step(2);
 80086d6:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80086d8:	f7fe fbba 	bl	8006e50 <chHeapStatus>
 80086dc:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 80086de:	f1a0 0001 	sub.w	r0, r0, #1
 80086e2:	fab0 f080 	clz	r0, r0
 80086e6:	0940      	lsrs	r0, r0, #5
 80086e8:	493f      	ldr	r1, [pc, #252]	; (80087e8 <rt_test_009_001_execute+0x128>)
 80086ea:	f7f9 f859 	bl	80017a0 <_test_assert>
 80086ee:	b110      	cbz	r0, 80086f6 <rt_test_009_001_execute+0x36>
}
 80086f0:	b006      	add	sp, #24
 80086f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    threads[0] = chThdCreateFromHeap(&heap1,
 80086f6:	4b3d      	ldr	r3, [pc, #244]	; (80087ec <rt_test_009_001_execute+0x12c>)
 80086f8:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8008824 <rt_test_009_001_execute+0x164>
 80086fc:	4a3c      	ldr	r2, [pc, #240]	; (80087f0 <rt_test_009_001_execute+0x130>)
 80086fe:	4839      	ldr	r0, [pc, #228]	; (80087e4 <rt_test_009_001_execute+0x124>)
 8008700:	4f3c      	ldr	r7, [pc, #240]	; (80087f4 <rt_test_009_001_execute+0x134>)
  test_set_step(3);
 8008702:	2103      	movs	r1, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8008704:	e9cd 8300 	strd	r8, r3, [sp]
  test_set_step(3);
 8008708:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 800870a:	1e73      	subs	r3, r6, #1
 800870c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008710:	f7fd fa0e 	bl	8005b30 <chThdCreateFromHeap>
 8008714:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8008716:	3000      	adds	r0, #0
 8008718:	bf18      	it	ne
 800871a:	2001      	movne	r0, #1
 800871c:	4936      	ldr	r1, [pc, #216]	; (80087f8 <rt_test_009_001_execute+0x138>)
 800871e:	f7f9 f83f 	bl	80017a0 <_test_assert>
 8008722:	2800      	cmp	r0, #0
 8008724:	d1e4      	bne.n	80086f0 <rt_test_009_001_execute+0x30>
    threads[1] = chThdCreateFromHeap(&heap1,
 8008726:	4b35      	ldr	r3, [pc, #212]	; (80087fc <rt_test_009_001_execute+0x13c>)
 8008728:	4a35      	ldr	r2, [pc, #212]	; (8008800 <rt_test_009_001_execute+0x140>)
 800872a:	482e      	ldr	r0, [pc, #184]	; (80087e4 <rt_test_009_001_execute+0x124>)
  test_set_step(4);
 800872c:	2104      	movs	r1, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 800872e:	e9cd 8300 	strd	r8, r3, [sp]
  test_set_step(4);
 8008732:	6021      	str	r1, [r4, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8008734:	1eb3      	subs	r3, r6, #2
 8008736:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800873a:	f7fd f9f9 	bl	8005b30 <chThdCreateFromHeap>
 800873e:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 8008740:	3000      	adds	r0, #0
 8008742:	bf18      	it	ne
 8008744:	2001      	movne	r0, #1
 8008746:	492c      	ldr	r1, [pc, #176]	; (80087f8 <rt_test_009_001_execute+0x138>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8008748:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 800874a:	f7f9 f829 	bl	80017a0 <_test_assert>
 800874e:	2800      	cmp	r0, #0
 8008750:	d1ce      	bne.n	80086f0 <rt_test_009_001_execute+0x30>
    threads[2] = chThdCreateFromHeap(&heap1,
 8008752:	4a2c      	ldr	r2, [pc, #176]	; (8008804 <rt_test_009_001_execute+0x144>)
 8008754:	9201      	str	r2, [sp, #4]
  test_set_step(5);
 8008756:	2105      	movs	r1, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8008758:	1ef3      	subs	r3, r6, #3
  test_set_step(5);
 800875a:	6021      	str	r1, [r4, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 800875c:	f8cd 8000 	str.w	r8, [sp]
 8008760:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008764:	4a28      	ldr	r2, [pc, #160]	; (8008808 <rt_test_009_001_execute+0x148>)
 8008766:	481f      	ldr	r0, [pc, #124]	; (80087e4 <rt_test_009_001_execute+0x124>)
 8008768:	f7fd f9e2 	bl	8005b30 <chThdCreateFromHeap>
 800876c:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 800876e:	fab0 f080 	clz	r0, r0
 8008772:	0940      	lsrs	r0, r0, #5
 8008774:	4925      	ldr	r1, [pc, #148]	; (800880c <rt_test_009_001_execute+0x14c>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8008776:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8008778:	f7f9 f812 	bl	80017a0 <_test_assert>
 800877c:	2800      	cmp	r0, #0
 800877e:	d1b7      	bne.n	80086f0 <rt_test_009_001_execute+0x30>
  test_set_step(6);
 8008780:	2306      	movs	r3, #6
 8008782:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 8008784:	f7ff fcec 	bl	8008160 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8008788:	4921      	ldr	r1, [pc, #132]	; (8008810 <rt_test_009_001_execute+0x150>)
 800878a:	4822      	ldr	r0, [pc, #136]	; (8008814 <rt_test_009_001_execute+0x154>)
 800878c:	f7f9 f920 	bl	80019d0 <_test_assert_sequence>
 8008790:	2800      	cmp	r0, #0
 8008792:	d1ad      	bne.n	80086f0 <rt_test_009_001_execute+0x30>
  test_set_step(7);
 8008794:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8008796:	a903      	add	r1, sp, #12
 8008798:	aa02      	add	r2, sp, #8
 800879a:	4812      	ldr	r0, [pc, #72]	; (80087e4 <rt_test_009_001_execute+0x124>)
  test_set_step(7);
 800879c:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800879e:	f7fe fb57 	bl	8006e50 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 80087a2:	1a28      	subs	r0, r5, r0
 80087a4:	fab0 f080 	clz	r0, r0
 80087a8:	491b      	ldr	r1, [pc, #108]	; (8008818 <rt_test_009_001_execute+0x158>)
 80087aa:	0940      	lsrs	r0, r0, #5
 80087ac:	f7f8 fff8 	bl	80017a0 <_test_assert>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d19d      	bne.n	80086f0 <rt_test_009_001_execute+0x30>
    test_assert(total1 == total2, "total free space changed");
 80087b4:	9805      	ldr	r0, [sp, #20]
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	4918      	ldr	r1, [pc, #96]	; (800881c <rt_test_009_001_execute+0x15c>)
 80087ba:	1ac0      	subs	r0, r0, r3
 80087bc:	fab0 f080 	clz	r0, r0
 80087c0:	0940      	lsrs	r0, r0, #5
 80087c2:	f7f8 ffed 	bl	80017a0 <_test_assert>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d192      	bne.n	80086f0 <rt_test_009_001_execute+0x30>
    test_assert(largest1 == largest2, "largest fragment size changed");
 80087ca:	9804      	ldr	r0, [sp, #16]
 80087cc:	9b02      	ldr	r3, [sp, #8]
 80087ce:	4914      	ldr	r1, [pc, #80]	; (8008820 <rt_test_009_001_execute+0x160>)
 80087d0:	1ac3      	subs	r3, r0, r3
 80087d2:	4258      	negs	r0, r3
 80087d4:	4158      	adcs	r0, r3
 80087d6:	f7f8 ffe3 	bl	80017a0 <_test_assert>
 80087da:	e789      	b.n	80086f0 <rt_test_009_001_execute+0x30>
 80087dc:	20000da0 	.word	0x20000da0
 80087e0:	2000178c 	.word	0x2000178c
 80087e4:	20000fe4 	.word	0x20000fe4
 80087e8:	0800b0b4 	.word	0x0800b0b4
 80087ec:	0800c0d8 	.word	0x0800c0d8
 80087f0:	0800c304 	.word	0x0800c304
 80087f4:	200017a4 	.word	0x200017a4
 80087f8:	0800c330 	.word	0x0800c330
 80087fc:	0800c0dc 	.word	0x0800c0dc
 8008800:	0800c30c 	.word	0x0800c30c
 8008804:	0800c314 	.word	0x0800c314
 8008808:	0800c318 	.word	0x0800c318
 800880c:	0800c348 	.word	0x0800c348
 8008810:	0800c1b4 	.word	0x0800c1b4
 8008814:	0800c29c 	.word	0x0800c29c
 8008818:	0800c2a0 	.word	0x0800c2a0
 800881c:	0800c2b8 	.word	0x0800c2b8
 8008820:	0800c2d4 	.word	0x0800c2d4
 8008824:	08001951 	.word	0x08001951
	...

08008830 <rt_test_008_007_execute>:

static void rt_test_008_007_execute(void) {
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8008834:	4d3e      	ldr	r5, [pc, #248]	; (8008930 <rt_test_008_007_execute+0x100>)
 8008836:	2301      	movs	r3, #1
static void rt_test_008_007_execute(void) {
 8008838:	b08d      	sub	sp, #52	; 0x34
  test_set_step(1);
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	2220      	movs	r2, #32
 800883e:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 8008842:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008950 <rt_test_008_007_execute+0x120>
  elp->listener = currp;
 8008846:	4f3b      	ldr	r7, [pc, #236]	; (8008934 <rt_test_008_007_execute+0x104>)
  elp->next     = esp->next;
 8008848:	f8d8 0000 	ldr.w	r0, [r8]
  elp->listener = currp;
 800884c:	69b9      	ldr	r1, [r7, #24]
  elp->events   = events;
 800884e:	9309      	str	r3, [sp, #36]	; 0x24
  elp->next     = esp->next;
 8008850:	ae0c      	add	r6, sp, #48	; 0x30
  elp->flags    = (eventflags_t)0;
 8008852:	2300      	movs	r3, #0
  elp->next     = esp->next;
 8008854:	f846 0d14 	str.w	r0, [r6, #-20]!
  elp->wflags   = wflags;
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
  elp->listener = currp;
 800885c:	9108      	str	r1, [sp, #32]
  esp->next     = elp;
 800885e:	f8c8 6000 	str.w	r6, [r8]
  elp->wflags   = wflags;
 8008862:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 800886e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8008954 <rt_test_008_007_execute+0x124>
  elp->listener = currp;
 8008872:	69ba      	ldr	r2, [r7, #24]
  elp->next     = esp->next;
 8008874:	f8d9 1000 	ldr.w	r1, [r9]
  elp->flags    = (eventflags_t)0;
 8008878:	9305      	str	r3, [sp, #20]
  elp->next     = esp->next;
 800887a:	ac0c      	add	r4, sp, #48	; 0x30
  elp->events   = events;
 800887c:	f04f 0a04 	mov.w	sl, #4
  elp->next     = esp->next;
 8008880:	f844 1d28 	str.w	r1, [r4, #-40]!
  elp->wflags   = wflags;
 8008884:	9006      	str	r0, [sp, #24]
  elp->listener = currp;
 8008886:	9203      	str	r2, [sp, #12]
  esp->next     = elp;
 8008888:	f8c9 4000 	str.w	r4, [r9]
  elp->events   = events;
 800888c:	f8cd a010 	str.w	sl, [sp, #16]
 8008890:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8008894:	2302      	movs	r3, #2
 8008896:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008898:	f7fb fb72 	bl	8003f80 <test_wait_tick>
 800889c:	69bb      	ldr	r3, [r7, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800889e:	4926      	ldr	r1, [pc, #152]	; (8008938 <rt_test_008_007_execute+0x108>)
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	4b26      	ldr	r3, [pc, #152]	; (800893c <rt_test_008_007_execute+0x10c>)
 80088a4:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80088a6:	4683      	mov	fp, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80088a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80088ac:	3a01      	subs	r2, #1
 80088ae:	4824      	ldr	r0, [pc, #144]	; (8008940 <rt_test_008_007_execute+0x110>)
 80088b0:	f7fa ff16 	bl	80036e0 <chThdCreateStatic>
 80088b4:	4a23      	ldr	r2, [pc, #140]	; (8008944 <rt_test_008_007_execute+0x114>)
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 80088b6:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80088b8:	6010      	str	r0, [r2, #0]
  test_set_step(3);
 80088ba:	602b      	str	r3, [r5, #0]
  {
    m = chEvtWaitAll(5);
 80088bc:	f7fa ffe0 	bl	8003880 <chEvtWaitAll.constprop.47>
    test_assert_time_window(target_time,
 80088c0:	f50b 7102 	add.w	r1, fp, #520	; 0x208
 80088c4:	f50b 70fa 	add.w	r0, fp, #500	; 0x1f4
 80088c8:	f7f8 fd42 	bl	8001350 <_test_assert_time_window.constprop.1>
 80088cc:	b110      	cbz	r0, 80088d4 <rt_test_008_007_execute+0xa4>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 80088ce:	b00d      	add	sp, #52	; 0x34
 80088d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80088d4:	f7f8 fd2c 	bl	8001330 <chEvtGetAndClearEvents.constprop.53>
    test_assert(m == 0, "stuck event");
 80088d8:	fab0 f080 	clz	r0, r0
 80088dc:	0940      	lsrs	r0, r0, #5
 80088de:	491a      	ldr	r1, [pc, #104]	; (8008948 <rt_test_008_007_execute+0x118>)
 80088e0:	f7f8 ff5e 	bl	80017a0 <_test_assert>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d1f2      	bne.n	80088ce <rt_test_008_007_execute+0x9e>
    test_wait_threads();
 80088e8:	f7ff fc3a 	bl	8008160 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 80088ec:	4631      	mov	r1, r6
 80088ee:	4640      	mov	r0, r8
  test_set_step(4);
 80088f0:	f8c5 a000 	str.w	sl, [r5]
    chEvtUnregister(&es1, &el1);
 80088f4:	f7f9 f9d4 	bl	8001ca0 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 80088f8:	4621      	mov	r1, r4
 80088fa:	4648      	mov	r0, r9
 80088fc:	f7f9 f9d0 	bl	8001ca0 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 8008900:	f8d8 0000 	ldr.w	r0, [r8]
 8008904:	4911      	ldr	r1, [pc, #68]	; (800894c <rt_test_008_007_execute+0x11c>)
 8008906:	eba0 0008 	sub.w	r0, r0, r8
 800890a:	fab0 f080 	clz	r0, r0
 800890e:	0940      	lsrs	r0, r0, #5
 8008910:	f7f8 ff46 	bl	80017a0 <_test_assert>
 8008914:	2800      	cmp	r0, #0
 8008916:	d1da      	bne.n	80088ce <rt_test_008_007_execute+0x9e>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8008918:	f8d9 0000 	ldr.w	r0, [r9]
 800891c:	490b      	ldr	r1, [pc, #44]	; (800894c <rt_test_008_007_execute+0x11c>)
 800891e:	eba0 0009 	sub.w	r0, r0, r9
 8008922:	fab0 f080 	clz	r0, r0
 8008926:	0940      	lsrs	r0, r0, #5
 8008928:	f7f8 ff3a 	bl	80017a0 <_test_assert>
 800892c:	e7cf      	b.n	80088ce <rt_test_008_007_execute+0x9e>
 800892e:	bf00      	nop
 8008930:	2000178c 	.word	0x2000178c
 8008934:	20000da0 	.word	0x20000da0
 8008938:	0800c0d8 	.word	0x0800c0d8
 800893c:	08005851 	.word	0x08005851
 8008940:	20001078 	.word	0x20001078
 8008944:	200017a4 	.word	0x200017a4
 8008948:	0800c280 	.word	0x0800c280
 800894c:	0800c194 	.word	0x0800c194
 8008950:	20000c0c 	.word	0x20000c0c
 8008954:	20000c10 	.word	0x20000c10
	...

08008960 <rt_test_008_005_execute>:
static void rt_test_008_005_execute(void) {
 8008960:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(5);
 8008962:	2005      	movs	r0, #5
static void rt_test_008_005_execute(void) {
 8008964:	b083      	sub	sp, #12
  test_set_step(2);
 8008966:	4c2b      	ldr	r4, [pc, #172]	; (8008a14 <rt_test_008_005_execute+0xb4>)
    chEvtAddEvents(5);
 8008968:	f7f9 f98a 	bl	8001c80 <chEvtAddEvents>
  test_set_step(2);
 800896c:	2302      	movs	r3, #2
 800896e:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 8008970:	f7fa ff86 	bl	8003880 <chEvtWaitAll.constprop.47>
    test_assert(m == 5, "unexpected pending bit");
 8008974:	f1a0 0005 	sub.w	r0, r0, #5
 8008978:	fab0 f080 	clz	r0, r0
 800897c:	4926      	ldr	r1, [pc, #152]	; (8008a18 <rt_test_008_005_execute+0xb8>)
 800897e:	0940      	lsrs	r0, r0, #5
 8008980:	f7f8 ff0e 	bl	80017a0 <_test_assert>
 8008984:	b108      	cbz	r0, 800898a <rt_test_008_005_execute+0x2a>
}
 8008986:	b003      	add	sp, #12
 8008988:	bd30      	pop	{r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800898a:	f7f8 fcd1 	bl	8001330 <chEvtGetAndClearEvents.constprop.53>
    test_assert(m == 0, "stuck event");
 800898e:	fab0 f080 	clz	r0, r0
 8008992:	0940      	lsrs	r0, r0, #5
 8008994:	4921      	ldr	r1, [pc, #132]	; (8008a1c <rt_test_008_005_execute+0xbc>)
 8008996:	f7f8 ff03 	bl	80017a0 <_test_assert>
 800899a:	2800      	cmp	r0, #0
 800899c:	d1f3      	bne.n	8008986 <rt_test_008_005_execute+0x26>
    chEvtAddEvents(4);
 800899e:	2004      	movs	r0, #4
 80089a0:	f7f9 f96e 	bl	8001c80 <chEvtAddEvents>
  test_set_step(4);
 80089a4:	2304      	movs	r3, #4
 80089a6:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80089a8:	f7fb faea 	bl	8003f80 <test_wait_tick>
  return ch.rlist.current;
 80089ac:	4a1c      	ldr	r2, [pc, #112]	; (8008a20 <rt_test_008_005_execute+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80089ae:	4b1d      	ldr	r3, [pc, #116]	; (8008a24 <rt_test_008_005_execute+0xc4>)
 80089b0:	6991      	ldr	r1, [r2, #24]
 80089b2:	688a      	ldr	r2, [r1, #8]
 80089b4:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80089b6:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80089b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80089bc:	3a01      	subs	r2, #1
 80089be:	481a      	ldr	r0, [pc, #104]	; (8008a28 <rt_test_008_005_execute+0xc8>)
 80089c0:	f7fa fe8e 	bl	80036e0 <chThdCreateStatic>
 80089c4:	4a19      	ldr	r2, [pc, #100]	; (8008a2c <rt_test_008_005_execute+0xcc>)
  test_set_step(5);
 80089c6:	2305      	movs	r3, #5
 80089c8:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80089ca:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 80089cc:	f7fa ff58 	bl	8003880 <chEvtWaitAll.constprop.47>
    test_assert_time_window(target_time,
 80089d0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 80089d4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 80089d6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 80089da:	f7f8 fcb9 	bl	8001350 <_test_assert_time_window.constprop.1>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d1d1      	bne.n	8008986 <rt_test_008_005_execute+0x26>
    test_assert(m == 5, "event flags error");
 80089e2:	f1a4 0005 	sub.w	r0, r4, #5
 80089e6:	fab0 f080 	clz	r0, r0
 80089ea:	0940      	lsrs	r0, r0, #5
 80089ec:	4910      	ldr	r1, [pc, #64]	; (8008a30 <rt_test_008_005_execute+0xd0>)
 80089ee:	f7f8 fed7 	bl	80017a0 <_test_assert>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d1c7      	bne.n	8008986 <rt_test_008_005_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80089f6:	f7f8 fc9b 	bl	8001330 <chEvtGetAndClearEvents.constprop.53>
    test_assert(m == 0, "stuck event");
 80089fa:	fab0 f080 	clz	r0, r0
 80089fe:	0940      	lsrs	r0, r0, #5
 8008a00:	4906      	ldr	r1, [pc, #24]	; (8008a1c <rt_test_008_005_execute+0xbc>)
 8008a02:	f7f8 fecd 	bl	80017a0 <_test_assert>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d1bd      	bne.n	8008986 <rt_test_008_005_execute+0x26>
}
 8008a0a:	b003      	add	sp, #12
 8008a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 8008a10:	f7ff bba6 	b.w	8008160 <test_wait_threads>
 8008a14:	2000178c 	.word	0x2000178c
 8008a18:	0800c224 	.word	0x0800c224
 8008a1c:	0800c280 	.word	0x0800c280
 8008a20:	20000da0 	.word	0x20000da0
 8008a24:	08005891 	.word	0x08005891
 8008a28:	20001078 	.word	0x20001078
 8008a2c:	200017a4 	.word	0x200017a4
 8008a30:	0800c23c 	.word	0x0800c23c
	...

08008a40 <rt_test_008_004_execute>:
static void rt_test_008_004_execute(void) {
 8008a40:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(5);
 8008a42:	2005      	movs	r0, #5
static void rt_test_008_004_execute(void) {
 8008a44:	b083      	sub	sp, #12
  test_set_step(2);
 8008a46:	4c2a      	ldr	r4, [pc, #168]	; (8008af0 <rt_test_008_004_execute+0xb0>)
    chEvtAddEvents(5);
 8008a48:	f7f9 f91a 	bl	8001c80 <chEvtAddEvents>
  test_set_step(2);
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8008a50:	f7fa fefe 	bl	8003850 <chEvtWaitAny.constprop.48>
    test_assert(m == 5, "unexpected pending bit");
 8008a54:	f1a0 0005 	sub.w	r0, r0, #5
 8008a58:	fab0 f080 	clz	r0, r0
 8008a5c:	4925      	ldr	r1, [pc, #148]	; (8008af4 <rt_test_008_004_execute+0xb4>)
 8008a5e:	0940      	lsrs	r0, r0, #5
 8008a60:	f7f8 fe9e 	bl	80017a0 <_test_assert>
 8008a64:	b108      	cbz	r0, 8008a6a <rt_test_008_004_execute+0x2a>
}
 8008a66:	b003      	add	sp, #12
 8008a68:	bd30      	pop	{r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008a6a:	f7f8 fc61 	bl	8001330 <chEvtGetAndClearEvents.constprop.53>
    test_assert(m == 0, "stuck event");
 8008a6e:	fab0 f080 	clz	r0, r0
 8008a72:	0940      	lsrs	r0, r0, #5
 8008a74:	4920      	ldr	r1, [pc, #128]	; (8008af8 <rt_test_008_004_execute+0xb8>)
 8008a76:	f7f8 fe93 	bl	80017a0 <_test_assert>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d1f3      	bne.n	8008a66 <rt_test_008_004_execute+0x26>
  test_set_step(3);
 8008a7e:	2303      	movs	r3, #3
 8008a80:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008a82:	f7fb fa7d 	bl	8003f80 <test_wait_tick>
 8008a86:	4a1d      	ldr	r2, [pc, #116]	; (8008afc <rt_test_008_004_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008a88:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <rt_test_008_004_execute+0xc0>)
 8008a8a:	6991      	ldr	r1, [r2, #24]
 8008a8c:	688a      	ldr	r2, [r1, #8]
 8008a8e:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008a90:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008a92:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008a96:	3a01      	subs	r2, #1
 8008a98:	481a      	ldr	r0, [pc, #104]	; (8008b04 <rt_test_008_004_execute+0xc4>)
 8008a9a:	f7fa fe21 	bl	80036e0 <chThdCreateStatic>
 8008a9e:	4a1a      	ldr	r2, [pc, #104]	; (8008b08 <rt_test_008_004_execute+0xc8>)
  test_set_step(4);
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008aa4:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8008aa6:	f7fa fed3 	bl	8003850 <chEvtWaitAny.constprop.48>
    test_assert_time_window(target_time,
 8008aaa:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 8008aae:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8008ab0:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8008ab4:	f7f8 fc4c 	bl	8001350 <_test_assert_time_window.constprop.1>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d1d4      	bne.n	8008a66 <rt_test_008_004_execute+0x26>
    test_assert(m == 1, "event flag error");
 8008abc:	f1a4 0001 	sub.w	r0, r4, #1
 8008ac0:	fab0 f080 	clz	r0, r0
 8008ac4:	0940      	lsrs	r0, r0, #5
 8008ac6:	4911      	ldr	r1, [pc, #68]	; (8008b0c <rt_test_008_004_execute+0xcc>)
 8008ac8:	f7f8 fe6a 	bl	80017a0 <_test_assert>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d1ca      	bne.n	8008a66 <rt_test_008_004_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008ad0:	f7f8 fc2e 	bl	8001330 <chEvtGetAndClearEvents.constprop.53>
    test_assert(m == 0, "stuck event");
 8008ad4:	fab0 f080 	clz	r0, r0
 8008ad8:	0940      	lsrs	r0, r0, #5
 8008ada:	4907      	ldr	r1, [pc, #28]	; (8008af8 <rt_test_008_004_execute+0xb8>)
 8008adc:	f7f8 fe60 	bl	80017a0 <_test_assert>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d1c0      	bne.n	8008a66 <rt_test_008_004_execute+0x26>
}
 8008ae4:	b003      	add	sp, #12
 8008ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 8008aea:	f7ff bb39 	b.w	8008160 <test_wait_threads>
 8008aee:	bf00      	nop
 8008af0:	2000178c 	.word	0x2000178c
 8008af4:	0800c224 	.word	0x0800c224
 8008af8:	0800c280 	.word	0x0800c280
 8008afc:	20000da0 	.word	0x20000da0
 8008b00:	08005891 	.word	0x08005891
 8008b04:	20001078 	.word	0x20001078
 8008b08:	200017a4 	.word	0x200017a4
 8008b0c:	0800c200 	.word	0x0800c200

08008b10 <rt_test_008_003_execute>:
static void rt_test_008_003_execute(void) {
 8008b10:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(7);
 8008b12:	2007      	movs	r0, #7
static void rt_test_008_003_execute(void) {
 8008b14:	b083      	sub	sp, #12
  test_set_step(2);
 8008b16:	4c36      	ldr	r4, [pc, #216]	; (8008bf0 <rt_test_008_003_execute+0xe0>)
    chEvtAddEvents(7);
 8008b18:	f7f9 f8b2 	bl	8001c80 <chEvtAddEvents>
  test_set_step(2);
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008b20:	f7fa fe76 	bl	8003810 <chEvtWaitOne.constprop.49>
    test_assert(m == 1, "single event error");
 8008b24:	f1a0 0001 	sub.w	r0, r0, #1
 8008b28:	fab0 f080 	clz	r0, r0
 8008b2c:	4931      	ldr	r1, [pc, #196]	; (8008bf4 <rt_test_008_003_execute+0xe4>)
 8008b2e:	0940      	lsrs	r0, r0, #5
 8008b30:	f7f8 fe36 	bl	80017a0 <_test_assert>
 8008b34:	b108      	cbz	r0, 8008b3a <rt_test_008_003_execute+0x2a>
}
 8008b36:	b003      	add	sp, #12
 8008b38:	bd30      	pop	{r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 8008b3a:	f7fa fe69 	bl	8003810 <chEvtWaitOne.constprop.49>
    test_assert(m == 2, "single event error");
 8008b3e:	f1a0 0002 	sub.w	r0, r0, #2
 8008b42:	fab0 f080 	clz	r0, r0
 8008b46:	492b      	ldr	r1, [pc, #172]	; (8008bf4 <rt_test_008_003_execute+0xe4>)
 8008b48:	0940      	lsrs	r0, r0, #5
 8008b4a:	f7f8 fe29 	bl	80017a0 <_test_assert>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d1f1      	bne.n	8008b36 <rt_test_008_003_execute+0x26>
    m = chEvtWaitOne(ALL_EVENTS);
 8008b52:	f7fa fe5d 	bl	8003810 <chEvtWaitOne.constprop.49>
    test_assert(m == 4, "single event error");
 8008b56:	f1a0 0004 	sub.w	r0, r0, #4
 8008b5a:	fab0 f080 	clz	r0, r0
 8008b5e:	4925      	ldr	r1, [pc, #148]	; (8008bf4 <rt_test_008_003_execute+0xe4>)
 8008b60:	0940      	lsrs	r0, r0, #5
 8008b62:	f7f8 fe1d 	bl	80017a0 <_test_assert>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d1e5      	bne.n	8008b36 <rt_test_008_003_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008b6a:	f7f8 fbe1 	bl	8001330 <chEvtGetAndClearEvents.constprop.53>
    test_assert(m == 0, "stuck event");
 8008b6e:	fab0 f080 	clz	r0, r0
 8008b72:	0940      	lsrs	r0, r0, #5
 8008b74:	4920      	ldr	r1, [pc, #128]	; (8008bf8 <rt_test_008_003_execute+0xe8>)
 8008b76:	f7f8 fe13 	bl	80017a0 <_test_assert>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d1db      	bne.n	8008b36 <rt_test_008_003_execute+0x26>
  test_set_step(3);
 8008b7e:	2303      	movs	r3, #3
 8008b80:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008b82:	f7fb f9fd 	bl	8003f80 <test_wait_tick>
 8008b86:	4a1d      	ldr	r2, [pc, #116]	; (8008bfc <rt_test_008_003_execute+0xec>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008b88:	4b1d      	ldr	r3, [pc, #116]	; (8008c00 <rt_test_008_003_execute+0xf0>)
 8008b8a:	6991      	ldr	r1, [r2, #24]
 8008b8c:	688a      	ldr	r2, [r1, #8]
 8008b8e:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008b90:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008b92:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008b96:	3a01      	subs	r2, #1
 8008b98:	481a      	ldr	r0, [pc, #104]	; (8008c04 <rt_test_008_003_execute+0xf4>)
 8008b9a:	f7fa fda1 	bl	80036e0 <chThdCreateStatic>
 8008b9e:	4a1a      	ldr	r2, [pc, #104]	; (8008c08 <rt_test_008_003_execute+0xf8>)
  test_set_step(4);
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008ba4:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008ba6:	f7fa fe33 	bl	8003810 <chEvtWaitOne.constprop.49>
    test_assert_time_window(target_time,
 8008baa:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 8008bae:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8008bb0:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8008bb4:	f7f8 fbcc 	bl	8001350 <_test_assert_time_window.constprop.1>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1bc      	bne.n	8008b36 <rt_test_008_003_execute+0x26>
    test_assert(m == 1, "event flag error");
 8008bbc:	f1a4 0001 	sub.w	r0, r4, #1
 8008bc0:	fab0 f080 	clz	r0, r0
 8008bc4:	0940      	lsrs	r0, r0, #5
 8008bc6:	4911      	ldr	r1, [pc, #68]	; (8008c0c <rt_test_008_003_execute+0xfc>)
 8008bc8:	f7f8 fdea 	bl	80017a0 <_test_assert>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d1b2      	bne.n	8008b36 <rt_test_008_003_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008bd0:	f7f8 fbae 	bl	8001330 <chEvtGetAndClearEvents.constprop.53>
    test_assert(m == 0, "stuck event");
 8008bd4:	fab0 f080 	clz	r0, r0
 8008bd8:	0940      	lsrs	r0, r0, #5
 8008bda:	4907      	ldr	r1, [pc, #28]	; (8008bf8 <rt_test_008_003_execute+0xe8>)
 8008bdc:	f7f8 fde0 	bl	80017a0 <_test_assert>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d1a8      	bne.n	8008b36 <rt_test_008_003_execute+0x26>
}
 8008be4:	b003      	add	sp, #12
 8008be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 8008bea:	f7ff bab9 	b.w	8008160 <test_wait_threads>
 8008bee:	bf00      	nop
 8008bf0:	2000178c 	.word	0x2000178c
 8008bf4:	0800c1dc 	.word	0x0800c1dc
 8008bf8:	0800c280 	.word	0x0800c280
 8008bfc:	20000da0 	.word	0x20000da0
 8008c00:	08005891 	.word	0x08005891
 8008c04:	20001078 	.word	0x20001078
 8008c08:	200017a4 	.word	0x200017a4
 8008c0c:	0800c200 	.word	0x0800c200

08008c10 <rt_test_007_001_execute>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	4b17      	ldr	r3, [pc, #92]	; (8008c70 <rt_test_007_001_execute+0x60>)
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8008c14:	4c17      	ldr	r4, [pc, #92]	; (8008c74 <rt_test_007_001_execute+0x64>)
 8008c16:	6999      	ldr	r1, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008c18:	4817      	ldr	r0, [pc, #92]	; (8008c78 <rt_test_007_001_execute+0x68>)
 8008c1a:	688a      	ldr	r2, [r1, #8]
 8008c1c:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <rt_test_007_001_execute+0x6c>)
static void rt_test_007_001_execute(void) {
 8008c1e:	b083      	sub	sp, #12
  test_set_step(1);
 8008c20:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008c22:	9100      	str	r1, [sp, #0]
 8008c24:	3201      	adds	r2, #1
  test_set_step(1);
 8008c26:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008c28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c2c:	f7fa fd58 	bl	80036e0 <chThdCreateStatic>
 8008c30:	4a13      	ldr	r2, [pc, #76]	; (8008c80 <rt_test_007_001_execute+0x70>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8008c32:	2302      	movs	r3, #2
 8008c34:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008c36:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8008c38:	2404      	movs	r4, #4
 8008c3a:	2720      	movs	r7, #32
 8008c3c:	2600      	movs	r6, #0
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 8008c3e:	f7fb fbcf 	bl	80043e0 <chMsgWait>
 8008c42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c44:	f387 8811 	msr	BASEPRI, r7
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7fa fcb1 	bl	80035b0 <chSchWakeupS>
 8008c4e:	f386 8811 	msr	BASEPRI, r6
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8008c52:	b2e8      	uxtb	r0, r5
 8008c54:	f7f8 fe44 	bl	80018e0 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8008c58:	3c01      	subs	r4, #1
 8008c5a:	d1f0      	bne.n	8008c3e <rt_test_007_001_execute+0x2e>
    }
    test_wait_threads();
 8008c5c:	f7ff fa80 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8008c60:	4908      	ldr	r1, [pc, #32]	; (8008c84 <rt_test_007_001_execute+0x74>)
 8008c62:	4809      	ldr	r0, [pc, #36]	; (8008c88 <rt_test_007_001_execute+0x78>)
  }
}
 8008c64:	b003      	add	sp, #12
 8008c66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8008c6a:	f7f8 beb1 	b.w	80019d0 <_test_assert_sequence>
 8008c6e:	bf00      	nop
 8008c70:	20000da0 	.word	0x20000da0
 8008c74:	2000178c 	.word	0x2000178c
 8008c78:	20001078 	.word	0x20001078
 8008c7c:	080044c1 	.word	0x080044c1
 8008c80:	200017a4 	.word	0x200017a4
 8008c84:	0800c1b4 	.word	0x0800c1b4
 8008c88:	0800afb8 	.word	0x0800afb8
 8008c8c:	00000000 	.word	0x00000000

08008c90 <rt_test_006_009_execute>:

static void rt_test_006_009_execute(void) {
 8008c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c92:	4b20      	ldr	r3, [pc, #128]	; (8008d14 <rt_test_006_009_execute+0x84>)
    prio = chThdGetPriorityX();
  }

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8008c94:	4c20      	ldr	r4, [pc, #128]	; (8008d18 <rt_test_006_009_execute+0x88>)
  return chThdGetSelfX()->prio;
 8008c96:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008c98:	4e20      	ldr	r6, [pc, #128]	; (8008d1c <rt_test_006_009_execute+0x8c>)
 8008c9a:	689f      	ldr	r7, [r3, #8]
 8008c9c:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <rt_test_006_009_execute+0x90>)
 8008c9e:	4d21      	ldr	r5, [pc, #132]	; (8008d24 <rt_test_006_009_execute+0x94>)
static void rt_test_006_009_execute(void) {
 8008ca0:	b083      	sub	sp, #12
  test_set_step(2);
 8008ca2:	2102      	movs	r1, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	1c7a      	adds	r2, r7, #1
  test_set_step(2);
 8008ca8:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008caa:	4630      	mov	r0, r6
 8008cac:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <rt_test_006_009_execute+0x98>)
 8008cae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008cb2:	f7fa fd15 	bl	80036e0 <chThdCreateStatic>

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008cb6:	4b1d      	ldr	r3, [pc, #116]	; (8008d2c <rt_test_006_009_execute+0x9c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008cb8:	6028      	str	r0, [r5, #0]
  test_set_step(3);
 8008cba:	2103      	movs	r1, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008cbc:	1cba      	adds	r2, r7, #2
 8008cbe:	9300      	str	r3, [sp, #0]
  test_set_step(3);
 8008cc0:	6021      	str	r1, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008cc2:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8008cc6:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <rt_test_006_009_execute+0xa0>)
 8008cc8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ccc:	f7fa fd08 	bl	80036e0 <chThdCreateStatic>

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008cd0:	4b18      	ldr	r3, [pc, #96]	; (8008d34 <rt_test_006_009_execute+0xa4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008cd2:	6068      	str	r0, [r5, #4]
  test_set_step(4);
 8008cd4:	2104      	movs	r1, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008cd6:	1cfa      	adds	r2, r7, #3
 8008cd8:	9300      	str	r3, [sp, #0]
  test_set_step(4);
 8008cda:	6021      	str	r1, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008cdc:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8008ce0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ce4:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <rt_test_006_009_execute+0xa8>)
 8008ce6:	f7fa fcfb 	bl	80036e0 <chThdCreateStatic>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8008cea:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008cec:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8008cee:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8008cf0:	f7fa fc8e 	bl	8003610 <chCondSignal.constprop.61>
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8008cf4:	2306      	movs	r3, #6
 8008cf6:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8008cf8:	f7fa fc8a 	bl	8003610 <chCondSignal.constprop.61>
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
 8008cfc:	2307      	movs	r3, #7
 8008cfe:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8008d00:	f7ff fa2e 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 8008d04:	490d      	ldr	r1, [pc, #52]	; (8008d3c <rt_test_006_009_execute+0xac>)
 8008d06:	480e      	ldr	r0, [pc, #56]	; (8008d40 <rt_test_006_009_execute+0xb0>)
  }
}
 8008d08:	b003      	add	sp, #12
 8008d0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8008d0e:	f7f8 be5f 	b.w	80019d0 <_test_assert_sequence>
 8008d12:	bf00      	nop
 8008d14:	20000da0 	.word	0x20000da0
 8008d18:	2000178c 	.word	0x2000178c
 8008d1c:	20001078 	.word	0x20001078
 8008d20:	0800c0d8 	.word	0x0800c0d8
 8008d24:	200017a4 	.word	0x200017a4
 8008d28:	08006671 	.word	0x08006671
 8008d2c:	0800c314 	.word	0x0800c314
 8008d30:	08006701 	.word	0x08006701
 8008d34:	0800c0dc 	.word	0x0800c0dc
 8008d38:	08006771 	.word	0x08006771
 8008d3c:	0800c1b4 	.word	0x0800c1b4
 8008d40:	0800c1c8 	.word	0x0800c1c8
	...

08008d50 <rt_test_006_008_execute>:
static void rt_test_006_008_execute(void) {
 8008d50:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8008d52:	4b2e      	ldr	r3, [pc, #184]	; (8008e0c <rt_test_006_008_execute+0xbc>)
  test_set_step(1);
 8008d54:	4e2e      	ldr	r6, [pc, #184]	; (8008e10 <rt_test_006_008_execute+0xc0>)
  return chThdGetSelfX()->prio;
 8008d56:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008d58:	4a2e      	ldr	r2, [pc, #184]	; (8008e14 <rt_test_006_008_execute+0xc4>)
 8008d5a:	689d      	ldr	r5, [r3, #8]
 8008d5c:	482e      	ldr	r0, [pc, #184]	; (8008e18 <rt_test_006_008_execute+0xc8>)
 8008d5e:	4b2f      	ldr	r3, [pc, #188]	; (8008e1c <rt_test_006_008_execute+0xcc>)
static void rt_test_006_008_execute(void) {
 8008d60:	b082      	sub	sp, #8
  test_set_step(1);
 8008d62:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008d64:	9200      	str	r2, [sp, #0]
 8008d66:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008d6a:	1c6a      	adds	r2, r5, #1
  test_set_step(1);
 8008d6c:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008d6e:	f7fa fcb7 	bl	80036e0 <chThdCreateStatic>
 8008d72:	4c2b      	ldr	r4, [pc, #172]	; (8008e20 <rt_test_006_008_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008d74:	4b2b      	ldr	r3, [pc, #172]	; (8008e24 <rt_test_006_008_execute+0xd4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008d76:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008d78:	1caa      	adds	r2, r5, #2
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008d80:	4b26      	ldr	r3, [pc, #152]	; (8008e1c <rt_test_006_008_execute+0xcc>)
 8008d82:	4829      	ldr	r0, [pc, #164]	; (8008e28 <rt_test_006_008_execute+0xd8>)
 8008d84:	f7fa fcac 	bl	80036e0 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008d88:	4b28      	ldr	r3, [pc, #160]	; (8008e2c <rt_test_006_008_execute+0xdc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008d8a:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008d8c:	1cea      	adds	r2, r5, #3
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008d94:	4b21      	ldr	r3, [pc, #132]	; (8008e1c <rt_test_006_008_execute+0xcc>)
 8008d96:	4826      	ldr	r0, [pc, #152]	; (8008e30 <rt_test_006_008_execute+0xe0>)
 8008d98:	f7fa fca2 	bl	80036e0 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008d9c:	4b25      	ldr	r3, [pc, #148]	; (8008e34 <rt_test_006_008_execute+0xe4>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008d9e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008da0:	1d2a      	adds	r2, r5, #4
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008da8:	4b1c      	ldr	r3, [pc, #112]	; (8008e1c <rt_test_006_008_execute+0xcc>)
 8008daa:	4823      	ldr	r0, [pc, #140]	; (8008e38 <rt_test_006_008_execute+0xe8>)
 8008dac:	f7fa fc98 	bl	80036e0 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008db0:	4b22      	ldr	r3, [pc, #136]	; (8008e3c <rt_test_006_008_execute+0xec>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008db2:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008db4:	1d6a      	adds	r2, r5, #5
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008dbc:	4b17      	ldr	r3, [pc, #92]	; (8008e1c <rt_test_006_008_execute+0xcc>)
 8008dbe:	4820      	ldr	r0, [pc, #128]	; (8008e40 <rt_test_006_008_execute+0xf0>)
 8008dc0:	f7fa fc8e 	bl	80036e0 <chThdCreateStatic>
  test_set_step(2);
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008dc8:	6120      	str	r0, [r4, #16]
 8008dca:	2320      	movs	r3, #32
 8008dcc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008dd0:	4c1c      	ldr	r4, [pc, #112]	; (8008e44 <rt_test_006_008_execute+0xf4>)
 8008dd2:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	d00b      	beq.n	8008df0 <rt_test_006_008_execute+0xa0>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8008dd8:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	6022      	str	r2, [r4, #0]
 8008de0:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8008de2:	6054      	str	r4, [r2, #4]
 8008de4:	f7f9 f894 	bl	8001f10 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d1f5      	bne.n	8008ddc <rt_test_006_008_execute+0x8c>
  chSchRescheduleS();
 8008df0:	f7fb ff96 	bl	8004d20 <chSchRescheduleS>
 8008df4:	2300      	movs	r3, #0
 8008df6:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008dfa:	f7ff f9b1 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008dfe:	4912      	ldr	r1, [pc, #72]	; (8008e48 <rt_test_006_008_execute+0xf8>)
 8008e00:	4812      	ldr	r0, [pc, #72]	; (8008e4c <rt_test_006_008_execute+0xfc>)
}
 8008e02:	b002      	add	sp, #8
 8008e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008e08:	f7f8 bde2 	b.w	80019d0 <_test_assert_sequence>
 8008e0c:	20000da0 	.word	0x20000da0
 8008e10:	2000178c 	.word	0x2000178c
 8008e14:	0800c154 	.word	0x0800c154
 8008e18:	20001078 	.word	0x20001078
 8008e1c:	08006701 	.word	0x08006701
 8008e20:	200017a4 	.word	0x200017a4
 8008e24:	0800d0d0 	.word	0x0800d0d0
 8008e28:	200011c0 	.word	0x200011c0
 8008e2c:	0800c314 	.word	0x0800c314
 8008e30:	20001308 	.word	0x20001308
 8008e34:	0800c0dc 	.word	0x0800c0dc
 8008e38:	20001450 	.word	0x20001450
 8008e3c:	0800c0d8 	.word	0x0800c0d8
 8008e40:	20001598 	.word	0x20001598
 8008e44:	20000c04 	.word	0x20000c04
 8008e48:	0800c1b4 	.word	0x0800c1b4
 8008e4c:	0800c150 	.word	0x0800c150

08008e50 <rt_test_006_007_execute>:
static void rt_test_006_007_execute(void) {
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008e54:	4b2f      	ldr	r3, [pc, #188]	; (8008f14 <rt_test_006_007_execute+0xc4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008e56:	4e30      	ldr	r6, [pc, #192]	; (8008f18 <rt_test_006_007_execute+0xc8>)
  return chThdGetSelfX()->prio;
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	4d30      	ldr	r5, [pc, #192]	; (8008f1c <rt_test_006_007_execute+0xcc>)
 8008e5c:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 8008e5e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8008f40 <rt_test_006_007_execute+0xf0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008e62:	4b2f      	ldr	r3, [pc, #188]	; (8008f20 <rt_test_006_007_execute+0xd0>)
static void rt_test_006_007_execute(void) {
 8008e64:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008e66:	1c7a      	adds	r2, r7, #1
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	4633      	mov	r3, r6
  test_set_step(1);
 8008e6e:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008e70:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 8008e74:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008e78:	f7fa fc32 	bl	80036e0 <chThdCreateStatic>
 8008e7c:	4c29      	ldr	r4, [pc, #164]	; (8008f24 <rt_test_006_007_execute+0xd4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008e7e:	492a      	ldr	r1, [pc, #168]	; (8008f28 <rt_test_006_007_execute+0xd8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008e80:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008e82:	1cba      	adds	r2, r7, #2
 8008e84:	4633      	mov	r3, r6
 8008e86:	9100      	str	r1, [sp, #0]
 8008e88:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8008e8c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008e90:	f7fa fc26 	bl	80036e0 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008e94:	4925      	ldr	r1, [pc, #148]	; (8008f2c <rt_test_006_007_execute+0xdc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008e96:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008e98:	1cfa      	adds	r2, r7, #3
 8008e9a:	4633      	mov	r3, r6
 8008e9c:	9100      	str	r1, [sp, #0]
 8008e9e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8008ea2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ea6:	f7fa fc1b 	bl	80036e0 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008eaa:	4921      	ldr	r1, [pc, #132]	; (8008f30 <rt_test_006_007_execute+0xe0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008eac:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008eae:	1d3a      	adds	r2, r7, #4
 8008eb0:	4633      	mov	r3, r6
 8008eb2:	9100      	str	r1, [sp, #0]
 8008eb4:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8008eb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ebc:	f7fa fc10 	bl	80036e0 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008ec0:	491c      	ldr	r1, [pc, #112]	; (8008f34 <rt_test_006_007_execute+0xe4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008ec2:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008ec4:	4633      	mov	r3, r6
 8008ec6:	9100      	str	r1, [sp, #0]
 8008ec8:	1d7a      	adds	r2, r7, #5
 8008eca:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8008ece:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ed2:	f7fa fc05 	bl	80036e0 <chThdCreateStatic>
  test_set_step(2);
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008edc:	6120      	str	r0, [r4, #16]
 8008ede:	2320      	movs	r3, #32
 8008ee0:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8008ee4:	f7f9 f8cc 	bl	8002080 <chCondSignalI.constprop.60>
    chCondSignalI(&c1);
 8008ee8:	f7f9 f8ca 	bl	8002080 <chCondSignalI.constprop.60>
    chCondSignalI(&c1);
 8008eec:	f7f9 f8c8 	bl	8002080 <chCondSignalI.constprop.60>
    chCondSignalI(&c1);
 8008ef0:	f7f9 f8c6 	bl	8002080 <chCondSignalI.constprop.60>
    chCondSignalI(&c1);
 8008ef4:	f7f9 f8c4 	bl	8002080 <chCondSignalI.constprop.60>
    chSchRescheduleS();
 8008ef8:	f7fb ff12 	bl	8004d20 <chSchRescheduleS>
 8008efc:	2300      	movs	r3, #0
 8008efe:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008f02:	f7ff f92d 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008f06:	490c      	ldr	r1, [pc, #48]	; (8008f38 <rt_test_006_007_execute+0xe8>)
 8008f08:	480c      	ldr	r0, [pc, #48]	; (8008f3c <rt_test_006_007_execute+0xec>)
}
 8008f0a:	b002      	add	sp, #8
 8008f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008f10:	f7f8 bd5e 	b.w	80019d0 <_test_assert_sequence>
 8008f14:	20000da0 	.word	0x20000da0
 8008f18:	08006701 	.word	0x08006701
 8008f1c:	20001078 	.word	0x20001078
 8008f20:	0800c154 	.word	0x0800c154
 8008f24:	200017a4 	.word	0x200017a4
 8008f28:	0800d0d0 	.word	0x0800d0d0
 8008f2c:	0800c314 	.word	0x0800c314
 8008f30:	0800c0dc 	.word	0x0800c0dc
 8008f34:	0800c0d8 	.word	0x0800c0d8
 8008f38:	0800c1b4 	.word	0x0800c1b4
 8008f3c:	0800c150 	.word	0x0800c150
 8008f40:	2000178c 	.word	0x2000178c
	...

08008f50 <rt_test_005_006_teardown>:
 *   must not change from "not taken".
 * .
 */

static void rt_test_005_006_teardown(void) {
  test_wait_threads();
 8008f50:	f7ff b906 	b.w	8008160 <test_wait_threads>
	...

08008f60 <rt_test_006_004_teardown>:
 8008f60:	f7ff b8fe 	b.w	8008160 <test_wait_threads>
	...

08008f70 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8008f70:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8008f72:	4f2c      	ldr	r7, [pc, #176]	; (8009024 <rt_test_006_001_execute+0xb4>)
  test_set_step(2);
 8008f74:	4e2c      	ldr	r6, [pc, #176]	; (8009028 <rt_test_006_001_execute+0xb8>)
  return chThdGetSelfX()->prio;
 8008f76:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8008f78:	482c      	ldr	r0, [pc, #176]	; (800902c <rt_test_006_001_execute+0xbc>)
 8008f7a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008f7c:	4d2c      	ldr	r5, [pc, #176]	; (8009030 <rt_test_006_001_execute+0xc0>)
static void rt_test_006_001_execute(void) {
 8008f7e:	b083      	sub	sp, #12
  test_set_step(2);
 8008f80:	2302      	movs	r3, #2
 8008f82:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8008f84:	f7fb fb2c 	bl	80045e0 <chMtxLock>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008f88:	4b2a      	ldr	r3, [pc, #168]	; (8009034 <rt_test_006_001_execute+0xc4>)
 8008f8a:	9300      	str	r3, [sp, #0]
  test_set_step(3);
 8008f8c:	2103      	movs	r1, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008f8e:	1c62      	adds	r2, r4, #1
 8008f90:	4b29      	ldr	r3, [pc, #164]	; (8009038 <rt_test_006_001_execute+0xc8>)
  test_set_step(3);
 8008f92:	6031      	str	r1, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008f94:	4829      	ldr	r0, [pc, #164]	; (800903c <rt_test_006_001_execute+0xcc>)
 8008f96:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008f9a:	f7fa fba1 	bl	80036e0 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008f9e:	4b28      	ldr	r3, [pc, #160]	; (8009040 <rt_test_006_001_execute+0xd0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008fa0:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008fa2:	1ca2      	adds	r2, r4, #2
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008faa:	4b23      	ldr	r3, [pc, #140]	; (8009038 <rt_test_006_001_execute+0xc8>)
 8008fac:	4825      	ldr	r0, [pc, #148]	; (8009044 <rt_test_006_001_execute+0xd4>)
 8008fae:	f7fa fb97 	bl	80036e0 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008fb2:	4b25      	ldr	r3, [pc, #148]	; (8009048 <rt_test_006_001_execute+0xd8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008fb4:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008fb6:	1ce2      	adds	r2, r4, #3
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <rt_test_006_001_execute+0xc8>)
 8008fc0:	4822      	ldr	r0, [pc, #136]	; (800904c <rt_test_006_001_execute+0xdc>)
 8008fc2:	f7fa fb8d 	bl	80036e0 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008fc6:	4b22      	ldr	r3, [pc, #136]	; (8009050 <rt_test_006_001_execute+0xe0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008fc8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008fca:	1d22      	adds	r2, r4, #4
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008fd2:	4b19      	ldr	r3, [pc, #100]	; (8009038 <rt_test_006_001_execute+0xc8>)
 8008fd4:	481f      	ldr	r0, [pc, #124]	; (8009054 <rt_test_006_001_execute+0xe4>)
 8008fd6:	f7fa fb83 	bl	80036e0 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008fda:	4b1f      	ldr	r3, [pc, #124]	; (8009058 <rt_test_006_001_execute+0xe8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008fdc:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008fde:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008fe2:	1d62      	adds	r2, r4, #5
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	481d      	ldr	r0, [pc, #116]	; (800905c <rt_test_006_001_execute+0xec>)
 8008fe8:	4b13      	ldr	r3, [pc, #76]	; (8009038 <rt_test_006_001_execute+0xc8>)
 8008fea:	f7fa fb79 	bl	80036e0 <chThdCreateStatic>
  test_set_step(4);
 8008fee:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008ff0:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
 8008ff2:	480e      	ldr	r0, [pc, #56]	; (800902c <rt_test_006_001_execute+0xbc>)
  test_set_step(4);
 8008ff4:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8008ff6:	f7fc fcc3 	bl	8005980 <chMtxUnlock>
    test_wait_threads();
 8008ffa:	f7ff f8b1 	bl	8008160 <test_wait_threads>
 8008ffe:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8009000:	4917      	ldr	r1, [pc, #92]	; (8009060 <rt_test_006_001_execute+0xf0>)
 8009002:	6898      	ldr	r0, [r3, #8]
 8009004:	1b00      	subs	r0, r0, r4
 8009006:	fab0 f080 	clz	r0, r0
 800900a:	0940      	lsrs	r0, r0, #5
 800900c:	f7f8 fbc8 	bl	80017a0 <_test_assert>
 8009010:	b108      	cbz	r0, 8009016 <rt_test_006_001_execute+0xa6>
}
 8009012:	b003      	add	sp, #12
 8009014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009016:	4913      	ldr	r1, [pc, #76]	; (8009064 <rt_test_006_001_execute+0xf4>)
 8009018:	4813      	ldr	r0, [pc, #76]	; (8009068 <rt_test_006_001_execute+0xf8>)
}
 800901a:	b003      	add	sp, #12
 800901c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009020:	f7f8 bcd6 	b.w	80019d0 <_test_assert_sequence>
 8009024:	20000da0 	.word	0x20000da0
 8009028:	2000178c 	.word	0x2000178c
 800902c:	20000c30 	.word	0x20000c30
 8009030:	200017a4 	.word	0x200017a4
 8009034:	0800c154 	.word	0x0800c154
 8009038:	08006a61 	.word	0x08006a61
 800903c:	20001078 	.word	0x20001078
 8009040:	0800d0d0 	.word	0x0800d0d0
 8009044:	200011c0 	.word	0x200011c0
 8009048:	0800c314 	.word	0x0800c314
 800904c:	20001308 	.word	0x20001308
 8009050:	0800c0dc 	.word	0x0800c0dc
 8009054:	20001450 	.word	0x20001450
 8009058:	0800c0d8 	.word	0x0800c0d8
 800905c:	20001598 	.word	0x20001598
 8009060:	0800c118 	.word	0x0800c118
 8009064:	0800c1b4 	.word	0x0800c1b4
 8009068:	0800c150 	.word	0x0800c150
 800906c:	00000000 	.word	0x00000000

08009070 <rt_test_005_005_teardown>:
 8009070:	f7ff b876 	b.w	8008160 <test_wait_threads>
	...

08009080 <rt_test_005_004_execute>:
static void rt_test_005_004_execute(void) {
 8009080:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8009082:	4b26      	ldr	r3, [pc, #152]	; (800911c <rt_test_005_004_execute+0x9c>)
  test_set_step(1);
 8009084:	4c26      	ldr	r4, [pc, #152]	; (8009120 <rt_test_005_004_execute+0xa0>)
  return chThdGetSelfX()->prio;
 8009086:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8009088:	4926      	ldr	r1, [pc, #152]	; (8009124 <rt_test_005_004_execute+0xa4>)
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	4826      	ldr	r0, [pc, #152]	; (8009128 <rt_test_005_004_execute+0xa8>)
 800908e:	4b27      	ldr	r3, [pc, #156]	; (800912c <rt_test_005_004_execute+0xac>)
static void rt_test_005_004_execute(void) {
 8009090:	b082      	sub	sp, #8
  test_set_step(1);
 8009092:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8009094:	9100      	str	r1, [sp, #0]
 8009096:	3201      	adds	r2, #1
  test_set_step(1);
 8009098:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800909a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800909e:	f7fa fb1f 	bl	80036e0 <chThdCreateStatic>
 80090a2:	4b23      	ldr	r3, [pc, #140]	; (8009130 <rt_test_005_004_execute+0xb0>)
  test_set_step(2);
 80090a4:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80090a6:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 80090a8:	6025      	str	r5, [r4, #0]
 80090aa:	2320      	movs	r3, #32
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	4c20      	ldr	r4, [pc, #128]	; (8009134 <rt_test_005_004_execute+0xb4>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 80090b2:	2600      	movs	r6, #0
 80090b4:	e002      	b.n	80090bc <rt_test_005_004_execute+0x3c>
  while (n > (cnt_t)0) {
 80090b6:	2d01      	cmp	r5, #1
 80090b8:	d00e      	beq.n	80090d8 <rt_test_005_004_execute+0x58>
 80090ba:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 80090bc:	68a3      	ldr	r3, [r4, #8]
 80090be:	3301      	adds	r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	60a3      	str	r3, [r4, #8]
 80090c4:	dcf7      	bgt.n	80090b6 <rt_test_005_004_execute+0x36>
  thread_t *tp = tqp->next;
 80090c6:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80090c8:	6803      	ldr	r3, [r0, #0]
 80090ca:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80090cc:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 80090ce:	f7f8 ff1f 	bl	8001f10 <chSchReadyI>
  while (n > (cnt_t)0) {
 80090d2:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 80090d4:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 80090d6:	d1f0      	bne.n	80090ba <rt_test_005_004_execute+0x3a>
    chSchRescheduleS();
 80090d8:	f7fb fe22 	bl	8004d20 <chSchRescheduleS>
 80090dc:	2500      	movs	r5, #0
 80090de:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 80090e2:	f7ff f83d 	bl	8008160 <test_wait_threads>
 80090e6:	2320      	movs	r3, #32
 80090e8:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 80090ec:	68a0      	ldr	r0, [r4, #8]
 80090ee:	4912      	ldr	r1, [pc, #72]	; (8009138 <rt_test_005_004_execute+0xb8>)
 80090f0:	f1a0 0001 	sub.w	r0, r0, #1
 80090f4:	fab0 f080 	clz	r0, r0
 80090f8:	0940      	lsrs	r0, r0, #5
 80090fa:	f7f8 fb51 	bl	80017a0 <_test_assert>
 80090fe:	b118      	cbz	r0, 8009108 <rt_test_005_004_execute+0x88>
 8009100:	f385 8811 	msr	BASEPRI, r5
}
 8009104:	b002      	add	sp, #8
 8009106:	bd70      	pop	{r4, r5, r6, pc}
 8009108:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 800910c:	490b      	ldr	r1, [pc, #44]	; (800913c <rt_test_005_004_execute+0xbc>)
 800910e:	4805      	ldr	r0, [pc, #20]	; (8009124 <rt_test_005_004_execute+0xa4>)
}
 8009110:	b002      	add	sp, #8
 8009112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 8009116:	f7f8 bc5b 	b.w	80019d0 <_test_assert_sequence>
 800911a:	bf00      	nop
 800911c:	20000da0 	.word	0x20000da0
 8009120:	2000178c 	.word	0x2000178c
 8009124:	0800c0d8 	.word	0x0800c0d8
 8009128:	20001078 	.word	0x20001078
 800912c:	08004731 	.word	0x08004731
 8009130:	200017a4 	.word	0x200017a4
 8009134:	2000105c 	.word	0x2000105c
 8009138:	0800c024 	.word	0x0800c024
 800913c:	0800c1b4 	.word	0x0800c1b4

08009140 <rt_test_005_003_execute>:
static void rt_test_005_003_execute(void) {
 8009140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8009144:	4d4e      	ldr	r5, [pc, #312]	; (8009280 <rt_test_005_003_execute+0x140>)
 8009146:	2001      	movs	r0, #1
static void rt_test_005_003_execute(void) {
 8009148:	b083      	sub	sp, #12
  test_set_step(1);
 800914a:	6028      	str	r0, [r5, #0]
 800914c:	2320      	movs	r3, #32
 800914e:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8009152:	4c4c      	ldr	r4, [pc, #304]	; (8009284 <rt_test_005_003_execute+0x144>)
 8009154:	68a3      	ldr	r3, [r4, #8]
 8009156:	3b01      	subs	r3, #1
 8009158:	bf5c      	itt	pl
 800915a:	60a3      	strpl	r3, [r4, #8]
 800915c:	2000      	movpl	r0, #0
 800915e:	2300      	movs	r3, #0
 8009160:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009164:	4948      	ldr	r1, [pc, #288]	; (8009288 <rt_test_005_003_execute+0x148>)
 8009166:	f7f8 fb1b 	bl	80017a0 <_test_assert>
 800916a:	b110      	cbz	r0, 8009172 <rt_test_005_003_execute+0x32>
}
 800916c:	b003      	add	sp, #12
 800916e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009172:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009174:	4945      	ldr	r1, [pc, #276]	; (800928c <rt_test_005_003_execute+0x14c>)
 8009176:	1b00      	subs	r0, r0, r4
 8009178:	fab0 f080 	clz	r0, r0
 800917c:	0940      	lsrs	r0, r0, #5
 800917e:	f7f8 fb0f 	bl	80017a0 <_test_assert>
 8009182:	2800      	cmp	r0, #0
 8009184:	d1f2      	bne.n	800916c <rt_test_005_003_execute+0x2c>
    test_assert(sem1.cnt == 0, "counter not zero");
 8009186:	68a0      	ldr	r0, [r4, #8]
 8009188:	4941      	ldr	r1, [pc, #260]	; (8009290 <rt_test_005_003_execute+0x150>)
 800918a:	fab0 f080 	clz	r0, r0
 800918e:	0940      	lsrs	r0, r0, #5
 8009190:	f7f8 fb06 	bl	80017a0 <_test_assert>
 8009194:	4601      	mov	r1, r0
 8009196:	2800      	cmp	r0, #0
 8009198:	d1e8      	bne.n	800916c <rt_test_005_003_execute+0x2c>
  return ch.rlist.current;
 800919a:	4a3e      	ldr	r2, [pc, #248]	; (8009294 <rt_test_005_003_execute+0x154>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800919c:	4b3e      	ldr	r3, [pc, #248]	; (8009298 <rt_test_005_003_execute+0x158>)
  return chThdGetSelfX()->prio;
 800919e:	6992      	ldr	r2, [r2, #24]
 80091a0:	483e      	ldr	r0, [pc, #248]	; (800929c <rt_test_005_003_execute+0x15c>)
 80091a2:	6892      	ldr	r2, [r2, #8]
 80091a4:	9100      	str	r1, [sp, #0]
  test_set_step(2);
 80091a6:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80091a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80091ac:	3a01      	subs	r2, #1
  test_set_step(2);
 80091ae:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80091b0:	f7fa fa96 	bl	80036e0 <chThdCreateStatic>
 80091b4:	4b3a      	ldr	r3, [pc, #232]	; (80092a0 <rt_test_005_003_execute+0x160>)
 80091b6:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 80091b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80091bc:	f7fa fba8 	bl	8003910 <chSemWaitTimeout.constprop.68>
 80091c0:	4606      	mov	r6, r0
    test_wait_threads();
 80091c2:	f7fe ffcd 	bl	8008160 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 80091c6:	fab6 f086 	clz	r0, r6
 80091ca:	0940      	lsrs	r0, r0, #5
 80091cc:	492e      	ldr	r1, [pc, #184]	; (8009288 <rt_test_005_003_execute+0x148>)
 80091ce:	f7f8 fae7 	bl	80017a0 <_test_assert>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1ca      	bne.n	800916c <rt_test_005_003_execute+0x2c>
 80091d6:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80091d8:	492c      	ldr	r1, [pc, #176]	; (800928c <rt_test_005_003_execute+0x14c>)
 80091da:	1b00      	subs	r0, r0, r4
 80091dc:	fab0 f080 	clz	r0, r0
 80091e0:	0940      	lsrs	r0, r0, #5
 80091e2:	f7f8 fadd 	bl	80017a0 <_test_assert>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d1c0      	bne.n	800916c <rt_test_005_003_execute+0x2c>
    test_assert(sem1.cnt == 0, "counter not zero");
 80091ea:	68a0      	ldr	r0, [r4, #8]
 80091ec:	4928      	ldr	r1, [pc, #160]	; (8009290 <rt_test_005_003_execute+0x150>)
 80091ee:	fab0 f080 	clz	r0, r0
 80091f2:	0940      	lsrs	r0, r0, #5
 80091f4:	f7f8 fad4 	bl	80017a0 <_test_assert>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d1b7      	bne.n	800916c <rt_test_005_003_execute+0x2c>
  test_set_step(3);
 80091fc:	2303      	movs	r3, #3
 80091fe:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8009200:	f7fa febe 	bl	8003f80 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009204:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009288 <rt_test_005_003_execute+0x148>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009208:	4f20      	ldr	r7, [pc, #128]	; (800928c <rt_test_005_003_execute+0x14c>)
      test_assert(sem1.cnt == 0, "counter not zero");
 800920a:	4e21      	ldr	r6, [pc, #132]	; (8009290 <rt_test_005_003_execute+0x150>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 800920c:	2541      	movs	r5, #65	; 0x41
 800920e:	4681      	mov	r9, r0
      test_emit_token('A' + i);
 8009210:	4628      	mov	r0, r5
 8009212:	f7f8 fb65 	bl	80018e0 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 8009216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800921a:	f7fa fb79 	bl	8003910 <chSemWaitTimeout.constprop.68>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800921e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8009222:	fab0 f080 	clz	r0, r0
 8009226:	4641      	mov	r1, r8
 8009228:	0940      	lsrs	r0, r0, #5
 800922a:	f7f8 fab9 	bl	80017a0 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800922e:	4639      	mov	r1, r7
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009230:	2800      	cmp	r0, #0
 8009232:	d19b      	bne.n	800916c <rt_test_005_003_execute+0x2c>
 8009234:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009236:	1b00      	subs	r0, r0, r4
 8009238:	fab0 f080 	clz	r0, r0
 800923c:	0940      	lsrs	r0, r0, #5
 800923e:	f7f8 faaf 	bl	80017a0 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 8009242:	4631      	mov	r1, r6
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009244:	2800      	cmp	r0, #0
 8009246:	d191      	bne.n	800916c <rt_test_005_003_execute+0x2c>
      test_assert(sem1.cnt == 0, "counter not zero");
 8009248:	68a0      	ldr	r0, [r4, #8]
 800924a:	fab0 f080 	clz	r0, r0
 800924e:	0940      	lsrs	r0, r0, #5
 8009250:	f7f8 faa6 	bl	80017a0 <_test_assert>
 8009254:	3501      	adds	r5, #1
 8009256:	b2ed      	uxtb	r5, r5
 8009258:	2800      	cmp	r0, #0
 800925a:	d187      	bne.n	800916c <rt_test_005_003_execute+0x2c>
    for (i = 0; i < 5; i++) {
 800925c:	2d46      	cmp	r5, #70	; 0x46
 800925e:	d1d7      	bne.n	8009210 <rt_test_005_003_execute+0xd0>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009260:	4910      	ldr	r1, [pc, #64]	; (80092a4 <rt_test_005_003_execute+0x164>)
 8009262:	4811      	ldr	r0, [pc, #68]	; (80092a8 <rt_test_005_003_execute+0x168>)
 8009264:	f7f8 fbb4 	bl	80019d0 <_test_assert_sequence>
 8009268:	2800      	cmp	r0, #0
 800926a:	f47f af7f 	bne.w	800916c <rt_test_005_003_execute+0x2c>
    test_assert_time_window(target_time,
 800926e:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 8009272:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 8009276:	b003      	add	sp, #12
 8009278:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 800927c:	f7f8 b868 	b.w	8001350 <_test_assert_time_window.constprop.1>
 8009280:	2000178c 	.word	0x2000178c
 8009284:	2000105c 	.word	0x2000105c
 8009288:	0800afd0 	.word	0x0800afd0
 800928c:	0800c044 	.word	0x0800c044
 8009290:	0800c054 	.word	0x0800c054
 8009294:	20000da0 	.word	0x20000da0
 8009298:	080058f1 	.word	0x080058f1
 800929c:	20001078 	.word	0x20001078
 80092a0:	200017a4 	.word	0x200017a4
 80092a4:	0800c1b4 	.word	0x0800c1b4
 80092a8:	0800c150 	.word	0x0800c150
 80092ac:	00000000 	.word	0x00000000

080092b0 <rt_test_005_002_execute>:
static void rt_test_005_002_execute(void) {
 80092b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80092b4:	4f32      	ldr	r7, [pc, #200]	; (8009380 <rt_test_005_002_execute+0xd0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80092b6:	4e33      	ldr	r6, [pc, #204]	; (8009384 <rt_test_005_002_execute+0xd4>)
  return chThdGetSelfX()->prio;
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	4c33      	ldr	r4, [pc, #204]	; (8009388 <rt_test_005_002_execute+0xd8>)
 80092bc:	689a      	ldr	r2, [r3, #8]
  test_set_step(1);
 80092be:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80093b0 <rt_test_005_002_execute+0x100>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80092c2:	4b32      	ldr	r3, [pc, #200]	; (800938c <rt_test_005_002_execute+0xdc>)
static void rt_test_005_002_execute(void) {
 80092c4:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80092c6:	3205      	adds	r2, #5
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4620      	mov	r0, r4
 80092cc:	4633      	mov	r3, r6
  test_set_step(1);
 80092ce:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80092d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 80092d4:	f8c8 5000 	str.w	r5, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80092d8:	f7fa fa02 	bl	80036e0 <chThdCreateStatic>
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	4d2c      	ldr	r5, [pc, #176]	; (8009390 <rt_test_005_002_execute+0xe0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	492c      	ldr	r1, [pc, #176]	; (8009394 <rt_test_005_002_execute+0xe4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80092e4:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80092e6:	4633      	mov	r3, r6
 80092e8:	9100      	str	r1, [sp, #0]
 80092ea:	3201      	adds	r2, #1
 80092ec:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 80092f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80092f4:	f7fa f9f4 	bl	80036e0 <chThdCreateStatic>
 80092f8:	69bb      	ldr	r3, [r7, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80092fa:	4927      	ldr	r1, [pc, #156]	; (8009398 <rt_test_005_002_execute+0xe8>)
 80092fc:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80092fe:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8009300:	4633      	mov	r3, r6
 8009302:	9100      	str	r1, [sp, #0]
 8009304:	3203      	adds	r2, #3
 8009306:	f504 7024 	add.w	r0, r4, #656	; 0x290
 800930a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800930e:	f7fa f9e7 	bl	80036e0 <chThdCreateStatic>
 8009312:	69bb      	ldr	r3, [r7, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8009314:	4921      	ldr	r1, [pc, #132]	; (800939c <rt_test_005_002_execute+0xec>)
 8009316:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8009318:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800931a:	4633      	mov	r3, r6
 800931c:	9100      	str	r1, [sp, #0]
 800931e:	3204      	adds	r2, #4
 8009320:	f504 7076 	add.w	r0, r4, #984	; 0x3d8
 8009324:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009328:	f7fa f9da 	bl	80036e0 <chThdCreateStatic>
 800932c:	69bb      	ldr	r3, [r7, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800932e:	491c      	ldr	r1, [pc, #112]	; (80093a0 <rt_test_005_002_execute+0xf0>)
 8009330:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8009332:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8009334:	3202      	adds	r2, #2
 8009336:	4633      	mov	r3, r6
 8009338:	9100      	str	r1, [sp, #0]
 800933a:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800933e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009342:	f7fa f9cd 	bl	80036e0 <chThdCreateStatic>
    chSemSignal(&sem1);
 8009346:	4c17      	ldr	r4, [pc, #92]	; (80093a4 <rt_test_005_002_execute+0xf4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8009348:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 800934a:	2302      	movs	r3, #2
    chSemSignal(&sem1);
 800934c:	4620      	mov	r0, r4
  test_set_step(2);
 800934e:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 8009352:	f7fa f9a5 	bl	80036a0 <chSemSignal>
    chSemSignal(&sem1);
 8009356:	4620      	mov	r0, r4
 8009358:	f7fa f9a2 	bl	80036a0 <chSemSignal>
    chSemSignal(&sem1);
 800935c:	4620      	mov	r0, r4
 800935e:	f7fa f99f 	bl	80036a0 <chSemSignal>
    chSemSignal(&sem1);
 8009362:	4620      	mov	r0, r4
 8009364:	f7fa f99c 	bl	80036a0 <chSemSignal>
    chSemSignal(&sem1);
 8009368:	4620      	mov	r0, r4
 800936a:	f7fa f999 	bl	80036a0 <chSemSignal>
    test_wait_threads();
 800936e:	f7fe fef7 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009372:	490d      	ldr	r1, [pc, #52]	; (80093a8 <rt_test_005_002_execute+0xf8>)
 8009374:	480d      	ldr	r0, [pc, #52]	; (80093ac <rt_test_005_002_execute+0xfc>)
}
 8009376:	b002      	add	sp, #8
 8009378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800937c:	f7f8 bb28 	b.w	80019d0 <_test_assert_sequence>
 8009380:	20000da0 	.word	0x20000da0
 8009384:	08004731 	.word	0x08004731
 8009388:	20001078 	.word	0x20001078
 800938c:	0800c0d8 	.word	0x0800c0d8
 8009390:	200017a4 	.word	0x200017a4
 8009394:	0800c0dc 	.word	0x0800c0dc
 8009398:	0800c314 	.word	0x0800c314
 800939c:	0800d0d0 	.word	0x0800d0d0
 80093a0:	0800c154 	.word	0x0800c154
 80093a4:	2000105c 	.word	0x2000105c
 80093a8:	0800c1b4 	.word	0x0800c1b4
 80093ac:	0800c150 	.word	0x0800c150
 80093b0:	2000178c 	.word	0x2000178c
	...

080093c0 <rt_test_004_001_execute>:

static void rt_test_004_001_execute(void) {
 80093c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80093c4:	4d33      	ldr	r5, [pc, #204]	; (8009494 <rt_test_004_001_execute+0xd4>)
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 80093c6:	4f34      	ldr	r7, [pc, #208]	; (8009498 <rt_test_004_001_execute+0xd8>)
  return chThdGetSelfX()->prio;
 80093c8:	69ab      	ldr	r3, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80093ca:	4934      	ldr	r1, [pc, #208]	; (800949c <rt_test_004_001_execute+0xdc>)
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	4834      	ldr	r0, [pc, #208]	; (80094a0 <rt_test_004_001_execute+0xe0>)
 80093d0:	4b34      	ldr	r3, [pc, #208]	; (80094a4 <rt_test_004_001_execute+0xe4>)
static void rt_test_004_001_execute(void) {
 80093d2:	b082      	sub	sp, #8
  test_set_step(1);
 80093d4:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80093d6:	9100      	str	r1, [sp, #0]
 80093d8:	3a01      	subs	r2, #1
 80093da:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 80093de:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80093e0:	f7fa f97e 	bl	80036e0 <chThdCreateStatic>
 80093e4:	4b30      	ldr	r3, [pc, #192]	; (80094a8 <rt_test_004_001_execute+0xe8>)
 80093e6:	2620      	movs	r6, #32
 80093e8:	6018      	str	r0, [r3, #0]
 80093ea:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 80093ee:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 80093f0:	4c2e      	ldr	r4, [pc, #184]	; (80094ac <rt_test_004_001_execute+0xec>)
  tp->u.wttrp = trp;
 80093f2:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 80093f4:	2003      	movs	r0, #3
  *trp = tp;
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	f7fa f9f2 	bl	80037e0 <chSchGoSleepS>
  return currp->u.rdymsg;
 80093fc:	69aa      	ldr	r2, [r5, #24]
 80093fe:	2300      	movs	r3, #0
 8009400:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 8009404:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	4929      	ldr	r1, [pc, #164]	; (80094b0 <rt_test_004_001_execute+0xf0>)
 800940c:	fab0 f080 	clz	r0, r0
 8009410:	0940      	lsrs	r0, r0, #5
 8009412:	f7f8 f9c5 	bl	80017a0 <_test_assert>
 8009416:	b110      	cbz	r0, 800941e <rt_test_004_001_execute+0x5e>
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
}
 8009418:	b002      	add	sp, #8
 800941a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 800941e:	fab8 f088 	clz	r0, r8
 8009422:	0940      	lsrs	r0, r0, #5
 8009424:	4923      	ldr	r1, [pc, #140]	; (80094b4 <rt_test_004_001_execute+0xf4>)
 8009426:	f7f8 f9bb 	bl	80017a0 <_test_assert>
 800942a:	4680      	mov	r8, r0
 800942c:	2800      	cmp	r0, #0
 800942e:	d1f3      	bne.n	8009418 <rt_test_004_001_execute+0x58>
    test_wait_threads();
 8009430:	f7fe fe96 	bl	8008160 <test_wait_threads>
  test_set_step(2);
 8009434:	2302      	movs	r3, #2
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	f386 8811 	msr	BASEPRI, r6
 800943c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009440:	69ab      	ldr	r3, [r5, #24]
 8009442:	6a55      	ldr	r5, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 8009444:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8009446:	f242 7110 	movw	r1, #10000	; 0x2710
 800944a:	2003      	movs	r0, #3
  *trp = tp;
 800944c:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800944e:	f7fa fa37 	bl	80038c0 <chSchGoSleepTimeoutS>
 8009452:	4606      	mov	r6, r0
 8009454:	f388 8811 	msr	BASEPRI, r8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 8009458:	f505 511c 	add.w	r1, r5, #9984	; 0x2700
 800945c:	4608      	mov	r0, r1
 800945e:	3010      	adds	r0, #16
 8009460:	3113      	adds	r1, #19
 8009462:	f7f7 ff75 	bl	8001350 <_test_assert_time_window.constprop.1>
 8009466:	2800      	cmp	r0, #0
 8009468:	d1d6      	bne.n	8009418 <rt_test_004_001_execute+0x58>
    test_assert(NULL == tr1, "not NULL");
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	4910      	ldr	r1, [pc, #64]	; (80094b0 <rt_test_004_001_execute+0xf0>)
 800946e:	fab0 f080 	clz	r0, r0
 8009472:	0940      	lsrs	r0, r0, #5
 8009474:	f7f8 f994 	bl	80017a0 <_test_assert>
 8009478:	2800      	cmp	r0, #0
 800947a:	d1cd      	bne.n	8009418 <rt_test_004_001_execute+0x58>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800947c:	f1a6 30ff 	sub.w	r0, r6, #4294967295
 8009480:	fab0 f080 	clz	r0, r0
 8009484:	490b      	ldr	r1, [pc, #44]	; (80094b4 <rt_test_004_001_execute+0xf4>)
 8009486:	0940      	lsrs	r0, r0, #5
}
 8009488:	b002      	add	sp, #8
 800948a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800948e:	f7f8 b987 	b.w	80017a0 <_test_assert>
 8009492:	bf00      	nop
 8009494:	20000da0 	.word	0x20000da0
 8009498:	2000178c 	.word	0x2000178c
 800949c:	0800c0d8 	.word	0x0800c0d8
 80094a0:	20001078 	.word	0x20001078
 80094a4:	08005951 	.word	0x08005951
 80094a8:	200017a4 	.word	0x200017a4
 80094ac:	200017b8 	.word	0x200017b8
 80094b0:	0800bfac 	.word	0x0800bfac
 80094b4:	0800bfb8 	.word	0x0800bfb8
	...

080094c0 <rt_test_003_002_execute>:
 * - [3.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_003_002_execute(void) {
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	4d6f      	ldr	r5, [pc, #444]	; (8009684 <rt_test_003_002_execute+0x1c4>)

  /* [3.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 80094c6:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 80096b4 <rt_test_003_002_execute+0x1f4>
  return chThdGetSelfX()->prio;
 80094ca:	69ab      	ldr	r3, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80094cc:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 80096b8 <rt_test_003_002_execute+0x1f8>
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	486d      	ldr	r0, [pc, #436]	; (8009688 <rt_test_003_002_execute+0x1c8>)
 80094d4:	4b6d      	ldr	r3, [pc, #436]	; (800968c <rt_test_003_002_execute+0x1cc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80094d6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80096bc <rt_test_003_002_execute+0x1fc>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80094da:	4e6d      	ldr	r6, [pc, #436]	; (8009690 <rt_test_003_002_execute+0x1d0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80094dc:	4f6d      	ldr	r7, [pc, #436]	; (8009694 <rt_test_003_002_execute+0x1d4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80094de:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80096c0 <rt_test_003_002_execute+0x200>
static void rt_test_003_002_execute(void) {
 80094e2:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80094e4:	3a05      	subs	r2, #5
  test_set_step(1);
 80094e6:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80094e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80094ec:	f8cd 9000 	str.w	r9, [sp]
  test_set_step(1);
 80094f0:	f8ca 4000 	str.w	r4, [sl]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80094f4:	f7fa f8f4 	bl	80036e0 <chThdCreateStatic>
 80094f8:	69ab      	ldr	r3, [r5, #24]
 80094fa:	4c67      	ldr	r4, [pc, #412]	; (8009698 <rt_test_003_002_execute+0x1d8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80094fc:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80094fe:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8009500:	3a04      	subs	r2, #4
 8009502:	4b62      	ldr	r3, [pc, #392]	; (800968c <rt_test_003_002_execute+0x1cc>)
 8009504:	f8cd b000 	str.w	fp, [sp]
 8009508:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800950c:	4863      	ldr	r0, [pc, #396]	; (800969c <rt_test_003_002_execute+0x1dc>)
 800950e:	f7fa f8e7 	bl	80036e0 <chThdCreateStatic>
 8009512:	69ab      	ldr	r3, [r5, #24]
 8009514:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	4861      	ldr	r0, [pc, #388]	; (80096a0 <rt_test_003_002_execute+0x1e0>)
 800951a:	4b5c      	ldr	r3, [pc, #368]	; (800968c <rt_test_003_002_execute+0x1cc>)
 800951c:	9600      	str	r6, [sp, #0]
 800951e:	3a03      	subs	r2, #3
 8009520:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009524:	f7fa f8dc 	bl	80036e0 <chThdCreateStatic>
 8009528:	69ab      	ldr	r3, [r5, #24]
 800952a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800952c:	689a      	ldr	r2, [r3, #8]
 800952e:	485d      	ldr	r0, [pc, #372]	; (80096a4 <rt_test_003_002_execute+0x1e4>)
 8009530:	4b56      	ldr	r3, [pc, #344]	; (800968c <rt_test_003_002_execute+0x1cc>)
 8009532:	9700      	str	r7, [sp, #0]
 8009534:	3a02      	subs	r2, #2
 8009536:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800953a:	f7fa f8d1 	bl	80036e0 <chThdCreateStatic>
 800953e:	69ab      	ldr	r3, [r5, #24]
 8009540:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	4858      	ldr	r0, [pc, #352]	; (80096a8 <rt_test_003_002_execute+0x1e8>)
 8009546:	4b51      	ldr	r3, [pc, #324]	; (800968c <rt_test_003_002_execute+0x1cc>)
 8009548:	f8cd 8000 	str.w	r8, [sp]
 800954c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009550:	3a01      	subs	r2, #1
 8009552:	f7fa f8c5 	bl	80036e0 <chThdCreateStatic>
 8009556:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8009558:	f7fe fe02 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800955c:	4953      	ldr	r1, [pc, #332]	; (80096ac <rt_test_003_002_execute+0x1ec>)
 800955e:	4854      	ldr	r0, [pc, #336]	; (80096b0 <rt_test_003_002_execute+0x1f0>)
 8009560:	f7f8 fa36 	bl	80019d0 <_test_assert_sequence>
 8009564:	b110      	cbz	r0, 800956c <rt_test_003_002_execute+0xac>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 8009566:	b003      	add	sp, #12
 8009568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956c:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800956e:	4b47      	ldr	r3, [pc, #284]	; (800968c <rt_test_003_002_execute+0x1cc>)
 8009570:	6892      	ldr	r2, [r2, #8]
 8009572:	484d      	ldr	r0, [pc, #308]	; (80096a8 <rt_test_003_002_execute+0x1e8>)
 8009574:	f8cd 8000 	str.w	r8, [sp]
  test_set_step(2);
 8009578:	f04f 0c02 	mov.w	ip, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800957c:	3a01      	subs	r2, #1
 800957e:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 8009582:	f8ca c000 	str.w	ip, [sl]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8009586:	f7fa f8ab 	bl	80036e0 <chThdCreateStatic>
 800958a:	69ab      	ldr	r3, [r5, #24]
 800958c:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	4844      	ldr	r0, [pc, #272]	; (80096a4 <rt_test_003_002_execute+0x1e4>)
 8009592:	4b3e      	ldr	r3, [pc, #248]	; (800968c <rt_test_003_002_execute+0x1cc>)
 8009594:	9700      	str	r7, [sp, #0]
 8009596:	3a02      	subs	r2, #2
 8009598:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800959c:	f7fa f8a0 	bl	80036e0 <chThdCreateStatic>
 80095a0:	69ab      	ldr	r3, [r5, #24]
 80095a2:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	483e      	ldr	r0, [pc, #248]	; (80096a0 <rt_test_003_002_execute+0x1e0>)
 80095a8:	4b38      	ldr	r3, [pc, #224]	; (800968c <rt_test_003_002_execute+0x1cc>)
 80095aa:	9600      	str	r6, [sp, #0]
 80095ac:	3a03      	subs	r2, #3
 80095ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80095b2:	f7fa f895 	bl	80036e0 <chThdCreateStatic>
 80095b6:	69ab      	ldr	r3, [r5, #24]
 80095b8:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	4837      	ldr	r0, [pc, #220]	; (800969c <rt_test_003_002_execute+0x1dc>)
 80095be:	4b33      	ldr	r3, [pc, #204]	; (800968c <rt_test_003_002_execute+0x1cc>)
 80095c0:	f8cd b000 	str.w	fp, [sp]
 80095c4:	3a04      	subs	r2, #4
 80095c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80095ca:	f7fa f889 	bl	80036e0 <chThdCreateStatic>
 80095ce:	69ab      	ldr	r3, [r5, #24]
 80095d0:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	482c      	ldr	r0, [pc, #176]	; (8009688 <rt_test_003_002_execute+0x1c8>)
 80095d6:	4b2d      	ldr	r3, [pc, #180]	; (800968c <rt_test_003_002_execute+0x1cc>)
 80095d8:	f8cd 9000 	str.w	r9, [sp]
 80095dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80095e0:	3a05      	subs	r2, #5
 80095e2:	f7fa f87d 	bl	80036e0 <chThdCreateStatic>
 80095e6:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 80095e8:	f7fe fdba 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80095ec:	492f      	ldr	r1, [pc, #188]	; (80096ac <rt_test_003_002_execute+0x1ec>)
 80095ee:	4830      	ldr	r0, [pc, #192]	; (80096b0 <rt_test_003_002_execute+0x1f0>)
 80095f0:	f7f8 f9ee 	bl	80019d0 <_test_assert_sequence>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d1b6      	bne.n	8009566 <rt_test_003_002_execute+0xa6>
 80095f8:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80095fa:	4b24      	ldr	r3, [pc, #144]	; (800968c <rt_test_003_002_execute+0x1cc>)
 80095fc:	6892      	ldr	r2, [r2, #8]
 80095fe:	f8cd b000 	str.w	fp, [sp]
  test_set_step(3);
 8009602:	2003      	movs	r0, #3
 8009604:	f8ca 0000 	str.w	r0, [sl]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8009608:	3a04      	subs	r2, #4
 800960a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800960e:	4823      	ldr	r0, [pc, #140]	; (800969c <rt_test_003_002_execute+0x1dc>)
 8009610:	f7fa f866 	bl	80036e0 <chThdCreateStatic>
 8009614:	69ab      	ldr	r3, [r5, #24]
 8009616:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	481b      	ldr	r0, [pc, #108]	; (8009688 <rt_test_003_002_execute+0x1c8>)
 800961c:	4b1b      	ldr	r3, [pc, #108]	; (800968c <rt_test_003_002_execute+0x1cc>)
 800961e:	f8cd 9000 	str.w	r9, [sp]
 8009622:	3a05      	subs	r2, #5
 8009624:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009628:	f7fa f85a 	bl	80036e0 <chThdCreateStatic>
 800962c:	69ab      	ldr	r3, [r5, #24]
 800962e:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	481d      	ldr	r0, [pc, #116]	; (80096a8 <rt_test_003_002_execute+0x1e8>)
 8009634:	4b15      	ldr	r3, [pc, #84]	; (800968c <rt_test_003_002_execute+0x1cc>)
 8009636:	f8cd 8000 	str.w	r8, [sp]
 800963a:	3a01      	subs	r2, #1
 800963c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009640:	f7fa f84e 	bl	80036e0 <chThdCreateStatic>
 8009644:	69ab      	ldr	r3, [r5, #24]
 8009646:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	4816      	ldr	r0, [pc, #88]	; (80096a4 <rt_test_003_002_execute+0x1e4>)
 800964c:	4b0f      	ldr	r3, [pc, #60]	; (800968c <rt_test_003_002_execute+0x1cc>)
 800964e:	9700      	str	r7, [sp, #0]
 8009650:	3a02      	subs	r2, #2
 8009652:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009656:	f7fa f843 	bl	80036e0 <chThdCreateStatic>
 800965a:	69ab      	ldr	r3, [r5, #24]
 800965c:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	480f      	ldr	r0, [pc, #60]	; (80096a0 <rt_test_003_002_execute+0x1e0>)
 8009662:	4b0a      	ldr	r3, [pc, #40]	; (800968c <rt_test_003_002_execute+0x1cc>)
 8009664:	9600      	str	r6, [sp, #0]
 8009666:	3a03      	subs	r2, #3
 8009668:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800966c:	f7fa f838 	bl	80036e0 <chThdCreateStatic>
 8009670:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8009672:	f7fe fd75 	bl	8008160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009676:	490d      	ldr	r1, [pc, #52]	; (80096ac <rt_test_003_002_execute+0x1ec>)
 8009678:	480d      	ldr	r0, [pc, #52]	; (80096b0 <rt_test_003_002_execute+0x1f0>)
}
 800967a:	b003      	add	sp, #12
 800967c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009680:	f7f8 b9a6 	b.w	80019d0 <_test_assert_sequence>
 8009684:	20000da0 	.word	0x20000da0
 8009688:	20001078 	.word	0x20001078
 800968c:	08001941 	.word	0x08001941
 8009690:	0800c314 	.word	0x0800c314
 8009694:	0800c0dc 	.word	0x0800c0dc
 8009698:	200017a4 	.word	0x200017a4
 800969c:	200011c0 	.word	0x200011c0
 80096a0:	20001308 	.word	0x20001308
 80096a4:	20001450 	.word	0x20001450
 80096a8:	20001598 	.word	0x20001598
 80096ac:	0800c1b4 	.word	0x0800c1b4
 80096b0:	0800c150 	.word	0x0800c150
 80096b4:	2000178c 	.word	0x2000178c
 80096b8:	0800c154 	.word	0x0800c154
 80096bc:	0800d0d0 	.word	0x0800d0d0
 80096c0:	0800c0d8 	.word	0x0800c0d8
	...

080096d0 <cmd_test.lto_priv.99>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80096d0:	b530      	push	{r4, r5, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 80096d2:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80096d4:	b083      	sub	sp, #12
 80096d6:	4604      	mov	r4, r0
  if (argc != 1) {
 80096d8:	d11c      	bne.n	8009714 <cmd_test.lto_priv.99+0x44>
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 80096da:	6815      	ldr	r5, [r2, #0]
 80096dc:	4916      	ldr	r1, [pc, #88]	; (8009738 <cmd_test.lto_priv.99+0x68>)
 80096de:	4628      	mov	r0, r5
 80096e0:	f7f7 fc92 	bl	8001008 <strcmp>
 80096e4:	b1f0      	cbz	r0, 8009724 <cmd_test.lto_priv.99+0x54>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 80096e6:	4628      	mov	r0, r5
 80096e8:	4914      	ldr	r1, [pc, #80]	; (800973c <cmd_test.lto_priv.99+0x6c>)
 80096ea:	f7f7 fc8d 	bl	8001008 <strcmp>
 80096ee:	b988      	cbnz	r0, 8009714 <cmd_test.lto_priv.99+0x44>
    tfp = test_oslib;
 80096f0:	4913      	ldr	r1, [pc, #76]	; (8009740 <cmd_test.lto_priv.99+0x70>)
  return ch.rlist.current;
 80096f2:	4b14      	ldr	r3, [pc, #80]	; (8009744 <cmd_test.lto_priv.99+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 80096f4:	4a14      	ldr	r2, [pc, #80]	; (8009748 <cmd_test.lto_priv.99+0x78>)
  return chThdGetSelfX()->prio;
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2000      	movs	r0, #0
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	e9cd 1400 	strd	r1, r4, [sp]
 8009700:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8009704:	f7fc fa14 	bl	8005b30 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 8009708:	b170      	cbz	r0, 8009728 <cmd_test.lto_priv.99+0x58>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 800970a:	b003      	add	sp, #12
 800970c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chThdWait(tp);
 8009710:	f7fe ba26 	b.w	8007b60 <chThdWait>
    shellUsage(chp, "test rt|oslib");
 8009714:	4a0d      	ldr	r2, [pc, #52]	; (800974c <cmd_test.lto_priv.99+0x7c>)
 8009716:	490e      	ldr	r1, [pc, #56]	; (8009750 <cmd_test.lto_priv.99+0x80>)
 8009718:	4620      	mov	r0, r4
}
 800971a:	b003      	add	sp, #12
 800971c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    shellUsage(chp, "test rt|oslib");
 8009720:	f7f9 ba9e 	b.w	8002c60 <chprintf>
    tfp = test_rt;
 8009724:	490b      	ldr	r1, [pc, #44]	; (8009754 <cmd_test.lto_priv.99+0x84>)
 8009726:	e7e4      	b.n	80096f2 <cmd_test.lto_priv.99+0x22>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 8009728:	490b      	ldr	r1, [pc, #44]	; (8009758 <cmd_test.lto_priv.99+0x88>)
 800972a:	4620      	mov	r0, r4
}
 800972c:	b003      	add	sp, #12
 800972e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 8009732:	f7f9 ba95 	b.w	8002c60 <chprintf>
 8009736:	bf00      	nop
 8009738:	0800adc0 	.word	0x0800adc0
 800973c:	0800adb8 	.word	0x0800adb8
 8009740:	080043a1 	.word	0x080043a1
 8009744:	20000da0 	.word	0x20000da0
 8009748:	0800cc64 	.word	0x0800cc64
 800974c:	0800adb0 	.word	0x0800adb0
 8009750:	0800ad0c 	.word	0x0800ad0c
 8009754:	08004391 	.word	0x08004391
 8009758:	0800adc4 	.word	0x0800adc4
 800975c:	00000000 	.word	0x00000000

08009760 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	2320      	movs	r3, #32
 8009764:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 8009768:	6884      	ldr	r4, [r0, #8]
  sp->cnt = n;
 800976a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 800976c:	3401      	adds	r4, #1
 800976e:	2c00      	cmp	r4, #0
 8009770:	dc0c      	bgt.n	800978c <chSemReset+0x2c>
 8009772:	4605      	mov	r5, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8009774:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8009778:	6868      	ldr	r0, [r5, #4]
  tqp->prev             = tp->queue.prev;
 800977a:	6843      	ldr	r3, [r0, #4]
 800977c:	606b      	str	r3, [r5, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 800977e:	601d      	str	r5, [r3, #0]
 8009780:	f7f8 fbc6 	bl	8001f10 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8009784:	3401      	adds	r4, #1
 8009786:	2c01      	cmp	r4, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8009788:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 800978a:	d1f5      	bne.n	8009778 <chSemReset+0x18>
  chSchRescheduleS();
 800978c:	f7fb fac8 	bl	8004d20 <chSchRescheduleS>
 8009790:	2300      	movs	r3, #0
 8009792:	f383 8811 	msr	BASEPRI, r3
}
 8009796:	bd70      	pop	{r4, r5, r6, pc}
	...

080097a0 <rt_test_010_007_execute>:
static void rt_test_010_007_execute(void) {
 80097a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80097a4:	4e3b      	ldr	r6, [pc, #236]	; (8009894 <rt_test_010_007_execute+0xf4>)
  test_set_step(1);
 80097a6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80098c4 <rt_test_010_007_execute+0x124>
  return chThdGetSelfX()->prio;
 80097aa:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80097ac:	4b3a      	ldr	r3, [pc, #232]	; (8009898 <rt_test_010_007_execute+0xf8>)
 80097ae:	6892      	ldr	r2, [r2, #8]
 80097b0:	483a      	ldr	r0, [pc, #232]	; (800989c <rt_test_010_007_execute+0xfc>)
 80097b2:	4d3b      	ldr	r5, [pc, #236]	; (80098a0 <rt_test_010_007_execute+0x100>)
      chSemReset(&sem1, 0);
 80097b4:	4f3b      	ldr	r7, [pc, #236]	; (80098a4 <rt_test_010_007_execute+0x104>)
static void rt_test_010_007_execute(void) {
 80097b6:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80097b8:	2400      	movs	r4, #0
  test_set_step(1);
 80097ba:	2101      	movs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80097bc:	3205      	adds	r2, #5
  test_set_step(1);
 80097be:	f8c8 1000 	str.w	r1, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80097c2:	9400      	str	r4, [sp, #0]
 80097c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80097c8:	f7f9 ff8a 	bl	80036e0 <chThdCreateStatic>
 80097cc:	69b3      	ldr	r3, [r6, #24]
 80097ce:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 80097d0:	689a      	ldr	r2, [r3, #8]
 80097d2:	4835      	ldr	r0, [pc, #212]	; (80098a8 <rt_test_010_007_execute+0x108>)
 80097d4:	4b30      	ldr	r3, [pc, #192]	; (8009898 <rt_test_010_007_execute+0xf8>)
 80097d6:	9400      	str	r4, [sp, #0]
 80097d8:	3204      	adds	r2, #4
 80097da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80097de:	f7f9 ff7f 	bl	80036e0 <chThdCreateStatic>
 80097e2:	69b3      	ldr	r3, [r6, #24]
 80097e4:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 80097e6:	689a      	ldr	r2, [r3, #8]
 80097e8:	4830      	ldr	r0, [pc, #192]	; (80098ac <rt_test_010_007_execute+0x10c>)
 80097ea:	4b2b      	ldr	r3, [pc, #172]	; (8009898 <rt_test_010_007_execute+0xf8>)
 80097ec:	9400      	str	r4, [sp, #0]
 80097ee:	3203      	adds	r2, #3
 80097f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80097f4:	f7f9 ff74 	bl	80036e0 <chThdCreateStatic>
 80097f8:	69b3      	ldr	r3, [r6, #24]
 80097fa:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	482c      	ldr	r0, [pc, #176]	; (80098b0 <rt_test_010_007_execute+0x110>)
 8009800:	4b25      	ldr	r3, [pc, #148]	; (8009898 <rt_test_010_007_execute+0xf8>)
 8009802:	9400      	str	r4, [sp, #0]
 8009804:	3202      	adds	r2, #2
 8009806:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800980a:	f7f9 ff69 	bl	80036e0 <chThdCreateStatic>
 800980e:	69b3      	ldr	r3, [r6, #24]
 8009810:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	4827      	ldr	r0, [pc, #156]	; (80098b4 <rt_test_010_007_execute+0x114>)
 8009816:	4b20      	ldr	r3, [pc, #128]	; (8009898 <rt_test_010_007_execute+0xf8>)
 8009818:	9400      	str	r4, [sp, #0]
 800981a:	3201      	adds	r2, #1
 800981c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009820:	f7f9 ff5e 	bl	80036e0 <chThdCreateStatic>
  test_set_step(2);
 8009824:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8009826:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 8009828:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 800982c:	f7fa fba8 	bl	8003f80 <test_wait_tick>
 8009830:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8009834:	4605      	mov	r5, r0
      chSemReset(&sem1, 0);
 8009836:	2100      	movs	r1, #0
 8009838:	4638      	mov	r0, r7
 800983a:	f7ff ff91 	bl	8009760 <chSemReset>
 800983e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8009840:	f242 720f 	movw	r2, #9999	; 0x270f
 8009844:	1b5b      	subs	r3, r3, r5
 8009846:	4293      	cmp	r3, r2
      n++;
 8009848:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800984c:	d9f3      	bls.n	8009836 <rt_test_010_007_execute+0x96>
  test_set_step(3);
 800984e:	2303      	movs	r3, #3
 8009850:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
 8009854:	f7f7 ffe4 	bl	8001820 <test_terminate_threads>
    chSemReset(&sem1, 0);
 8009858:	2100      	movs	r1, #0
 800985a:	4812      	ldr	r0, [pc, #72]	; (80098a4 <rt_test_010_007_execute+0x104>)
 800985c:	f7ff ff80 	bl	8009760 <chSemReset>
    test_wait_threads();
 8009860:	f7fe fc7e 	bl	8008160 <test_wait_threads>
  test_set_step(4);
 8009864:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8009866:	4814      	ldr	r0, [pc, #80]	; (80098b8 <rt_test_010_007_execute+0x118>)
  test_set_step(4);
 8009868:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 800986c:	f7f8 f898 	bl	80019a0 <test_print>
    test_printn(n);
 8009870:	4620      	mov	r0, r4
 8009872:	f7f8 f825 	bl	80018c0 <test_printn>
    test_printn(n * 6);
 8009876:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 800987a:	4810      	ldr	r0, [pc, #64]	; (80098bc <rt_test_010_007_execute+0x11c>)
 800987c:	f7f8 f890 	bl	80019a0 <test_print>
    test_printn(n * 6);
 8009880:	0060      	lsls	r0, r4, #1
 8009882:	f7f8 f81d 	bl	80018c0 <test_printn>
    test_println(" ctxswc/S");
 8009886:	480e      	ldr	r0, [pc, #56]	; (80098c0 <rt_test_010_007_execute+0x120>)
}
 8009888:	b002      	add	sp, #8
 800988a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 800988e:	f7f8 b867 	b.w	8001960 <test_println>
 8009892:	bf00      	nop
 8009894:	20000da0 	.word	0x20000da0
 8009898:	080046e1 	.word	0x080046e1
 800989c:	20001078 	.word	0x20001078
 80098a0:	200017a4 	.word	0x200017a4
 80098a4:	20001068 	.word	0x20001068
 80098a8:	200011c0 	.word	0x200011c0
 80098ac:	20001308 	.word	0x20001308
 80098b0:	20001450 	.word	0x20001450
 80098b4:	20001598 	.word	0x20001598
 80098b8:	0800c450 	.word	0x0800c450
 80098bc:	0800c410 	.word	0x0800c410
 80098c0:	0800c434 	.word	0x0800c434
 80098c4:	2000178c 	.word	0x2000178c
	...

080098d0 <rt_test_005_006_execute>:
}

static void rt_test_005_006_execute(void) {
 80098d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 80098d4:	4f61      	ldr	r7, [pc, #388]	; (8009a5c <rt_test_005_006_execute+0x18c>)
static void rt_test_005_006_execute(void) {
 80098d6:	b086      	sub	sp, #24
  test_set_step(1);
 80098d8:	2301      	movs	r3, #1
  tqp->next = (thread_t *)tqp;
 80098da:	ac03      	add	r4, sp, #12
  sp->cnt = n;
 80098dc:	2600      	movs	r6, #0
 80098de:	603b      	str	r3, [r7, #0]
  tqp->prev = (thread_t *)tqp;
 80098e0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80098e4:	9605      	str	r6, [sp, #20]
 80098e6:	f04f 0820 	mov.w	r8, #32
 80098ea:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80098ee:	9805      	ldr	r0, [sp, #20]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80098f0:	495b      	ldr	r1, [pc, #364]	; (8009a60 <rt_test_005_006_execute+0x190>)
 80098f2:	42b0      	cmp	r0, r6
 80098f4:	bfcc      	ite	gt
 80098f6:	2000      	movgt	r0, #0
 80098f8:	2001      	movle	r0, #1
 80098fa:	f7f7 ff51 	bl	80017a0 <_test_assert>
 80098fe:	b120      	cbz	r0, 800990a <rt_test_005_006_execute+0x3a>
 8009900:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 8009904:	b006      	add	sp, #24
 8009906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990a:	4605      	mov	r5, r0
 800990c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8009910:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 8009912:	4601      	mov	r1, r0
 8009914:	4620      	mov	r0, r4
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	f7ff ff22 	bl	8009760 <chSemReset>
 800991c:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8009920:	9805      	ldr	r0, [sp, #20]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8009922:	494f      	ldr	r1, [pc, #316]	; (8009a60 <rt_test_005_006_execute+0x190>)
 8009924:	2800      	cmp	r0, #0
 8009926:	bfcc      	ite	gt
 8009928:	2000      	movgt	r0, #0
 800992a:	2001      	movle	r0, #1
 800992c:	f7f7 ff38 	bl	80017a0 <_test_assert>
 8009930:	4606      	mov	r6, r0
 8009932:	b120      	cbz	r0, 800993e <rt_test_005_006_execute+0x6e>
 8009934:	f385 8811 	msr	BASEPRI, r5
}
 8009938:	b006      	add	sp, #24
 800993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993e:	f380 8811 	msr	BASEPRI, r0
  return ch.rlist.current;
 8009942:	4a48      	ldr	r2, [pc, #288]	; (8009a64 <rt_test_005_006_execute+0x194>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8009944:	4b48      	ldr	r3, [pc, #288]	; (8009a68 <rt_test_005_006_execute+0x198>)
  return chThdGetSelfX()->prio;
 8009946:	6992      	ldr	r2, [r2, #24]
 8009948:	4848      	ldr	r0, [pc, #288]	; (8009a6c <rt_test_005_006_execute+0x19c>)
 800994a:	6892      	ldr	r2, [r2, #8]
 800994c:	9400      	str	r4, [sp, #0]
  test_set_step(3);
 800994e:	2503      	movs	r5, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8009950:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(3);
 8009954:	603d      	str	r5, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8009956:	3a01      	subs	r2, #1
 8009958:	f7f9 fec2 	bl	80036e0 <chThdCreateStatic>
 800995c:	4a44      	ldr	r2, [pc, #272]	; (8009a70 <rt_test_005_006_execute+0x1a0>)
  test_set_step(4);
 800995e:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8009960:	6010      	str	r0, [r2, #0]
  return chSemWait(&bsp->sem);
 8009962:	4620      	mov	r0, r4
  test_set_step(4);
 8009964:	603b      	str	r3, [r7, #0]
 8009966:	f7fa fe4b 	bl	8004600 <chSemWait>
 800996a:	4605      	mov	r5, r0
 800996c:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8009970:	9805      	ldr	r0, [sp, #20]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8009972:	493b      	ldr	r1, [pc, #236]	; (8009a60 <rt_test_005_006_execute+0x190>)
 8009974:	2800      	cmp	r0, #0
 8009976:	bfcc      	ite	gt
 8009978:	2000      	movgt	r0, #0
 800997a:	2001      	movle	r0, #1
 800997c:	f7f7 ff10 	bl	80017a0 <_test_assert>
 8009980:	2800      	cmp	r0, #0
 8009982:	d1bd      	bne.n	8009900 <rt_test_005_006_execute+0x30>
 8009984:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8009988:	fab5 f085 	clz	r0, r5
 800998c:	0940      	lsrs	r0, r0, #5
 800998e:	4939      	ldr	r1, [pc, #228]	; (8009a74 <rt_test_005_006_execute+0x1a4>)
 8009990:	f7f7 ff06 	bl	80017a0 <_test_assert>
 8009994:	2800      	cmp	r0, #0
 8009996:	d1b5      	bne.n	8009904 <rt_test_005_006_execute+0x34>
  test_set_step(5);
 8009998:	2305      	movs	r3, #5
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dd4e      	ble.n	8009a44 <rt_test_005_006_execute+0x174>
  chSchRescheduleS();
 80099a6:	f7fb f9bb 	bl	8004d20 <chSchRescheduleS>
 80099aa:	2500      	movs	r5, #0
 80099ac:	f385 8811 	msr	BASEPRI, r5
 80099b0:	f04f 0820 	mov.w	r8, #32
 80099b4:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 80099b8:	9805      	ldr	r0, [sp, #20]
 80099ba:	492f      	ldr	r1, [pc, #188]	; (8009a78 <rt_test_005_006_execute+0x1a8>)
 80099bc:	42a8      	cmp	r0, r5
 80099be:	bfd4      	ite	le
 80099c0:	2000      	movle	r0, #0
 80099c2:	2001      	movgt	r0, #1
 80099c4:	f7f7 feec 	bl	80017a0 <_test_assert>
 80099c8:	4606      	mov	r6, r0
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d1b2      	bne.n	8009934 <rt_test_005_006_execute+0x64>
 80099ce:	f380 8811 	msr	BASEPRI, r0
 80099d2:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80099d6:	9805      	ldr	r0, [sp, #20]
 80099d8:	4928      	ldr	r1, [pc, #160]	; (8009a7c <rt_test_005_006_execute+0x1ac>)
 80099da:	f1a0 0001 	sub.w	r0, r0, #1
 80099de:	fab0 f080 	clz	r0, r0
 80099e2:	0940      	lsrs	r0, r0, #5
 80099e4:	f7f7 fedc 	bl	80017a0 <_test_assert>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d189      	bne.n	8009900 <rt_test_005_006_execute+0x30>
 80099ec:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 80099f0:	2306      	movs	r3, #6
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 80099f8:	9b05      	ldr	r3, [sp, #20]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	dd26      	ble.n	8009a4c <rt_test_005_006_execute+0x17c>
  chSchRescheduleS();
 80099fe:	f7fb f98f 	bl	8004d20 <chSchRescheduleS>
 8009a02:	2600      	movs	r6, #0
 8009a04:	f386 8811 	msr	BASEPRI, r6
 8009a08:	2520      	movs	r5, #32
 8009a0a:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8009a0e:	9805      	ldr	r0, [sp, #20]
 8009a10:	491b      	ldr	r1, [pc, #108]	; (8009a80 <rt_test_005_006_execute+0x1b0>)
 8009a12:	42b0      	cmp	r0, r6
 8009a14:	bfd4      	ite	le
 8009a16:	2000      	movle	r0, #0
 8009a18:	2001      	movgt	r0, #1
 8009a1a:	f7f7 fec1 	bl	80017a0 <_test_assert>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f47f af6d 	bne.w	8009900 <rt_test_005_006_execute+0x30>
 8009a26:	f380 8811 	msr	BASEPRI, r0
 8009a2a:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8009a2e:	9805      	ldr	r0, [sp, #20]
 8009a30:	4912      	ldr	r1, [pc, #72]	; (8009a7c <rt_test_005_006_execute+0x1ac>)
 8009a32:	1e43      	subs	r3, r0, #1
 8009a34:	4258      	negs	r0, r3
 8009a36:	4158      	adcs	r0, r3
 8009a38:	f7f7 feb2 	bl	80017a0 <_test_assert>
 8009a3c:	b150      	cbz	r0, 8009a54 <rt_test_005_006_execute+0x184>
 8009a3e:	f384 8811 	msr	BASEPRI, r4
 8009a42:	e75f      	b.n	8009904 <rt_test_005_006_execute+0x34>
    chSemSignalI(&bsp->sem);
 8009a44:	4620      	mov	r0, r4
 8009a46:	f7f8 fb8b 	bl	8002160 <chSemSignalI>
 8009a4a:	e7ac      	b.n	80099a6 <rt_test_005_006_execute+0xd6>
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f7f8 fb87 	bl	8002160 <chSemSignalI>
 8009a52:	e7d4      	b.n	80099fe <rt_test_005_006_execute+0x12e>
 8009a54:	f380 8811 	msr	BASEPRI, r0
 8009a58:	e754      	b.n	8009904 <rt_test_005_006_execute+0x34>
 8009a5a:	bf00      	nop
 8009a5c:	2000178c 	.word	0x2000178c
 8009a60:	0800c078 	.word	0x0800c078
 8009a64:	20000da0 	.word	0x20000da0
 8009a68:	08005921 	.word	0x08005921
 8009a6c:	20001078 	.word	0x20001078
 8009a70:	200017a4 	.word	0x200017a4
 8009a74:	0800c084 	.word	0x0800c084
 8009a78:	0800c098 	.word	0x0800c098
 8009a7c:	0800c0a4 	.word	0x0800c0a4
 8009a80:	0800c07c 	.word	0x0800c07c
	...

08009a90 <rt_test_005_001_execute>:
static void rt_test_005_001_execute(void) {
 8009a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 8009a94:	4c29      	ldr	r4, [pc, #164]	; (8009b3c <rt_test_005_001_execute+0xac>)
  test_set_step(1);
 8009a96:	4e2a      	ldr	r6, [pc, #168]	; (8009b40 <rt_test_005_001_execute+0xb0>)
 8009a98:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 8009a9a:	4620      	mov	r0, r4
  test_set_step(1);
 8009a9c:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
 8009a9e:	f7fa fdaf 	bl	8004600 <chSemWait>
 8009aa2:	2520      	movs	r5, #32
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 8009aaa:	68a0      	ldr	r0, [r4, #8]
 8009aac:	4925      	ldr	r1, [pc, #148]	; (8009b44 <rt_test_005_001_execute+0xb4>)
 8009aae:	fab0 f080 	clz	r0, r0
 8009ab2:	0940      	lsrs	r0, r0, #5
 8009ab4:	f7f7 fe74 	bl	80017a0 <_test_assert>
 8009ab8:	b120      	cbz	r0, 8009ac4 <rt_test_005_001_execute+0x34>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f383 8811 	msr	BASEPRI, r3
}
 8009ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac4:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8009ac8:	fab7 f087 	clz	r0, r7
 8009acc:	0940      	lsrs	r0, r0, #5
 8009ace:	491e      	ldr	r1, [pc, #120]	; (8009b48 <rt_test_005_001_execute+0xb8>)
 8009ad0:	f7f7 fe66 	bl	80017a0 <_test_assert>
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d1f2      	bne.n	8009ac0 <rt_test_005_001_execute+0x30>
  test_set_step(2);
 8009ada:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 8009ade:	4620      	mov	r0, r4
  test_set_step(2);
 8009ae0:	f8c6 9000 	str.w	r9, [r6]
    chSemSignal(&sem1);
 8009ae4:	f7f9 fddc 	bl	80036a0 <chSemSignal>
 8009ae8:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 8009aec:	68a0      	ldr	r0, [r4, #8]
 8009aee:	4915      	ldr	r1, [pc, #84]	; (8009b44 <rt_test_005_001_execute+0xb4>)
 8009af0:	f1a0 0001 	sub.w	r0, r0, #1
 8009af4:	fab0 f080 	clz	r0, r0
 8009af8:	0940      	lsrs	r0, r0, #5
 8009afa:	f7f7 fe51 	bl	80017a0 <_test_assert>
 8009afe:	4680      	mov	r8, r0
 8009b00:	b110      	cbz	r0, 8009b08 <rt_test_005_001_execute+0x78>
 8009b02:	f387 8811 	msr	BASEPRI, r7
 8009b06:	e7db      	b.n	8009ac0 <rt_test_005_001_execute+0x30>
 8009b08:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8009b0c:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4620      	mov	r0, r4
  test_set_step(3);
 8009b12:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
 8009b14:	f7ff fe24 	bl	8009760 <chSemReset>
 8009b18:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8009b1c:	68a0      	ldr	r0, [r4, #8]
 8009b1e:	4909      	ldr	r1, [pc, #36]	; (8009b44 <rt_test_005_001_execute+0xb4>)
 8009b20:	f1a0 0002 	sub.w	r0, r0, #2
 8009b24:	fab0 f080 	clz	r0, r0
 8009b28:	0940      	lsrs	r0, r0, #5
 8009b2a:	f7f7 fe39 	bl	80017a0 <_test_assert>
 8009b2e:	b910      	cbnz	r0, 8009b36 <rt_test_005_001_execute+0xa6>
 8009b30:	f380 8811 	msr	BASEPRI, r0
 8009b34:	e7c4      	b.n	8009ac0 <rt_test_005_001_execute+0x30>
 8009b36:	f388 8811 	msr	BASEPRI, r8
 8009b3a:	e7c1      	b.n	8009ac0 <rt_test_005_001_execute+0x30>
 8009b3c:	2000105c 	.word	0x2000105c
 8009b40:	2000178c 	.word	0x2000178c
 8009b44:	0800bfe0 	.word	0x0800bfe0
 8009b48:	0800bfb8 	.word	0x0800bfb8
 8009b4c:	00000000 	.word	0x00000000

08009b50 <rt_test_005_001_teardown>:
  chSemReset(&sem1, 0);
 8009b50:	2100      	movs	r1, #0
 8009b52:	4801      	ldr	r0, [pc, #4]	; (8009b58 <rt_test_005_001_teardown+0x8>)
 8009b54:	f7ff be04 	b.w	8009760 <chSemReset>
 8009b58:	2000105c 	.word	0x2000105c
 8009b5c:	00000000 	.word	0x00000000

08009b60 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 8009b60:	b510      	push	{r4, lr}
 8009b62:	2320      	movs	r3, #32
 8009b64:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8009b68:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <chThdSetPriority+0x2c>)
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8009b6e:	6899      	ldr	r1, [r3, #8]
 8009b70:	42a1      	cmp	r1, r4
 8009b72:	d001      	beq.n	8009b78 <chThdSetPriority+0x18>
 8009b74:	4281      	cmp	r1, r0
 8009b76:	d200      	bcs.n	8009b7a <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8009b78:	6098      	str	r0, [r3, #8]
  currp->realprio = newprio;
 8009b7a:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
 8009b7c:	f7fb f8d0 	bl	8004d20 <chSchRescheduleS>
 8009b80:	2300      	movs	r3, #0
 8009b82:	f383 8811 	msr	BASEPRI, r3
}
 8009b86:	4620      	mov	r0, r4
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000da0 	.word	0x20000da0

08009b90 <rt_test_003_004_execute>:
 * - [3.4.3] Raising thread priority above the boosted level.
 * - [3.4.4] Restoring original conditions.
 * .
 */

static void rt_test_003_004_execute(void) {
 8009b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8009b94:	4d2f      	ldr	r5, [pc, #188]	; (8009c54 <rt_test_003_004_execute+0xc4>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8009b96:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c68 <rt_test_003_004_execute+0xd8>
 8009b9a:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8009b9c:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8009b9e:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8009ba0:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8009ba2:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8009ba4:	4638      	mov	r0, r7
  test_set_step(2);
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8009bac:	f7ff ffd8 	bl	8009b60 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8009bb0:	1b00      	subs	r0, r0, r4
 8009bb2:	fab0 f080 	clz	r0, r0
 8009bb6:	4928      	ldr	r1, [pc, #160]	; (8009c58 <rt_test_003_004_execute+0xc8>)
 8009bb8:	0940      	lsrs	r0, r0, #5
 8009bba:	f7f7 fdf1 	bl	80017a0 <_test_assert>
 8009bbe:	b108      	cbz	r0, 8009bc4 <rt_test_003_004_execute+0x34>
    chSysLock();
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
}
 8009bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8009bc4:	69ab      	ldr	r3, [r5, #24]
 8009bc6:	4925      	ldr	r1, [pc, #148]	; (8009c5c <rt_test_003_004_execute+0xcc>)
 8009bc8:	6898      	ldr	r0, [r3, #8]
 8009bca:	1b80      	subs	r0, r0, r6
 8009bcc:	fab0 f080 	clz	r0, r0
 8009bd0:	0940      	lsrs	r0, r0, #5
 8009bd2:	f7f7 fde5 	bl	80017a0 <_test_assert>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d1f2      	bne.n	8009bc0 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8009bda:	69ab      	ldr	r3, [r5, #24]
 8009bdc:	4920      	ldr	r1, [pc, #128]	; (8009c60 <rt_test_003_004_execute+0xd0>)
 8009bde:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009be0:	1bc0      	subs	r0, r0, r7
 8009be2:	fab0 f080 	clz	r0, r0
 8009be6:	0940      	lsrs	r0, r0, #5
 8009be8:	f7f7 fdda 	bl	80017a0 <_test_assert>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d1e7      	bne.n	8009bc0 <rt_test_003_004_execute+0x30>
    p1 = chThdSetPriority(prio + 3);
 8009bf0:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8009bf2:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8009bf4:	4630      	mov	r0, r6
  test_set_step(3);
 8009bf6:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 8009bfa:	f7ff ffb1 	bl	8009b60 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8009bfe:	1a38      	subs	r0, r7, r0
 8009c00:	fab0 f080 	clz	r0, r0
 8009c04:	4914      	ldr	r1, [pc, #80]	; (8009c58 <rt_test_003_004_execute+0xc8>)
 8009c06:	0940      	lsrs	r0, r0, #5
 8009c08:	f7f7 fdca 	bl	80017a0 <_test_assert>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d1d7      	bne.n	8009bc0 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8009c10:	69ab      	ldr	r3, [r5, #24]
 8009c12:	4912      	ldr	r1, [pc, #72]	; (8009c5c <rt_test_003_004_execute+0xcc>)
 8009c14:	6898      	ldr	r0, [r3, #8]
 8009c16:	1b80      	subs	r0, r0, r6
 8009c18:	fab0 f080 	clz	r0, r0
 8009c1c:	0940      	lsrs	r0, r0, #5
 8009c1e:	f7f7 fdbf 	bl	80017a0 <_test_assert>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d1cc      	bne.n	8009bc0 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8009c26:	69ab      	ldr	r3, [r5, #24]
 8009c28:	490e      	ldr	r1, [pc, #56]	; (8009c64 <rt_test_003_004_execute+0xd4>)
 8009c2a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009c2c:	1b80      	subs	r0, r0, r6
 8009c2e:	fab0 f080 	clz	r0, r0
 8009c32:	0940      	lsrs	r0, r0, #5
 8009c34:	f7f7 fdb4 	bl	80017a0 <_test_assert>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d1c1      	bne.n	8009bc0 <rt_test_003_004_execute+0x30>
  test_set_step(4);
 8009c3c:	2304      	movs	r3, #4
 8009c3e:	f8c8 3000 	str.w	r3, [r8]
 8009c42:	2320      	movs	r3, #32
 8009c44:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8009c48:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 8009c4a:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8009c4c:	63dc      	str	r4, [r3, #60]	; 0x3c
 8009c4e:	f380 8811 	msr	BASEPRI, r0
 8009c52:	e7b5      	b.n	8009bc0 <rt_test_003_004_execute+0x30>
 8009c54:	20000da0 	.word	0x20000da0
 8009c58:	0800bf14 	.word	0x0800bf14
 8009c5c:	0800bf38 	.word	0x0800bf38
 8009c60:	0800bf54 	.word	0x0800bf54
 8009c64:	0800bf7c 	.word	0x0800bf7c
 8009c68:	2000178c 	.word	0x2000178c
 8009c6c:	00000000 	.word	0x00000000

08009c70 <rt_test_003_003_execute>:
static void rt_test_003_003_execute(void) {
 8009c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	4e1c      	ldr	r6, [pc, #112]	; (8009ce8 <rt_test_003_003_execute+0x78>)
  test_set_step(1);
 8009c76:	4f1d      	ldr	r7, [pc, #116]	; (8009cec <rt_test_003_003_execute+0x7c>)
  return chThdGetSelfX()->prio;
 8009c78:	69b3      	ldr	r3, [r6, #24]
 8009c7a:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8009c7c:	1c65      	adds	r5, r4, #1
  test_set_step(1);
 8009c7e:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8009c80:	4628      	mov	r0, r5
  test_set_step(1);
 8009c82:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(prio + 1);
 8009c84:	f7ff ff6c 	bl	8009b60 <chThdSetPriority>
 8009c88:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8009c8a:	1b00      	subs	r0, r0, r4
 8009c8c:	fab0 f080 	clz	r0, r0
 8009c90:	0940      	lsrs	r0, r0, #5
 8009c92:	4917      	ldr	r1, [pc, #92]	; (8009cf0 <rt_test_003_003_execute+0x80>)
 8009c94:	f7f7 fd84 	bl	80017a0 <_test_assert>
 8009c98:	b108      	cbz	r0, 8009c9e <rt_test_003_003_execute+0x2e>
}
 8009c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c9e:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8009ca0:	4914      	ldr	r1, [pc, #80]	; (8009cf4 <rt_test_003_003_execute+0x84>)
 8009ca2:	6898      	ldr	r0, [r3, #8]
 8009ca4:	1b40      	subs	r0, r0, r5
 8009ca6:	fab0 f080 	clz	r0, r0
 8009caa:	0940      	lsrs	r0, r0, #5
 8009cac:	f7f7 fd78 	bl	80017a0 <_test_assert>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d1f2      	bne.n	8009c9a <rt_test_003_003_execute+0x2a>
  test_set_step(2);
 8009cb4:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8009cb6:	4640      	mov	r0, r8
  test_set_step(2);
 8009cb8:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
 8009cba:	f7ff ff51 	bl	8009b60 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8009cbe:	1a28      	subs	r0, r5, r0
 8009cc0:	fab0 f080 	clz	r0, r0
 8009cc4:	490a      	ldr	r1, [pc, #40]	; (8009cf0 <rt_test_003_003_execute+0x80>)
 8009cc6:	0940      	lsrs	r0, r0, #5
 8009cc8:	f7f7 fd6a 	bl	80017a0 <_test_assert>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d1e4      	bne.n	8009c9a <rt_test_003_003_execute+0x2a>
 8009cd0:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8009cd2:	4908      	ldr	r1, [pc, #32]	; (8009cf4 <rt_test_003_003_execute+0x84>)
 8009cd4:	6898      	ldr	r0, [r3, #8]
 8009cd6:	1b00      	subs	r0, r0, r4
 8009cd8:	fab0 f080 	clz	r0, r0
 8009cdc:	0940      	lsrs	r0, r0, #5
}
 8009cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8009ce2:	f7f7 bd5d 	b.w	80017a0 <_test_assert>
 8009ce6:	bf00      	nop
 8009ce8:	20000da0 	.word	0x20000da0
 8009cec:	2000178c 	.word	0x2000178c
 8009cf0:	0800bf14 	.word	0x0800bf14
 8009cf4:	0800bf38 	.word	0x0800bf38
	...

08009d00 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8009d00:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d02:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8009d06:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8009d0a:	b11c      	cbz	r4, 8009d14 <chSysRestoreStatusX.part.2+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 8009d12:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 8009d14:	f7fb f804 	bl	8004d20 <chSchRescheduleS>
 8009d18:	f384 8811 	msr	BASEPRI, r4
}
 8009d1c:	bd10      	pop	{r4, pc}
 8009d1e:	bf00      	nop

08009d20 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 8009d20:	b510      	push	{r4, lr}
  test_set_step(1);
 8009d22:	4c31      	ldr	r4, [pc, #196]	; (8009de8 <rt_test_002_002_execute+0xc8>)
 8009d24:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8009d26:	b086      	sub	sp, #24
  test_set_step(1);
 8009d28:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d2a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8009d2e:	b91b      	cbnz	r3, 8009d38 <rt_test_002_002_execute+0x18>
 8009d30:	f7f8 fabe 	bl	80022b0 <chSysGetStatusAndLockX.part.1>
 8009d34:	f7ff ffe4 	bl	8009d00 <chSysRestoreStatusX.part.2>
  test_set_step(2);
 8009d38:	2302      	movs	r3, #2
 8009d3a:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009d3c:	2320      	movs	r3, #32
 8009d3e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d42:	f3ef 8311 	mrs	r3, BASEPRI
 8009d46:	b91b      	cbnz	r3, 8009d50 <rt_test_002_002_execute+0x30>
 8009d48:	f7f8 fab2 	bl	80022b0 <chSysGetStatusAndLockX.part.1>
 8009d4c:	f7ff ffd8 	bl	8009d00 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009d50:	2300      	movs	r3, #0
 8009d52:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8009d56:	2303      	movs	r3, #3
 8009d58:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d5a:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8009d5e:	b913      	cbnz	r3, 8009d66 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009d60:	2320      	movs	r3, #32
 8009d62:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d66:	f3ef 8311 	mrs	r3, BASEPRI
 8009d6a:	b913      	cbnz	r3, 8009d72 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	2300      	movs	r3, #0
 8009d74:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8009d78:	2204      	movs	r2, #4
 8009d7a:	6022      	str	r2, [r4, #0]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d82:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8009d86:	b10a      	cbz	r2, 8009d8c <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009d88:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8009d90:	b113      	cbz	r3, 8009d98 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009d92:	2300      	movs	r3, #0
 8009d94:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8009d98:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	6022      	str	r2, [r4, #0]
 8009da0:	2320      	movs	r3, #32
 8009da2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8009da6:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8009da8:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 8009daa:	b113      	cbz	r3, 8009db2 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 8009dac:	4620      	mov	r0, r4
 8009dae:	f7f8 f9f7 	bl	80021a0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8009db2:	4620      	mov	r0, r4
 8009db4:	2300      	movs	r3, #0
 8009db6:	4a0d      	ldr	r2, [pc, #52]	; (8009dec <rt_test_002_002_execute+0xcc>)
 8009db8:	2101      	movs	r1, #1
 8009dba:	f7f8 fa31 	bl	8002220 <chVTDoSetI>
 8009dbe:	2400      	movs	r4, #0
 8009dc0:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8009dc4:	200a      	movs	r0, #10
 8009dc6:	f7fa f853 	bl	8003e70 <chThdSleep>
 8009dca:	2320      	movs	r3, #32
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	9804      	ldr	r0, [sp, #16]
 8009dd2:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8009dd6:	fab0 f080 	clz	r0, r0
 8009dda:	4905      	ldr	r1, [pc, #20]	; (8009df0 <rt_test_002_002_execute+0xd0>)
 8009ddc:	0940      	lsrs	r0, r0, #5
 8009dde:	f7f7 fcdf 	bl	80017a0 <_test_assert>
}
 8009de2:	b006      	add	sp, #24
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	bf00      	nop
 8009de8:	2000178c 	.word	0x2000178c
 8009dec:	08009e01 	.word	0x08009e01
 8009df0:	0800bea0 	.word	0x0800bea0
	...

08009e00 <vtcb>:
static void vtcb(void *p) {
 8009e00:	b508      	push	{r3, lr}
 8009e02:	2320      	movs	r3, #32
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f382 8811 	msr	BASEPRI, r2
 8009e0e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e12:	f3ef 8311 	mrs	r3, BASEPRI
 8009e16:	b91b      	cbnz	r3, 8009e20 <vtcb+0x20>
 8009e18:	f7f8 fa4a 	bl	80022b0 <chSysGetStatusAndLockX.part.1>
 8009e1c:	f7ff ff70 	bl	8009d00 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009e20:	2300      	movs	r3, #0
 8009e22:	f383 8811 	msr	BASEPRI, r3
}
 8009e26:	bd08      	pop	{r3, pc}
	...

08009e30 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009e30:	4b5f      	ldr	r3, [pc, #380]	; (8009fb0 <__early_init+0x180>)
  gpiop->OTYPER  = config->otyper;
 8009e32:	4860      	ldr	r0, [pc, #384]	; (8009fb4 <__early_init+0x184>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009e34:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8009e36:	4960      	ldr	r1, [pc, #384]	; (8009fb8 <__early_init+0x188>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009e38:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8009e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009e3e:	611a      	str	r2, [r3, #16]
 8009e40:	691a      	ldr	r2, [r3, #16]
  gpiop->PUPDR   = config->pupdr;
 8009e42:	4f5e      	ldr	r7, [pc, #376]	; (8009fbc <__early_init+0x18c>)
  gpiop->MODER   = config->moder;
 8009e44:	4e5e      	ldr	r6, [pc, #376]	; (8009fc0 <__early_init+0x190>)
  gpiop->OTYPER  = config->otyper;
 8009e46:	4d5f      	ldr	r5, [pc, #380]	; (8009fc4 <__early_init+0x194>)
 8009e48:	4c5f      	ldr	r4, [pc, #380]	; (8009fc8 <__early_init+0x198>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009e4a:	f022 021f 	bic.w	r2, r2, #31
 8009e4e:	611a      	str	r2, [r3, #16]
 8009e50:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8009e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e54:	f042 021f 	orr.w	r2, r2, #31
 8009e58:	631a      	str	r2, [r3, #48]	; 0x30
 8009e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e5c:	f042 021f 	orr.w	r2, r2, #31
 8009e60:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8009e62:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8009e66:	2200      	movs	r2, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8009e68:	f8d3 e050 	ldr.w	lr, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8009e6c:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009e6e:	f8c0 c008 	str.w	ip, [r0, #8]
  gpiop->ODR     = config->odr;
 8009e72:	f64f 7cdf 	movw	ip, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 8009e76:	60c7      	str	r7, [r0, #12]
  gpiop->ODR     = config->odr;
 8009e78:	f8c0 c014 	str.w	ip, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8009e7c:	f44f 47ee 	mov.w	r7, #30464	; 0x7700
  gpiop->AFRH    = config->afrh;
 8009e80:	f44f 2c2a 	mov.w	ip, #696320	; 0xaa000
  gpiop->AFRL    = config->afrl;
 8009e84:	6207      	str	r7, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8009e86:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  gpiop->OSPEEDR = config->ospeedr;
 8009e8a:	f04f 37ff 	mov.w	r7, #4294967295
  gpiop->MODER   = config->moder;
 8009e8e:	6006      	str	r6, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8009e90:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8009e94:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->MODER   = config->moder;
 8009e98:	2080      	movs	r0, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 8009e9a:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009e9c:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8009e9e:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8009ea2:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8009ea4:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8009ea6:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009ea8:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8009eaa:	4848      	ldr	r0, [pc, #288]	; (8009fcc <__early_init+0x19c>)
  gpiop->PUPDR   = config->pupdr;
 8009eac:	4948      	ldr	r1, [pc, #288]	; (8009fd0 <__early_init+0x1a0>)
  gpiop->OTYPER  = config->otyper;
 8009eae:	606a      	str	r2, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009eb0:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8009eb2:	60e9      	str	r1, [r5, #12]
  gpiop->OTYPER  = config->otyper;
 8009eb4:	4947      	ldr	r1, [pc, #284]	; (8009fd4 <__early_init+0x1a4>)
  gpiop->ODR     = config->odr;
 8009eb6:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8009eb8:	622a      	str	r2, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8009eba:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009ebc:	602a      	str	r2, [r5, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8009ebe:	f5a5 35cc 	sub.w	r5, r5, #104448	; 0x19800
  gpiop->OTYPER  = config->otyper;
 8009ec2:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009ec4:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8009ec6:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->ODR     = config->odr;
 8009eca:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8009ecc:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8009ece:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009ed0:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8009ed2:	6042      	str	r2, [r0, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8009ed4:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8009ed8:	6087      	str	r7, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8009eda:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
 8009ede:	6146      	str	r6, [r0, #20]
  gpiop->PUPDR   = config->pupdr;
 8009ee0:	f1ac 0c05 	sub.w	ip, ip, #5
  gpiop->AFRL    = config->afrl;
 8009ee4:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8009ee6:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009ee8:	6002      	str	r2, [r0, #0]
  PWR->CR = STM32_VOS;
 8009eea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->OTYPER  = config->otyper;
 8009eee:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009ef0:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8009ef2:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8009ef6:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8009ef8:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8009efa:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009efc:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8009efe:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8009f00:	6028      	str	r0, [r5, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	f042 0201 	orr.w	r2, r2, #1
 8009f08:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	0794      	lsls	r4, r2, #30
 8009f0e:	d5fc      	bpl.n	8009f0a <__early_init+0xda>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8009f10:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8009f12:	4a27      	ldr	r2, [pc, #156]	; (8009fb0 <__early_init+0x180>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8009f14:	f021 0103 	bic.w	r1, r1, #3
 8009f18:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8009f1a:	6893      	ldr	r3, [r2, #8]
 8009f1c:	f013 030c 	ands.w	r3, r3, #12
 8009f20:	d1fb      	bne.n	8009f1a <__early_init+0xea>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8009f22:	6810      	ldr	r0, [r2, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8009f24:	4922      	ldr	r1, [pc, #136]	; (8009fb0 <__early_init+0x180>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8009f26:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8009f2a:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8009f2c:	6093      	str	r3, [r2, #8]
  RCC->CSR |= RCC_CSR_LSION;
 8009f2e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8009f30:	f043 0301 	orr.w	r3, r3, #1
 8009f34:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8009f36:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8009f38:	0798      	lsls	r0, r3, #30
 8009f3a:	d5fc      	bpl.n	8009f36 <__early_init+0x106>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8009f3c:	4b26      	ldr	r3, [pc, #152]	; (8009fd8 <__early_init+0x1a8>)
 8009f3e:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8009f40:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8009f42:	4a26      	ldr	r2, [pc, #152]	; (8009fdc <__early_init+0x1ac>)
  RCC->CR |= RCC_CR_PLLON;
 8009f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f48:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8009f4a:	6853      	ldr	r3, [r2, #4]
 8009f4c:	0459      	lsls	r1, r3, #17
 8009f4e:	d5fc      	bpl.n	8009f4a <__early_init+0x11a>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8009f50:	4a17      	ldr	r2, [pc, #92]	; (8009fb0 <__early_init+0x180>)
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	019b      	lsls	r3, r3, #6
 8009f56:	d5fc      	bpl.n	8009f52 <__early_init+0x122>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8009f58:	4921      	ldr	r1, [pc, #132]	; (8009fe0 <__early_init+0x1b0>)
 8009f5a:	6091      	str	r1, [r2, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8009f5c:	4b21      	ldr	r3, [pc, #132]	; (8009fe4 <__early_init+0x1b4>)
    RCC->DCKCFGR = dckcfgr |
 8009f5e:	2103      	movs	r1, #3
 8009f60:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	4b20      	ldr	r3, [pc, #128]	; (8009fe8 <__early_init+0x1b8>)
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d017      	beq.n	8009f9c <__early_init+0x16c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8009f6c:	4b1f      	ldr	r3, [pc, #124]	; (8009fec <__early_init+0x1bc>)
 8009f6e:	f240 7202 	movw	r2, #1794	; 0x702
 8009f72:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8009f74:	4a0e      	ldr	r2, [pc, #56]	; (8009fb0 <__early_init+0x180>)
 8009f76:	6893      	ldr	r3, [r2, #8]
 8009f78:	f043 0302 	orr.w	r3, r3, #2
 8009f7c:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8009f7e:	6893      	ldr	r3, [r2, #8]
 8009f80:	f003 030c 	and.w	r3, r3, #12
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d1fa      	bne.n	8009f7e <__early_init+0x14e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8009f88:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8009f90:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f96:	6653      	str	r3, [r2, #100]	; 0x64
 8009f98:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8009f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8009f9c:	4a14      	ldr	r2, [pc, #80]	; (8009ff0 <__early_init+0x1c0>)
 8009f9e:	4b15      	ldr	r3, [pc, #84]	; (8009ff4 <__early_init+0x1c4>)
 8009fa0:	6812      	ldr	r2, [r2, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d1e2      	bne.n	8009f6c <__early_init+0x13c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8009fa6:	4b11      	ldr	r3, [pc, #68]	; (8009fec <__early_init+0x1bc>)
 8009fa8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	e7e1      	b.n	8009f74 <__early_init+0x144>
 8009fb0:	40023800 	.word	0x40023800
 8009fb4:	40020000 	.word	0x40020000
 8009fb8:	40020400 	.word	0x40020400
 8009fbc:	64155105 	.word	0x64155105
 8009fc0:	2a8004a0 	.word	0x2a8004a0
 8009fc4:	40020800 	.word	0x40020800
 8009fc8:	40020c00 	.word	0x40020c00
 8009fcc:	40021000 	.word	0x40021000
 8009fd0:	01555555 	.word	0x01555555
 8009fd4:	40021c00 	.word	0x40021c00
 8009fd8:	07015410 	.word	0x07015410
 8009fdc:	40007000 	.word	0x40007000
 8009fe0:	38881000 	.word	0x38881000
 8009fe4:	e0042000 	.word	0xe0042000
 8009fe8:	20006411 	.word	0x20006411
 8009fec:	40023c00 	.word	0x40023c00
 8009ff0:	e000ed00 	.word	0xe000ed00
 8009ff4:	410fc241 	.word	0x410fc241
	...

0800a000 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 800a000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 800a004:	4d61      	ldr	r5, [pc, #388]	; (800a18c <VectorD8+0x18c>)
 800a006:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 800a008:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 800a00c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 800a00e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 800a010:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 800a012:	d477      	bmi.n	800a104 <VectorD8+0x104>
 800a014:	2320      	movs	r3, #32
 800a016:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800a01a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800a01e:	d045      	beq.n	800a0ac <VectorD8+0xac>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800a020:	4f5b      	ldr	r7, [pc, #364]	; (800a190 <VectorD8+0x190>)
  chThdDequeueNextI(tqp, msg);
 800a022:	f107 0908 	add.w	r9, r7, #8
 800a026:	e008      	b.n	800a03a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 800a028:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800a02a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800a02e:	d41e      	bmi.n	800a06e <VectorD8+0x6e>
    sr = u->SR;
 800a030:	6834      	ldr	r4, [r6, #0]
 800a032:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800a034:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800a038:	d038      	beq.n	800a0ac <VectorD8+0xac>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800a03a:	0723      	lsls	r3, r4, #28
 800a03c:	d0f4      	beq.n	800a028 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 800a03e:	f014 0f08 	tst.w	r4, #8
 800a042:	bf0c      	ite	eq
 800a044:	2100      	moveq	r1, #0
 800a046:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800a048:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800a04a:	bf48      	it	mi
 800a04c:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800a050:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 800a052:	bf48      	it	mi
 800a054:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800a058:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800a05a:	bf48      	it	mi
 800a05c:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 800a060:	4638      	mov	r0, r7
 800a062:	f7f8 f83d 	bl	80020e0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800a066:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800a068:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800a06c:	d5e0      	bpl.n	800a030 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800a06e:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800a070:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 800a074:	b3ab      	cbz	r3, 800a0e2 <VectorD8+0xe2>
  if (!iqIsFullI(iqp)) {
 800a076:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d039      	beq.n	800a0f2 <VectorD8+0xf2>
    iqp->q_counter++;
 800a07e:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 800a080:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800a082:	3201      	adds	r2, #1
 800a084:	ea04 0a0a 	and.w	sl, r4, sl
 800a088:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 800a08a:	6229      	str	r1, [r5, #32]
 800a08c:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 800a090:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 800a094:	429a      	cmp	r2, r3
 800a096:	d301      	bcc.n	800a09c <VectorD8+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 800a098:	69ab      	ldr	r3, [r5, #24]
 800a09a:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 800a09c:	4648      	mov	r0, r9
 800a09e:	f7f7 ff4f 	bl	8001f40 <chThdDequeueNextI.constprop.90>
    sr = u->SR;
 800a0a2:	6834      	ldr	r4, [r6, #0]
 800a0a4:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800a0a6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800a0aa:	d1c6      	bne.n	800a03a <VectorD8+0x3a>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800a0b2:	f018 0f80 	tst.w	r8, #128	; 0x80
 800a0b6:	d001      	beq.n	800a0bc <VectorD8+0xbc>
 800a0b8:	0622      	lsls	r2, r4, #24
 800a0ba:	d432      	bmi.n	800a122 <VectorD8+0x122>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800a0bc:	f018 0f40 	tst.w	r8, #64	; 0x40
 800a0c0:	d00b      	beq.n	800a0da <VectorD8+0xda>
 800a0c2:	0663      	lsls	r3, r4, #25
 800a0c4:	d509      	bpl.n	800a0da <VectorD8+0xda>
 800a0c6:	2320      	movs	r3, #32
 800a0c8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800a0cc:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d040      	beq.n	800a156 <VectorD8+0x156>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f383 8811 	msr	BASEPRI, r3
}
 800a0da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800a0de:	f7f7 bcdf 	b.w	8001aa0 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 800a0e2:	2104      	movs	r1, #4
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f7f7 fffb 	bl	80020e0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 800a0ea:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d1c5      	bne.n	800a07e <VectorD8+0x7e>
 800a0f2:	696a      	ldr	r2, [r5, #20]
 800a0f4:	2a00      	cmp	r2, #0
 800a0f6:	d0c2      	beq.n	800a07e <VectorD8+0x7e>
 800a0f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0fc:	4638      	mov	r0, r7
 800a0fe:	f7f7 ffef 	bl	80020e0 <chEvtBroadcastFlagsI>
 800a102:	e795      	b.n	800a030 <VectorD8+0x30>
 800a104:	2320      	movs	r3, #32
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a10e:	1d28      	adds	r0, r5, #4
 800a110:	f7f7 ffe6 	bl	80020e0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800a114:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a118:	6033      	str	r3, [r6, #0]
 800a11a:	2300      	movs	r3, #0
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	e778      	b.n	800a014 <VectorD8+0x14>
 800a122:	2320      	movs	r3, #32
 800a124:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 800a128:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d01f      	beq.n	800a170 <VectorD8+0x170>
    oqp->q_counter++;
 800a130:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 800a132:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 800a134:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800a136:	3201      	adds	r2, #1
 800a138:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800a13a:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800a13c:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 800a13e:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800a140:	d301      	bcc.n	800a146 <VectorD8+0x146>
      oqp->q_rdptr = oqp->q_buffer;
 800a142:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a144:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 800a146:	4813      	ldr	r0, [pc, #76]	; (800a194 <VectorD8+0x194>)
 800a148:	f7f7 fefa 	bl	8001f40 <chThdDequeueNextI.constprop.90>
      u->DR = b;
 800a14c:	6077      	str	r7, [r6, #4]
 800a14e:	2300      	movs	r3, #0
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	e7b2      	b.n	800a0bc <VectorD8+0xbc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800a156:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0bb      	beq.n	800a0d4 <VectorD8+0xd4>
  chEvtBroadcastFlagsI(esp, flags);
 800a15c:	2110      	movs	r1, #16
 800a15e:	480c      	ldr	r0, [pc, #48]	; (800a190 <VectorD8+0x190>)
 800a160:	f7f7 ffbe 	bl	80020e0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800a164:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800a168:	ea08 0303 	and.w	r3, r8, r3
 800a16c:	60f3      	str	r3, [r6, #12]
 800a16e:	e7b1      	b.n	800a0d4 <VectorD8+0xd4>
  if (!oqIsEmptyI(oqp)) {
 800a170:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a172:	2a00      	cmp	r2, #0
 800a174:	d0dc      	beq.n	800a130 <VectorD8+0x130>
 800a176:	2108      	movs	r1, #8
 800a178:	4805      	ldr	r0, [pc, #20]	; (800a190 <VectorD8+0x190>)
 800a17a:	f7f7 ffb1 	bl	80020e0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800a17e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800a182:	ea08 0303 	and.w	r3, r8, r3
 800a186:	60f3      	str	r3, [r6, #12]
 800a188:	e7e1      	b.n	800a14e <VectorD8+0x14e>
 800a18a:	bf00      	nop
 800a18c:	20000d14 	.word	0x20000d14
 800a190:	20000d18 	.word	0x20000d18
 800a194:	20000d44 	.word	0x20000d44
	...

0800a1a0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800a1a4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	079b      	lsls	r3, r3, #30
 800a1ac:	d403      	bmi.n	800a1b6 <VectorB0+0x16>
}
 800a1ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800a1b2:	f7f7 bc75 	b.w	8001aa0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	6139      	str	r1, [r7, #16]
 800a1ba:	2320      	movs	r3, #32
 800a1bc:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800a1c0:	4c1d      	ldr	r4, [pc, #116]	; (800a238 <VectorB0+0x98>)
 800a1c2:	46a1      	mov	r9, r4
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 800a1c4:	4688      	mov	r8, r1
  vtp = ch.vtlist.next;
 800a1c6:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800a1ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 800a1d0:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 800a1d2:	4295      	cmp	r5, r2
 800a1d4:	d31c      	bcc.n	800a210 <VectorB0+0x70>
 800a1d6:	2620      	movs	r6, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800a1d8:	6818      	ldr	r0, [r3, #0]
      fn = vtp->func;
 800a1da:	f8d3 a00c 	ldr.w	sl, [r3, #12]
      ch.vtlist.lasttime += vtp->delta;
 800a1de:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800a1e0:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 800a1e2:	62a1      	str	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 800a1e4:	eba5 0502 	sub.w	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800a1e8:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 800a1ec:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 800a1ee:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 800a1f2:	bf08      	it	eq
 800a1f4:	f8c7 800c 	streq.w	r8, [r7, #12]
 800a1f8:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800a1fc:	6918      	ldr	r0, [r3, #16]
 800a1fe:	47d0      	blx	sl
 800a200:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800a204:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	4295      	cmp	r5, r2
 800a20a:	d3df      	bcc.n	800a1cc <VectorB0+0x2c>
 800a20c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a20e:	e7e3      	b.n	800a1d8 <VectorB0+0x38>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800a210:	69e2      	ldr	r2, [r4, #28]
 800a212:	454a      	cmp	r2, r9
 800a214:	d009      	beq.n	800a22a <VectorB0+0x8a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800a216:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 800a218:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800a21a:	1b4d      	subs	r5, r1, r5
 800a21c:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	2b02      	cmp	r3, #2
 800a222:	bf2c      	ite	cs
 800a224:	18c0      	addcs	r0, r0, r3
 800a226:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800a228:	6378      	str	r0, [r7, #52]	; 0x34
 800a22a:	2300      	movs	r3, #0
 800a22c:	f383 8811 	msr	BASEPRI, r3
}
 800a230:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800a234:	f7f7 bc34 	b.w	8001aa0 <_port_irq_epilogue>
 800a238:	20000da0 	.word	0x20000da0
 800a23c:	00000000 	.word	0x00000000

0800a240 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a240:	4b08      	ldr	r3, [pc, #32]	; (800a264 <Vector158+0x24>)
  if (dma.streams[15].func)
 800a242:	4809      	ldr	r0, [pc, #36]	; (800a268 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a244:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 800a246:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a248:	0d89      	lsrs	r1, r1, #22
 800a24a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800a24e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 800a250:	058c      	lsls	r4, r1, #22
 800a252:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 800a254:	b112      	cbz	r2, 800a25c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 800a256:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800a25a:	4790      	blx	r2
}
 800a25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a260:	f7f7 bc1e 	b.w	8001aa0 <_port_irq_epilogue>
 800a264:	40026400 	.word	0x40026400
 800a268:	20000f5c 	.word	0x20000f5c
 800a26c:	00000000 	.word	0x00000000

0800a270 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a270:	4b08      	ldr	r3, [pc, #32]	; (800a294 <Vector154+0x24>)
  if (dma.streams[14].func)
 800a272:	4809      	ldr	r0, [pc, #36]	; (800a298 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a274:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 800a276:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a278:	0c09      	lsrs	r1, r1, #16
 800a27a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800a27e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 800a280:	040c      	lsls	r4, r1, #16
 800a282:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 800a284:	b10a      	cbz	r2, 800a28a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 800a286:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800a288:	4790      	blx	r2
}
 800a28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a28e:	f7f7 bc07 	b.w	8001aa0 <_port_irq_epilogue>
 800a292:	bf00      	nop
 800a294:	40026400 	.word	0x40026400
 800a298:	20000f5c 	.word	0x20000f5c
 800a29c:	00000000 	.word	0x00000000

0800a2a0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a2a0:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <Vector150+0x24>)
  if (dma.streams[13].func)
 800a2a2:	4809      	ldr	r0, [pc, #36]	; (800a2c8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a2a4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 800a2a6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a2a8:	0989      	lsrs	r1, r1, #6
 800a2aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800a2ae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 800a2b0:	018c      	lsls	r4, r1, #6
 800a2b2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 800a2b4:	b10a      	cbz	r2, 800a2ba <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 800a2b6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800a2b8:	4790      	blx	r2
}
 800a2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a2be:	f7f7 bbef 	b.w	8001aa0 <_port_irq_epilogue>
 800a2c2:	bf00      	nop
 800a2c4:	40026400 	.word	0x40026400
 800a2c8:	20000f5c 	.word	0x20000f5c
 800a2cc:	00000000 	.word	0x00000000

0800a2d0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 800a2d0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a2d2:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <Vector130+0x20>)
  if (dma.streams[12].func)
 800a2d4:	4807      	ldr	r0, [pc, #28]	; (800a2f4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a2d6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 800a2d8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a2da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800a2de:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 800a2e0:	b10a      	cbz	r2, 800a2e6 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 800a2e2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a2e4:	4790      	blx	r2
}
 800a2e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800a2ea:	f7f7 bbd9 	b.w	8001aa0 <_port_irq_epilogue>
 800a2ee:	bf00      	nop
 800a2f0:	40026400 	.word	0x40026400
 800a2f4:	20000f5c 	.word	0x20000f5c
	...

0800a300 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a300:	4b08      	ldr	r3, [pc, #32]	; (800a324 <Vector12C+0x24>)
  if (dma.streams[11].func)
 800a302:	4809      	ldr	r0, [pc, #36]	; (800a328 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a304:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 800a306:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a308:	0d89      	lsrs	r1, r1, #22
 800a30a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800a30e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 800a310:	058c      	lsls	r4, r1, #22
 800a312:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 800a314:	b10a      	cbz	r2, 800a31a <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 800a316:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800a318:	4790      	blx	r2
}
 800a31a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a31e:	f7f7 bbbf 	b.w	8001aa0 <_port_irq_epilogue>
 800a322:	bf00      	nop
 800a324:	40026400 	.word	0x40026400
 800a328:	20000f5c 	.word	0x20000f5c
 800a32c:	00000000 	.word	0x00000000

0800a330 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a330:	4b08      	ldr	r3, [pc, #32]	; (800a354 <Vector128+0x24>)
  if (dma.streams[10].func)
 800a332:	4809      	ldr	r0, [pc, #36]	; (800a358 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a334:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 800a336:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a338:	0c09      	lsrs	r1, r1, #16
 800a33a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800a33e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 800a340:	040c      	lsls	r4, r1, #16
 800a342:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 800a344:	b10a      	cbz	r2, 800a34a <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 800a346:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800a348:	4790      	blx	r2
}
 800a34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a34e:	f7f7 bba7 	b.w	8001aa0 <_port_irq_epilogue>
 800a352:	bf00      	nop
 800a354:	40026400 	.word	0x40026400
 800a358:	20000f5c 	.word	0x20000f5c
 800a35c:	00000000 	.word	0x00000000

0800a360 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a360:	4b08      	ldr	r3, [pc, #32]	; (800a384 <Vector124+0x24>)
  if (dma.streams[9].func)
 800a362:	4809      	ldr	r0, [pc, #36]	; (800a388 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a364:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 800a366:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a368:	0989      	lsrs	r1, r1, #6
 800a36a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800a36e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 800a370:	018c      	lsls	r4, r1, #6
 800a372:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 800a374:	b10a      	cbz	r2, 800a37a <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 800a376:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800a378:	4790      	blx	r2
}
 800a37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a37e:	f7f7 bb8f 	b.w	8001aa0 <_port_irq_epilogue>
 800a382:	bf00      	nop
 800a384:	40026400 	.word	0x40026400
 800a388:	20000f5c 	.word	0x20000f5c
 800a38c:	00000000 	.word	0x00000000

0800a390 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 800a390:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a392:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <Vector120+0x20>)
  if (dma.streams[8].func)
 800a394:	4807      	ldr	r0, [pc, #28]	; (800a3b4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a396:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 800a398:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a39a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800a39e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 800a3a0:	b10a      	cbz	r2, 800a3a6 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 800a3a2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800a3a4:	4790      	blx	r2
}
 800a3a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800a3aa:	f7f7 bb79 	b.w	8001aa0 <_port_irq_epilogue>
 800a3ae:	bf00      	nop
 800a3b0:	40026400 	.word	0x40026400
 800a3b4:	20000f5c 	.word	0x20000f5c
	...

0800a3c0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a3c0:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <VectorFC+0x24>)
  if (dma.streams[7].func)
 800a3c2:	4809      	ldr	r0, [pc, #36]	; (800a3e8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a3c4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 800a3c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a3c8:	0d89      	lsrs	r1, r1, #22
 800a3ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800a3ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 800a3d0:	058c      	lsls	r4, r1, #22
 800a3d2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 800a3d4:	b10a      	cbz	r2, 800a3da <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 800a3d6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a3d8:	4790      	blx	r2
}
 800a3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a3de:	f7f7 bb5f 	b.w	8001aa0 <_port_irq_epilogue>
 800a3e2:	bf00      	nop
 800a3e4:	40026000 	.word	0x40026000
 800a3e8:	20000f5c 	.word	0x20000f5c
 800a3ec:	00000000 	.word	0x00000000

0800a3f0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a3f0:	4b08      	ldr	r3, [pc, #32]	; (800a414 <Vector84+0x24>)
  if (dma.streams[6].func)
 800a3f2:	4809      	ldr	r0, [pc, #36]	; (800a418 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a3f4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 800a3f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a3f8:	0c09      	lsrs	r1, r1, #16
 800a3fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800a3fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 800a400:	040c      	lsls	r4, r1, #16
 800a402:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 800a404:	b10a      	cbz	r2, 800a40a <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 800a406:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a408:	4790      	blx	r2
}
 800a40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a40e:	f7f7 bb47 	b.w	8001aa0 <_port_irq_epilogue>
 800a412:	bf00      	nop
 800a414:	40026000 	.word	0x40026000
 800a418:	20000f5c 	.word	0x20000f5c
 800a41c:	00000000 	.word	0x00000000

0800a420 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a420:	4b08      	ldr	r3, [pc, #32]	; (800a444 <Vector80+0x24>)
  if (dma.streams[5].func)
 800a422:	4809      	ldr	r0, [pc, #36]	; (800a448 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a424:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 800a426:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a428:	0989      	lsrs	r1, r1, #6
 800a42a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800a42e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 800a430:	018c      	lsls	r4, r1, #6
 800a432:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 800a434:	b10a      	cbz	r2, 800a43a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 800a436:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a438:	4790      	blx	r2
}
 800a43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a43e:	f7f7 bb2f 	b.w	8001aa0 <_port_irq_epilogue>
 800a442:	bf00      	nop
 800a444:	40026000 	.word	0x40026000
 800a448:	20000f5c 	.word	0x20000f5c
 800a44c:	00000000 	.word	0x00000000

0800a450 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 800a450:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a452:	4b07      	ldr	r3, [pc, #28]	; (800a470 <Vector7C+0x20>)
  if (dma.streams[4].func)
 800a454:	4807      	ldr	r0, [pc, #28]	; (800a474 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a456:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 800a458:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a45a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800a45e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 800a460:	b10a      	cbz	r2, 800a466 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 800a462:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a464:	4790      	blx	r2
}
 800a466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800a46a:	f7f7 bb19 	b.w	8001aa0 <_port_irq_epilogue>
 800a46e:	bf00      	nop
 800a470:	40026000 	.word	0x40026000
 800a474:	20000f5c 	.word	0x20000f5c
	...

0800a480 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a480:	4b08      	ldr	r3, [pc, #32]	; (800a4a4 <Vector78+0x24>)
  if (dma.streams[3].func)
 800a482:	4809      	ldr	r0, [pc, #36]	; (800a4a8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a484:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 800a486:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a488:	0d89      	lsrs	r1, r1, #22
 800a48a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800a48e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 800a490:	058c      	lsls	r4, r1, #22
 800a492:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 800a494:	b10a      	cbz	r2, 800a49a <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 800a496:	6a00      	ldr	r0, [r0, #32]
 800a498:	4790      	blx	r2
}
 800a49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a49e:	f7f7 baff 	b.w	8001aa0 <_port_irq_epilogue>
 800a4a2:	bf00      	nop
 800a4a4:	40026000 	.word	0x40026000
 800a4a8:	20000f5c 	.word	0x20000f5c
 800a4ac:	00000000 	.word	0x00000000

0800a4b0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a4b0:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <Vector74+0x24>)
  if (dma.streams[2].func)
 800a4b2:	4809      	ldr	r0, [pc, #36]	; (800a4d8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a4b4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 800a4b6:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a4b8:	0c09      	lsrs	r1, r1, #16
 800a4ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800a4be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 800a4c0:	040c      	lsls	r4, r1, #16
 800a4c2:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 800a4c4:	b10a      	cbz	r2, 800a4ca <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 800a4c6:	6980      	ldr	r0, [r0, #24]
 800a4c8:	4790      	blx	r2
}
 800a4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a4ce:	f7f7 bae7 	b.w	8001aa0 <_port_irq_epilogue>
 800a4d2:	bf00      	nop
 800a4d4:	40026000 	.word	0x40026000
 800a4d8:	20000f5c 	.word	0x20000f5c
 800a4dc:	00000000 	.word	0x00000000

0800a4e0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a4e0:	4b08      	ldr	r3, [pc, #32]	; (800a504 <Vector70+0x24>)
  if (dma.streams[1].func)
 800a4e2:	4809      	ldr	r0, [pc, #36]	; (800a508 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a4e4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 800a4e6:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a4e8:	0989      	lsrs	r1, r1, #6
 800a4ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800a4ee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 800a4f0:	018c      	lsls	r4, r1, #6
 800a4f2:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 800a4f4:	b10a      	cbz	r2, 800a4fa <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 800a4f6:	6900      	ldr	r0, [r0, #16]
 800a4f8:	4790      	blx	r2
}
 800a4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a4fe:	f7f7 bacf 	b.w	8001aa0 <_port_irq_epilogue>
 800a502:	bf00      	nop
 800a504:	40026000 	.word	0x40026000
 800a508:	20000f5c 	.word	0x20000f5c
 800a50c:	00000000 	.word	0x00000000

0800a510 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 800a510:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a512:	4b07      	ldr	r3, [pc, #28]	; (800a530 <Vector6C+0x20>)
  if (dma.streams[0].func)
 800a514:	4807      	ldr	r0, [pc, #28]	; (800a534 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a516:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 800a518:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a51a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800a51e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 800a520:	b10a      	cbz	r2, 800a526 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 800a522:	6880      	ldr	r0, [r0, #8]
 800a524:	4790      	blx	r2
}
 800a526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800a52a:	f7f7 bab9 	b.w	8001aa0 <_port_irq_epilogue>
 800a52e:	bf00      	nop
 800a530:	40026000 	.word	0x40026000
 800a534:	20000f5c 	.word	0x20000f5c
	...

0800a540 <Vector88>:
  sr = ADC1->SR;
 800a540:	4a30      	ldr	r2, [pc, #192]	; (800a604 <Vector88+0xc4>)
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 800a542:	b538      	push	{r3, r4, r5, lr}
  sr = ADC1->SR;
 800a544:	6815      	ldr	r5, [r2, #0]
  ADC1->SR = 0;
 800a546:	2100      	movs	r1, #0
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800a548:	06ab      	lsls	r3, r5, #26
  ADC1->SR = 0;
 800a54a:	6011      	str	r1, [r2, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800a54c:	d427      	bmi.n	800a59e <Vector88+0x5e>
 800a54e:	f005 0501 	and.w	r5, r5, #1
  if (sr & ADC_SR_AWD) {
 800a552:	b305      	cbz	r5, 800a596 <Vector88+0x56>
    if (ADCD1.grpp != NULL) {
 800a554:	4c2c      	ldr	r4, [pc, #176]	; (800a608 <Vector88+0xc8>)
 800a556:	6923      	ldr	r3, [r4, #16]
 800a558:	b1eb      	cbz	r3, 800a596 <Vector88+0x56>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 800a55a:	4620      	mov	r0, r4
 800a55c:	f7f7 ffb8 	bl	80024d0 <adc_lld_stop_conversion>
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d045      	beq.n	800a5f4 <Vector88+0xb4>
 800a568:	2205      	movs	r2, #5
 800a56a:	7022      	strb	r2, [r4, #0]
 800a56c:	2102      	movs	r1, #2
 800a56e:	4620      	mov	r0, r4
 800a570:	4798      	blx	r3
 800a572:	7823      	ldrb	r3, [r4, #0]
 800a574:	2b05      	cmp	r3, #5
 800a576:	bf04      	itt	eq
 800a578:	2302      	moveq	r3, #2
 800a57a:	7023      	strbeq	r3, [r4, #0]
 800a57c:	2300      	movs	r3, #0
 800a57e:	6123      	str	r3, [r4, #16]
 800a580:	2320      	movs	r3, #32
 800a582:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800a586:	f04f 31ff 	mov.w	r1, #4294967295
 800a58a:	4820      	ldr	r0, [pc, #128]	; (800a60c <Vector88+0xcc>)
 800a58c:	f7f7 fdf8 	bl	8002180 <chThdResumeI>
 800a590:	2300      	movs	r3, #0
 800a592:	f383 8811 	msr	BASEPRI, r3
}
 800a596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800a59a:	f7f7 ba81 	b.w	8001aa0 <_port_irq_epilogue>
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800a59e:	4c1a      	ldr	r4, [pc, #104]	; (800a608 <Vector88+0xc8>)
 800a5a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	6852      	ldr	r2, [r2, #4]
 800a5a6:	f005 0501 	and.w	r5, r5, #1
 800a5aa:	2a00      	cmp	r2, #0
 800a5ac:	d0d1      	beq.n	800a552 <Vector88+0x12>
    if (ADCD1.grpp != NULL)
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0f0      	beq.n	800a596 <Vector88+0x56>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f7f7 ff8b 	bl	80024d0 <adc_lld_stop_conversion>
 800a5ba:	6923      	ldr	r3, [r4, #16]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	b1eb      	cbz	r3, 800a5fc <Vector88+0xbc>
 800a5c0:	2205      	movs	r2, #5
 800a5c2:	7022      	strb	r2, [r4, #0]
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4798      	blx	r3
 800a5ca:	7823      	ldrb	r3, [r4, #0]
 800a5cc:	2b05      	cmp	r3, #5
 800a5ce:	bf04      	itt	eq
 800a5d0:	2302      	moveq	r3, #2
 800a5d2:	7023      	strbeq	r3, [r4, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	6123      	str	r3, [r4, #16]
 800a5d8:	2320      	movs	r3, #32
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f04f 31ff 	mov.w	r1, #4294967295
 800a5e2:	480a      	ldr	r0, [pc, #40]	; (800a60c <Vector88+0xcc>)
 800a5e4:	f7f7 fdcc 	bl	8002180 <chThdResumeI>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f383 8811 	msr	BASEPRI, r3
  if (sr & ADC_SR_AWD) {
 800a5ee:	2d00      	cmp	r5, #0
 800a5f0:	d1b0      	bne.n	800a554 <Vector88+0x14>
 800a5f2:	e7d0      	b.n	800a596 <Vector88+0x56>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	6123      	str	r3, [r4, #16]
 800a5f8:	7022      	strb	r2, [r4, #0]
 800a5fa:	e7c1      	b.n	800a580 <Vector88+0x40>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	7022      	strb	r2, [r4, #0]
 800a602:	e7e9      	b.n	800a5d8 <Vector88+0x98>
 800a604:	40012000 	.word	0x40012000
 800a608:	20000ce0 	.word	0x20000ce0
 800a60c:	20000cf4 	.word	0x20000cf4

0800a610 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800a610:	b4f0      	push	{r4, r5, r6, r7}
 800a612:	4e14      	ldr	r6, [pc, #80]	; (800a664 <__init_ram_areas+0x54>)
 800a614:	4d14      	ldr	r5, [pc, #80]	; (800a668 <__init_ram_areas+0x58>)
 800a616:	4c15      	ldr	r4, [pc, #84]	; (800a66c <__init_ram_areas+0x5c>)
 800a618:	4b15      	ldr	r3, [pc, #84]	; (800a670 <__init_ram_areas+0x60>)
 800a61a:	4916      	ldr	r1, [pc, #88]	; (800a674 <__init_ram_areas+0x64>)
 800a61c:	f106 0c70 	add.w	ip, r6, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800a620:	2700      	movs	r7, #0
    while (p < rap->clear_area) {
 800a622:	429c      	cmp	r4, r3
 800a624:	d911      	bls.n	800a64a <__init_ram_areas+0x3a>
 800a626:	3904      	subs	r1, #4
 800a628:	461a      	mov	r2, r3
      *p = *tp;
 800a62a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800a62e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 800a632:	4294      	cmp	r4, r2
 800a634:	d8f9      	bhi.n	800a62a <__init_ram_areas+0x1a>
 800a636:	43da      	mvns	r2, r3
 800a638:	4414      	add	r4, r2
 800a63a:	f024 0403 	bic.w	r4, r4, #3
 800a63e:	3404      	adds	r4, #4
 800a640:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 800a642:	429d      	cmp	r5, r3
 800a644:	d903      	bls.n	800a64e <__init_ram_areas+0x3e>
      *p = 0;
 800a646:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 800a64a:	429d      	cmp	r5, r3
 800a64c:	d8fb      	bhi.n	800a646 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800a64e:	4566      	cmp	r6, ip
 800a650:	d005      	beq.n	800a65e <__init_ram_areas+0x4e>
 800a652:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 800a656:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 800a65a:	3610      	adds	r6, #16
 800a65c:	e7e1      	b.n	800a622 <__init_ram_areas+0x12>
#endif
}
 800a65e:	bcf0      	pop	{r4, r5, r6, r7}
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	0800b30c 	.word	0x0800b30c
 800a668:	20001e40 	.word	0x20001e40
 800a66c:	20001e40 	.word	0x20001e40
 800a670:	20001e40 	.word	0x20001e40
 800a674:	0800d784 	.word	0x0800d784
	...

0800a680 <__default_exit>:
void __default_exit(void) {
 800a680:	e7fe      	b.n	800a680 <__default_exit>
 800a682:	bf00      	nop
	...

0800a690 <__late_init>:
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
	...

0800a6a0 <__core_init>:
}
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop

0800a6a4 <memcmp>:
 800a6a4:	2a03      	cmp	r2, #3
 800a6a6:	b470      	push	{r4, r5, r6}
 800a6a8:	d914      	bls.n	800a6d4 <memcmp+0x30>
 800a6aa:	ea40 0501 	orr.w	r5, r0, r1
 800a6ae:	07ad      	lsls	r5, r5, #30
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	d122      	bne.n	800a6fc <memcmp+0x58>
 800a6b6:	681d      	ldr	r5, [r3, #0]
 800a6b8:	6826      	ldr	r6, [r4, #0]
 800a6ba:	42ae      	cmp	r6, r5
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f103 0304 	add.w	r3, r3, #4
 800a6c4:	f104 0404 	add.w	r4, r4, #4
 800a6c8:	d118      	bne.n	800a6fc <memcmp+0x58>
 800a6ca:	3a04      	subs	r2, #4
 800a6cc:	2a03      	cmp	r2, #3
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	d8f0      	bhi.n	800a6b6 <memcmp+0x12>
 800a6d4:	1e54      	subs	r4, r2, #1
 800a6d6:	b172      	cbz	r2, 800a6f6 <memcmp+0x52>
 800a6d8:	7802      	ldrb	r2, [r0, #0]
 800a6da:	780b      	ldrb	r3, [r1, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	bf08      	it	eq
 800a6e0:	1864      	addeq	r4, r4, r1
 800a6e2:	d006      	beq.n	800a6f2 <memcmp+0x4e>
 800a6e4:	e00c      	b.n	800a700 <memcmp+0x5c>
 800a6e6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a6ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d106      	bne.n	800a700 <memcmp+0x5c>
 800a6f2:	42a1      	cmp	r1, r4
 800a6f4:	d1f7      	bne.n	800a6e6 <memcmp+0x42>
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	bc70      	pop	{r4, r5, r6}
 800a6fa:	4770      	bx	lr
 800a6fc:	1e54      	subs	r4, r2, #1
 800a6fe:	e7eb      	b.n	800a6d8 <memcmp+0x34>
 800a700:	1ad0      	subs	r0, r2, r3
 800a702:	bc70      	pop	{r4, r5, r6}
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop

0800a708 <memset>:
 800a708:	b4f0      	push	{r4, r5, r6, r7}
 800a70a:	0786      	lsls	r6, r0, #30
 800a70c:	d043      	beq.n	800a796 <memset+0x8e>
 800a70e:	1e54      	subs	r4, r2, #1
 800a710:	2a00      	cmp	r2, #0
 800a712:	d03e      	beq.n	800a792 <memset+0x8a>
 800a714:	b2ca      	uxtb	r2, r1
 800a716:	4603      	mov	r3, r0
 800a718:	e002      	b.n	800a720 <memset+0x18>
 800a71a:	f114 34ff 	adds.w	r4, r4, #4294967295
 800a71e:	d338      	bcc.n	800a792 <memset+0x8a>
 800a720:	f803 2b01 	strb.w	r2, [r3], #1
 800a724:	079d      	lsls	r5, r3, #30
 800a726:	d1f8      	bne.n	800a71a <memset+0x12>
 800a728:	2c03      	cmp	r4, #3
 800a72a:	d92b      	bls.n	800a784 <memset+0x7c>
 800a72c:	b2cd      	uxtb	r5, r1
 800a72e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800a732:	2c0f      	cmp	r4, #15
 800a734:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800a738:	d916      	bls.n	800a768 <memset+0x60>
 800a73a:	f1a4 0710 	sub.w	r7, r4, #16
 800a73e:	093f      	lsrs	r7, r7, #4
 800a740:	f103 0620 	add.w	r6, r3, #32
 800a744:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800a748:	f103 0210 	add.w	r2, r3, #16
 800a74c:	e942 5504 	strd	r5, r5, [r2, #-16]
 800a750:	e942 5502 	strd	r5, r5, [r2, #-8]
 800a754:	3210      	adds	r2, #16
 800a756:	42b2      	cmp	r2, r6
 800a758:	d1f8      	bne.n	800a74c <memset+0x44>
 800a75a:	f004 040f 	and.w	r4, r4, #15
 800a75e:	3701      	adds	r7, #1
 800a760:	2c03      	cmp	r4, #3
 800a762:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800a766:	d90d      	bls.n	800a784 <memset+0x7c>
 800a768:	461e      	mov	r6, r3
 800a76a:	4622      	mov	r2, r4
 800a76c:	3a04      	subs	r2, #4
 800a76e:	2a03      	cmp	r2, #3
 800a770:	f846 5b04 	str.w	r5, [r6], #4
 800a774:	d8fa      	bhi.n	800a76c <memset+0x64>
 800a776:	1f22      	subs	r2, r4, #4
 800a778:	f022 0203 	bic.w	r2, r2, #3
 800a77c:	3204      	adds	r2, #4
 800a77e:	4413      	add	r3, r2
 800a780:	f004 0403 	and.w	r4, r4, #3
 800a784:	b12c      	cbz	r4, 800a792 <memset+0x8a>
 800a786:	b2c9      	uxtb	r1, r1
 800a788:	441c      	add	r4, r3
 800a78a:	f803 1b01 	strb.w	r1, [r3], #1
 800a78e:	429c      	cmp	r4, r3
 800a790:	d1fb      	bne.n	800a78a <memset+0x82>
 800a792:	bcf0      	pop	{r4, r5, r6, r7}
 800a794:	4770      	bx	lr
 800a796:	4614      	mov	r4, r2
 800a798:	4603      	mov	r3, r0
 800a79a:	e7c5      	b.n	800a728 <memset+0x20>

0800a79c <strchr>:
 800a79c:	b2c9      	uxtb	r1, r1
 800a79e:	f000 0303 	and.w	r3, r0, #3
 800a7a2:	2900      	cmp	r1, #0
 800a7a4:	d043      	beq.n	800a82e <strchr+0x92>
 800a7a6:	b17b      	cbz	r3, 800a7c8 <strchr+0x2c>
 800a7a8:	7803      	ldrb	r3, [r0, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d067      	beq.n	800a87e <strchr+0xe2>
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	d03c      	beq.n	800a82c <strchr+0x90>
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	e005      	b.n	800a7c2 <strchr+0x26>
 800a7b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	d05d      	beq.n	800a87a <strchr+0xde>
 800a7be:	428a      	cmp	r2, r1
 800a7c0:	d034      	beq.n	800a82c <strchr+0x90>
 800a7c2:	079a      	lsls	r2, r3, #30
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	d1f6      	bne.n	800a7b6 <strchr+0x1a>
 800a7c8:	b470      	push	{r4, r5, r6}
 800a7ca:	6804      	ldr	r4, [r0, #0]
 800a7cc:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800a7d0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800a7d4:	ea86 0504 	eor.w	r5, r6, r4
 800a7d8:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 800a7dc:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800a7e0:	ea23 0305 	bic.w	r3, r3, r5
 800a7e4:	ea22 0204 	bic.w	r2, r2, r4
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800a7ee:	d10f      	bne.n	800a810 <strchr+0x74>
 800a7f0:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800a7f4:	ea84 0506 	eor.w	r5, r4, r6
 800a7f8:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 800a7fc:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800a800:	ea22 0205 	bic.w	r2, r2, r5
 800a804:	ea23 0304 	bic.w	r3, r3, r4
 800a808:	4313      	orrs	r3, r2
 800a80a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800a80e:	d0ef      	beq.n	800a7f0 <strchr+0x54>
 800a810:	7803      	ldrb	r3, [r0, #0]
 800a812:	b143      	cbz	r3, 800a826 <strchr+0x8a>
 800a814:	4299      	cmp	r1, r3
 800a816:	d102      	bne.n	800a81e <strchr+0x82>
 800a818:	e006      	b.n	800a828 <strchr+0x8c>
 800a81a:	428b      	cmp	r3, r1
 800a81c:	d004      	beq.n	800a828 <strchr+0x8c>
 800a81e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f9      	bne.n	800a81a <strchr+0x7e>
 800a826:	4618      	mov	r0, r3
 800a828:	bc70      	pop	{r4, r5, r6}
 800a82a:	4770      	bx	lr
 800a82c:	4770      	bx	lr
 800a82e:	b15b      	cbz	r3, 800a848 <strchr+0xac>
 800a830:	7803      	ldrb	r3, [r0, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0fa      	beq.n	800a82c <strchr+0x90>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	e003      	b.n	800a842 <strchr+0xa6>
 800a83a:	7802      	ldrb	r2, [r0, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	2a00      	cmp	r2, #0
 800a840:	d0f4      	beq.n	800a82c <strchr+0x90>
 800a842:	0799      	lsls	r1, r3, #30
 800a844:	4618      	mov	r0, r3
 800a846:	d1f8      	bne.n	800a83a <strchr+0x9e>
 800a848:	6802      	ldr	r2, [r0, #0]
 800a84a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800a84e:	ea23 0302 	bic.w	r3, r3, r2
 800a852:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800a856:	d108      	bne.n	800a86a <strchr+0xce>
 800a858:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800a85c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800a860:	ea23 0302 	bic.w	r3, r3, r2
 800a864:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800a868:	d0f6      	beq.n	800a858 <strchr+0xbc>
 800a86a:	7803      	ldrb	r3, [r0, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d0dd      	beq.n	800a82c <strchr+0x90>
 800a870:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1fb      	bne.n	800a870 <strchr+0xd4>
 800a878:	4770      	bx	lr
 800a87a:	4610      	mov	r0, r2
 800a87c:	4770      	bx	lr
 800a87e:	4618      	mov	r0, r3
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop

0800a884 <strncmp>:
 800a884:	2a00      	cmp	r2, #0
 800a886:	d041      	beq.n	800a90c <strncmp+0x88>
 800a888:	ea40 0301 	orr.w	r3, r0, r1
 800a88c:	f013 0303 	ands.w	r3, r3, #3
 800a890:	b4f0      	push	{r4, r5, r6, r7}
 800a892:	d125      	bne.n	800a8e0 <strncmp+0x5c>
 800a894:	2a03      	cmp	r2, #3
 800a896:	d923      	bls.n	800a8e0 <strncmp+0x5c>
 800a898:	6804      	ldr	r4, [r0, #0]
 800a89a:	680d      	ldr	r5, [r1, #0]
 800a89c:	42ac      	cmp	r4, r5
 800a89e:	d11f      	bne.n	800a8e0 <strncmp+0x5c>
 800a8a0:	3a04      	subs	r2, #4
 800a8a2:	d035      	beq.n	800a910 <strncmp+0x8c>
 800a8a4:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 800a8a8:	ea25 0404 	bic.w	r4, r5, r4
 800a8ac:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800a8b0:	d131      	bne.n	800a916 <strncmp+0x92>
 800a8b2:	1d07      	adds	r7, r0, #4
 800a8b4:	1d0d      	adds	r5, r1, #4
 800a8b6:	e00d      	b.n	800a8d4 <strncmp+0x50>
 800a8b8:	f857 3b04 	ldr.w	r3, [r7], #4
 800a8bc:	680e      	ldr	r6, [r1, #0]
 800a8be:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 800a8c2:	42b3      	cmp	r3, r6
 800a8c4:	ea24 0403 	bic.w	r4, r4, r3
 800a8c8:	d10a      	bne.n	800a8e0 <strncmp+0x5c>
 800a8ca:	3a04      	subs	r2, #4
 800a8cc:	d020      	beq.n	800a910 <strncmp+0x8c>
 800a8ce:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800a8d2:	d11d      	bne.n	800a910 <strncmp+0x8c>
 800a8d4:	2a03      	cmp	r2, #3
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f105 0504 	add.w	r5, r5, #4
 800a8de:	d8eb      	bhi.n	800a8b8 <strncmp+0x34>
 800a8e0:	7803      	ldrb	r3, [r0, #0]
 800a8e2:	780c      	ldrb	r4, [r1, #0]
 800a8e4:	429c      	cmp	r4, r3
 800a8e6:	f102 32ff 	add.w	r2, r2, #4294967295
 800a8ea:	d10c      	bne.n	800a906 <strncmp+0x82>
 800a8ec:	b182      	cbz	r2, 800a910 <strncmp+0x8c>
 800a8ee:	b914      	cbnz	r4, 800a8f6 <strncmp+0x72>
 800a8f0:	e00e      	b.n	800a910 <strncmp+0x8c>
 800a8f2:	b16a      	cbz	r2, 800a910 <strncmp+0x8c>
 800a8f4:	b17b      	cbz	r3, 800a916 <strncmp+0x92>
 800a8f6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a8fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a8fe:	42a3      	cmp	r3, r4
 800a900:	f102 32ff 	add.w	r2, r2, #4294967295
 800a904:	d0f5      	beq.n	800a8f2 <strncmp+0x6e>
 800a906:	1b18      	subs	r0, r3, r4
 800a908:	bcf0      	pop	{r4, r5, r6, r7}
 800a90a:	4770      	bx	lr
 800a90c:	4610      	mov	r0, r2
 800a90e:	4770      	bx	lr
 800a910:	2000      	movs	r0, #0
 800a912:	bcf0      	pop	{r4, r5, r6, r7}
 800a914:	4770      	bx	lr
 800a916:	4618      	mov	r0, r3
 800a918:	e7f6      	b.n	800a908 <strncmp+0x84>
 800a91a:	bf00      	nop

0800a91c <strncpy>:
 800a91c:	ea40 0301 	orr.w	r3, r0, r1
 800a920:	079b      	lsls	r3, r3, #30
 800a922:	b470      	push	{r4, r5, r6}
 800a924:	d12a      	bne.n	800a97c <strncpy+0x60>
 800a926:	2a03      	cmp	r2, #3
 800a928:	d928      	bls.n	800a97c <strncpy+0x60>
 800a92a:	460c      	mov	r4, r1
 800a92c:	4603      	mov	r3, r0
 800a92e:	4621      	mov	r1, r4
 800a930:	f854 6b04 	ldr.w	r6, [r4], #4
 800a934:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800a938:	ea25 0506 	bic.w	r5, r5, r6
 800a93c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800a940:	d106      	bne.n	800a950 <strncpy+0x34>
 800a942:	3a04      	subs	r2, #4
 800a944:	2a03      	cmp	r2, #3
 800a946:	f843 6b04 	str.w	r6, [r3], #4
 800a94a:	4621      	mov	r1, r4
 800a94c:	d8ef      	bhi.n	800a92e <strncpy+0x12>
 800a94e:	b19a      	cbz	r2, 800a978 <strncpy+0x5c>
 800a950:	780c      	ldrb	r4, [r1, #0]
 800a952:	701c      	strb	r4, [r3, #0]
 800a954:	3a01      	subs	r2, #1
 800a956:	3301      	adds	r3, #1
 800a958:	b13c      	cbz	r4, 800a96a <strncpy+0x4e>
 800a95a:	b16a      	cbz	r2, 800a978 <strncpy+0x5c>
 800a95c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a960:	f803 4b01 	strb.w	r4, [r3], #1
 800a964:	3a01      	subs	r2, #1
 800a966:	2c00      	cmp	r4, #0
 800a968:	d1f7      	bne.n	800a95a <strncpy+0x3e>
 800a96a:	b12a      	cbz	r2, 800a978 <strncpy+0x5c>
 800a96c:	441a      	add	r2, r3
 800a96e:	2100      	movs	r1, #0
 800a970:	f803 1b01 	strb.w	r1, [r3], #1
 800a974:	4293      	cmp	r3, r2
 800a976:	d1fb      	bne.n	800a970 <strncpy+0x54>
 800a978:	bc70      	pop	{r4, r5, r6}
 800a97a:	4770      	bx	lr
 800a97c:	4603      	mov	r3, r0
 800a97e:	e7e6      	b.n	800a94e <strncpy+0x32>

0800a980 <strpbrk>:
 800a980:	b430      	push	{r4, r5}
 800a982:	7804      	ldrb	r4, [r0, #0]
 800a984:	b1dc      	cbz	r4, 800a9be <strpbrk+0x3e>
 800a986:	780d      	ldrb	r5, [r1, #0]
 800a988:	b19d      	cbz	r5, 800a9b2 <strpbrk+0x32>
 800a98a:	42ac      	cmp	r4, r5
 800a98c:	d00f      	beq.n	800a9ae <strpbrk+0x2e>
 800a98e:	460a      	mov	r2, r1
 800a990:	e001      	b.n	800a996 <strpbrk+0x16>
 800a992:	429c      	cmp	r4, r3
 800a994:	d00b      	beq.n	800a9ae <strpbrk+0x2e>
 800a996:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1f9      	bne.n	800a992 <strpbrk+0x12>
 800a99e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800a9a2:	2c00      	cmp	r4, #0
 800a9a4:	d1f0      	bne.n	800a988 <strpbrk+0x8>
 800a9a6:	7813      	ldrb	r3, [r2, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bf08      	it	eq
 800a9ac:	2000      	moveq	r0, #0
 800a9ae:	bc30      	pop	{r4, r5}
 800a9b0:	4770      	bx	lr
 800a9b2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800a9b6:	460a      	mov	r2, r1
 800a9b8:	2c00      	cmp	r4, #0
 800a9ba:	d1e5      	bne.n	800a988 <strpbrk+0x8>
 800a9bc:	e7f3      	b.n	800a9a6 <strpbrk+0x26>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	e7f5      	b.n	800a9ae <strpbrk+0x2e>
 800a9c2:	bf00      	nop

0800a9c4 <strspn>:
 800a9c4:	b470      	push	{r4, r5, r6}
 800a9c6:	7804      	ldrb	r4, [r0, #0]
 800a9c8:	b1a4      	cbz	r4, 800a9f4 <strspn+0x30>
 800a9ca:	780d      	ldrb	r5, [r1, #0]
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	b14d      	cbz	r5, 800a9e4 <strspn+0x20>
 800a9d0:	42a5      	cmp	r5, r4
 800a9d2:	d00a      	beq.n	800a9ea <strspn+0x26>
 800a9d4:	460a      	mov	r2, r1
 800a9d6:	e001      	b.n	800a9dc <strspn+0x18>
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d006      	beq.n	800a9ea <strspn+0x26>
 800a9dc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1f9      	bne.n	800a9d8 <strspn+0x14>
 800a9e4:	1b80      	subs	r0, r0, r6
 800a9e6:	bc70      	pop	{r4, r5, r6}
 800a9e8:	4770      	bx	lr
 800a9ea:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800a9ee:	2c00      	cmp	r4, #0
 800a9f0:	d1ed      	bne.n	800a9ce <strspn+0xa>
 800a9f2:	e7f7      	b.n	800a9e4 <strspn+0x20>
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	e7f6      	b.n	800a9e6 <strspn+0x22>
